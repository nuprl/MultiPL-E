language: cpp
name: HumanEval_70_strange_sort_list
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) return\
    \ lst;\n    std::vector<long> res;\n    std::sort(lst.begin(), lst.end());\n \
    \   int i = 0, j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n\
    \        if (i != j) res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while(lst.size()\
    \ > 0) {\n        if(i % 2 == 0) {\n            result.push_back(lst[0]);\n  \
    \          lst.erase(lst.begin());\n        } else {\n            result.push_back(lst[lst.size()\
    \ - 1]);\n            lst.erase(lst.end() - 1);\n        }\n        i++;\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) {\n        return res;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        res.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n   \
    \         res.push_back(lst[j]);\n            j--;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) {\n        return res;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        res.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n   \
    \         res.push_back(lst[j]);\n            j--;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) {\n        return res;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        res.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n   \
    \         res.push_back(lst[j]);\n            j--;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if(lst.size() == 0) return res;\n    std::sort(lst.begin(), lst.end());\n  \
    \  int i = 0, j = lst.size() - 1;\n    while(i <= j) {\n        res.push_back(lst[i]);\n\
    \        if(i != j) res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if(lst.size() == 0)\n        return res;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0, j = lst.size() - 1;\n    while(i <= j) {\n        res.push_back(lst[i]);\n\
    \        if(i != j)\n            res.push_back(lst[j]);\n        i++;\n      \
    \  j--;\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if(lst.size() == 0)\n        return result;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    int j = lst.size() - 1;\n    while(i <= j) {\n        result.push_back(lst[i]);\n\
    \        i++;\n        if(i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) return res;\n    std::sort(lst.begin(), lst.end());\n \
    \   int i = 0, j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n\
    \        if (i != j) res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::sort(lst.begin(), lst.end());\n    std::vector<long>\
    \ res;\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j) {\n  \
    \      res.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n         \
    \   res.push_back(lst[j]);\n            j--;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::sort(lst.begin(), lst.end());\n    std::vector<long>\
    \ res;\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j) {\n  \
    \      res.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n         \
    \   res.push_back(lst[j]);\n            j--;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) {\n        return res;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        res.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n   \
    \         res.push_back(lst[j]);\n            j--;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if(lst.size() == 0) return res;\n    std::sort(lst.begin(), lst.end());\n  \
    \  int i = 0, j = lst.size() - 1;\n    while(i <= j) {\n        res.push_back(lst[i]);\n\
    \        if(i != j) res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::sort(lst.begin(), lst.end());\n    std::vector<long>\
    \ result;\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i < j) {\n\
    \        result.push_back(lst[i]);\n        result.push_back(lst[j]);\n      \
    \  i++;\n        j--;\n    }\n    if (i == j) {\n        result.push_back(lst[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> res;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        res.push_back(lst[i]);\n        if (i != j) {\n            res.push_back(lst[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if(lst.size() == 0) return res;\n    std::sort(lst.begin(), lst.end());\n  \
    \  int i = 0, j = lst.size() - 1;\n    while(i <= j) {\n        res.push_back(lst[i]);\n\
    \        if(i != j) res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) return res;\n    std::sort(lst.begin(), lst.end());\n \
    \   int i = 0, j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n\
    \        if (i != j) res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) return\
    \ lst;\n    std::vector<long> res;\n    std::sort(lst.begin(), lst.end());\n \
    \   int i = 0, j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n\
    \        if (i != j) res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if(lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    int j = lst.size() - 1;\n    while(i <= j) {\n        result.push_back(lst[i]);\n\
    \        if(i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::vector<long> res;\n  if (lst.size()\
    \ == 0) {\n    return res;\n  }\n  std::sort(lst.begin(), lst.end());\n  int i\
    \ = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n    res.push_back(lst[i]);\n\
    \    if (i != j) {\n      res.push_back(lst[j]);\n    }\n    i++;\n    j--;\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if(lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    int j = lst.size() - 1;\n    while(i <= j) {\n        result.push_back(lst[i]);\n\
    \        if(i != j) result.push_back(lst[j]);\n        i++;\n        j--;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::sort(lst.begin(), lst.end());\n    std::vector<long>\
    \ res;\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j) {\n  \
    \      res.push_back(lst[i]);\n        if (i != j) {\n            res.push_back(lst[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) return res;\n    std::sort(lst.begin(), lst.end());\n \
    \   int i = 0, j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n\
    \        if (i != j) res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if(lst.size() == 0)\n        return result;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    int j = lst.size() - 1;\n    while(i < j) {\n        result.push_back(lst[i]);\n\
    \        result.push_back(lst[j]);\n        i++;\n        j--;\n    }\n    if(i\
    \ == j)\n        result.push_back(lst[i]);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while (lst.size()\
    \ > 0) {\n        result.push_back(lst[i]);\n        lst.erase(lst.begin() + i);\n\
    \        if (lst.size() > 0) {\n            result.push_back(lst[lst.size() -\
    \ 1]);\n            lst.erase(lst.begin() + lst.size() - 1);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if(lst.size() == 0)\n        return res;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0, j = lst.size() - 1;\n    while(i <= j) {\n        res.push_back(lst[i]);\n\
    \        if(i != j)\n            res.push_back(lst[j]);\n        i++;\n      \
    \  j--;\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if(lst.size() == 0) return res;\n    std::sort(lst.begin(), lst.end());\n  \
    \  int i = 0, j = lst.size() - 1;\n    while(i <= j) {\n        res.push_back(lst[i]);\n\
    \        if(i != j) res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::vector<long> res;\n  if (lst.size()\
    \ == 0) {\n    return res;\n  }\n  std::sort(lst.begin(), lst.end());\n  int i\
    \ = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n    res.push_back(lst[i]);\n\
    \    i++;\n    if (i <= j) {\n      res.push_back(lst[j]);\n      j--;\n    }\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) return\
    \ lst;\n    std::vector<long> res;\n    std::sort(lst.begin(), lst.end());\n \
    \   int i = 0, j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i++]);\n\
    \        if (i <= j) res.push_back(lst[j--]);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while (lst.size()\
    \ > 0) {\n        if (i % 2 == 0) {\n            result.push_back(lst[0]);\n \
    \           lst.erase(lst.begin());\n        } else {\n            result.push_back(lst[lst.size()\
    \ - 1]);\n            lst.erase(lst.end() - 1);\n        }\n        i++;\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::vector<long> result;\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i < j) {\n  \
    \  result.push_back(lst[i]);\n    result.push_back(lst[j]);\n    i++;\n    j--;\n\
    \  }\n  if (i == j) {\n    result.push_back(lst[i]);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) {\n        return res;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        res.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n   \
    \         res.push_back(lst[j]);\n            j--;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) {\n        return res;\n    }\n    sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n\
    \        i++;\n        if (i <= j) {\n            res.push_back(lst[j]);\n   \
    \         j--;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::vector<long> result;\n  if\
    \ (lst.size() == 0) {\n    return result;\n  }\n  std::sort(lst.begin(), lst.end());\n\
    \  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n\
    \    i++;\n    if (i <= j) {\n      result.push_back(lst[j]);\n      j--;\n  \
    \  }\n  }\n  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while (lst.size()\
    \ > 0) {\n        if (i % 2 == 0) {\n            result.push_back(lst[0]);\n \
    \           lst.erase(lst.begin());\n        } else {\n            result.push_back(lst[lst.size()\
    \ - 1]);\n            lst.erase(lst.end() - 1);\n        }\n        i++;\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int n = lst.size();\n    int i = 0,\
    \ j = n - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if\
    \ (i != j)\n            res.push_back(lst[j]);\n        i++;\n        j--;\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) return\
    \ lst;\n    std::sort(lst.begin(), lst.end());\n    std::vector<long> res;\n \
    \   int i = 0, j = lst.size() - 1;\n    while (i < j) {\n        res.push_back(lst[i++]);\n\
    \        res.push_back(lst[j--]);\n    }\n    if (i == j) res.push_back(lst[i]);\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i < j)\
    \ {\n        result.push_back(lst[i]);\n        result.push_back(lst[j]);\n  \
    \      i++;\n        j--;\n    }\n    if (i == j) {\n        result.push_back(lst[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while (i < lst.size())\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i < lst.size())\
    \ {\n            result.push_back(lst[lst.size() - i]);\n            i++;\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpzkbs7den: /tmp/tmpzkbs7den.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) {\n        return res;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        res.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n   \
    \         res.push_back(lst[j]);\n            j--;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::vector<long> result;\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n \
    \   result.push_back(lst[i]);\n    if (i != j) {\n      result.push_back(lst[j]);\n\
    \    }\n    i++;\n    j--;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) return res;\n    std::sort(lst.begin(), lst.end());\n \
    \   int i = 0, j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n\
    \        if (i != j) res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while(lst.size()\
    \ > 0) {\n        result.push_back(lst[i]);\n        lst.erase(lst.begin() + i);\n\
    \        if(lst.size() > 0) {\n            result.push_back(lst[lst.size() - 1]);\n\
    \            lst.erase(lst.begin() + lst.size() - 1);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while(lst.size()\
    \ > 0) {\n        if(i % 2 == 0) {\n            result.push_back(lst[0]);\n  \
    \          lst.erase(lst.begin());\n        } else {\n            result.push_back(lst[lst.size()\
    \ - 1]);\n            lst.erase(lst.end() - 1);\n        }\n        i++;\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if(lst.size() == 0)\n        return res;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0, j = lst.size() - 1;\n    while(i <= j) {\n        res.push_back(lst[i]);\n\
    \        if(i != j)\n            res.push_back(lst[j]);\n        i++;\n      \
    \  j--;\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::vector<long> result;\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n \
    \   result.push_back(lst[i]);\n    if (i != j) {\n      result.push_back(lst[j]);\n\
    \    }\n    i++;\n    j--;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> res;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        res.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n   \
    \         res.push_back(lst[j]);\n            j--;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if(lst.size()==0)\n        return res;\n    std::sort(lst.begin(),lst.end());\n\
    \    int i=0,j=lst.size()-1;\n    while(i<=j){\n        res.push_back(lst[i]);\n\
    \        i++;\n        if(i<=j)\n            res.push_back(lst[j]);\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) return res;\n    std::sort(lst.begin(), lst.end());\n \
    \   int i = 0, j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n\
    \        if (i == j) break;\n        res.push_back(lst[j]);\n        i++;\n  \
    \      j--;\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> res;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        res.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n   \
    \         res.push_back(lst[j]);\n            j--;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\n\
    \            res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) {\n        return res;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        res.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n   \
    \         res.push_back(lst[j]);\n            j--;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\n\
    \            res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) return\
    \ lst;\n    std::sort(lst.begin(), lst.end());\n    std::vector<long> res;\n \
    \   int i = 0, j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i++]);\n\
    \        if (i <= j) res.push_back(lst[j--]);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if(lst.size() == 0)\n        return res;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0, j = lst.size() - 1;\n    while(i <= j) {\n        res.push_back(lst[i]);\n\
    \        if(i != j)\n            res.push_back(lst[j]);\n        i++;\n      \
    \  j--;\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::sort(lst.begin(), lst.end());\n    std::vector<long>\
    \ result;\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j) {\n\
    \        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n    \
    \        result.push_back(lst[j]);\n            j--;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 ==\
    \ 0) {\n            result.push_back(lst[i / 2]);\n        } else {\n        \
    \    result.push_back(lst[lst.size() - (i / 2) - 1]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n\
    \        if (i != j) result.push_back(lst[j]);\n        i++;\n        j--;\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while (lst.size()\
    \ > 0) {\n        if (i % 2 == 0) {\n            result.push_back(lst[0]);\n \
    \           lst.erase(lst.begin());\n        } else {\n            result.push_back(lst[lst.size()\
    \ - 1]);\n            lst.erase(lst.end() - 1);\n        }\n        i++;\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if(lst.size() == 0)\n        return result;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    int j = lst.size() - 1;\n    while(i <= j) {\n        result.push_back(lst[i]);\n\
    \        i++;\n        if(i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::sort(lst.begin(), lst.end());\n    std::vector<long>\
    \ res;\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j) {\n  \
    \      res.push_back(lst[i]);\n        if (i != j) {\n            res.push_back(lst[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> ans;\n   \
    \ if(lst.size() == 0) return ans;\n    std::sort(lst.begin(), lst.end());\n  \
    \  int i = 0, j = lst.size() - 1;\n    while(i <= j) {\n        ans.push_back(lst[i]);\n\
    \        if(i != j) ans.push_back(lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> sorted_list;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while (lst.size()\
    \ > 0) {\n        sorted_list.push_back(lst[i]);\n        lst.erase(lst.begin()\
    \ + i);\n        if (lst.size() > 0) {\n            sorted_list.push_back(lst[lst.size()\
    \ - 1]);\n            lst.erase(lst.begin() + lst.size() - 1);\n        }\n  \
    \  }\n    return sorted_list;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) return res;\n    std::sort(lst.begin(), lst.end());\n \
    \   int i = 0, j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n\
    \        if (i != j) res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) return\
    \ lst;\n    std::vector<long> res;\n    std::sort(lst.begin(), lst.end());\n \
    \   int i = 0, j = lst.size() - 1;\n    while (i < j) {\n        res.push_back(lst[i++]);\n\
    \        res.push_back(lst[j--]);\n    }\n    if (i == j) res.push_back(lst[i]);\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) return res;\n    std::sort(lst.begin(), lst.end());\n \
    \   int i = 0, j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n\
    \        if (i != j) res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> res;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        res.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n   \
    \         res.push_back(lst[j]);\n            j--;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) {\n        return res;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        res.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n   \
    \         res.push_back(lst[j]);\n            j--;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while(i < lst.size()){\n\
    \        res.push_back(lst[i]);\n        if(i+1 < lst.size()){\n            res.push_back(lst[lst.size()-1-i]);\n\
    \        }\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpsek_vn5t: /tmp/tmpsek_vn5t.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::sort(lst.begin(), lst.end());\n    std::vector<long>\
    \ result;\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j) {\n\
    \        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n    \
    \        result.push_back(lst[j]);\n            j--;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i < j) {\n        result.push_back(lst[i]);\n        result.push_back(lst[j]);\n\
    \        i++;\n        j--;\n    }\n    if (i == j) {\n        result.push_back(lst[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if(lst.size() == 0)\n        return result;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    int j = lst.size() - 1;\n    while(i < j) {\n        result.push_back(lst[i]);\n\
    \        result.push_back(lst[j]);\n        i++;\n        j--;\n    }\n    if(i\
    \ == j)\n        result.push_back(lst[i]);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long> result;\n\t\
    std::sort(lst.begin(), lst.end());\n\tint i = 0;\n\tint j = lst.size() - 1;\n\t\
    while (i <= j) {\n\t\tresult.push_back(lst[i]);\n\t\ti++;\n\t\tif (i <= j) {\n\
    \t\t\tresult.push_back(lst[j]);\n\t\t\tj--;\n\t\t}\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while (lst.size()\
    \ > 0) {\n        result.push_back(lst[i]);\n        lst.erase(lst.begin() + i);\n\
    \        if (lst.size() == 0) {\n            break;\n        }\n        if (i\
    \ == 0) {\n            i = lst.size() - 1;\n        } else {\n            i--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: Exception
  stderr: 'tmpomhu2nj4: /tmp/tmpomhu2nj4.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660059300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n  std::vector<long> result;\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n \
    \   result.push_back(lst[i]);\n    if (i != j) {\n      result.push_back(lst[j]);\n\
    \    }\n    i++;\n    j--;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if(lst.size() == 0)\n        return res;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0, j = lst.size() - 1;\n    while(i <= j) {\n        res.push_back(lst[i]);\n\
    \        if(i != j)\n            res.push_back(lst[j]);\n        i++;\n      \
    \  j--;\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while(lst.size()\
    \ > 0) {\n        result.push_back(lst[i]);\n        lst.erase(lst.begin() + i);\n\
    \        if(lst.size() > 0) {\n            result.push_back(lst[lst.size() - 1]);\n\
    \            lst.erase(lst.begin() + lst.size() - 1);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::vector<long> sorted_lst = lst;\n    std::sort(sorted_lst.begin(), sorted_lst.end());\n\
    \    int i = 0;\n    int j = sorted_lst.size() - 1;\n    while (i <= j) {\n  \
    \      result.push_back(sorted_lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(sorted_lst[j]);\n            j--;\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n\
    \        if (i != j) result.push_back(lst[j]);\n        i++;\n        j--;\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059299
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n   \
    \     if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> ans;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        ans.push_back(lst[i]);\n        if (i != j)\
    \ {\n            ans.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size() -\
    \ 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i != j)\
    \ {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if (lst.size() == 0) {\n        return res;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int min_idx = 0;\n    int max_idx = lst.size() - 1;\n    while\
    \ (min_idx <= max_idx) {\n        res.push_back(lst[min_idx]);\n        min_idx++;\n\
    \        if (min_idx <= max_idx) {\n            res.push_back(lst[max_idx]);\n\
    \            max_idx--;\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ if(lst.size() == 0) return res;\n    std::sort(lst.begin(), lst.end());\n  \
    \  int i = 0, j = lst.size() - 1;\n    while(i <= j) {\n        res.push_back(lst[i++]);\n\
    \        if(i <= j) res.push_back(lst[j--]);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if(lst.size() == 0) return result;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    int j = lst.size() - 1;\n    while(i <= j) {\n        result.push_back(lst[i]);\n\
    \        if(i != j) result.push_back(lst[j]);\n        i++;\n        j--;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n   \
    \ int n = lst.size();\n    if(n == 0) return res;\n    sort(lst.begin(), lst.end());\n\
    \    int i = 0, j = n - 1;\n    while(i <= j) {\n        res.push_back(lst[i]);\n\
    \        if(i != j) res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059300
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    if (lst.size() == 0) {\n   \
    \     return lst;\n    }\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
    \ return vector in strange order.\n// Strange sorting, is when you start with\
    \ the minimum value,\n// then maximum of the remaining integers, then minimum\
    \ and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n\
    // >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
    \ strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660059298
