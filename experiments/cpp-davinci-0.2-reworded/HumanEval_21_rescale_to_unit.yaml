name: HumanEval_21_rescale_to_unit
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers (of\
  \ at least two elements), apply a linear transform to that vector,\n// such that\
  \ the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit((std::vector<float>({(float)1.0,\
  \ (float)2.0, (float)3.0, (float)4.0, (float)5.0})))\n// (std::vector<float>({(float)0.0,\
  \ (float)0.25, (float)0.5, (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
  \ numbers) {\n"
tests: "}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
  \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
  \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
  \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
  \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
  \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
  \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
  \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
  \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
completions: ["    assert(numbers.size() >= 2);\n    float min = numbers[0];\n   \
    \ float max = numbers[0];\n    for (float number : numbers) {\n        if (number\
    \ < min) {\n            min = number;\n        }\n        if (number > max) {\n\
    \            max = number;\n        }\n    }\n    float range = max - min;\n \
    \   std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n  \
    \  float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float diff = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / diff);\n    }\n    return result;", "    assert(numbers.size() >= 2);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) {\n            min = number;\n     \
    \   }\n        if (number > max) {\n            max = number;\n        }\n   \
    \ }\n    float range = max - min;\n    std::vector<float> result;\n    for (auto\
    \ number : numbers) {\n        result.push_back((number - min) / range);\n   \
    \ }\n    return result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;", "    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] < min) {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min_number = numbers[0];\n    float max_number = numbers[0];\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min_number)\
    \ {\n            min_number = numbers[i];\n        }\n        if (numbers[i] >\
    \ max_number) {\n            max_number = numbers[i];\n        }\n    }\n    float\
    \ scale = 1.0 / (max_number - min_number);\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min_number) * scale;\n    }\n   \
    \ return numbers;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float diff = max - min;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        numbers[i] = (numbers[i] - min) / diff;\n    }\n    return numbers;",
  "    float max = *std::max_element(numbers.begin(), numbers.end());\n    float min\
    \ = *std::min_element(numbers.begin(), numbers.end());\n    float range = max\
    \ - min;\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] =\
    \ (numbers[i] - min) / range;\n    }\n    return numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n    return\
    \ result;", "    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (float\
    \ number : numbers) {\n        result.push_back((number - min) / range);\n   \
    \ }\n    return result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;", "    assert(numbers.size() >= 2);\n \
    \   float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (int i\
    \ = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;", "    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] < min) {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "  float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n  float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \  std::vector<float> result;\n  for (float number : numbers) {\n    result.push_back((number\
    \ - min) / (max - min));\n  }\n  return result;", "    assert(numbers.size() >\
    \ 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (auto\
    \ n : numbers) {\n        if (n < min) {\n            min = n;\n        }\n  \
    \      if (n > max) {\n            max = n;\n        }\n    }\n    std::vector<float>\
    \ result;\n    for (auto n : numbers) {\n        result.push_back((n - min) /\
    \ (max - min));\n    }\n    return result;", "    assert(numbers.size() >= 2);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (float number\
    \ : numbers) {\n        if (number < min) {\n            min = number;\n     \
    \   }\n        if (number > max) {\n            max = number;\n        }\n   \
    \ }\n    float range = max - min;\n    std::vector<float> result;\n    for (float\
    \ number : numbers) {\n        result.push_back((number - min) / range);\n   \
    \ }\n    return result;", "    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float scale = max - min;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        numbers[i] = (numbers[i] - min) / scale;\n    }\n    return numbers;",
  "    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max\
    \ = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n    return\
    \ result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "\tassert(numbers.size() >= 2);\n\
    \tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor (int i = 1; i < numbers.size();\
    \ i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif\
    \ (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\tfloat range = max\
    \ - min;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tnumbers[i] = (numbers[i]\
    \ - min) / range;\n\t}\n\treturn numbers;", "    std::vector<float> result;\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    for (auto number\
    \ : numbers) {\n        result.push_back((number - min) / (max - min));\n    }\n\
    \    return result;", "    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min)\
    \ / range;\n    }\n    return numbers;", "    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] < min) {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    float range =\
    \ max - min;\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i]\
    \ = (numbers[i] - min) / range;\n    }\n    return numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min) /\
    \ (max - min);\n    }\n    return numbers;", "    assert(numbers.size() >= 2);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float range = max - min;\n    for (int i\
    \ = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min) / range;\n\
    \    }\n    return numbers;", "    assert(numbers.size() >= 2);\n    float min\
    \ = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    std::vector<float> result;\n    for (auto number : numbers)\
    \ {\n        result.push_back((number - min) / (max - min));\n    }\n    return\
    \ result;", "    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    std::vector<float> result;\n    for (auto number : numbers)\
    \ {\n        result.push_back((number - min) / range);\n    }\n    return result;",
  "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n    float max =\
    \ numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    float range = max\
    \ - min;\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] =\
    \ (numbers[i] - min) / range;\n    }\n    return numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float diff = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / diff);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min)\
    \ / range;\n    }\n    return numbers;", "    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (float\
    \ number : numbers) {\n        result.push_back((number - min) / range);\n   \
    \ }\n    return result;", "    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;", "    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    std::vector<float> result;\n    for (float number :\
    \ numbers) {\n        result.push_back((number - min) / range);\n    }\n    return\
    \ result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float max_number = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min_number = *std::min_element(numbers.begin(), numbers.end());\n \
    \   float range = max_number - min_number;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min_number) / range;\n    }\n   \
    \ return numbers;", "    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float max = numbers[0];\n    float min = numbers[0];\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        if (numbers[i] < min) {\n        \
    \    min = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;", "    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() > 1);\n\
    \    float min_number = numbers[0];\n    float max_number = numbers[0];\n    for\
    \ (auto number : numbers) {\n        if (number < min_number) {\n            min_number\
    \ = number;\n        }\n        if (number > max_number) {\n            max_number\
    \ = number;\n        }\n    }\n    float range = max_number - min_number;\n  \
    \  std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min_number) / range);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (float\
    \ number : numbers) {\n        result.push_back((number - min) / range);\n   \
    \ }\n    return result;", "    assert(numbers.size() > 1);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;", "    assert(numbers.size() >= 2);\n \
    \   float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / (max - min));\n    }\n    return result;", "    std::vector<float> result;\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    for (auto number\
    \ : numbers) {\n        result.push_back((number - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float scale = 1.0 / (max - min);\n    std::vector<float> result;\n \
    \   for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) * scale);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (unsigned\
    \ int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n   \
    \         min = numbers[i];\n        }\n        if (numbers[i] > max) {\n    \
    \        max = numbers[i];\n        }\n    }\n    float range = max - min;\n \
    \   for (unsigned int i = 0; i < numbers.size(); i++) {\n        numbers[i] =\
    \ (numbers[i] - min) / range;\n    }\n    return numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float diff = max - min;\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min)\
    \ / diff;\n    }\n    return numbers;", "    float min_number = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max_number = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max_number - min_number;\n    std::vector<float> result;\n\
    \    for (float number : numbers) {\n        result.push_back((number - min_number)\
    \ / range);\n    }\n    return result;", "    assert(numbers.size() >= 2);\n \
    \   float min = numbers[0];\n    float max = numbers[0];\n    for (auto i = numbers.begin();\
    \ i != numbers.end(); ++i) {\n        if (*i < min) {\n            min = *i;\n\
    \        }\n        if (*i > max) {\n            max = *i;\n        }\n    }\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (auto i\
    \ = numbers.begin(); i != numbers.end(); ++i) {\n        result.push_back((*i\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n    return\
    \ result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for (auto number : numbers) {\n        if (number\
    \ < min) {\n            min = number;\n        }\n        if (number > max) {\n\
    \            max = number;\n        }\n    }\n    std::vector<float> result;\n\
    \    for (auto number : numbers) {\n        result.push_back((number - min) /\
    \ (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (float\
    \ number : numbers) {\n        if (number < min) {\n            min = number;\n\
    \        }\n        if (number > max) {\n            max = number;\n        }\n\
    \    }\n    float range = max - min;\n    std::vector<float> result;\n    for\
    \ (float number : numbers) {\n        result.push_back((number - min) / range);\n\
    \    }\n    return result;", "    assert(numbers.size() >= 2);\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float i : numbers) {\n        result.push_back((i - min) /\
    \ (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result(numbers.size());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result[i] = (numbers[i]\
    \ - min) / range;\n    }\n    return result;", "    assert(numbers.size() >= 2);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) {\n            min = number;\n     \
    \   }\n        if (number > max) {\n            max = number;\n        }\n   \
    \ }\n    float range = max - min;\n    std::vector<float> result;\n    for (auto\
    \ number : numbers) {\n        result.push_back((number - min) / range);\n   \
    \ }\n    return result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (float number : numbers) {\n        if (number\
    \ < min) {\n            min = number;\n        }\n        if (number > max) {\n\
    \            max = number;\n        }\n    }\n    float range = max - min;\n \
    \   std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float diff = max - min;\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min)\
    \ / diff;\n    }\n    return numbers;", "    assert(numbers.size() >= 2);\n  \
    \  float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i\
    \ < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min =\
    \ numbers[i];\n        }\n        if (numbers[i] > max) {\n            max = numbers[i];\n\
    \        }\n    }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float diff = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / diff);\n    }\n    return result;", "    assert(numbers.size() >= 2);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float max_number = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min_number = *std::min_element(numbers.begin(), numbers.end());\n \
    \   float scale = max_number - min_number;\n    std::vector<float> result;\n \
    \   for (float number : numbers) {\n        result.push_back((number - min_number)\
    \ / scale);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (float\
    \ number : numbers) {\n        result.push_back((number - min) / range);\n   \
    \ }\n    return result;", "    assert(numbers.size() >= 2);\n    float min_number\
    \ = numbers[0];\n    float max_number = numbers[0];\n    for (float number : numbers)\
    \ {\n        if (number < min_number) {\n            min_number = number;\n  \
    \      }\n        if (number > max_number) {\n            max_number = number;\n\
    \        }\n    }\n    float range = max_number - min_number;\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min_number) / range);\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;", "    assert(numbers.size() >= 2);\n \
    \   float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n  \
    \  float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (float number : numbers) {\n        if (number\
    \ < min) {\n            min = number;\n        }\n        if (number > max) {\n\
    \            max = number;\n        }\n    }\n    std::vector<float> result;\n\
    \    for (float number : numbers) {\n        result.push_back((number - min) /\
    \ (max - min));\n    }\n    return result;", "    assert(numbers.size() >= 2);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / (max - min));\n    }\n    return result;", "  assert(numbers.size() >= 2);\n\
    \  float min = numbers[0];\n  float max = numbers[0];\n  for (int i = 1; i < numbers.size();\
    \ i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if\
    \ (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  std::vector<float>\
    \ result;\n  for (int i = 0; i < numbers.size(); i++) {\n    result.push_back((numbers[i]\
    \ - min) / (max - min));\n  }\n  return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float scale = 1.0 / (max - min);\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) * scale;\n    }\n    return numbers;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min)\
    \ / range;\n    }\n    return numbers;", "    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] < min) {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    float range =\
    \ max - min;\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / range);\n    }\n    return\
    \ result;", "\tassert(numbers.size() >= 2);\n\tfloat min = numbers[0];\n\tfloat\
    \ max = numbers[0];\n\tfor (int i = 1; i < numbers.size(); i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\tstd::vector<float> result;\n\tfor (int i = 0;\
    \ i < numbers.size(); i++) {\n\t\tresult.push_back((numbers[i] - min) / (max -\
    \ min));\n\t}\n\treturn result;", "    assert(numbers.size() >= 2);\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i]\
    \ = (numbers[i] - min) / (max - min);\n    }\n    return numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float diff = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / diff);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (float\
    \ number : numbers) {\n        result.push_back((number - min) / range);\n   \
    \ }\n    return result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float diff = max - min;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        numbers[i] = (numbers[i] - min) / diff;\n    }\n    return numbers;",
  "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n    float max =\
    \ numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    float range = max\
    \ - min;\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / range);\n    }\n    return\
    \ result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;", "    assert(numbers.size() > 1);\n  \
    \  float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i\
    \ < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min =\
    \ numbers[i];\n        }\n        if (numbers[i] > max) {\n            max = numbers[i];\n\
    \        }\n    }\n    float scale = 1.0 / (max - min);\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) * scale);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float scale = 1.0 / (max - min);\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) * scale;\n    }\n    return numbers;", "    assert(numbers.size() > 1);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float range = max - min;\n    for (int i\
    \ = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min) / range;\n\
    \    }\n    return numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (auto\
    \ n : numbers) {\n        if (n < min) {\n            min = n;\n        }\n  \
    \      if (n > max) {\n            max = n;\n        }\n    }\n    float range\
    \ = max - min;\n    std::vector<float> result;\n    for (auto n : numbers) {\n\
    \        result.push_back((n - min) / range);\n    }\n    return result;", " \
    \   std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    for (auto number : numbers) {\n        result.push_back((number - min) /\
    \ (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float scale = 1.0 / (max - min);\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) * scale;\n    }\n    return numbers;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() > 1);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / (max - min));\n    }\n    return result;", "    assert(numbers.size() >= 2);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;",
  "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n    float max =\
    \ numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    float a = 1.0 /\
    \ (max - min);\n    float b = -min / (max - min);\n    std::vector<float> result;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(a *\
    \ numbers[i] + b);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (float x : numbers) {\n        result.push_back((x\
    \ - min) / (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float scale = 1.0 / (max - min);\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) * scale;\n    }\n    return numbers;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;", "    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min) /\
    \ (max - min);\n    }\n    return numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (float\
    \ number : numbers) {\n        result.push_back((number - min) / range);\n   \
    \ }\n    return result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;", "    assert(numbers.size() >= 2);\n \
    \   float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (float\
    \ number : numbers) {\n        result.push_back((number - min) / range);\n   \
    \ }\n    return result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;", "    assert(numbers.size() >= 2);\n \
    \   float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float diff = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / diff);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n    return\
    \ result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float diff = max - min;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        numbers[i] = (numbers[i] - min) / diff;\n    }\n    return numbers;",
  "    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 0; i\
    \ < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min =\
    \ numbers[i];\n        }\n        if (numbers[i] > max) {\n            max = numbers[i];\n\
    \        }\n    }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i]\
    \ = (numbers[i] - min) / (max - min);\n    }\n    return numbers;", "    float\
    \ min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    std::vector<float> result;\n    for (auto number : numbers)\
    \ {\n        result.push_back((number - min) / (max - min));\n    }\n    return\
    \ result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float diff = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / diff);\n    }\n    return result;", "    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;", "    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float scale = 1.0 / (max - min);\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) * scale;\n    }\n    return numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n    return\
    \ result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;",
  "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n    float max =\
    \ numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    float scale = 1.0\
    \ / (max - min);\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i]\
    \ = (numbers[i] - min) * scale;\n    }\n    return numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ rescaled;\n    for (int i = 0; i < numbers.size(); i++) {\n        rescaled.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return rescaled;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float max = numbers[0];\n    float min = numbers[0];\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        if (numbers[i] < min) {\n        \
    \    min = numbers[i];\n        }\n    }\n    float range = max - min;\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min)\
    \ / range;\n    }\n    return numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (auto number\
    \ : numbers) {\n        result.push_back((number - min) / range);\n    }\n   \
    \ return result;", "    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (float\
    \ number : numbers) {\n        if (number < min) {\n            min = number;\n\
    \        }\n        if (number > max) {\n            max = number;\n        }\n\
    \    }\n    float range = max - min;\n    std::vector<float> result;\n    for\
    \ (float number : numbers) {\n        result.push_back((number - min) / range);\n\
    \    }\n    return result;", "    assert(numbers.size() >= 2);\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (float number : numbers)\
    \ {\n        if (number < min) {\n            min = number;\n        }\n     \
    \   if (number > max) {\n            max = number;\n        }\n    }\n    float\
    \ range = max - min;\n    std::vector<float> result;\n    for (float number :\
    \ numbers) {\n        result.push_back((number - min) / range);\n    }\n    return\
    \ result;", "  assert(numbers.size() >= 2);\n  float min = numbers[0];\n  float\
    \ max = numbers[0];\n  for (auto number : numbers) {\n    if (number < min) {\n\
    \      min = number;\n    }\n    if (number > max) {\n      max = number;\n  \
    \  }\n  }\n  float range = max - min;\n  std::vector<float> result;\n  for (auto\
    \ number : numbers) {\n    result.push_back((number - min) / range);\n  }\n  return\
    \ result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    assert(min < max);\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min) /\
    \ (max - min);\n    }\n    return numbers;", "    assert(numbers.size() >= 2);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "  float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n  float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \  std::vector<float> result;\n  for (auto number : numbers) {\n    result.push_back((number\
    \ - min) / (max - min));\n  }\n  return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n  \
    \  float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float max = *std::max_element(numbers.begin(), numbers.end());\n  \
    \  float min = *std::min_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;", "    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float max = numbers[0];\n    float min = numbers[0];\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        if (numbers[i] < min) {\n        \
    \    min = numbers[i];\n        }\n    }\n    std::vector<float> result;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (int i\
    \ = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min)\
    \ / range;\n    }\n    return numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;", "    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;", "    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;", "    assert(numbers.size() >=\
    \ 2);\n    float min_number = numbers[0];\n    float max_number = numbers[0];\n\
    \    for (float number : numbers) {\n        if (number < min_number) {\n    \
    \        min_number = number;\n        }\n        if (number > max_number) {\n\
    \            max_number = number;\n        }\n    }\n    float range = max_number\
    \ - min_number;\n    std::vector<float> result;\n    for (float number : numbers)\
    \ {\n        result.push_back((number - min_number) / range);\n    }\n    return\
    \ result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;", "    assert(numbers.size() >= 2);\n \
    \   float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return result;"]
stop_tokens:
- "\n}"
