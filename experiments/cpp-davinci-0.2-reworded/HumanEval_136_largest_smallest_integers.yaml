name: HumanEval_136_largest_smallest_integers
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns\
  \ a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is\
  \ the smallest\n// of positive integers in a vector.\n// If there is no negative\
  \ or positive integers, return them as None.\n// Examples:\n// >>> largest_smallest_integers((std::vector<long>({(long)2,\
  \ (long)4, (long)1, (long)3, (long)5, (long)7})))\n// std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1))\n// >>> largest_smallest_integers((std::vector<long>()))\n\
  // std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\n\
  // >>> largest_smallest_integers((std::vector<long>({(long)0})))\n// std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(std::nullopt))\nstd::tuple<std::optional<long>, std::optional<long>>\
  \ largest_smallest_integers(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = largest_smallest_integers;\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
  \ (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
  \ (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));\n\
  \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2,\
  \ (long)7, (long)-7}))) == std::make_tuple(-7, 2));\n    assert(candidate((std::vector<long>({(long)7,\
  \ (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9,\
  \ 2));\n    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)0})))\
  \ == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6})))\
  \ == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6,\
  \ (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3,\
  \ (long)1}))) == std::make_tuple(-3, 1));\n    assert(candidate((std::vector<long>({(long)-6,\
  \ (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));\n\
  }\n"
completions: ["    std::optional<long> a;\n    std::optional<long> b;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value())\
    \ {\n                a = i;\n            }\n        } else if (i > 0) {\n    \
    \        if (!b.has_value() || i < b.value()) {\n                b = i;\n    \
    \        }\n        }\n    }\n    return std::make_tuple(a, b);", "\tstd::optional<long>\
    \ a, b;\n\tfor (auto i : lst) {\n\t\tif (i < 0) {\n\t\t\tif (!a.has_value() ||\
    \ i > a.value()) {\n\t\t\t\ta = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\
    \tif (!b.has_value() || i < b.value()) {\n\t\t\t\tb = i;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a, b;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a;\n    std::optional<long> b;\n\
    \    for (auto i : lst) {\n        if (i > 0) {\n            if (!b.has_value())\
    \ {\n                b = i;\n            } else {\n                b = std::min(b.value(),\
    \ i);\n            }\n        } else if (i < 0) {\n            if (!a.has_value())\
    \ {\n                a = i;\n            } else {\n                a = std::max(a.value(),\
    \ i);\n            }\n        }\n    }\n    return std::make_tuple(a, b);", " \
    \   std::optional<long> a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            if (!a.has_value() || i > a.value()) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!b.has_value() ||\
    \ i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> a, b;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value())\
    \ {\n                a = i;\n            }\n        } else if (i > 0) {\n    \
    \        if (!b.has_value() || i < b.value()) {\n                b = i;\n    \
    \        }\n        }\n    }\n    return std::make_tuple(a, b);", "    long max\
    \ = INT_MIN;\n    long min = INT_MAX;\n    for(int i = 0; i < lst.size(); i++){\n\
    \        if(lst[i] > 0 && lst[i] < min){\n            min = lst[i];\n        }\n\
    \        if(lst[i] < 0 && lst[i] > max){\n            max = lst[i];\n        }\n\
    \    }\n    if(max == INT_MIN){\n        max = NULL;\n    }\n    if(min == INT_MAX){\n\
    \        min = NULL;\n    }\n    return std::make_tuple(max, min);", "    std::optional<long>\
    \ largest_negative_int;\n    std::optional<long> smallest_positive_int;\n    for\
    \ (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative_int.has_value())\
    \ {\n                largest_negative_int = i;\n            } else if (i > largest_negative_int.value())\
    \ {\n                largest_negative_int = i;\n            }\n        } else\
    \ if (i > 0) {\n            if (!smallest_positive_int.has_value()) {\n      \
    \          smallest_positive_int = i;\n            } else if (i < smallest_positive_int.value())\
    \ {\n                smallest_positive_int = i;\n            }\n        }\n  \
    \  }\n    return std::make_tuple(largest_negative_int, smallest_positive_int);",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "\tstd::optional<long> largest_negative;\n\tstd::optional<long>\
    \ smallest_positive;\n\tfor (auto i : lst) {\n\t\tif (i < 0) {\n\t\t\tif (!largest_negative.has_value())\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t\telse if (i > largest_negative.value())\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\
    \tif (!smallest_positive.has_value()) {\n\t\t\t\tsmallest_positive = i;\n\t\t\t\
    }\n\t\t\telse if (i < smallest_positive.value()) {\n\t\t\t\tsmallest_positive\
    \ = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::make_tuple(largest_negative, smallest_positive);",
  "    std::optional<long> largest;\n    std::optional<long> smallest;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest.has_value() || i\
    \ > largest.value()) {\n                largest = i;\n            }\n        }\
    \ else if (i > 0) {\n            if (!smallest.has_value() || i < smallest.value())\
    \ {\n                smallest = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(largest, smallest);", "    std::optional<long> a;\n    std::optional<long>\
    \ b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value())\
    \ {\n                a = i;\n            } else {\n                if (i > a.value())\
    \ {\n                    a = i;\n                }\n            }\n        } else\
    \ {\n            if (!b.has_value()) {\n                b = i;\n            }\
    \ else {\n                if (i < b.value()) {\n                    b = i;\n \
    \               }\n            }\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "\tstd::optional<long> a;\n\tstd::optional<long> b;\n\t\
    for (auto i : lst) {\n\t\tif (i > 0) {\n\t\t\tif (!b.has_value()) {\n\t\t\t\t\
    b = i;\n\t\t\t}\n\t\t\telse if (i < b.value()) {\n\t\t\t\tb = i;\n\t\t\t}\n\t\t\
    }\n\t\telse if (i < 0) {\n\t\t\tif (!a.has_value()) {\n\t\t\t\ta = i;\n\t\t\t\
    }\n\t\t\telse if (i > a.value()) {\n\t\t\t\ta = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ std::make_tuple(a, b);", "\tlong max = 0;\n\tlong min = 0;\n\tbool max_set =\
    \ false;\n\tbool min_set = false;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\
    \tif (lst[i] < 0) {\n\t\t\tif (!max_set) {\n\t\t\t\tmax = lst[i];\n\t\t\t\tmax_set\
    \ = true;\n\t\t\t}\n\t\t\telse if (lst[i] > max) {\n\t\t\t\tmax = lst[i];\n\t\t\
    \t}\n\t\t}\n\t\telse if (lst[i] > 0) {\n\t\t\tif (!min_set) {\n\t\t\t\tmin = lst[i];\n\
    \t\t\t\tmin_set = true;\n\t\t\t}\n\t\t\telse if (lst[i] < min) {\n\t\t\t\tmin\
    \ = lst[i];\n\t\t\t}\n\t\t}\n\t}\n\tif (max_set) {\n\t\treturn std::make_tuple(std::optional<long>(max),\
    \ std::optional<long>(min));\n\t}\n\telse {\n\t\treturn std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n\t}", "    std::optional<long> largest;\n\
    \    std::optional<long> smallest;\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            if (!largest.has_value() || i > largest.value()) {\n     \
    \           largest = i;\n            }\n        } else if (i > 0) {\n       \
    \     if (!smallest.has_value() || i < smallest.value()) {\n                smallest\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(largest, smallest);",
  "    std::optional<long> a, b;\n    long max = -1e9, min = 1e9;\n    for (long i\
    \ : lst) {\n        if (i < 0) {\n            if (i > max) {\n               \
    \ max = i;\n            }\n        }\n        if (i > 0) {\n            if (i\
    \ < min) {\n                min = i;\n            }\n        }\n    }\n    if\
    \ (max == -1e9) {\n        a = std::nullopt;\n    } else {\n        a = max;\n\
    \    }\n    if (min == 1e9) {\n        b = std::nullopt;\n    } else {\n     \
    \   b = min;\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "\tlong max = 0;\n\tlong min = 0;\n\tbool max_flag = false;\n\tbool min_flag = false;\n\
    \tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] < 0) {\n\t\t\tif (max_flag\
    \ == false) {\n\t\t\t\tmax = lst[i];\n\t\t\t\tmax_flag = true;\n\t\t\t}\n\t\t\t\
    else if (lst[i] > max) {\n\t\t\t\tmax = lst[i];\n\t\t\t}\n\t\t}\n\t\telse if (lst[i]\
    \ > 0) {\n\t\t\tif (min_flag == false) {\n\t\t\t\tmin = lst[i];\n\t\t\t\tmin_flag\
    \ = true;\n\t\t\t}\n\t\t\telse if (lst[i] < min) {\n\t\t\t\tmin = lst[i];\n\t\t\
    \t}\n\t\t}\n\t}\n\tif (max_flag == false) {\n\t\tmax = std::nullopt;\n\t}\n\t\
    if (min_flag == false) {\n\t\tmin = std::nullopt;\n\t}\n\treturn std::make_tuple(max,\
    \ min);", "    std::optional<long> a, b;\n    for (auto i : lst) {\n        if\
    \ (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n            \
    \    a = i;\n            }\n        } else if (i > 0) {\n            if (!b.has_value()\
    \ || i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> a, b;\n    for (auto\
    \ i : lst) {\n        if (i > 0) {\n            if (!b.has_value() || i < b.value())\
    \ {\n                b = i;\n            }\n        } else if (i < 0) {\n    \
    \        if (!a.has_value() || i > a.value()) {\n                a = i;\n    \
    \        }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a, b;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(a, b);", "\tstd::optional<long>\
    \ a, b;\n\tfor (auto i : lst) {\n\t\tif (i < 0) {\n\t\t\tif (!a.has_value() ||\
    \ i > a.value()) {\n\t\t\t\ta = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\
    \tif (!b.has_value() || i < b.value()) {\n\t\t\t\tb = i;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn std::make_tuple(a, b);", "    std::optional<long> a;\n    std::optional<long>\
    \ b;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) {\n\
    \            if (a.has_value()) {\n                if (lst[i] > a.value()) {\n\
    \                    a = lst[i];\n                }\n            } else {\n  \
    \              a = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (b.has_value()) {\n                if (lst[i] < b.value()) {\n\
    \                    b = lst[i];\n                }\n            } else {\n  \
    \              b = lst[i];\n            }\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    std::optional<long> a;\n    std::optional<long> b;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!a.has_value()) {\n      \
    \          a = i;\n            } else {\n                if (i > a.value()) {\n\
    \                    a = i;\n                }\n            }\n        } else\
    \ {\n            if (!b.has_value()) {\n                b = i;\n            }\
    \ else {\n                if (i < b.value()) {\n                    b = i;\n \
    \               }\n            }\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    std::optional<long> a, b;\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            if (!a.has_value() || i > a.value()) {\n               \
    \ a = i;\n            }\n        } else if (i > 0) {\n            if (!b.has_value()\
    \ || i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (long i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "  std::optional<long>\
    \ largest_negative;\n  std::optional<long> smallest_positive;\n  for (auto i :\
    \ lst) {\n    if (i < 0) {\n      if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n        largest_negative = i;\n      }\n    } else if (i > 0) {\n      if\
    \ (!smallest_positive.has_value() || i < smallest_positive.value()) {\n      \
    \  smallest_positive = i;\n      }\n    }\n  }\n  return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a;\n    std::optional<long> b;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value())\
    \ {\n                a = i;\n            } else {\n                if (i > a.value())\
    \ {\n                    a = i;\n                }\n            }\n        } else\
    \ {\n            if (!b.has_value()) {\n                b = i;\n            }\
    \ else {\n                if (i < b.value()) {\n                    b = i;\n \
    \               }\n            }\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    std::optional<long> a, b;\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            if (!a.has_value() || i > a.value()) {\n               \
    \ a = i;\n            }\n        } else if (i > 0) {\n            if (!b.has_value()\
    \ || i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    std::optional<long> a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            if (!a.has_value() || i > a.value()) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!b.has_value() ||\
    \ i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> a;\n    std::optional<long>\
    \ b;\n    for (auto it = lst.begin(); it != lst.end(); ++it) {\n        if (*it\
    \ < 0) {\n            if (!a.has_value()) {\n                a = *it;\n      \
    \      } else {\n                if (*it > *a) {\n                    a = *it;\n\
    \                }\n            }\n        } else if (*it > 0) {\n           \
    \ if (!b.has_value()) {\n                b = *it;\n            } else {\n    \
    \            if (*it < *b) {\n                    b = *it;\n                }\n\
    \            }\n        }\n    }\n    return std::make_tuple(a, b);", "\tstd::optional<long>\
    \ a, b;\n\tfor (auto i : lst) {\n\t\tif (i < 0) {\n\t\t\tif (!a.has_value() ||\
    \ i > a.value()) {\n\t\t\t\ta = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\
    \tif (!b.has_value() || i < b.value()) {\n\t\t\t\tb = i;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn std::make_tuple(a, b);", "    std::optional<long> a = std::nullopt;\n\
    \    std::optional<long> b = std::nullopt;\n    for (auto i : lst) {\n       \
    \ if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n         \
    \       a = i;\n            }\n        } else if (i > 0) {\n            if (!b.has_value()\
    \ || i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ max_neg, min_pos;\n    for (auto i : lst) {\n        if (i < 0) {\n        \
    \    if (!max_neg.has_value() || i > max_neg.value()) {\n                max_neg\
    \ = i;\n            }\n        } else if (i > 0) {\n            if (!min_pos.has_value()\
    \ || i < min_pos.value()) {\n                min_pos = i;\n            }\n   \
    \     }\n    }\n    return std::make_tuple(max_neg, min_pos);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a, b;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ a;\n    std::optional<long> b;\n    for (auto i : lst) {\n        if (i < 0)\
    \ {\n            if (!a.has_value()) {\n                a = i;\n            }\
    \ else {\n                if (i > a.value()) {\n                    a = i;\n \
    \               }\n            }\n        } else {\n            if (!b.has_value())\
    \ {\n                b = i;\n            } else {\n                if (i < b.value())\
    \ {\n                    b = i;\n                }\n            }\n        }\n\
    \    }\n    return std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "\tstd::optional<long>\
    \ a = std::nullopt;\n\tstd::optional<long> b = std::nullopt;\n\tfor (auto i :\
    \ lst) {\n\t\tif (i < 0) {\n\t\t\tif (a == std::nullopt) {\n\t\t\t\ta = i;\n\t\
    \t\t}\n\t\t\telse {\n\t\t\t\tif (i > *a) {\n\t\t\t\t\ta = i;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t\telse {\n\t\t\tif (b == std::nullopt) {\n\t\t\t\tb = i;\n\t\t\t}\n\
    \t\t\telse {\n\t\t\t\tif (i < *b) {\n\t\t\t\t\tb = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::tuple<std::optional<long>,\
    \ std::optional<long>> ret;\n    std::optional<long> a, b;\n    for (auto i :\
    \ lst) {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value())\
    \ {\n                a = i;\n            }\n        } else if (i > 0) {\n    \
    \        if (!b.has_value() || i < b.value()) {\n                b = i;\n    \
    \        }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a = std::nullopt;\n    std::optional<long>\
    \ b = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n        \
    \    if (!a.has_value() || i > a.value()) {\n                a = i;\n        \
    \    }\n        } else if (i > 0) {\n            if (!b.has_value() || i < b.value())\
    \ {\n                b = i;\n            }\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    std::optional<long> a, b;\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            if (!a.has_value() || i > a.value()) {\n               \
    \ a = i;\n            }\n        } else if (i > 0) {\n            if (!b.has_value()\
    \ || i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a;\n    std::optional<long> b;\n    for (auto i : lst) {\n        if (i < 0)\
    \ {\n            if (!a.has_value()) {\n                a = i;\n            }\
    \ else {\n                if (i > a.value()) {\n                    a = i;\n \
    \               }\n            }\n        } else {\n            if (!b.has_value())\
    \ {\n                b = i;\n            } else {\n                if (i < b.value())\
    \ {\n                    b = i;\n                }\n            }\n        }\n\
    \    }\n    return std::make_tuple(a, b);", "    std::optional<long> max_neg =\
    \ std::nullopt;\n    std::optional<long> min_pos = std::nullopt;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!max_neg.has_value() || i\
    \ > max_neg.value()) {\n                max_neg = i;\n            }\n        }\
    \ else if (i > 0) {\n            if (!min_pos.has_value() || i < min_pos.value())\
    \ {\n                min_pos = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(max_neg, min_pos);", "\tlong max = 0;\n\tlong min = 0;\n\tbool\
    \ max_flag = false;\n\tbool min_flag = false;\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tif (lst[i] < 0) {\n\t\t\tif (max_flag == false) {\n\t\t\t\tmax =\
    \ lst[i];\n\t\t\t\tmax_flag = true;\n\t\t\t}\n\t\t\telse if (lst[i] > max) {\n\
    \t\t\t\tmax = lst[i];\n\t\t\t}\n\t\t}\n\t\telse if (lst[i] > 0) {\n\t\t\tif (min_flag\
    \ == false) {\n\t\t\t\tmin = lst[i];\n\t\t\t\tmin_flag = true;\n\t\t\t}\n\t\t\t\
    else if (lst[i] < min) {\n\t\t\t\tmin = lst[i];\n\t\t\t}\n\t\t}\n\t}\n\tif (max_flag\
    \ == false) {\n\t\tmax = std::nullopt;\n\t}\n\tif (min_flag == false) {\n\t\t\
    min = std::nullopt;\n\t}\n\treturn std::make_tuple(max, min);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a, b;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(a, b);", "\tstd::optional<long>\
    \ a, b;\n\tfor (auto i : lst) {\n\t\tif (i > 0) {\n\t\t\tif (!b.has_value()) {\n\
    \t\t\t\tb = i;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tb = std::min(b.value(), i);\n\t\
    \t\t}\n\t\t}\n\t\telse if (i < 0) {\n\t\t\tif (!a.has_value()) {\n\t\t\t\ta =\
    \ i;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ta = std::max(a.value(), i);\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn std::make_tuple(a, b);", "\tstd::optional<long> a, b;\n\tfor\
    \ (auto i : lst) {\n\t\tif (i < 0) {\n\t\t\tif (!a.has_value() || i > a.value())\
    \ {\n\t\t\t\ta = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\tif (!b.has_value()\
    \ || i < b.value()) {\n\t\t\t\tb = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::make_tuple(a,\
    \ b);", "    std::optional<long> a = std::nullopt;\n    std::optional<long> b\
    \ = std::nullopt;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ < 0) {\n            if (a == std::nullopt) {\n                a = lst[i];\n\
    \            } else {\n                if (lst[i] > *a) {\n                  \
    \  a = lst[i];\n                }\n            }\n        } else if (lst[i] >\
    \ 0) {\n            if (b == std::nullopt) {\n                b = lst[i];\n  \
    \          } else {\n                if (lst[i] < *b) {\n                    b\
    \ = lst[i];\n                }\n            }\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    std::optional<long> largest_negative = std::nullopt;\n    std::optional<long>\
    \ smallest_positive = std::nullopt;\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            if (largest_negative == std::nullopt || i > *largest_negative)\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (smallest_positive == std::nullopt || i < *smallest_positive)\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    std::optional<long> a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            if (!a.has_value() || i > a.value()) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!b.has_value() ||\
    \ i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "\tstd::optional<long>\
    \ a, b;\n\tfor (auto i : lst) {\n\t\tif (i < 0) {\n\t\t\tif (!a.has_value() ||\
    \ i > a.value()) {\n\t\t\t\ta = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\
    \tif (!b.has_value() || i < b.value()) {\n\t\t\t\tb = i;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a;\n    std::optional<long> b;\n    for (auto i : lst) {\n        if (i > 0)\
    \ {\n            if (!b.has_value()) {\n                b = i;\n            }\
    \ else {\n                b = std::min(b.value(), i);\n            }\n       \
    \ } else if (i < 0) {\n            if (!a.has_value()) {\n                a =\
    \ i;\n            } else {\n                a = std::max(a.value(), i);\n    \
    \        }\n        }\n    }\n    return std::make_tuple(a, b);", "    long max\
    \ = 0;\n    long min = 0;\n    bool is_max = false;\n    bool is_min = false;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) {\n     \
    \       if (!is_max) {\n                max = lst[i];\n                is_max\
    \ = true;\n            } else {\n                if (lst[i] > max) {\n       \
    \             max = lst[i];\n                }\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (!is_min) {\n                min = lst[i];\n\
    \                is_min = true;\n            } else {\n                if (lst[i]\
    \ < min) {\n                    min = lst[i];\n                }\n           \
    \ }\n        }\n    }\n    if (is_max) {\n        return std::make_tuple(std::optional<long>(max),\
    \ std::optional<long>(min));\n    } else {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }"]
stop_tokens:
- "\n}"
