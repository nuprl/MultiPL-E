language: cpp
name: HumanEval_2_truncate_number
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int integer = (int)number;\n    float decimal = number - integer;\n    return\
    \ decimal;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int int_part = (int)number;\n\
    \    return number - int_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer = (int)number;\n\
    \    float decimal = number - integer;\n    return decimal;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int i = number;\n    float\
    \ f = number - i;\n    return f;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    return number - a;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // TODO: Implement this function.\n\
    \  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function\n\
    \    return 0.0;\n}\nint main() {\n    auto candidate = truncate_number;\n   \
    \ assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpk3wt_1bv: /tmp/tmpk3wt_1bv.cpp:15: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ int a = number;\n  float b = number - a;\n  return b;\n}\nint main() {\n   \
    \ auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ int a = number;\n  float b = number - a;\n  return b;\n}\nint main() {\n   \
    \ auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int int_part = (int)number;\n\
    \    return number - int_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    int integer = (int)number;\n    float decimal = number - integer;\n    return\
    \ decimal;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int x = number;\n    float y = number - x;\n    return y;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // TODO: Implement this function.\n\
    \  return 0.0;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpztwyw79j: /tmp/tmpztwyw79j.cpp:15: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ int a = number;\n  float b = number - a;\n  return b;\n}\nint main() {\n   \
    \ auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    return number - integer_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function.\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function\n\
    \    int a = number;\n    return number - a;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ int a = number;\n  float b = number - a;\n  return b;\n}\nint main() {\n   \
    \ auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // TODO: Write your code here\n\
    \  int num = number;\n  return number - num;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // TODO: implement this function\n\
    \  return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  int integer_part = (int)number;\n\
    \  return number - integer_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int integer = (int)number;\n    float decimal = number - integer;\n    return\
    \ decimal;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;\n}\nint\
    \ main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int x = number;\n    return number - x;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement me!\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    float intpart;\n    float decpart = modf(number, &intpart);\n    return decpart;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_tbuv6mr.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmp_tbuv6mr.cpp:12:34: error: cannot convert \u2018float*\u2019 to \u2018\
    double*\u2019\n   12 |     float decpart = modf(number, &intpart);\n      |  \
    \                                ^~~~~~~~\n      |                           \
    \       |\n      |                                  float*\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:45,\n            \
    \     from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp_tbuv6mr.cpp:2:\n/usr/include/bits/mathcalls.h:115:1:\
    \ note:   initializing argument 2 of \u2018double modf(double, double*)\u2019\n\
    \  115 | __MATHCALL (modf,, (_Mdouble_ __x, _Mdouble_ *__iptr))\n      | ^\n"
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function\n\
    \    // Hint: You can use modf function to decompose a number into integer and\n\
    \    // decimal part.\n    float intpart;\n    float decpart = modf(number, &intpart);\n\
    \    return decpart;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpegkj20mv.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpegkj20mv.cpp:14:34: error: cannot convert \u2018float*\u2019 to \u2018\
    double*\u2019\n   14 |     float decpart = modf(number, &intpart);\n      |  \
    \                                ^~~~~~~~\n      |                           \
    \       |\n      |                                  float*\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:45,\n            \
    \     from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpegkj20mv.cpp:2:\n/usr/include/bits/mathcalls.h:115:1:\
    \ note:   initializing argument 2 of \u2018double modf(double, double*)\u2019\n\
    \  115 | __MATHCALL (modf,, (_Mdouble_ __x, _Mdouble_ *__iptr))\n      | ^\n"
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    int x = number;\n    float y = number - x;\n    return y;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement truncate_number\
    \ function\n    return number - (int)number;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // TODO: implement this function\n\
    \  return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int num = number;\n    float decimal = number - num;\n    return decimal;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement truncate_number\
    \ function\n    return number - (int)number;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int i = number;\n    float f = number - i;\n    return f;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int n = number;\n    float ans = number - n;\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Write your code\
    \ here\n    int intPart = (int)number;\n    float decimalPart = number - intPart;\n\
    \    return decimalPart;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int num = number;\n    float decimal = number - num;\n    return decimal;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int i = number;\n    float f = number - i;\n    return f;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // TODO: Implement this function.\n\
    \  int int_part = (int)number;\n  float dec_part = number - int_part;\n  return\
    \ dec_part;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    return number - integer_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // TODO: implement this function\n\
    \  int a = number;\n  float b = number - a;\n  return b;\n}\nint main() {\n  \
    \  auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int i = number;\n    float j = number - i;\n    return j;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    return number - integer_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    // Hint: you can use modf function to get the integer part and decimal part\n\
    \    // of a floating point number.\n    // http://www.cplusplus.com/reference/cmath/modf/\n\
    \    float integer_part;\n    float decimal_part = modf(number, &integer_part);\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpflnats8c.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpflnats8c.cpp:15:39: error: cannot convert \u2018float*\u2019 to \u2018\
    double*\u2019\n   15 |     float decimal_part = modf(number, &integer_part);\n\
    \      |                                       ^~~~~~~~~~~~~\n      |        \
    \                               |\n      |                                   \
    \    float*\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpflnats8c.cpp:2:\n/usr/include/bits/mathcalls.h:115:1:\
    \ note:   initializing argument 2 of \u2018double modf(double, double*)\u2019\n\
    \  115 | __MATHCALL (modf,, (_Mdouble_ __x, _Mdouble_ *__iptr))\n      | ^\n"
  stdout: ''
  timestamp: 1660058246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function.\n\
    \    return 0.0;\n}\nint main() {\n    auto candidate = truncate_number;\n   \
    \ assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpi1qpdxv1: /tmp/tmpi1qpdxv1.cpp:15: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Write your code\
    \ here\n    return number - (int)number;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int integer_part = (int)number;\n    return number - integer_part;\n}\nint\
    \ main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO\n    return 0.0;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpyu9l6jej: /tmp/tmpyu9l6jej.cpp:15: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int integer = (int)number;\n    float decimal = number - integer;\n    return\
    \ decimal;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement me\n \
    \   int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    return number - a;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function\n\
    \    return 0.0;\n}\nint main() {\n    auto candidate = truncate_number;\n   \
    \ assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpk3wt_1bv: /tmp/tmpk3wt_1bv.cpp:15: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function.\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Write your code\
    \ here\n    int intPart = (int)number;\n    float decimalPart = number - intPart;\n\
    \    return decimalPart;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // TODO: implement this function\n\
    \  return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Write your code\
    \ here\n    int x = number;\n    float y = number - x;\n    return y;\n}\nint\
    \ main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // TODO: implement this function\n\
    \  // Hint: you can use modf() function to decompose a number into integer and\n\
    \  // decimal parts.\n  float integer_part;\n  float decimal_part;\n  decimal_part\
    \ = modf(number, &integer_part);\n  return decimal_part;\n}\nint main() {\n  \
    \  auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpd14xqh51.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpd14xqh51.cpp:15:31: error: cannot convert \u2018float*\u2019 to \u2018\
    double*\u2019\n   15 |   decimal_part = modf(number, &integer_part);\n      |\
    \                               ^~~~~~~~~~~~~\n      |                       \
    \        |\n      |                               float*\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:45,\n            \
    \     from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpd14xqh51.cpp:2:\n/usr/include/bits/mathcalls.h:115:1:\
    \ note:   initializing argument 2 of \u2018double modf(double, double*)\u2019\n\
    \  115 | __MATHCALL (modf,, (_Mdouble_ __x, _Mdouble_ *__iptr))\n      | ^\n"
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ int integer = (int)number;\n  float decimal = number - integer;\n  return decimal;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ int a = (int)number;\n  float b = number - a;\n  return b;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;\n}\nint\
    \ main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int n = number;\n    float m = number - n;\n    return m;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;\n}\nint\
    \ main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int int_part = (int)number;\n\
    \    float decimal_part = number - int_part;\n    return decimal_part;\n}\nint\
    \ main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int temp = (int)number;\n    return number - temp;\n}\nint main() {\n   \
    \ auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function.\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // TODO: Implement this function\n\
    \  return 0.0;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpdbbd8l81: /tmp/tmpdbbd8l81.cpp:15: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int num = number;\n    float dec = number - num;\n    return dec;\n}\nint\
    \ main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int int_part = (int)number;\n\
    \    float decimal_part = number - int_part;\n    return decimal_part;\n}\nint\
    \ main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // TODO: Write your code here\n\
    \  int number_int = number;\n  return number - number_int;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ int a = number;\n  return number - a;\n}\nint main() {\n    auto candidate =\
    \ truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int i = number;\n    return number - i;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function.\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - floor(number);\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058248
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function.\n\
    \    // Hint: You can use modf function to decompose a number into integer and\n\
    \    // decimal parts.\n    // Hint: You can use modf function to decompose a\
    \ number into integer and\n    // decimal parts.\n    float integer_part;\n  \
    \  float decimal_part = modf(number, &integer_part);\n    return decimal_part;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuqh7olmq.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpuqh7olmq.cpp:16:39: error: cannot convert \u2018float*\u2019 to \u2018\
    double*\u2019\n   16 |     float decimal_part = modf(number, &integer_part);\n\
    \      |                                       ^~~~~~~~~~~~~\n      |        \
    \                               |\n      |                                   \
    \    float*\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpuqh7olmq.cpp:2:\n/usr/include/bits/mathcalls.h:115:1:\
    \ note:   initializing argument 2 of \u2018double modf(double, double*)\u2019\n\
    \  115 | __MATHCALL (modf,, (_Mdouble_ __x, _Mdouble_ *__iptr))\n      | ^\n"
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int int_part = (int)number;\n    float dec_part = number - int_part;\n  \
    \  return dec_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ int int_part = (int)number;\n  float decimal_part = number - int_part;\n  return\
    \ decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // TODO: Implement this function.\n\
    \  return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Write your code\
    \ here\n    int x = number;\n    return number - x;\n}\nint main() {\n    auto\
    \ candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = int(number);\n\
    \    return number - integer_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058248
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function.\n\
    \    // Hint: Use modf function to get the integer and decimal part of the number.\n\
    \    // Hint: Use modf function to get the integer and decimal part of the number.\n\
    \    float integer_part;\n    float decimal_part = modf(number, &integer_part);\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphad755uc.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmphad755uc.cpp:14:39: error: cannot convert \u2018float*\u2019 to \u2018\
    double*\u2019\n   14 |     float decimal_part = modf(number, &integer_part);\n\
    \      |                                       ^~~~~~~~~~~~~\n      |        \
    \                               |\n      |                                   \
    \    float*\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n\
    \                 from /tmp/tmphad755uc.cpp:2:\n/usr/include/bits/mathcalls.h:115:1:\
    \ note:   initializing argument 2 of \u2018double modf(double, double*)\u2019\n\
    \  115 | __MATHCALL (modf,, (_Mdouble_ __x, _Mdouble_ *__iptr))\n      | ^\n"
  stdout: ''
  timestamp: 1660058248
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058248
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ int a = number;\n  float b = number - a;\n  return b;\n}\nint main() {\n   \
    \ auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // TODO: Implement this function.\n\
    \  // Hint: You can use modf() function to decompose a number into integer and\n\
    \  // decimal parts.\n  float integer, decimal;\n  decimal = modf(number, &integer);\n\
    \  return decimal;\n}\nint main() {\n    auto candidate = truncate_number;\n \
    \   assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw_kz9q3z.cpp: In function \u2018float truncate_number(float)\u2019\
    :\n/tmp/tmpw_kz9q3z.cpp:14:26: error: cannot convert \u2018float*\u2019 to \u2018\
    double*\u2019\n   14 |   decimal = modf(number, &integer);\n      |          \
    \                ^~~~~~~~\n      |                          |\n      |       \
    \                   float*\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpw_kz9q3z.cpp:2:\n/usr/include/bits/mathcalls.h:115:1:\
    \ note:   initializing argument 2 of \u2018double modf(double, double*)\u2019\n\
    \  115 | __MATHCALL (modf,, (_Mdouble_ __x, _Mdouble_ *__iptr))\n      | ^\n"
  stdout: ''
  timestamp: 1660058248
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int integer = (int)number;\n    float decimal = number - integer;\n    return\
    \ decimal;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    return number - a;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // TODO: Implement this function.\n\
    \  int integer = (int)number;\n  float decimal = number - integer;\n  return decimal;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058248
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int num = number;\n    float decimal = number - num;\n    return decimal;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058246
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ int a = number;\n  float b = number - a;\n  return b;\n}\nint main() {\n   \
    \ auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int x = number;\n    float y = number - x;\n    return y;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ int i = number;\n  float f = number - i;\n  return f;\n}\nint main() {\n   \
    \ auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058248
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO\n    return 0.0;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpyu9l6jej: /tmp/tmpyu9l6jej.cpp:15: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660058247
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function\n\
    \    int integer = (int)number;\n    float decimal = number - integer;\n    return\
    \ decimal;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058248
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int int_part = (int)number;\n\
    \    float dec_part = number - int_part;\n    return dec_part;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058249
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int x = number;\n    float y = number - x;\n    return y;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058245
