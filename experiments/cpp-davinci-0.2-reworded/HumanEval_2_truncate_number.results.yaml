language: cpp
name: HumanEval_2_truncate_number
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int integer = (int)number;\n    float decimal = number - integer;\n    return\
    \ decimal;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int int_part = (int)number;\n\
    \    return number - int_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer = (int)number;\n\
    \    float decimal = number - integer;\n    return decimal;\n}\nint main() {\n\
    \    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int i = number;\n    float\
    \ f = number - i;\n    return f;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    return number - a;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // TODO: Implement this function.\n\
    \  int integer_part = (int)number;\n  float decimal_part = number - integer_part;\n\
    \  return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function\n\
    \    return 0.0;\n}\nint main() {\n    auto candidate = truncate_number;\n   \
    \ assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpoinm63p5: /tmp/tmpoinm63p5.cpp:15: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ int a = number;\n  float b = number - a;\n  return b;\n}\nint main() {\n   \
    \ auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ int a = number;\n  float b = number - a;\n  return b;\n}\nint main() {\n   \
    \ auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int int_part = (int)number;\n\
    \    return number - int_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    int integer = (int)number;\n    float decimal = number - integer;\n    return\
    \ decimal;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int x = number;\n    float y = number - x;\n    return y;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // TODO: Implement this function.\n\
    \  return 0.0;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: Exception
  stderr: 'tmpwhwa5oix: /tmp/tmpwhwa5oix.cpp:15: int main(): Assertion `candidate((3.5))
    == (0.5)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ int a = number;\n  float b = number - a;\n  return b;\n}\nint main() {\n   \
    \ auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    return number - integer_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function.\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement this function\n\
    \    int a = number;\n    return number - a;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // Write your code here\n \
    \ int a = number;\n  float b = number - a;\n  return b;\n}\nint main() {\n   \
    \ auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // TODO: Write your code here\n\
    \  int num = number;\n  return number - num;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n\
    \    return decimal_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  // TODO: implement this function\n\
    \  return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  int integer_part = (int)number;\n\
    \  return number - integer_part;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int integer = (int)number;\n    float decimal = number - integer;\n    return\
    \ decimal;\n}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  int integer_part = (int)number;\n\
    \  float decimal_part = number - integer_part;\n  return decimal_part;\n}\nint\
    \ main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126822
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: implement this function\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int a = number;\n    float b = number - a;\n    return b;\n}\nint main()\
    \ {\n    auto candidate = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n\
    \    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0)) == (0.0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n  return number - (int)number;\n\
    }\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // Write your code here\n\
    \    int x = number;\n    return number - x;\n}\nint main() {\n    auto candidate\
    \ = truncate_number;\n    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25))\
    \ == (0.25));\n    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    // TODO: Implement me!\n\
    \    return number - (int)number;\n}\nint main() {\n    auto candidate = truncate_number;\n\
    \    assert(candidate((3.5)) == (0.5));\n    assert(candidate((1.25)) == (0.25));\n\
    \    assert(candidate((123.0)) == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
    \ point number, it can be decomposed into\n// and integer part (largest integer\
    \ smaller than given number) and decimals\n// (leftover part always smaller than\
    \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
    // (0.5)\nfloat truncate_number(float number) {\n    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\
    int main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
    \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
    \ == (0.0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
