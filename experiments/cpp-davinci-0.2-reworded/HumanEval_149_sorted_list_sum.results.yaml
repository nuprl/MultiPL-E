language: cpp
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    std::string prev = \"\";\n    for (std::string s : lst) {\n        if (s.length()\
    \ % 2 == 0 && s != prev) {\n            result.push_back(s);\n            prev\
    \ = s;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr96wzee5.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmpr96wzee5.cpp:22:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : lst) {\n                          ^\n/tmp/tmpr96wzee5.cpp: In function 'int\
    \ main()':\n/tmp/tmpr96wzee5.cpp:31:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sorted_list_sum;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr96wzee5.cpp:2:\n/tmp/tmpr96wzee5.cpp:32:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpr96wzee5.cpp:32:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpr96wzee5.cpp:32:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpr96wzee5.cpp:32:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpr96wzee5.cpp:32:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpr96wzee5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (auto i : lst) {\n   \
    \     if (i.length() % 2 == 0) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohi28zy0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmpohi28zy0.cpp:20:15:\
    \ error: 'i' does not name a type\n     for (auto i : lst) {\n               ^\n\
    /tmp/tmpohi28zy0.cpp:25:5: error: expected ';' before 'std'\n     std::sort(result.begin(),\
    \ result.end());\n     ^\n/tmp/tmpohi28zy0.cpp:25:43: error: could not convert\
    \ 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*, std::vector<std::basic_string<char>\
    \ > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmpohi28zy0.cpp:26:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpohi28zy0.cpp:26:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpohi28zy0.cpp: In function 'int\
    \ main()':\n/tmp/tmpohi28zy0.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sorted_list_sum;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpohi28zy0.cpp:2:\n/tmp/tmpohi28zy0.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpohi28zy0.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0) {\n         \
    \   result.push_back(lst[i]);\n        } else if (lst[i] != lst[i - 1]) {\n  \
    \          result.push_back(lst[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrxjz2n_.cpp: In function 'int main()':\n/tmp/tmphrxjz2n_.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/tmp/tmphrxjz2n_.cpp:32:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmphrxjz2n_.cpp:32:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmphrxjz2n_.cpp:32:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmphrxjz2n_.cpp:32:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmphrxjz2n_.cpp:32:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0) {\n         \
    \   result.push_back(lst[i]);\n        } else if (lst[i] != lst[i - 1]) {\n  \
    \          result.push_back(lst[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrxjz2n_.cpp: In function 'int main()':\n/tmp/tmphrxjz2n_.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/tmp/tmphrxjz2n_.cpp:32:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmphrxjz2n_.cpp:32:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmphrxjz2n_.cpp:32:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmphrxjz2n_.cpp:32:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmphrxjz2n_.cpp:32:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::string temp;\n    for\
    \ (int i = 0; i < lst.size(); i++) {\n        for (int j = i + 1; j < lst.size();\
    \ j++) {\n            if (lst[i].length() > lst[j].length()) {\n             \
    \   temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] =\
    \ temp;\n            }\n        }\n    }\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sorted_list_sum;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"aa\", (std::string)\"\
    a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"aa\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp74j_j9qx.cpp: In function 'int main()':\n/tmp/tmp74j_j9qx.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp74j_j9qx.cpp:2:\n/tmp/tmp74j_j9qx.cpp:39:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmp74j_j9qx.cpp:39:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmp74j_j9qx.cpp:39:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp74j_j9qx.cpp:39:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp74j_j9qx.cpp:39:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp74j_j9qx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    int len = lst.size();\n    for (int i = 0; i < len; i++) {\n        if (i\
    \ == 0) {\n            result.push_back(lst[i]);\n        } else {\n         \
    \   if (lst[i] != lst[i - 1]) {\n                result.push_back(lst[i]);\n \
    \           }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps7lyuopd.cpp: In function 'int main()':\n/tmp/tmps7lyuopd.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps7lyuopd.cpp:2:\n/tmp/tmps7lyuopd.cpp:35:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmps7lyuopd.cpp:35:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmps7lyuopd.cpp:35:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmps7lyuopd.cpp:35:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmps7lyuopd.cpp:35:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmps7lyuopd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() % 2 ==\
    \ 0) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuklj1k_m.cpp: In function 'int main()':\n/tmp/tmpuklj1k_m.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuklj1k_m.cpp:2:\n/tmp/tmpuklj1k_m.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpuklj1k_m.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpuklj1k_m.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpuklj1k_m.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpuklj1k_m.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuklj1k_m.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    int len = lst.size();\n    for (int i = 0; i < len; i++) {\n        if (i\
    \ == 0) {\n            result.push_back(lst[i]);\n        } else {\n         \
    \   if (lst[i] != lst[i - 1]) {\n                result.push_back(lst[i]);\n \
    \           }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps7lyuopd.cpp: In function 'int main()':\n/tmp/tmps7lyuopd.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps7lyuopd.cpp:2:\n/tmp/tmps7lyuopd.cpp:35:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmps7lyuopd.cpp:35:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmps7lyuopd.cpp:35:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmps7lyuopd.cpp:35:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmps7lyuopd.cpp:35:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmps7lyuopd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> res;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            res.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprolsbha4.cpp: In function 'int main()':\n/tmp/tmprolsbha4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprolsbha4.cpp:2:\n/tmp/tmprolsbha4.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmprolsbha4.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmprolsbha4.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmprolsbha4.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmprolsbha4.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmprolsbha4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0) {\n         \
    \   result.push_back(lst[i]);\n        } else if (lst[i] != lst[i - 1]) {\n  \
    \          result.push_back(lst[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrxjz2n_.cpp: In function 'int main()':\n/tmp/tmphrxjz2n_.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/tmp/tmphrxjz2n_.cpp:32:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmphrxjz2n_.cpp:32:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmphrxjz2n_.cpp:32:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmphrxjz2n_.cpp:32:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmphrxjz2n_.cpp:32:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> res;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            res.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprolsbha4.cpp: In function 'int main()':\n/tmp/tmprolsbha4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprolsbha4.cpp:2:\n/tmp/tmprolsbha4.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmprolsbha4.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmprolsbha4.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmprolsbha4.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmprolsbha4.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmprolsbha4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (auto i : lst) {\n   \
    \     if (i.length() % 2 == 0) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohi28zy0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmpohi28zy0.cpp:20:15:\
    \ error: 'i' does not name a type\n     for (auto i : lst) {\n               ^\n\
    /tmp/tmpohi28zy0.cpp:25:5: error: expected ';' before 'std'\n     std::sort(result.begin(),\
    \ result.end());\n     ^\n/tmp/tmpohi28zy0.cpp:25:43: error: could not convert\
    \ 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*, std::vector<std::basic_string<char>\
    \ > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmpohi28zy0.cpp:26:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpohi28zy0.cpp:26:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpohi28zy0.cpp: In function 'int\
    \ main()':\n/tmp/tmpohi28zy0.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sorted_list_sum;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpohi28zy0.cpp:2:\n/tmp/tmpohi28zy0.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpohi28zy0.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0) {\n         \
    \   result.push_back(lst[i]);\n        } else if (lst[i] != lst[i - 1]) {\n  \
    \          result.push_back(lst[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrxjz2n_.cpp: In function 'int main()':\n/tmp/tmphrxjz2n_.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/tmp/tmphrxjz2n_.cpp:32:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmphrxjz2n_.cpp:32:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmphrxjz2n_.cpp:32:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmphrxjz2n_.cpp:32:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmphrxjz2n_.cpp:32:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0) {\n         \
    \   result.push_back(lst[i]);\n        } else if (lst[i] != lst[i - 1]) {\n  \
    \          result.push_back(lst[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrxjz2n_.cpp: In function 'int main()':\n/tmp/tmphrxjz2n_.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/tmp/tmphrxjz2n_.cpp:32:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmphrxjz2n_.cpp:32:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmphrxjz2n_.cpp:32:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmphrxjz2n_.cpp:32:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmphrxjz2n_.cpp:32:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0) {\n         \
    \   result.push_back(lst[i]);\n        } else if (lst[i] != lst[i - 1]) {\n  \
    \          result.push_back(lst[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrxjz2n_.cpp: In function 'int main()':\n/tmp/tmphrxjz2n_.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/tmp/tmphrxjz2n_.cpp:32:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmphrxjz2n_.cpp:32:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmphrxjz2n_.cpp:32:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmphrxjz2n_.cpp:32:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmphrxjz2n_.cpp:32:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    int len = lst.size();\n    for (int i = 0; i < len; i++) {\n        if (lst[i].length()\
    \ % 2 == 0) {\n            result.push_back(lst[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnbzvo1dv.cpp: In function 'int main()':\n/tmp/tmpnbzvo1dv.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnbzvo1dv.cpp:2:\n/tmp/tmpnbzvo1dv.cpp:31:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpnbzvo1dv.cpp:31:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpnbzvo1dv.cpp:31:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpnbzvo1dv.cpp:31:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpnbzvo1dv.cpp:31:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpnbzvo1dv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0) {\n         \
    \   result.push_back(lst[i]);\n        } else if (lst[i] != lst[i - 1]) {\n  \
    \          result.push_back(lst[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrxjz2n_.cpp: In function 'int main()':\n/tmp/tmphrxjz2n_.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/tmp/tmphrxjz2n_.cpp:32:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmphrxjz2n_.cpp:32:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmphrxjz2n_.cpp:32:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmphrxjz2n_.cpp:32:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmphrxjz2n_.cpp:32:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0) {\n         \
    \   result.push_back(lst[i]);\n        } else if (lst[i] != lst[i - 1]) {\n  \
    \          result.push_back(lst[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrxjz2n_.cpp: In function 'int main()':\n/tmp/tmphrxjz2n_.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/tmp/tmphrxjz2n_.cpp:32:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmphrxjz2n_.cpp:32:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmphrxjz2n_.cpp:32:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmphrxjz2n_.cpp:32:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmphrxjz2n_.cpp:32:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    std::string prev = \"\";\n    for (auto i = lst.begin(); i != lst.end();\
    \ i++) {\n        if (prev != *i) {\n            result.push_back(*i);\n     \
    \       prev = *i;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe81l937p.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmpe81l937p.cpp:22:15:\
    \ error: 'i' does not name a type\n     for (auto i = lst.begin(); i != lst.end();\
    \ i++) {\n               ^\n/tmp/tmpe81l937p.cpp:22:32: error: expected ';' before\
    \ 'i'\n     for (auto i = lst.begin(); i != lst.end(); i++) {\n              \
    \                  ^\n/tmp/tmpe81l937p.cpp:22:32: error: 'i' was not declared\
    \ in this scope\n/tmp/tmpe81l937p.cpp: In function 'int main()':\n/tmp/tmpe81l937p.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe81l937p.cpp:2:\n/tmp/tmpe81l937p.cpp:32:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpe81l937p.cpp:32:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpe81l937p.cpp:32:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpe81l937p.cpp:32:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpe81l937p.cpp:32:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 fr"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (auto i : lst) {\n   \
    \     if (i.length() % 2 == 0) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohi28zy0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmpohi28zy0.cpp:20:15:\
    \ error: 'i' does not name a type\n     for (auto i : lst) {\n               ^\n\
    /tmp/tmpohi28zy0.cpp:25:5: error: expected ';' before 'std'\n     std::sort(result.begin(),\
    \ result.end());\n     ^\n/tmp/tmpohi28zy0.cpp:25:43: error: could not convert\
    \ 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*, std::vector<std::basic_string<char>\
    \ > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmpohi28zy0.cpp:26:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpohi28zy0.cpp:26:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpohi28zy0.cpp: In function 'int\
    \ main()':\n/tmp/tmpohi28zy0.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sorted_list_sum;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpohi28zy0.cpp:2:\n/tmp/tmpohi28zy0.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpohi28zy0.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (auto i : lst) {\n   \
    \     if (i.length() % 2 == 0) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohi28zy0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmpohi28zy0.cpp:20:15:\
    \ error: 'i' does not name a type\n     for (auto i : lst) {\n               ^\n\
    /tmp/tmpohi28zy0.cpp:25:5: error: expected ';' before 'std'\n     std::sort(result.begin(),\
    \ result.end());\n     ^\n/tmp/tmpohi28zy0.cpp:25:43: error: could not convert\
    \ 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*, std::vector<std::basic_string<char>\
    \ > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmpohi28zy0.cpp:26:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpohi28zy0.cpp:26:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpohi28zy0.cpp: In function 'int\
    \ main()':\n/tmp/tmpohi28zy0.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sorted_list_sum;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpohi28zy0.cpp:2:\n/tmp/tmpohi28zy0.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpohi28zy0.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> res;\n    std::string temp;\n    for (int\
    \ i = 0; i < lst.size(); i++) {\n        for (int j = i + 1; j < lst.size(); j++)\
    \ {\n            if (lst[i].length() > lst[j].length()) {\n                temp\
    \ = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n\
    \            }\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n\
    \        if (lst[i].length() % 2 == 0) {\n            res.push_back(lst[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = sorted_list_sum;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"aa\", (std::string)\"\
    a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"aa\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphql7ho0g.cpp: In function 'int main()':\n/tmp/tmphql7ho0g.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphql7ho0g.cpp:2:\n/tmp/tmphql7ho0g.cpp:39:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmphql7ho0g.cpp:39:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmphql7ho0g.cpp:39:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmphql7ho0g.cpp:39:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmphql7ho0g.cpp:39:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphql7ho0g.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0) {\n         \
    \   result.push_back(lst[i]);\n        } else {\n            if (lst[i] != lst[i\
    \ - 1]) {\n                result.push_back(lst[i]);\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = sorted_list_sum;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"aa\", (std::string)\"\
    a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"aa\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbpghitud.cpp: In function 'int main()':\n/tmp/tmpbpghitud.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbpghitud.cpp:2:\n/tmp/tmpbpghitud.cpp:34:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpbpghitud.cpp:34:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpbpghitud.cpp:34:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpbpghitud.cpp:34:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpbpghitud.cpp:34:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbpghitud.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0 || lst[i] != lst[i\
    \ - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuxhji6jz.cpp: In function 'int main()':\n/tmp/tmpuxhji6jz.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuxhji6jz.cpp:2:\n/tmp/tmpuxhji6jz.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpuxhji6jz.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpuxhji6jz.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpuxhji6jz.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpuxhji6jz.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuxhji6jz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0) {\n         \
    \   result.push_back(lst[i]);\n        } else {\n            if (lst[i] != lst[i\
    \ - 1]) {\n                result.push_back(lst[i]);\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = sorted_list_sum;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"aa\", (std::string)\"\
    a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"aa\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbpghitud.cpp: In function 'int main()':\n/tmp/tmpbpghitud.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbpghitud.cpp:2:\n/tmp/tmpbpghitud.cpp:34:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpbpghitud.cpp:34:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpbpghitud.cpp:34:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpbpghitud.cpp:34:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpbpghitud.cpp:34:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbpghitud.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (auto &i : lst) {\n  \
    \      if (i.size() % 2 == 0) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::string a, std::string\
    \ b) {\n        if (a.size() == b.size()) {\n            return a < b;\n     \
    \   }\n        return a.size() < b.size();\n    });\n    return result;\n}\nint\
    \ main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgn9qbora.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmpgn9qbora.cpp:20:16:\
    \ error: ISO C++ forbids declaration of 'i' with no type [-fpermissive]\n    \
    \ for (auto &i : lst) {\n                ^\n/tmp/tmpgn9qbora.cpp:20:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &i : lst)\
    \ {\n                    ^\n/tmp/tmpgn9qbora.cpp:21:15: error: request for member\
    \ 'size' in 'i', which is of non-class type 'int'\n         if (i.size() % 2 ==\
    \ 0) {\n               ^\n/tmp/tmpgn9qbora.cpp:22:31: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(i);\n                        \
    \       ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n       \
    \          from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgn9qbora.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpgn9qbora.cpp:22:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(i);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgn9qbora.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0 || lst[i] != lst[i\
    \ - 1]) {\n            result.push_back(lst[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuxhji6jz.cpp: In function 'int main()':\n/tmp/tmpuxhji6jz.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuxhji6jz.cpp:2:\n/tmp/tmpuxhji6jz.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpuxhji6jz.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpuxhji6jz.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpuxhji6jz.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpuxhji6jz.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuxhji6jz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    while (i < lst.size()) {\n        int j = i + 1;\n      \
    \  while (j < lst.size() && lst[i] == lst[j]) {\n            j++;\n        }\n\
    \        if ((j - i) % 2 == 0) {\n            result.push_back(lst[i]);\n    \
    \    }\n        i = j;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpub9q0or6.cpp: In function 'int main()':\n/tmp/tmpub9q0or6.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpub9q0or6.cpp:2:\n/tmp/tmpub9q0or6.cpp:36:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpub9q0or6.cpp:36:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpub9q0or6.cpp:36:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpub9q0or6.cpp:36:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpub9q0or6.cpp:36:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpub9q0or6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0) {\n         \
    \   result.push_back(lst[i]);\n        } else {\n            if (lst[i] != lst[i\
    \ - 1]) {\n                result.push_back(lst[i]);\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = sorted_list_sum;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"aa\", (std::string)\"\
    a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"aa\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbpghitud.cpp: In function 'int main()':\n/tmp/tmpbpghitud.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbpghitud.cpp:2:\n/tmp/tmpbpghitud.cpp:34:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpbpghitud.cpp:34:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpbpghitud.cpp:34:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpbpghitud.cpp:34:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpbpghitud.cpp:34:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbpghitud.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (auto i : lst) {\n   \
    \     if (i.length() % 2 == 0) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohi28zy0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmpohi28zy0.cpp:20:15:\
    \ error: 'i' does not name a type\n     for (auto i : lst) {\n               ^\n\
    /tmp/tmpohi28zy0.cpp:25:5: error: expected ';' before 'std'\n     std::sort(result.begin(),\
    \ result.end());\n     ^\n/tmp/tmpohi28zy0.cpp:25:43: error: could not convert\
    \ 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*, std::vector<std::basic_string<char>\
    \ > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmpohi28zy0.cpp:26:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpohi28zy0.cpp:26:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpohi28zy0.cpp: In function 'int\
    \ main()':\n/tmp/tmpohi28zy0.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sorted_list_sum;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpohi28zy0.cpp:2:\n/tmp/tmpohi28zy0.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpohi28zy0.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> lst_new;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            lst_new.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(lst_new.begin(), lst_new.end());\n    return\
    \ lst_new;\n}\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppzu1u_m9.cpp: In function 'int main()':\n/tmp/tmppzu1u_m9.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppzu1u_m9.cpp:2:\n/tmp/tmppzu1u_m9.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmppzu1u_m9.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmppzu1u_m9.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmppzu1u_m9.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmppzu1u_m9.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmppzu1u_m9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = i +\
    \ 1; j < lst.size(); j++) {\n            if (lst[i].length() > lst[j].length())\
    \ {\n                std::string temp = lst[i];\n                lst[i] = lst[j];\n\
    \                lst[j] = temp;\n            }\n        }\n    }\n    return lst;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpygwmq1x8.cpp: In function 'int main()':\n/tmp/tmpygwmq1x8.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpygwmq1x8.cpp:2:\n/tmp/tmpygwmq1x8.cpp:32:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpygwmq1x8.cpp:32:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpygwmq1x8.cpp:32:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpygwmq1x8.cpp:32:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpygwmq1x8.cpp:32:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpygwmq1x8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (auto &i : lst) {\n  \
    \      if (i.size() % 2 == 0) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::string a, std::string\
    \ b) {\n        if (a.size() == b.size()) {\n            return a < b;\n     \
    \   }\n        return a.size() < b.size();\n    });\n    return result;\n}\nint\
    \ main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgn9qbora.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmpgn9qbora.cpp:20:16:\
    \ error: ISO C++ forbids declaration of 'i' with no type [-fpermissive]\n    \
    \ for (auto &i : lst) {\n                ^\n/tmp/tmpgn9qbora.cpp:20:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &i : lst)\
    \ {\n                    ^\n/tmp/tmpgn9qbora.cpp:21:15: error: request for member\
    \ 'size' in 'i', which is of non-class type 'int'\n         if (i.size() % 2 ==\
    \ 0) {\n               ^\n/tmp/tmpgn9qbora.cpp:22:31: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(i);\n                        \
    \       ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n       \
    \          from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgn9qbora.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpgn9qbora.cpp:22:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(i);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgn9qbora.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    std::string last = \"\";\n    for (auto i : lst) {\n        if (i != last)\
    \ {\n            result.push_back(i);\n            last = i;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = sorted_list_sum;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"aa\", (std::string)\"\
    a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"aa\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4y3h_go8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmp4y3h_go8.cpp:22:15:\
    \ error: 'i' does not name a type\n     for (auto i : lst) {\n               ^\n\
    /tmp/tmp4y3h_go8.cpp:28:5: error: expected ';' before 'return'\n     return result;\n\
    \     ^\n/tmp/tmp4y3h_go8.cpp:28:5: error: expected primary-expression before\
    \ 'return'\n/tmp/tmp4y3h_go8.cpp:28:5: error: expected ';' before 'return'\n/tmp/tmp4y3h_go8.cpp:28:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp4y3h_go8.cpp:28:5:\
    \ error: expected ')' before 'return'\n/tmp/tmp4y3h_go8.cpp: In function 'int\
    \ main()':\n/tmp/tmp4y3h_go8.cpp:31:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sorted_list_sum;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4y3h_go8.cpp:2:\n/tmp/tmp4y3h_go8.cpp:32:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmp4y3h_go8.cpp:32:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmp4y3h_go8.cpp:32:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp4y3h_go8.cpp:32:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp4y3h_go8.cpp:32:105: note: candidates are:\nIn file"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> res;\n    std::sort(lst.begin(), lst.end());\n\
    \    int len = lst.size();\n    for (int i = 0; i < len; i++) {\n        if (i\
    \ == 0) {\n            res.push_back(lst[i]);\n        } else {\n            if\
    \ (lst[i] != lst[i - 1]) {\n                res.push_back(lst[i]);\n         \
    \   }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp66iqa0wt.cpp: In function 'int main()':\n/tmp/tmp66iqa0wt.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp66iqa0wt.cpp:2:\n/tmp/tmp66iqa0wt.cpp:35:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmp66iqa0wt.cpp:35:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmp66iqa0wt.cpp:35:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp66iqa0wt.cpp:35:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp66iqa0wt.cpp:35:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp66iqa0wt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> res;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0) {\n         \
    \   res.push_back(lst[i]);\n        } else {\n            if (lst[i] != lst[i\
    \ - 1]) {\n                res.push_back(lst[i]);\n            }\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = sorted_list_sum;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"aa\", (std::string)\"\
    a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"aa\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxrtmqobw.cpp: In function 'int main()':\n/tmp/tmpxrtmqobw.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxrtmqobw.cpp:2:\n/tmp/tmpxrtmqobw.cpp:34:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpxrtmqobw.cpp:34:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpxrtmqobw.cpp:34:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpxrtmqobw.cpp:34:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpxrtmqobw.cpp:34:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpxrtmqobw.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (auto i : lst) {\n   \
    \     if (i.length() % 2 == 0) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohi28zy0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmpohi28zy0.cpp:20:15:\
    \ error: 'i' does not name a type\n     for (auto i : lst) {\n               ^\n\
    /tmp/tmpohi28zy0.cpp:25:5: error: expected ';' before 'std'\n     std::sort(result.begin(),\
    \ result.end());\n     ^\n/tmp/tmpohi28zy0.cpp:25:43: error: could not convert\
    \ 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*, std::vector<std::basic_string<char>\
    \ > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmpohi28zy0.cpp:26:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpohi28zy0.cpp:26:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpohi28zy0.cpp: In function 'int\
    \ main()':\n/tmp/tmpohi28zy0.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sorted_list_sum;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpohi28zy0.cpp:2:\n/tmp/tmpohi28zy0.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpohi28zy0.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (auto i : lst) {\n   \
    \     if (i.length() % 2 == 0) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohi28zy0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmpohi28zy0.cpp:20:15:\
    \ error: 'i' does not name a type\n     for (auto i : lst) {\n               ^\n\
    /tmp/tmpohi28zy0.cpp:25:5: error: expected ';' before 'std'\n     std::sort(result.begin(),\
    \ result.end());\n     ^\n/tmp/tmpohi28zy0.cpp:25:43: error: could not convert\
    \ 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*, std::vector<std::basic_string<char>\
    \ > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmpohi28zy0.cpp:26:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpohi28zy0.cpp:26:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpohi28zy0.cpp: In function 'int\
    \ main()':\n/tmp/tmpohi28zy0.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sorted_list_sum;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpohi28zy0.cpp:2:\n/tmp/tmpohi28zy0.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpohi28zy0.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (auto i = lst.begin();\
    \ i != lst.end(); i++) {\n        if (i->length() % 2 == 0) {\n            result.push_back(*i);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy47ncte1.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmpy47ncte1.cpp:20:15:\
    \ error: 'i' does not name a type\n     for (auto i = lst.begin(); i != lst.end();\
    \ i++) {\n               ^\n/tmp/tmpy47ncte1.cpp:20:32: error: expected ';' before\
    \ 'i'\n     for (auto i = lst.begin(); i != lst.end(); i++) {\n              \
    \                  ^\n/tmp/tmpy47ncte1.cpp:20:32: error: 'i' was not declared\
    \ in this scope\n/tmp/tmpy47ncte1.cpp: In function 'int main()':\n/tmp/tmpy47ncte1.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy47ncte1.cpp:2:\n/tmp/tmpy47ncte1.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpy47ncte1.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpy47ncte1.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpy47ncte1.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpy47ncte1.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 fr"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (auto i : lst) {\n   \
    \     if (i.length() % 2 == 0) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohi28zy0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmpohi28zy0.cpp:20:15:\
    \ error: 'i' does not name a type\n     for (auto i : lst) {\n               ^\n\
    /tmp/tmpohi28zy0.cpp:25:5: error: expected ';' before 'std'\n     std::sort(result.begin(),\
    \ result.end());\n     ^\n/tmp/tmpohi28zy0.cpp:25:43: error: could not convert\
    \ 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*, std::vector<std::basic_string<char>\
    \ > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmpohi28zy0.cpp:26:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpohi28zy0.cpp:26:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpohi28zy0.cpp: In function 'int\
    \ main()':\n/tmp/tmpohi28zy0.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sorted_list_sum;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpohi28zy0.cpp:2:\n/tmp/tmpohi28zy0.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpohi28zy0.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0) {\n         \
    \   result.push_back(lst[i]);\n        } else if (lst[i] != lst[i - 1]) {\n  \
    \          result.push_back(lst[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrxjz2n_.cpp: In function 'int main()':\n/tmp/tmphrxjz2n_.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/tmp/tmphrxjz2n_.cpp:32:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmphrxjz2n_.cpp:32:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmphrxjz2n_.cpp:32:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmphrxjz2n_.cpp:32:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmphrxjz2n_.cpp:32:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() % 2 ==\
    \ 0) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuklj1k_m.cpp: In function 'int main()':\n/tmp/tmpuklj1k_m.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuklj1k_m.cpp:2:\n/tmp/tmpuklj1k_m.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpuklj1k_m.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpuklj1k_m.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpuklj1k_m.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpuklj1k_m.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuklj1k_m.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n  std::vector<std::string> result;\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (lst[i].length() % 2 == 0) {\n      result.push_back(lst[i]);\n\
    \    }\n  }\n  std::sort(result.begin(), result.end());\n  return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwcb6lmjs.cpp: In function 'int main()':\n/tmp/tmpwcb6lmjs.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwcb6lmjs.cpp:2:\n/tmp/tmpwcb6lmjs.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpwcb6lmjs.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpwcb6lmjs.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpwcb6lmjs.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpwcb6lmjs.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpwcb6lmjs.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> res;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0 || lst[i] != lst[i\
    \ - 1]) {\n            res.push_back(lst[i]);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ouqcylx.cpp: In function 'int main()':\n/tmp/tmp1ouqcylx.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1ouqcylx.cpp:2:\n/tmp/tmp1ouqcylx.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmp1ouqcylx.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmp1ouqcylx.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp1ouqcylx.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp1ouqcylx.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp1ouqcylx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (auto& i : lst) {\n  \
    \      if (i.size() % 2 == 0) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::string a, std::string\
    \ b) {\n        if (a.size() == b.size()) {\n            return a < b;\n     \
    \   }\n        return a.size() < b.size();\n    });\n    return result;\n}\nint\
    \ main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcz1gne9l.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmpcz1gne9l.cpp:20:16:\
    \ error: ISO C++ forbids declaration of 'i' with no type [-fpermissive]\n    \
    \ for (auto& i : lst) {\n                ^\n/tmp/tmpcz1gne9l.cpp:20:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto& i : lst)\
    \ {\n                    ^\n/tmp/tmpcz1gne9l.cpp:21:15: error: request for member\
    \ 'size' in 'i', which is of non-class type 'int'\n         if (i.size() % 2 ==\
    \ 0) {\n               ^\n/tmp/tmpcz1gne9l.cpp:22:31: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(i);\n                        \
    \       ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n       \
    \          from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcz1gne9l.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpcz1gne9l.cpp:22:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(i);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcz1gne9l.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (std::string str : lst)\
    \ {\n        if (str.length() % 2 == 0) {\n            result.push_back(str);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzzkz2w9c.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmpzzkz2w9c.cpp:20:28:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ str : lst) {\n                            ^\n/tmp/tmpzzkz2w9c.cpp: In function\
    \ 'int main()':\n/tmp/tmpzzkz2w9c.cpp:29:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = sorted_list_sum;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzzkz2w9c.cpp:2:\n/tmp/tmpzzkz2w9c.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpzzkz2w9c.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpzzkz2w9c.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpzzkz2w9c.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpzzkz2w9c.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpzzkz2w9c.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() % 2 ==\
    \ 0) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuklj1k_m.cpp: In function 'int main()':\n/tmp/tmpuklj1k_m.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuklj1k_m.cpp:2:\n/tmp/tmpuklj1k_m.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpuklj1k_m.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpuklj1k_m.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpuklj1k_m.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpuklj1k_m.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuklj1k_m.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (auto i : lst) {\n   \
    \     if (i.length() % 2 == 0) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohi28zy0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmpohi28zy0.cpp:20:15:\
    \ error: 'i' does not name a type\n     for (auto i : lst) {\n               ^\n\
    /tmp/tmpohi28zy0.cpp:25:5: error: expected ';' before 'std'\n     std::sort(result.begin(),\
    \ result.end());\n     ^\n/tmp/tmpohi28zy0.cpp:25:43: error: could not convert\
    \ 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*, std::vector<std::basic_string<char>\
    \ > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmpohi28zy0.cpp:26:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpohi28zy0.cpp:26:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpohi28zy0.cpp: In function 'int\
    \ main()':\n/tmp/tmpohi28zy0.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sorted_list_sum;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpohi28zy0.cpp:2:\n/tmp/tmpohi28zy0.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpohi28zy0.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i].length() % 2 == 0) {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz049vui6.cpp: In function 'int main()':\n/tmp/tmpz049vui6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/tmp/tmpz049vui6.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpz049vui6.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpz049vui6.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpz049vui6.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz049vui6.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz049vui6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (auto i : lst) {\n   \
    \     if (i.length() % 2 == 0) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohi28zy0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmpohi28zy0.cpp:20:15:\
    \ error: 'i' does not name a type\n     for (auto i : lst) {\n               ^\n\
    /tmp/tmpohi28zy0.cpp:25:5: error: expected ';' before 'std'\n     std::sort(result.begin(),\
    \ result.end());\n     ^\n/tmp/tmpohi28zy0.cpp:25:43: error: could not convert\
    \ 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*, std::vector<std::basic_string<char>\
    \ > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmpohi28zy0.cpp:26:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpohi28zy0.cpp:26:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpohi28zy0.cpp: In function 'int\
    \ main()':\n/tmp/tmpohi28zy0.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sorted_list_sum;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpohi28zy0.cpp:2:\n/tmp/tmpohi28zy0.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpohi28zy0.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] != lst[i + 1])\
    \ {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrk2jw5c.cpp: In function 'int main()':\n/tmp/tmpbrk2jw5c.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrk2jw5c.cpp:2:\n/tmp/tmpbrk2jw5c.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpbrk2jw5c.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpbrk2jw5c.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpbrk2jw5c.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpbrk2jw5c.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbrk2jw5c.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() % 2 ==\
    \ 0) {\n            result.push_back(lst[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuklj1k_m.cpp: In function 'int main()':\n/tmp/tmpuklj1k_m.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuklj1k_m.cpp:2:\n/tmp/tmpuklj1k_m.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmpuklj1k_m.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmpuklj1k_m.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpuklj1k_m.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpuklj1k_m.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuklj1k_m.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (std::string s : lst)\
    \ {\n        if (s.length() % 2 == 0) {\n            result.push_back(s);\n  \
    \      }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps6sx6dwl.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmps6sx6dwl.cpp:20:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : lst) {\n                          ^\n/tmp/tmps6sx6dwl.cpp: In function 'int\
    \ main()':\n/tmp/tmps6sx6dwl.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sorted_list_sum;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps6sx6dwl.cpp:2:\n/tmp/tmps6sx6dwl.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmps6sx6dwl.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmps6sx6dwl.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmps6sx6dwl.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmps6sx6dwl.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmps6sx6dwl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    for (std::string s : lst)\
    \ {\n        if (s.length() % 2 == 0) {\n            result.push_back(s);\n  \
    \      }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps6sx6dwl.cpp: In function 'std::vector<std::basic_string<char>\
    \ > sorted_list_sum(std::vector<std::basic_string<char> >)':\n/tmp/tmps6sx6dwl.cpp:20:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : lst) {\n                          ^\n/tmp/tmps6sx6dwl.cpp: In function 'int\
    \ main()':\n/tmp/tmps6sx6dwl.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sorted_list_sum;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps6sx6dwl.cpp:2:\n/tmp/tmps6sx6dwl.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmps6sx6dwl.cpp:30:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmps6sx6dwl.cpp:30:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmps6sx6dwl.cpp:30:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmps6sx6dwl.cpp:30:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmps6sx6dwl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings as a parameter,\n// deletes the strings that have\
    \ odd lengths from it,\n// and returns the resulted vector with a sorted order,\n\
    // The vector is always a vector of strings and never a vector of numbers,\n//\
    \ and it may contain duplicates.\n// The order of the vector should be ascending\
    \ by length of each word, and you\n// should return the vector sorted by that\
    \ rule.\n// If two words have the same length, sort the vector alphabetically.\n\
    // The function should return a vector of strings in sorted order.\n// You may\
    \ assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
    aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
    a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
    ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
    \ lst) {\n    std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i == 0) {\n         \
    \   result.push_back(lst[i]);\n        } else if (lst[i] != lst[i - 1]) {\n  \
    \          result.push_back(lst[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
    , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
    dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
    abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
    AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
    c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) ==\
    \ (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"\
    aaaa\", (std::string)\"bbbb\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrxjz2n_.cpp: In function 'int main()':\n/tmp/tmphrxjz2n_.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sorted_list_sum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/tmp/tmphrxjz2n_.cpp:32:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                               ^\n/tmp/tmphrxjz2n_.cpp:32:105:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
    aa\"})));\n                                                                  \
    \                                       ^\n/tmp/tmphrxjz2n_.cpp:32:105: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmphrxjz2n_.cpp:32:105: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmphrxjz2n_.cpp:32:105: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphrxjz2n_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
