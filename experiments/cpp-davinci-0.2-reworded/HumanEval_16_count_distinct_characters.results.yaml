language: cpp
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ your code goes here\n    int count = 0;\n    std::set<char> s;\n    for(int\
    \ i = 0; i < string.length(); i++){\n        s.insert(tolower(string[i]));\n \
    \   }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\t//\
    \ your code goes here\n\tstd::set<char> s;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\ts.insert(tolower(string[i]));\n\t}\n\treturn s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ count = 0;\n\tstd::string temp = \"\";\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (temp.find(tolower(string[i])) == std::string::npos) {\n\t\t\t\
    temp += tolower(string[i]);\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ Your code here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmp6t_7vbh6: /tmp/tmp6t_7vbh6.cpp:20: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    int\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s;\n    for (int\
    \ i = 0; i < string.length(); i++) {\n        s.insert(string[i]);\n    }\n  \
    \  return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++){\n        if(string[i]\
    \ != ' '){\n            count++;\n            for(int j = i+1; j < string.length();\
    \ j++){\n                if(string[i] == string[j]){\n                    string[j]\
    \ = ' ';\n                }\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpsbw0alhx: /tmp/tmpsbw0alhx.cpp:26: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ your code goes here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ Your code goes here\n    long count = 0;\n    std::set<char> s;\n    for(int\
    \ i = 0; i < string.length(); i++){\n        s.insert(tolower(string[i]));\n \
    \   }\n    count = s.size();\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ Your code here\n    long count=0;\n    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    count=s.size();\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(char c : string) {\n        s.insert(tolower(c));\n    }\n    return\
    \ s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    for (int i = 0; i < string.length(); i++) {\n        set.insert(tolower(string[i]));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmp2xoetswk: /tmp/tmp2xoetswk.cpp:20: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    for (int i = 0; i < string.length(); i++) {\n        set.insert(tolower(string[i]));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s;\n    for (int\
    \ i = 0; i < string.length(); i++) {\n        s.insert(string[i]);\n    }\n  \
    \  return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s(string.begin(),\
    \ string.end());\n    return s.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> myset;\n    for(int i = 0; i < string.length();\
    \ i++){\n        myset.insert(tolower(string[i]));\n    }\n    return myset.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ your code goes here\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> s(string.begin(), string.end());\n    return\
    \ s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ your code goes here\n    long count = 0;\n    std::set<char> s;\n    for(int\
    \ i = 0; i < string.length(); i++){\n        s.insert(tolower(string[i]));\n \
    \   }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::string::iterator it;\n    std::set<char> s;\n    for(it\
    \ = string.begin(); it != string.end(); it++) {\n        s.insert(tolower(*it));\n\
    \    }\n    count = s.size();\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(auto i:string){\n        s.insert(tolower(i));\n    }\n    return\
    \ s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> set;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        set.insert(tolower(string[i]));\n    }\n    return set.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(char c : string) {\n        s.insert(tolower(c));\n    }\n    return\
    \ s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ your code goes here\n    long count = 0;\n    std::set<char> s;\n    for(int\
    \ i = 0; i < string.length(); i++){\n        s.insert(tolower(string[i]));\n \
    \   }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s(string.begin(),\
    \ string.end());\n    return s.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ your code goes here\n    long count=0;\n    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    for(int i=0;i<string.length();i++)\n    {\n        if(string[i]!=string[i+1])\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ your code goes here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> s(string.begin(), string.end());\n    count\
    \ = s.size();\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    for (char c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> distinct_characters;\n\
    \    for (char character : string) {\n        distinct_characters.insert(character);\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ your code goes here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ your code goes here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    for (char c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ your code goes here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::string::iterator it;\n    std::set<char> s;\n    for(it\
    \ = string.begin(); it != string.end(); it++) {\n        s.insert(*it);\n    }\n\
    \    count = s.size();\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp9mj5gd2u: /tmp/tmp9mj5gd2u.cpp:22: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> charSet;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        charSet.insert(tolower(string[i]));\n    }\n    return charSet.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(auto c: string)\n        s.insert(tolower(c));\n    return s.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    count = s.size();\n   \
    \ return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ your code here\n    long ans = 0;\n    std::set<char> s;\n    for(int i = 0;\
    \ i < string.length(); i++){\n        s.insert(tolower(string[i]));\n    }\n \
    \   ans = s.size();\n    return ans;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s(string.begin(),\
    \ string.end());\n    return s.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> set;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        set.insert(tolower(string[i]));\n    }\n    count = set.size();\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::unordered_set<char>\
    \ s;\n    for(auto c: string)\n        s.insert(tolower(c));\n    return s.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ your code goes here\n    long count=0;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>=65 && string[i]<=90)\n        {\n            string[i]=string[i]+32;\n\
    \        }\n    }\n    for(int i=0;i<string.length();i++)\n    {\n        for(int\
    \ j=i+1;j<string.length();j++)\n        {\n            if(string[i]==string[j])\n\
    \            {\n                string[j]='0';\n            }\n        }\n   \
    \ }\n    for(int i=0;i<string.length();i++)\n    {\n        if(string[i]!='0')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ char_set;\n    for (int i = 0; i < string.length(); i++) {\n        char_set.insert(string[i]);\n\
    \    }\n    return char_set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmpzpsspcgi: /tmp/tmpzpsspcgi.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ your code here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    int\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    for (char c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s(string.begin(),\
    \ string.end());\n    return s.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ distinct_characters;\n    for (char character : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ char_set;\n    for (int i = 0; i < string.length(); i++) {\n        char_set.insert(tolower(string[i]));\n\
    \    }\n    return char_set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tlong\
    \ count = 0;\n\tstd::set<char> s;\n\tfor (int i = 0; i < string.length(); i++)\
    \ {\n\t\ts.insert(tolower(string[i]));\n\t}\n\treturn s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  std::set<char>\
    \ s;\n  for(int i=0;i<string.length();i++){\n    s.insert(string[i]);\n  }\n \
    \ return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp70prp6p3: /tmp/tmp70prp6p3.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    for (char c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s(string.begin(),\
    \ string.end());\n    return s.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> s(string.begin(), string.end());\n    count\
    \ = s.size();\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ Your code here\n    long count = 0;\n    std::set<char> s;\n    for(long i =\
    \ 0; i < string.length(); i++){\n        s.insert(tolower(string[i]));\n    }\n\
    \    count = s.size();\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  //\
    \ your code goes here\n  std::set<char> s;\n  for(int i=0;i<string.length();i++)\n\
    \  {\n    s.insert(tolower(string[i]));\n  }\n  return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    for (char c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tstd::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n\tstd::set<char> charSet;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tcharSet.insert(string[i]);\n\t\
    }\n\treturn charSet.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s(string.begin(),\
    \ string.end());\n    return s.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ Write your code here\n    int count = 0;\n    std::set<char> s;\n    for(int\
    \ i = 0; i < string.length(); i++){\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp8cu4ri5y: /tmp/tmp8cu4ri5y.cpp:21: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++){\n        if(string[i]\
    \ != ' '){\n            count++;\n            for(int j = i + 1; j < string.length();\
    \ j++){\n                if(string[i] == string[j]){\n                    string[j]\
    \ = ' ';\n                }\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmpxa4eolun: /tmp/tmpxa4eolun.cpp:26: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ Your code goes here\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057849
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s(string.begin(),\
    \ string.end());\n    return s.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    for (char c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    for (int i = 0; i < string.length(); i++) {\n        set.insert(tolower(string[i]));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  std::set<char> s(string.begin(),\
    \ string.end());\n  return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057849
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ char_set;\n    for (char c : string) {\n        char_set.insert(tolower(c));\n\
    \    }\n    return char_set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057849
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> distinct_characters;\n\
    \    for (char character : string) {\n        distinct_characters.insert(character);\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s(string.begin(),\
    \ string.end());\n    return s.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ char_set;\n    for (char c : string) {\n        char_set.insert(std::tolower(c));\n\
    \    }\n    return char_set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057849
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    for (int i = 0; i < string.length(); i++) {\n        set.insert(tolower(string[i]));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n\tstd::set<char>\
    \ distinct_characters;\n\tfor (char character : string) {\n\t\tdistinct_characters.insert(tolower(character));\n\
    \t}\n\treturn distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057849
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    for (int i = 0; i < string.length(); i++) {\n        set.insert(tolower(string[i]));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  //\
    \ your code goes here\n  long count=0;\n  std::set<char> s;\n  for(int i=0;i<string.length();i++)\n\
    \  {\n    s.insert(tolower(string[i]));\n  }\n  count=s.size();\n  return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057849
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(string[i]);\n    }\n    return s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: Exception
  stderr: 'tmp2xoetswk: /tmp/tmp2xoetswk.cpp:20: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  //\
    \ your code goes here\n  long count = 0;\n  std::string s = \"\";\n  for(int i\
    \ = 0; i < string.length(); i++){\n    if(s.find(tolower(string[i])) == std::string::npos){\n\
    \      s += tolower(string[i]);\n      count++;\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057849
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    for (char c : string) {\n        set.insert(std::tolower(c));\n  \
    \  }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057849
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: Exception
  stderr: 'tmp2da3gr_c: /tmp/tmp2da3gr_c.cpp:19: int main(): Assertion `candidate(("abcdecadeCADE"))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s(string.begin(),\
    \ string.end());\n    return s.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n  std::set<char>\
    \ distinct_characters;\n  for (char character : string) {\n    distinct_characters.insert(tolower(character));\n\
    \  }\n  return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057849
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    for (char c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057848
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"\
    Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n    //\
    \ your code goes here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057847
