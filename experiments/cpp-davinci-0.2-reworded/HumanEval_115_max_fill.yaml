name: HumanEval_115_max_fill
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
  \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
  \ a single unit of water.\n// Each well has a corresponding bucket that can be used\
  \ to extract water from it, \n// and all buckets have the same capacity.\n// Your\
  \ task is to use the buckets to empty the wells.\n// Output the number of times\
  \ you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),\
  \ (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})),\
  \ (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n// * 1 <=\
  \ grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0\
  \ | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>> grid,\
  \ long capacity) {\n"
tests: "}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),\
  \ (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})),\
  \ (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1,\
  \ (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1,\
  \ (long)1, (long)1})})), (9)) == (2));\n}\n"
completions: ["    // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        long sum = 0;\n\
    \        for(long j = 0; j < m; j++){\n            sum += grid[i][j];\n      \
    \  }\n        ans += (sum/capacity);\n        if(sum%capacity != 0)\n        \
    \    ans++;\n    }\n    return ans;", "    // your code here\n    int n = grid.size();\n\
    \    int m = grid[0].size();\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n\
    \        int sum = 0;\n        for(int j = 0; j < m; j++){\n            sum +=\
    \ grid[i][j];\n        }\n        ans += sum/capacity;\n        if(sum%capacity\
    \ != 0) ans++;\n    }\n    return ans;", "    // Your code here\n    long n =\
    \ grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    for(long\
    \ i = 0; i < n; i++){\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                ans += capacity;\n            }\n        }\n    }\n\
    \    return ans;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;", "    // your code here\n    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(m,\
    \ 0));\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++)\
    \ {\n            if(grid[i][j] == 1) {\n                dp[i][j] = 1;\n      \
    \      }\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = 0; j < m; j++) {\n            if(dp[i][j] == 1) {\n                if(i\
    \ > 0) {\n                    dp[i][j] += dp[i-1][j];\n                }\n   \
    \             if(j > 0) {\n                    dp[i][j] += dp[i][j-1];\n     \
    \           }\n                if(i > 0 && j > 0) {\n                    dp[i][j]\
    \ -= dp[i-1][j-1];\n                }\n            }\n        }\n    }\n    long\
    \ ans = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m;\
    \ j++) {\n            for(long k = i; k < n; k++) {\n                for(long\
    \ l = j; l < m; l++) {\n                    long sum = dp[k][l];\n           \
    \         if(i > 0) {\n                        sum -= dp[i-1][l];\n          \
    \          }\n                    if(j > 0) {\n                        sum -=\
    \ dp[k][j-1];\n                    }\n                    if(i > 0 && j > 0) {\n\
    \                        sum += dp[i-1][j-1];\n                    }\n       \
    \             if(sum <= capacity) {\n                        ans = std::max(ans,\
    \ sum);\n                    }\n                }\n            }\n        }\n\
    \    }\n    return ans;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += (sum / capacity);\n        if (sum % capacity != 0) {\n\
    \            ans++;\n        }\n    }\n    return ans;", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        for (long j = 0; j < m; j++) {\n            if (grid[i][j] ==\
    \ 1) {\n                ans += capacity;\n                for (long k = i; k <\
    \ n; k++) {\n                    for (long l = j; l < m; l++) {\n            \
    \            if (grid[k][l] == 1) {\n                            grid[k][l] =\
    \ 0;\n                        }\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return ans;", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        long cnt = 0;\n        for (long j = 0; j < m; j++) {\n    \
    \        if (grid[i][j] == 1) {\n                cnt++;\n            }\n     \
    \   }\n        ans += cnt / capacity;\n        if (cnt % capacity != 0) {\n  \
    \          ans++;\n        }\n    }\n    return ans;", "    // your code here\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n\
    \    for(int i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n      \
    \      if(grid[i][j] == 1){\n                ans += capacity;\n            }\n\
    \        }\n    }\n    return ans;", "    long row = grid.size();\n    long col\
    \ = grid[0].size();\n    long max_fill = 0;\n    for (long i = 0; i < row; i++)\
    \ {\n        for (long j = 0; j < col; j++) {\n            if (grid[i][j] == 1)\
    \ {\n                max_fill += capacity;\n            }\n        }\n    }\n\
    \    return max_fill;", "    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;", "    // your code here\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n \
    \       for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n     \
    \           ans += capacity;\n            }\n        }\n    }\n    return ans;",
  "    // your code here\n    long max_fill = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                max_fill += capacity;\n            }\n        }\n  \
    \  }\n    return max_fill;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans +=\
    \ capacity;\n                for (long k = i + 1; k < n; k++) {\n            \
    \        if (grid[k][j] == 1) {\n                        grid[k][j] = 0;\n   \
    \                 } else {\n                        break;\n                 \
    \   }\n                }\n            }\n        }\n    }\n    return ans;", " \
    \   // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        for(long j = 0;\
    \ j < m; j++){\n            if(grid[i][j] == 1){\n                ans++;\n   \
    \             grid[i][j] = 0;\n                if(i > 0 && grid[i-1][j] == 1){\n\
    \                    grid[i-1][j] = 0;\n                }\n                if(j\
    \ > 0 && grid[i][j-1] == 1){\n                    grid[i][j-1] = 0;\n        \
    \        }\n                if(i < n-1 && grid[i+1][j] == 1){\n              \
    \      grid[i+1][j] = 0;\n                }\n                if(j < m-1 && grid[i][j+1]\
    \ == 1){\n                    grid[i][j+1] = 0;\n                }\n         \
    \   }\n        }\n    }\n    return ans;", "    long rows = grid.size();\n   \
    \ long cols = grid[0].size();\n    long total_water = 0;\n    for (long i = 0;\
    \ i < rows; i++) {\n        for (long j = 0; j < cols; j++) {\n            total_water\
    \ += grid[i][j];\n        }\n    }\n    long water_per_bucket = total_water /\
    \ capacity;\n    if (total_water % capacity != 0) {\n        water_per_bucket++;\n\
    \    }\n    return water_per_bucket;", "    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n \
    \       long sum = 0;\n        for (long j = 0; j < m; j++) {\n            sum\
    \ += grid[i][j];\n        }\n        ans += std::max(0L, capacity - sum);\n  \
    \  }\n    return ans;", "    // your code here\n    long n = grid.size();\n  \
    \  long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            ans += capacity;\n            }\n        }\n    }\n    return ans;",
  "    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n  \
    \  for (long i = 0; i < n; i++) {\n        long sum = 0;\n        for (long j\
    \ = 0; j < m; j++) {\n            sum += grid[i][j];\n        }\n        ans +=\
    \ sum / capacity;\n        if (sum % capacity != 0) {\n            ans++;\n  \
    \      }\n    }\n    return ans;", "    // your code here\n    long count = 0;\n\
    \    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                count++;\n        \
    \    }\n        }\n    }\n    return count/capacity;"]
stop_tokens:
- "\n}"
