name: HumanEval_115_max_fill
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
  \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
  \ a single unit of water.\n// Each well has a corresponding bucket that can be used\
  \ to extract water from it, \n// and all buckets have the same capacity.\n// Your\
  \ task is to use the buckets to empty the wells.\n// Output the number of times\
  \ you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),\
  \ (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})),\
  \ (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n// * 1 <=\
  \ grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0\
  \ | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>> grid,\
  \ long capacity) {\n"
tests: "}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),\
  \ (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})),\
  \ (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1,\
  \ (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1,\
  \ (long)1, (long)1})})), (9)) == (2));\n}\n"
completions: ["    // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        long sum = 0;\n\
    \        for(long j = 0; j < m; j++){\n            sum += grid[i][j];\n      \
    \  }\n        ans += (sum/capacity);\n        if(sum%capacity != 0)\n        \
    \    ans++;\n    }\n    return ans;", "    // your code here\n    int n = grid.size();\n\
    \    int m = grid[0].size();\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n\
    \        int sum = 0;\n        for(int j = 0; j < m; j++){\n            sum +=\
    \ grid[i][j];\n        }\n        ans += sum/capacity;\n        if(sum%capacity\
    \ != 0) ans++;\n    }\n    return ans;", "    // Your code here\n    long n =\
    \ grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    for(long\
    \ i = 0; i < n; i++){\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                ans += capacity;\n            }\n        }\n    }\n\
    \    return ans;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;", "    // your code here\n    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(m,\
    \ 0));\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++)\
    \ {\n            if(grid[i][j] == 1) {\n                dp[i][j] = 1;\n      \
    \      }\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = 0; j < m; j++) {\n            if(dp[i][j] == 1) {\n                if(i\
    \ > 0) {\n                    dp[i][j] += dp[i-1][j];\n                }\n   \
    \             if(j > 0) {\n                    dp[i][j] += dp[i][j-1];\n     \
    \           }\n                if(i > 0 && j > 0) {\n                    dp[i][j]\
    \ -= dp[i-1][j-1];\n                }\n            }\n        }\n    }\n    long\
    \ ans = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m;\
    \ j++) {\n            for(long k = i; k < n; k++) {\n                for(long\
    \ l = j; l < m; l++) {\n                    long sum = dp[k][l];\n           \
    \         if(i > 0) {\n                        sum -= dp[i-1][l];\n          \
    \          }\n                    if(j > 0) {\n                        sum -=\
    \ dp[k][j-1];\n                    }\n                    if(i > 0 && j > 0) {\n\
    \                        sum += dp[i-1][j-1];\n                    }\n       \
    \             if(sum <= capacity) {\n                        ans = std::max(ans,\
    \ sum);\n                    }\n                }\n            }\n        }\n\
    \    }\n    return ans;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += (sum / capacity);\n        if (sum % capacity != 0) {\n\
    \            ans++;\n        }\n    }\n    return ans;", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        for (long j = 0; j < m; j++) {\n            if (grid[i][j] ==\
    \ 1) {\n                ans += capacity;\n                for (long k = i; k <\
    \ n; k++) {\n                    for (long l = j; l < m; l++) {\n            \
    \            if (grid[k][l] == 1) {\n                            grid[k][l] =\
    \ 0;\n                        }\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return ans;", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        long cnt = 0;\n        for (long j = 0; j < m; j++) {\n    \
    \        if (grid[i][j] == 1) {\n                cnt++;\n            }\n     \
    \   }\n        ans += cnt / capacity;\n        if (cnt % capacity != 0) {\n  \
    \          ans++;\n        }\n    }\n    return ans;", "    // your code here\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n\
    \    for(int i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n      \
    \      if(grid[i][j] == 1){\n                ans += capacity;\n            }\n\
    \        }\n    }\n    return ans;", "    long row = grid.size();\n    long col\
    \ = grid[0].size();\n    long max_fill = 0;\n    for (long i = 0; i < row; i++)\
    \ {\n        for (long j = 0; j < col; j++) {\n            if (grid[i][j] == 1)\
    \ {\n                max_fill += capacity;\n            }\n        }\n    }\n\
    \    return max_fill;", "    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;", "    // your code here\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n \
    \       for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n     \
    \           ans += capacity;\n            }\n        }\n    }\n    return ans;",
  "    // your code here\n    long max_fill = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                max_fill += capacity;\n            }\n        }\n  \
    \  }\n    return max_fill;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans +=\
    \ capacity;\n                for (long k = i + 1; k < n; k++) {\n            \
    \        if (grid[k][j] == 1) {\n                        grid[k][j] = 0;\n   \
    \                 } else {\n                        break;\n                 \
    \   }\n                }\n            }\n        }\n    }\n    return ans;", " \
    \   // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        for(long j = 0;\
    \ j < m; j++){\n            if(grid[i][j] == 1){\n                ans++;\n   \
    \             grid[i][j] = 0;\n                if(i > 0 && grid[i-1][j] == 1){\n\
    \                    grid[i-1][j] = 0;\n                }\n                if(j\
    \ > 0 && grid[i][j-1] == 1){\n                    grid[i][j-1] = 0;\n        \
    \        }\n                if(i < n-1 && grid[i+1][j] == 1){\n              \
    \      grid[i+1][j] = 0;\n                }\n                if(j < m-1 && grid[i][j+1]\
    \ == 1){\n                    grid[i][j+1] = 0;\n                }\n         \
    \   }\n        }\n    }\n    return ans;", "    long rows = grid.size();\n   \
    \ long cols = grid[0].size();\n    long total_water = 0;\n    for (long i = 0;\
    \ i < rows; i++) {\n        for (long j = 0; j < cols; j++) {\n            total_water\
    \ += grid[i][j];\n        }\n    }\n    long water_per_bucket = total_water /\
    \ capacity;\n    if (total_water % capacity != 0) {\n        water_per_bucket++;\n\
    \    }\n    return water_per_bucket;", "    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n \
    \       long sum = 0;\n        for (long j = 0; j < m; j++) {\n            sum\
    \ += grid[i][j];\n        }\n        ans += std::max(0L, capacity - sum);\n  \
    \  }\n    return ans;", "    // your code here\n    long n = grid.size();\n  \
    \  long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            ans += capacity;\n            }\n        }\n    }\n    return ans;",
  "    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n  \
    \  for (long i = 0; i < n; i++) {\n        long sum = 0;\n        for (long j\
    \ = 0; j < m; j++) {\n            sum += grid[i][j];\n        }\n        ans +=\
    \ sum / capacity;\n        if (sum % capacity != 0) {\n            ans++;\n  \
    \      }\n    }\n    return ans;", "    // your code here\n    long count = 0;\n\
    \    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                count++;\n        \
    \    }\n        }\n    }\n    return count/capacity;", "    // your code here\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n\
    \    for(long i = 0; i < n; i++){\n        for(long j = 0; j < m; j++){\n    \
    \        if(grid[i][j] == 1){\n                ans += capacity;\n            }\n\
    \        }\n    }\n    return ans;", "    long n = grid.size();\n    long m =\
    \ grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n   \
    \     long cnt = 0;\n        for (long j = 0; j < m; j++) {\n            if (grid[i][j]\
    \ == 1) {\n                cnt++;\n            }\n        }\n        ans += (cnt\
    \ / capacity);\n        if (cnt % capacity != 0) {\n            ans++;\n     \
    \   }\n    }\n    return ans;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans++;\n\
    \                long cur = capacity;\n                for (long k = i; k < n\
    \ && cur > 0; k++) {\n                    for (long l = j; l < m && cur > 0; l++)\
    \ {\n                        if (grid[k][l] == 1) {\n                        \
    \    grid[k][l] = 0;\n                            cur--;\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \    }\n    return ans;", "    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            if (cell == 1) {\n             \
    \   max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;",
  "    // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        long sum = 0;\n\
    \        for(long j = 0; j < m; j++){\n            sum += grid[i][j];\n      \
    \  }\n        ans += sum / capacity;\n        if(sum % capacity != 0) ans++;\n\
    \    }\n    return ans;", "    // your code here\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += sum/capacity;\n        if(sum%capacity\
    \ != 0) ans++;\n    }\n    return ans;", "    // your code here\n    long rows\
    \ = grid.size();\n    long cols = grid[0].size();\n    long count = 0;\n    for(long\
    \ i = 0; i < rows; i++){\n        for(long j = 0; j < cols; j++){\n          \
    \  if(grid[i][j] == 1){\n                count++;\n                grid[i][j]\
    \ = 0;\n                if(i+1 < rows && grid[i+1][j] == 1){\n               \
    \     grid[i+1][j] = 0;\n                }\n                if(j+1 < cols && grid[i][j+1]\
    \ == 1){\n                    grid[i][j+1] = 0;\n                }\n         \
    \   }\n        }\n    }\n    return count;", "    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n\
    \        long cnt = 0;\n        for (long j = 0; j < m; j++) {\n            if\
    \ (grid[i][j] == 1) {\n                cnt++;\n            }\n        }\n    \
    \    ans += cnt / capacity;\n        if (cnt % capacity != 0) {\n            ans++;\n\
    \        }\n    }\n    return ans;", "    // Your code here\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            ans += capacity;\n            }\n        }\n    }\n    return ans;",
  "    long count = 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int\
    \ j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n       \
    \         count++;\n            }\n        }\n    }\n    return count/capacity;",
  "    long total = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        for (int\
    \ j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j] == 1) {\n    \
    \            total += capacity;\n            }\n        }\n    }\n    return total;",
  "    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n  \
    \  for (long i = 0; i < n; i++) {\n        long cnt = 0;\n        for (long j\
    \ = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                cnt++;\n\
    \            }\n        }\n        ans += (cnt / capacity);\n        if (cnt %\
    \ capacity != 0) {\n            ans++;\n        }\n    }\n    return ans;", " \
    \   long max_fill_count = 0;\n    for (long i = 0; i < grid.size(); i++) {\n \
    \       for (long j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j]\
    \ == 1) {\n                max_fill_count++;\n                if (capacity > 1)\
    \ {\n                    for (long k = i + 1; k < grid.size(); k++) {\n      \
    \                  if (grid[k][j] == 1) {\n                            max_fill_count++;\n\
    \                            capacity--;\n                        }\n        \
    \                else {\n                            break;\n                \
    \        }\n                    }\n                }\n            }\n        }\n\
    \    }\n    return max_fill_count;", "\t// Your code here\n\tlong n = grid.size();\n\
    \tlong m = grid[0].size();\n\tlong ans = 0;\n\tfor (long i = 0; i < n; i++) {\n\
    \t\tlong sum = 0;\n\t\tfor (long j = 0; j < m; j++) {\n\t\t\tsum += grid[i][j];\n\
    \t\t}\n\t\tans += (sum / capacity);\n\t\tif (sum % capacity != 0) {\n\t\t\tans++;\n\
    \t\t}\n\t}\n\treturn ans;", "    // your code here\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += (sum/capacity);\n        if(sum%capacity\
    \ != 0) ans++;\n    }\n    return ans;", "    long rows = grid.size();\n    long\
    \ cols = grid[0].size();\n    long count = 0;\n    for (long i = 0; i < rows;\
    \ i++) {\n        for (long j = 0; j < cols; j++) {\n            if (grid[i][j]\
    \ == 1) {\n                count++;\n                grid[i][j] = 0;\n       \
    \         if (i + 1 < rows && grid[i + 1][j] == 1) {\n                    grid[i\
    \ + 1][j] = 0;\n                }\n                if (j + 1 < cols && grid[i][j\
    \ + 1] == 1) {\n                    grid[i][j + 1] = 0;\n                }\n \
    \           }\n        }\n    }\n    return count;", "    // your code here\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n\
    \    for(long i = 0; i < n; i++){\n        long cnt = 0;\n        for(long j =\
    \ 0; j < m; j++){\n            if(grid[i][j] == 1){\n                cnt++;\n\
    \            }\n        }\n        ans += cnt/capacity;\n        if(cnt%capacity\
    \ != 0){\n            ans++;\n        }\n    }\n    return ans;", "    // Your\
    \ code here\n    long max_fill = 0;\n    for(int i = 0; i < grid.size(); i++){\n\
    \        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] ==\
    \ 1){\n                max_fill += capacity;\n            }\n        }\n    }\n\
    \    return max_fill;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans +=\
    \ capacity;\n                for (long k = 0; k < n; k++) {\n                \
    \    for (long l = 0; l < m; l++) {\n                        if (grid[k][l] ==\
    \ 1) {\n                            ans += std::abs(i - k) + std::abs(j - l);\n\
    \                        }\n                    }\n                }\n       \
    \         return ans;\n            }\n        }\n    }\n    return ans;", "  \
    \  long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n  \
    \  for (long i = 0; i < n; i++) {\n        long cnt = 0;\n        for (long j\
    \ = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                cnt++;\n\
    \            }\n        }\n        ans += (cnt / capacity);\n        if (cnt %\
    \ capacity != 0) {\n            ans++;\n        }\n    }\n    return ans;", " \
    \   long rows = grid.size();\n    long cols = grid[0].size();\n    long count\
    \ = 0;\n    for (long i = 0; i < rows; i++) {\n        for (long j = 0; j < cols;\
    \ j++) {\n            if (grid[i][j] == 1) {\n                count++;\n     \
    \           if (i > 0) {\n                    grid[i-1][j] = 1;\n            \
    \    }\n                if (j > 0) {\n                    grid[i][j-1] = 1;\n\
    \                }\n                if (i < rows-1) {\n                    grid[i+1][j]\
    \ = 1;\n                }\n                if (j < cols-1) {\n               \
    \     grid[i][j+1] = 1;\n                }\n            }\n        }\n    }\n\
    \    return count;", "    // your code here\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n \
    \       long cnt = 0;\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                cnt++;\n            }\n        }\n        ans += cnt/capacity;\n\
    \        if(cnt%capacity != 0){\n            ans++;\n        }\n    }\n    return\
    \ ans;", "    long n = grid.size();\n    long m = grid[0].size();\n    long ans\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < m; j++)\
    \ {\n            if (grid[i][j] == 1) {\n                ans += capacity;\n  \
    \              if (i > 0) {\n                    ans -= std::min(capacity, grid[i\
    \ - 1][j]);\n                }\n                if (j > 0) {\n               \
    \     ans -= std::min(capacity, grid[i][j - 1]);\n                }\n        \
    \    }\n        }\n    }\n    return ans;", "    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                ans += capacity;\n                for (long k = i + 1; k < n;\
    \ k++) {\n                    if (grid[k][j] == 1) {\n                       \
    \ ans--;\n                    }\n                }\n            }\n        }\n\
    \    }\n    return ans;", "    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long row_fill = 0;\n        for (auto well : row) {\n            if (well\
    \ == 1) {\n                row_fill += capacity;\n            }\n        }\n \
    \       max_fill = std::max(max_fill, row_fill);\n    }\n    return max_fill;",
  "    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n  \
    \  for (long i = 0; i < n; i++) {\n        long sum = 0;\n        for (long j\
    \ = 0; j < m; j++) {\n            sum += grid[i][j];\n        }\n        if (sum\
    \ > 0) {\n            ans += sum / capacity;\n            if (sum % capacity >\
    \ 0) {\n                ans++;\n            }\n        }\n    }\n    return ans;",
  "    // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        long sum = 0;\n\
    \        for(long j = 0; j < m; j++){\n            sum += grid[i][j];\n      \
    \  }\n        ans += (sum / capacity);\n        if(sum % capacity != 0){\n   \
    \         ans++;\n        }\n    }\n    return ans;", "    // your code goes here\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n\
    \    for(long i = 0; i < n; i++){\n        long sum = 0;\n        for(long j =\
    \ 0; j < m; j++){\n            sum += grid[i][j];\n        }\n        ans += sum\
    \ / capacity;\n        if(sum % capacity != 0){\n            ans++;\n        }\n\
    \    }\n    return ans;", "    // your code here\n    long result = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                result += capacity;\n     \
    \       }\n        }\n    }\n    return result;", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        long sum = 0;\n        for (long j = 0; j < m; j++) {\n    \
    \        sum += grid[i][j];\n        }\n        ans += (sum + capacity - 1) /\
    \ capacity;\n    }\n    return ans;", "    long n = grid.size();\n    long m =\
    \ grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n   \
    \     long sum = 0;\n        for (long j = 0; j < m; j++) {\n            sum +=\
    \ grid[i][j];\n        }\n        ans += std::max(0l, capacity - sum);\n    }\n\
    \    return ans;", "    // your code here\n    long count = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    for(long i = 0; i < n; i++){\n        long\
    \ sum = 0;\n        for(long j = 0; j < m; j++){\n            sum += grid[i][j];\n\
    \        }\n        if(sum > 0){\n            count += sum/capacity;\n       \
    \     if(sum%capacity != 0){\n                count++;\n            }\n      \
    \  }\n    }\n    return count;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += std::max(0l, (sum - capacity));\n    }\n    return ans;",
  "    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n  \
    \  for (long i = 0; i < n; i++) {\n        for (long j = 0; j < m; j++) {\n  \
    \          if (grid[i][j] == 1) {\n                ans += 1;\n               \
    \ grid[i][j] = 0;\n                std::queue<std::pair<long, long>> q;\n    \
    \            q.push({i, j});\n                while (!q.empty()) {\n         \
    \           auto [x, y] = q.front();\n                    q.pop();\n         \
    \           if (x > 0 && grid[x - 1][y] == 1) {\n                        grid[x\
    \ - 1][y] = 0;\n                        q.push({x - 1, y});\n                \
    \    }\n                    if (x < n - 1 && grid[x + 1][y] == 1) {\n        \
    \                grid[x + 1][y] = 0;\n                        q.push({x + 1, y});\n\
    \                    }\n                    if (y > 0 && grid[x][y - 1] == 1)\
    \ {\n                        grid[x][y - 1] = 0;\n                        q.push({x,\
    \ y - 1});\n                    }\n                    if (y < m - 1 && grid[x][y\
    \ + 1] == 1) {\n                        grid[x][y + 1] = 0;\n                \
    \        q.push({x, y + 1});\n                    }\n                }\n     \
    \       }\n        }\n    }\n    return ans;", "    // your code here\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    for(long\
    \ i = 0; i < n; i++){\n        long sum = 0;\n        for(long j = 0; j < m; j++){\n\
    \            sum += grid[i][j];\n        }\n        ans += sum/capacity;\n   \
    \     if(sum%capacity != 0) ans++;\n    }\n    return ans;", "    // your code\
    \ here\n    long n = grid.size();\n    long m = grid[0].size();\n    long ans\
    \ = 0;\n    for(int i = 0; i < n; i++){\n        long sum = 0;\n        for(int\
    \ j = 0; j < m; j++){\n            sum += grid[i][j];\n        }\n        ans\
    \ += sum / capacity;\n        if(sum % capacity != 0) ans++;\n    }\n    return\
    \ ans;", "    long rows = grid.size();\n    long cols = grid[0].size();\n    long\
    \ count = 0;\n    for (long i = 0; i < rows; i++) {\n        for (long j = 0;\
    \ j < cols; j++) {\n            if (grid[i][j] == 1) {\n                count++;\n\
    \                grid[i][j] = 0;\n                long k = i + 1;\n          \
    \      while (k < rows && capacity > 0) {\n                    if (grid[k][j]\
    \ == 1) {\n                        grid[k][j] = 0;\n                        capacity--;\n\
    \                    }\n                    k++;\n                }\n        \
    \        k = i - 1;\n                while (k >= 0 && capacity > 0) {\n      \
    \              if (grid[k][j] == 1) {\n                        grid[k][j] = 0;\n\
    \                        capacity--;\n                    }\n                \
    \    k--;\n                }\n            }\n        }\n    }\n    return count;",
  "    // your code here\n    int n = grid.size();\n    int m = grid[0].size();\n\
    \    int ans = 0;\n    for(int i = 0; i < n; i++){\n        int sum = 0;\n   \
    \     for(int j = 0; j < m; j++){\n            sum += grid[i][j];\n        }\n\
    \        ans += (sum / capacity);\n        if(sum % capacity != 0) ans++;\n  \
    \  }\n    return ans;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += (sum + capacity - 1) / capacity;\n    }\n    return ans;",
  "    // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        long sum = 0;\n\
    \        for(long j = 0; j < m; j++){\n            sum += grid[i][j];\n      \
    \  }\n        ans += (sum/capacity);\n        if(sum%capacity != 0) ans++;\n \
    \   }\n    return ans;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;", "    // your code here\n    return 0;", "    // your code here\n\
    \    int n = grid.size();\n    int m = grid[0].size();\n    int ans = 0;\n   \
    \ for(int i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n         \
    \   if(grid[i][j] == 1){\n                ans += capacity;\n            }\n  \
    \      }\n    }\n    return ans;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0;\
    \ j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans += capacity;\n\
    \                if (i > 0) {\n                    ans -= std::min(capacity, grid[i\
    \ - 1][j]);\n                }\n                if (j > 0) {\n               \
    \     ans -= std::min(capacity, grid[i][j - 1]);\n                }\n        \
    \    }\n        }\n    }\n    return ans;", "    long ans = 0;\n    for(int i\
    \ = 0; i < grid.size(); i++) {\n        for(int j = 0; j < grid[i].size(); j++)\
    \ {\n            if(grid[i][j] == 1) {\n                ans += capacity;\n   \
    \             for(int k = i - 1; k >= 0; k--) {\n                    if(grid[k][j]\
    \ == 1) {\n                        ans -= capacity;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return ans;", "    // your code here\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n \
    \       long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum +=\
    \ grid[i][j];\n        }\n        if(sum == 0) continue;\n        if(sum <= capacity){\n\
    \            ans += sum;\n        }else{\n            ans += capacity;\n     \
    \   }\n    }\n    return ans;", "    // your code here\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += sum/capacity;\n        if(sum%capacity\
    \ != 0) ans++;\n    }\n    return ans;", "    // your code here\n    long n =\
    \ grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    for(long\
    \ i = 0; i < n; i++){\n        long cnt = 0;\n        for(long j = 0; j < m; j++){\n\
    \            if(grid[i][j] == 1){\n                cnt++;\n            }\n   \
    \     }\n        ans += cnt/capacity;\n        if(cnt%capacity != 0){\n      \
    \      ans++;\n        }\n    }\n    return ans;", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        long sum = 0;\n        for (long j = 0; j < m; j++) {\n    \
    \        sum += grid[i][j];\n        }\n        ans += sum / capacity;\n     \
    \   if (sum % capacity != 0) {\n            ans++;\n        }\n    }\n    return\
    \ ans;", "    // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        for(long j = 0;\
    \ j < m; j++){\n            if(grid[i][j] == 1){\n                if(i == 0){\n\
    \                    ans += capacity;\n                }\n                else{\n\
    \                    long temp = capacity;\n                    for(long k = i\
    \ - 1; k >= 0; k--){\n                        if(grid[k][j] == 1){\n         \
    \                   temp--;\n                        }\n                     \
    \   else{\n                            break;\n                        }\n   \
    \                 }\n                    ans += temp;\n                }\n   \
    \         }\n        }\n    }\n    return ans;", "    // Your code here\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    for(long\
    \ i = 0; i < n; i++){\n        long sum = 0;\n        for(long j = 0; j < m; j++){\n\
    \            sum += grid[i][j];\n        }\n        if(sum > 0){\n           \
    \ if(sum <= capacity){\n                ans += 1;\n            }\n           \
    \ else{\n                ans += (sum / capacity);\n                if(sum % capacity\
    \ != 0){\n                    ans += 1;\n                }\n            }\n  \
    \      }\n    }\n    return ans;", "    // Your code here\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += (sum / capacity);\n        if(sum\
    \ % capacity != 0){\n            ans++;\n        }\n    }\n    return ans;", " \
    \   long max_fill = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        for\
    \ (int j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j] == 1) {\n\
    \                max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;", "    long n = grid.size();\n    long m = grid[0].size();\n    long\
    \ ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n      \
    \  for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n      \
    \          cnt++;\n            }\n        }\n        ans += (cnt / capacity);\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;", "    // your code here\n    long count=0;\n    for(int i=0;i<grid.size();i++){\n\
    \        for(int j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n\
    \                count++;\n            }\n        }\n    }\n    return count/capacity;",
  "    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n  \
    \  for (long i = 0; i < n; i++) {\n        long cnt = 0;\n        for (long j\
    \ = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                cnt++;\n\
    \            }\n        }\n        ans += cnt / capacity;\n        if (cnt % capacity\
    \ != 0) {\n            ans++;\n        }\n    }\n    return ans;", "    // your\
    \ code here\n    int n = grid.size();\n    int m = grid[0].size();\n    int count\
    \ = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n            }\n \
    \       }\n    }\n    return count * capacity;", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        long cnt = 0;\n        for (long j = 0; j < m; j++) {\n    \
    \        if (grid[i][j] == 1) {\n                cnt++;\n            }\n     \
    \   }\n        ans += cnt / capacity;\n        if (cnt % capacity != 0) {\n  \
    \          ans++;\n        }\n    }\n    return ans;", "    // your code here\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n\
    \    for(int i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n      \
    \      if(grid[i][j] == 1){\n                ans += capacity;\n            }\n\
    \        }\n    }\n    return ans;", "    // your code here\n    long count =\
    \ 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                count++;\n        \
    \    }\n        }\n    }\n    return count/capacity;", "    long result = 0;\n\
    \    for (auto row : grid) {\n        long count = 0;\n        for (auto cell\
    \ : row) {\n            if (cell == 1) {\n                count++;\n         \
    \   }\n        }\n        result += count / capacity;\n        if (count % capacity\
    \ != 0) {\n            result++;\n        }\n    }\n    return result;", "   \
    \ // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        long sum = 0;\n\
    \        for(long j = 0; j < m; j++){\n            sum += grid[i][j];\n      \
    \  }\n        ans += (sum / capacity);\n        if(sum % capacity != 0){\n   \
    \         ans++;\n        }\n    }\n    return ans;", "    // your code here\n\
    \    long count = 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int\
    \ j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n       \
    \         count++;\n            }\n        }\n    }\n    return count/capacity;",
  "    // your code here\n    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;", "    // your code here\n    long count = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n            }\n \
    \       }\n    }\n    return count/capacity;", "    // your code here\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    for(int\
    \ i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                ans += capacity;\n            }\n        }\n    }\n\
    \    return ans;", "    long ans = 0;\n    for(int i = 0; i < grid.size(); i++)\
    \ {\n        for(int j = 0; j < grid[i].size(); j++) {\n            if(grid[i][j]\
    \ == 1) {\n                ans += capacity;\n                for(int k = i; k\
    \ >= 0; k--) {\n                    if(grid[k][j] == 1) {\n                  \
    \      grid[k][j] = 0;\n                    } else {\n                       \
    \ break;\n                    }\n                }\n            }\n        }\n\
    \    }\n    return ans;", "    int n = grid.size();\n    int m = grid[0].size();\n\
    \    int ans = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j\
    \ < m; j++) {\n            if(grid[i][j] == 1) {\n                ans += capacity;\n\
    \                for(int k = i; k < n; k++) {\n                    for(int l =\
    \ j; l < m; l++) {\n                        if(grid[k][l] == 1) {\n          \
    \                  grid[k][l] = 0;\n                        }\n              \
    \      }\n                }\n            }\n        }\n    }\n    return ans;",
  "    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n  \
    \  for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n    \
    \        if (grid[i][j] == 1) {\n                ans += capacity;\n          \
    \      for (int k = i; k < n; k++) {\n                    if (grid[k][j] == 1)\
    \ {\n                        grid[k][j] = 0;\n                    } else {\n \
    \                       break;\n                    }\n                }\n   \
    \         }\n        }\n    }\n    return ans;", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        long cnt = 0;\n        for (long j = 0; j < m; j++) {\n    \
    \        if (grid[i][j] == 1) {\n                cnt++;\n            }\n     \
    \   }\n        ans += (cnt / capacity);\n        if (cnt % capacity != 0) {\n\
    \            ans++;\n        }\n    }\n    return ans;", "    // your code here\n\
    \    return 0;", "    // Your code here\n    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n   \
    \     for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n       \
    \         ans += capacity;\n            }\n        }\n    }\n    return ans;",
  "    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n  \
    \  for (long i = 0; i < n; i++) {\n        long sum = 0;\n        for (long j\
    \ = 0; j < m; j++) {\n            sum += grid[i][j];\n        }\n        ans +=\
    \ sum / capacity;\n        if (sum % capacity != 0) {\n            ans++;\n  \
    \      }\n    }\n    return ans;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += (cnt / capacity);\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;", "    long n = grid.size();\n    long m = grid[0].size();\n  \
    \  long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += std::max(0l, sum - capacity);\n    }\n    return ans;",
  "    // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        long sum = 0;\n\
    \        for(long j = 0; j < m; j++){\n            sum += grid[i][j];\n      \
    \  }\n        ans += (sum / capacity);\n        if(sum % capacity != 0){\n   \
    \         ans++;\n        }\n    }\n    return ans;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        long fill = 0;\n        for (auto well :\
    \ row) {\n            if (well == 1) {\n                fill++;\n            }\
    \ else {\n                max_fill += fill / capacity;\n                fill =\
    \ 0;\n            }\n        }\n        max_fill += fill / capacity;\n    }\n\
    \    return max_fill;", "    // your code here\n    long count = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n            }\n \
    \       }\n    }\n    return count / capacity;", "    // Your code here\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    for(long\
    \ i = 0; i < n; i++){\n        long sum = 0;\n        for(long j = 0; j < m; j++){\n\
    \            sum += grid[i][j];\n        }\n        ans += sum/capacity;\n   \
    \     if(sum%capacity != 0)\n            ans++;\n    }\n    return ans;", "  \
    \  long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n  \
    \  for (long i = 0; i < n; i++) {\n        long cnt = 0;\n        for (long j\
    \ = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                cnt++;\n\
    \            }\n        }\n        ans += cnt / capacity;\n        if (cnt % capacity\
    \ != 0) {\n            ans++;\n        }\n    }\n    return ans;", "    // your\
    \ code here\n    long n = grid.size();\n    long m = grid[0].size();\n    long\
    \ ans = 0;\n    for(long i = 0; i < n; i++){\n        long cnt = 0;\n        for(long\
    \ j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n                cnt++;\n\
    \            }\n        }\n        ans += (cnt / capacity);\n        if(cnt %\
    \ capacity != 0){\n            ans++;\n        }\n    }\n    return ans;", " \
    \   // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        long cnt = 0;\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if(cnt % capacity != 0){\n            ans++;\n        }\n    }\n    return\
    \ ans;", "    // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        long sum = 0;\n\
    \        for(long j = 0; j < m; j++){\n            sum += grid[i][j];\n      \
    \  }\n        ans += sum / capacity;\n        if(sum % capacity != 0) ans++;\n\
    \    }\n    return ans;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;"]
stop_tokens:
- "\n}"
