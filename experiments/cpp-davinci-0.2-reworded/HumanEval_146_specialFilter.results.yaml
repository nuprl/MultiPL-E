language: cpp
name: HumanEval_146_specialFilter
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf5_5yizi.cpp: In function 'int main()':\n/tmp/tmpf5_5yizi.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf5_5yizi.cpp:2:\n/tmp/tmpf5_5yizi.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpf5_5yizi.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpf5_5yizi.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpf5_5yizi.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpf5_5yizi.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpf5_5yizi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf5_5yizi.cpp:2:\n/tmp/tmpf5_5yizi.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            int\
    \ first = temp % 10;\n            while(temp > 0) {\n                temp /= 10;\n\
    \            }\n            int last = temp % 10;\n            if(first % 2 !=\
    \ 0 && last % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvn2whrz9.cpp: In function 'int main()':\n/tmp/tmpvn2whrz9.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvn2whrz9.cpp:2:\n/tmp/tmpvn2whrz9.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpvn2whrz9.cpp:30:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpvn2whrz9.cpp:30:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpvn2whrz9.cpp:30:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpvn2whrz9.cpp:30:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpvn2whrz9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvn2whrz9.cpp:2:\n/tmp/tmpvn2whrz9.cpp:30:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] % 10;\n        \
    \    long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if(first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6k8t8p11.cpp: In function 'int main()':\n/tmp/tmp6k8t8p11.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6k8t8p11.cpp:2:\n/tmp/tmp6k8t8p11.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmp6k8t8p11.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmp6k8t8p11.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp6k8t8p11.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6k8t8p11.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6k8t8p11.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6k8t8p11.cpp:2:\n/tmp/tmp6k8t8p11.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] % 10;\n        \
    \    long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpob4d44nz.cpp: In function 'int main()':\n/tmp/tmpob4d44nz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpob4d44nz.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpob4d44nz.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpob4d44nz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf5_5yizi.cpp: In function 'int main()':\n/tmp/tmpf5_5yizi.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf5_5yizi.cpp:2:\n/tmp/tmpf5_5yizi.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpf5_5yizi.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpf5_5yizi.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpf5_5yizi.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpf5_5yizi.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpf5_5yizi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf5_5yizi.cpp:2:\n/tmp/tmpf5_5yizi.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] % 10 % 2 != 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph_z6y4s7.cpp: In function 'int main()':\n/tmp/tmph_z6y4s7.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph_z6y4s7.cpp:2:\n/tmp/tmph_z6y4s7.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmph_z6y4s7.cpp:22:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmph_z6y4s7.cpp:22:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmph_z6y4s7.cpp:22:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmph_z6y4s7.cpp:22:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmph_z6y4s7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph_z6y4s7.cpp:2:\n/tmp/tmph_z6y4s7.cpp:22:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   long temp = nums[i];\n                int first = temp % 10;\n           \
    \     while(temp >= 10) {\n                    temp /= 10;\n                }\n\
    \                if(temp % 2 != 0) {\n                    count++;\n         \
    \       }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_hueli9c.cpp: In function 'int main()':\n/tmp/tmp_hueli9c.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_hueli9c.cpp:2:\n/tmp/tmp_hueli9c.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmp_hueli9c.cpp:31:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmp_hueli9c.cpp:31:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp_hueli9c.cpp:31:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_hueli9c.cpp:31:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_hueli9c.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_hueli9c.cpp:2:\n/tmp/tmp_hueli9c.cpp:31:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long num = nums[i];\n            long\
    \ first = num % 10;\n            long last = num / pow(10, floor(log10(num)));\n\
    \            if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa45z5dxb.cpp: In function 'int main()':\n/tmp/tmpa45z5dxb.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa45z5dxb.cpp:2:\n/tmp/tmpa45z5dxb.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpa45z5dxb.cpp:27:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpa45z5dxb.cpp:27:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpa45z5dxb.cpp:27:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpa45z5dxb.cpp:27:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpa45z5dxb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa45z5dxb.cpp:2:\n/tmp/tmpa45z5dxb.cpp:27:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] % 10;\n        \
    \    long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpob4d44nz.cpp: In function 'int main()':\n/tmp/tmpob4d44nz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpob4d44nz.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpob4d44nz.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpob4d44nz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] % 10;\n           \
    \ int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjcu9_ltn.cpp: In function 'int main()':\n/tmp/tmpjcu9_ltn.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjcu9_ltn.cpp:2:\n/tmp/tmpjcu9_ltn.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpjcu9_ltn.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpjcu9_ltn.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpjcu9_ltn.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpjcu9_ltn.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpjcu9_ltn.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjcu9_ltn.cpp:2:\n/tmp/tmpjcu9_ltn.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] % 10;\n        \
    \    long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpob4d44nz.cpp: In function 'int main()':\n/tmp/tmpob4d44nz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpob4d44nz.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpob4d44nz.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpob4d44nz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] % 10;\n        \
    \    long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpob4d44nz.cpp: In function 'int main()':\n/tmp/tmpob4d44nz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpob4d44nz.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpob4d44nz.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpob4d44nz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] % 10;\n        \
    \    long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpob4d44nz.cpp: In function 'int main()':\n/tmp/tmpob4d44nz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpob4d44nz.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpob4d44nz.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpob4d44nz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            int first = nums[i] % 10;\n          \
    \  int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyzv9yv_0.cpp: In function 'int main()':\n/tmp/tmpyzv9yv_0.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyzv9yv_0.cpp:2:\n/tmp/tmpyzv9yv_0.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpyzv9yv_0.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpyzv9yv_0.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpyzv9yv_0.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyzv9yv_0.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpyzv9yv_0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyzv9yv_0.cpp:2:\n/tmp/tmpyzv9yv_0.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] / 10;\n        \
    \    long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplxsp3p8o.cpp: In function 'int main()':\n/tmp/tmplxsp3p8o.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmplxsp3p8o.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmplxsp3p8o.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplxsp3p8o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    // Write your code here\n    int count = 0;\n    for(int i = 0;\
    \ i < nums.size(); i++){\n        if(nums[i] > 10){\n            int last_digit\
    \ = nums[i] % 10;\n            int first_digit = nums[i];\n            while(first_digit\
    \ >= 10){\n                first_digit = first_digit / 10;\n            }\n  \
    \          if(last_digit % 2 != 0 && first_digit % 2 != 0){\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8amky08y.cpp: In function 'int main()':\n/tmp/tmp8amky08y.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8amky08y.cpp:2:\n/tmp/tmp8amky08y.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmp8amky08y.cpp:30:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmp8amky08y.cpp:30:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp8amky08y.cpp:30:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp8amky08y.cpp:30:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp8amky08y.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8amky08y.cpp:2:\n/tmp/tmp8amky08y.cpp:30:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(auto i: nums){\n        if(i>10){\n  \
    \          long first = i%10;\n            long last = i/10;\n            if(first%2!=0\
    \ && last%2!=0){\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n   \
    \ assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt8ltwfvd.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmpt8ltwfvd.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i: nums){\n              ^\n/tmp/tmpt8ltwfvd.cpp:22:5: error: expected ';' before\
    \ 'return'\n     return count;\n     ^\n/tmp/tmpt8ltwfvd.cpp:22:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpt8ltwfvd.cpp:22:5: error: expected\
    \ ';' before 'return'\n/tmp/tmpt8ltwfvd.cpp:22:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpt8ltwfvd.cpp:22:5: error: expected ')' before 'return'\n\
    /tmp/tmpt8ltwfvd.cpp: In function 'int main()':\n/tmp/tmpt8ltwfvd.cpp:25:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = specialFilter;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt8ltwfvd.cpp:2:\n/tmp/tmpt8ltwfvd.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpt8ltwfvd.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpt8ltwfvd.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpt8ltwfvd.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpt8ltwfvd.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpt8ltwfvd.cpp:2:\n/usr/includ"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tlong first = nums[i] / 10;\n\t\t\tlong last = nums[i]\
    \ % 10;\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu1q50p88.cpp: In function 'int main()':\n/tmp/tmpu1q50p88.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu1q50p88.cpp:2:\n/tmp/tmpu1q50p88.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpu1q50p88.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpu1q50p88.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpu1q50p88.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpu1q50p88.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu1q50p88.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu1q50p88.cpp:2:\n/tmp/tmpu1q50p88.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf5_5yizi.cpp: In function 'int main()':\n/tmp/tmpf5_5yizi.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf5_5yizi.cpp:2:\n/tmp/tmpf5_5yizi.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpf5_5yizi.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpf5_5yizi.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpf5_5yizi.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpf5_5yizi.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpf5_5yizi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf5_5yizi.cpp:2:\n/tmp/tmpf5_5yizi.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxez5wvmj.cpp: In function 'int main()':\n/tmp/tmpxez5wvmj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpxez5wvmj.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpxez5wvmj.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxez5wvmj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long count = 0;\n    for(int i = 0;\
    \ i < nums.size(); i++){\n        if(nums[i] > 10){\n            long temp = nums[i];\n\
    \            long first = temp % 10;\n            long last = temp;\n        \
    \    while(last >= 10){\n                last = last / 10;\n            }\n  \
    \          if(first % 2 != 0 && last % 2 != 0){\n                count++;\n  \
    \          }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8hu_daft.cpp: In function 'int main()':\n/tmp/tmp8hu_daft.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8hu_daft.cpp:2:\n/tmp/tmp8hu_daft.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmp8hu_daft.cpp:31:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmp8hu_daft.cpp:31:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp8hu_daft.cpp:31:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp8hu_daft.cpp:31:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp8hu_daft.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8hu_daft.cpp:2:\n/tmp/tmp8hu_daft.cpp:31:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxez5wvmj.cpp: In function 'int main()':\n/tmp/tmpxez5wvmj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpxez5wvmj.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpxez5wvmj.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxez5wvmj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == 1) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppgtyoqh3.cpp: In function 'int main()':\n/tmp/tmppgtyoqh3.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppgtyoqh3.cpp:2:\n/tmp/tmppgtyoqh3.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmppgtyoqh3.cpp:22:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmppgtyoqh3.cpp:22:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmppgtyoqh3.cpp:22:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmppgtyoqh3.cpp:22:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmppgtyoqh3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppgtyoqh3.cpp:2:\n/tmp/tmppgtyoqh3.cpp:22:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf5_5yizi.cpp: In function 'int main()':\n/tmp/tmpf5_5yizi.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf5_5yizi.cpp:2:\n/tmp/tmpf5_5yizi.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpf5_5yizi.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpf5_5yizi.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpf5_5yizi.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpf5_5yizi.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpf5_5yizi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf5_5yizi.cpp:2:\n/tmp/tmpf5_5yizi.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if(first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp89f9hlkj.cpp: In function 'int main()':\n/tmp/tmp89f9hlkj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp89f9hlkj.cpp:2:\n/tmp/tmp89f9hlkj.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmp89f9hlkj.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmp89f9hlkj.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp89f9hlkj.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp89f9hlkj.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp89f9hlkj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp89f9hlkj.cpp:2:\n/tmp/tmp89f9hlkj.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tlong first = nums[i] / 10;\n\t\t\tlong last = nums[i]\
    \ % 10;\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu1q50p88.cpp: In function 'int main()':\n/tmp/tmpu1q50p88.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu1q50p88.cpp:2:\n/tmp/tmpu1q50p88.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpu1q50p88.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpu1q50p88.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpu1q50p88.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpu1q50p88.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu1q50p88.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu1q50p88.cpp:2:\n/tmp/tmpu1q50p88.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   long temp = nums[i];\n                while(temp > 0) {\n                \
    \    if(temp % 10 == 1 || temp % 10 == 3 || temp % 10 == 5 || temp % 10 == 7 ||\
    \ temp % 10 == 9) {\n                        count++;\n                      \
    \  break;\n                    }\n                    temp /= 10;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz8egndde.cpp: In function 'int main()':\n/tmp/tmpz8egndde.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz8egndde.cpp:2:\n/tmp/tmpz8egndde.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpz8egndde.cpp:31:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpz8egndde.cpp:31:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpz8egndde.cpp:31:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpz8egndde.cpp:31:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpz8egndde.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz8egndde.cpp:2:\n/tmp/tmpz8egndde.cpp:31:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n  long count = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    if\
    \ (nums[i] > 10) {\n      if (nums[i] % 2 != 0) {\n        long temp = nums[i];\n\
    \        while (temp > 0) {\n          if (temp % 10 % 2 == 0) {\n           \
    \ break;\n          }\n          temp /= 10;\n        }\n        if (temp == 0)\
    \ {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\
    int main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm_79afh3.cpp: In function 'int main()':\n/tmp/tmpm_79afh3.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm_79afh3.cpp:2:\n/tmp/tmpm_79afh3.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpm_79afh3.cpp:33:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpm_79afh3.cpp:33:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpm_79afh3.cpp:33:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpm_79afh3.cpp:33:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpm_79afh3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm_79afh3.cpp:2:\n/tmp/tmpm_79afh3.cpp:33:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] % 10;\n        \
    \    long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpob4d44nz.cpp: In function 'int main()':\n/tmp/tmpob4d44nz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpob4d44nz.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpob4d44nz.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpob4d44nz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] / 10;\n        \
    \    long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplxsp3p8o.cpp: In function 'int main()':\n/tmp/tmplxsp3p8o.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmplxsp3p8o.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmplxsp3p8o.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplxsp3p8o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t\
    if (nums[i] > 10) {\n\t\t\tlong first = nums[i] / 10;\n\t\t\tlong last = nums[i]\
    \ % 10;\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu1q50p88.cpp: In function 'int main()':\n/tmp/tmpu1q50p88.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu1q50p88.cpp:2:\n/tmp/tmpu1q50p88.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpu1q50p88.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpu1q50p88.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpu1q50p88.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpu1q50p88.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu1q50p88.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu1q50p88.cpp:2:\n/tmp/tmpu1q50p88.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] % 10;\n        \
    \    long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpob4d44nz.cpp: In function 'int main()':\n/tmp/tmpob4d44nz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpob4d44nz.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpob4d44nz.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpob4d44nz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf5_5yizi.cpp: In function 'int main()':\n/tmp/tmpf5_5yizi.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf5_5yizi.cpp:2:\n/tmp/tmpf5_5yizi.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpf5_5yizi.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpf5_5yizi.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpf5_5yizi.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpf5_5yizi.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpf5_5yizi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf5_5yizi.cpp:2:\n/tmp/tmpf5_5yizi.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf5_5yizi.cpp: In function 'int main()':\n/tmp/tmpf5_5yizi.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf5_5yizi.cpp:2:\n/tmp/tmpf5_5yizi.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpf5_5yizi.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpf5_5yizi.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpf5_5yizi.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpf5_5yizi.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpf5_5yizi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf5_5yizi.cpp:2:\n/tmp/tmpf5_5yizi.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            int first = nums[i] % 10;\n           \
    \ int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjcu9_ltn.cpp: In function 'int main()':\n/tmp/tmpjcu9_ltn.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjcu9_ltn.cpp:2:\n/tmp/tmpjcu9_ltn.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpjcu9_ltn.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpjcu9_ltn.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpjcu9_ltn.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpjcu9_ltn.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpjcu9_ltn.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjcu9_ltn.cpp:2:\n/tmp/tmpjcu9_ltn.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] % 10;\n        \
    \    long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpob4d44nz.cpp: In function 'int main()':\n/tmp/tmpob4d44nz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpob4d44nz.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpob4d44nz.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpob4d44nz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            while(temp > 0) {\n                temp /= 10;\n\
    \            }\n            long last = temp % 10;\n            if(first % 2 !=\
    \ 0 && last % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8nm2lgsw.cpp: In function 'int main()':\n/tmp/tmp8nm2lgsw.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8nm2lgsw.cpp:2:\n/tmp/tmp8nm2lgsw.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmp8nm2lgsw.cpp:30:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmp8nm2lgsw.cpp:30:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp8nm2lgsw.cpp:30:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp8nm2lgsw.cpp:30:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp8nm2lgsw.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8nm2lgsw.cpp:2:\n/tmp/tmp8nm2lgsw.cpp:30:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxez5wvmj.cpp: In function 'int main()':\n/tmp/tmpxez5wvmj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpxez5wvmj.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpxez5wvmj.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxez5wvmj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxez5wvmj.cpp: In function 'int main()':\n/tmp/tmpxez5wvmj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpxez5wvmj.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpxez5wvmj.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxez5wvmj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf5_5yizi.cpp: In function 'int main()':\n/tmp/tmpf5_5yizi.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf5_5yizi.cpp:2:\n/tmp/tmpf5_5yizi.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpf5_5yizi.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpf5_5yizi.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpf5_5yizi.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpf5_5yizi.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpf5_5yizi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf5_5yizi.cpp:2:\n/tmp/tmpf5_5yizi.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxez5wvmj.cpp: In function 'int main()':\n/tmp/tmpxez5wvmj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpxez5wvmj.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpxez5wvmj.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxez5wvmj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            int first = nums[i] % 10;\n          \
    \  int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyzv9yv_0.cpp: In function 'int main()':\n/tmp/tmpyzv9yv_0.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyzv9yv_0.cpp:2:\n/tmp/tmpyzv9yv_0.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpyzv9yv_0.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpyzv9yv_0.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpyzv9yv_0.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyzv9yv_0.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpyzv9yv_0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyzv9yv_0.cpp:2:\n/tmp/tmpyzv9yv_0.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf5_5yizi.cpp: In function 'int main()':\n/tmp/tmpf5_5yizi.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf5_5yizi.cpp:2:\n/tmp/tmpf5_5yizi.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpf5_5yizi.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpf5_5yizi.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpf5_5yizi.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpf5_5yizi.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpf5_5yizi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf5_5yizi.cpp:2:\n/tmp/tmpf5_5yizi.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf5_5yizi.cpp: In function 'int main()':\n/tmp/tmpf5_5yizi.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf5_5yizi.cpp:2:\n/tmp/tmpf5_5yizi.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpf5_5yizi.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpf5_5yizi.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpf5_5yizi.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpf5_5yizi.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpf5_5yizi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf5_5yizi.cpp:2:\n/tmp/tmpf5_5yizi.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long temp = nums[i];\n            long\
    \ first = temp % 10;\n            long last = temp;\n            while(last >=\
    \ 10) {\n                last /= 10;\n            }\n            if(first % 2\
    \ != 0 && last % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn4kkpyj6.cpp: In function 'int main()':\n/tmp/tmpn4kkpyj6.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn4kkpyj6.cpp:2:\n/tmp/tmpn4kkpyj6.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpn4kkpyj6.cpp:30:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpn4kkpyj6.cpp:30:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpn4kkpyj6.cpp:30:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpn4kkpyj6.cpp:30:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpn4kkpyj6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn4kkpyj6.cpp:2:\n/tmp/tmpn4kkpyj6.cpp:30:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxez5wvmj.cpp: In function 'int main()':\n/tmp/tmpxez5wvmj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpxez5wvmj.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpxez5wvmj.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxez5wvmj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if(first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp89f9hlkj.cpp: In function 'int main()':\n/tmp/tmp89f9hlkj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp89f9hlkj.cpp:2:\n/tmp/tmp89f9hlkj.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmp89f9hlkj.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmp89f9hlkj.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp89f9hlkj.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp89f9hlkj.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp89f9hlkj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp89f9hlkj.cpp:2:\n/tmp/tmp89f9hlkj.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(auto i : nums){\n        if(i > 10){\n\
    \            long first = i;\n            long last = i % 10;\n            while(first\
    \ > 10){\n                first /= 10;\n            }\n            if(first %\
    \ 2 != 0 && last % 2 != 0){\n                count++;\n            }\n       \
    \ }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplu9wikax.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmplu9wikax.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i : nums){\n              ^\n/tmp/tmplu9wikax.cpp:25:5: error: expected ';'\
    \ before 'return'\n     return count;\n     ^\n/tmp/tmplu9wikax.cpp:25:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmplu9wikax.cpp:25:5: error:\
    \ expected ';' before 'return'\n/tmp/tmplu9wikax.cpp:25:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmplu9wikax.cpp:25:5: error: expected ')' before 'return'\n\
    /tmp/tmplu9wikax.cpp: In function 'int main()':\n/tmp/tmplu9wikax.cpp:28:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = specialFilter;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplu9wikax.cpp:2:\n/tmp/tmplu9wikax.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmplu9wikax.cpp:29:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmplu9wikax.cpp:29:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmplu9wikax.cpp:29:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmplu9wikax.cpp:29:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplu9wikax.cpp:2:\n/usr/inclu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] / 10;\n        \
    \    long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplxsp3p8o.cpp: In function 'int main()':\n/tmp/tmplxsp3p8o.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmplxsp3p8o.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmplxsp3p8o.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplxsp3p8o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   long temp = nums[i];\n                long last = temp % 10;\n           \
    \     while(temp > 10) {\n                    temp = temp / 10;\n            \
    \    }\n                if(temp % 2 != 0 && last % 2 != 0) {\n               \
    \     count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpybzvn3rc.cpp: In function 'int main()':\n/tmp/tmpybzvn3rc.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpybzvn3rc.cpp:2:\n/tmp/tmpybzvn3rc.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpybzvn3rc.cpp:31:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpybzvn3rc.cpp:31:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpybzvn3rc.cpp:31:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpybzvn3rc.cpp:31:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpybzvn3rc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpybzvn3rc.cpp:2:\n/tmp/tmpybzvn3rc.cpp:31:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long firstDigit = nums[i] % 10;\n    \
    \        long lastDigit = nums[i] / 10;\n            if(firstDigit % 2 != 0 &&\
    \ lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwnd_x6vl.cpp: In function 'int main()':\n/tmp/tmpwnd_x6vl.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwnd_x6vl.cpp:2:\n/tmp/tmpwnd_x6vl.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpwnd_x6vl.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpwnd_x6vl.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpwnd_x6vl.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwnd_x6vl.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwnd_x6vl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwnd_x6vl.cpp:2:\n/tmp/tmpwnd_x6vl.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            int first = nums[i] % 10;\n          \
    \  int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyzv9yv_0.cpp: In function 'int main()':\n/tmp/tmpyzv9yv_0.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyzv9yv_0.cpp:2:\n/tmp/tmpyzv9yv_0.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpyzv9yv_0.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpyzv9yv_0.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpyzv9yv_0.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyzv9yv_0.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpyzv9yv_0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyzv9yv_0.cpp:2:\n/tmp/tmpyzv9yv_0.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] % 10;\n        \
    \    long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpob4d44nz.cpp: In function 'int main()':\n/tmp/tmpob4d44nz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpob4d44nz.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpob4d44nz.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpob4d44nz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxez5wvmj.cpp: In function 'int main()':\n/tmp/tmpxez5wvmj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpxez5wvmj.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpxez5wvmj.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxez5wvmj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] / 10;\n        \
    \    long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplxsp3p8o.cpp: In function 'int main()':\n/tmp/tmplxsp3p8o.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmplxsp3p8o.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmplxsp3p8o.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplxsp3p8o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] % 10;\n        \
    \    long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpob4d44nz.cpp: In function 'int main()':\n/tmp/tmpob4d44nz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpob4d44nz.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpob4d44nz.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpob4d44nz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if(first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp89f9hlkj.cpp: In function 'int main()':\n/tmp/tmp89f9hlkj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp89f9hlkj.cpp:2:\n/tmp/tmp89f9hlkj.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmp89f9hlkj.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmp89f9hlkj.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp89f9hlkj.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp89f9hlkj.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp89f9hlkj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp89f9hlkj.cpp:2:\n/tmp/tmp89f9hlkj.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] / 10;\n        \
    \    long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplxsp3p8o.cpp: In function 'int main()':\n/tmp/tmplxsp3p8o.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmplxsp3p8o.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmplxsp3p8o.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplxsp3p8o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxez5wvmj.cpp: In function 'int main()':\n/tmp/tmpxez5wvmj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpxez5wvmj.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpxez5wvmj.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxez5wvmj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] % 10;\n        \
    \    long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpob4d44nz.cpp: In function 'int main()':\n/tmp/tmpob4d44nz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpob4d44nz.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpob4d44nz.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpob4d44nz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if(first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp89f9hlkj.cpp: In function 'int main()':\n/tmp/tmp89f9hlkj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp89f9hlkj.cpp:2:\n/tmp/tmp89f9hlkj.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmp89f9hlkj.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmp89f9hlkj.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp89f9hlkj.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp89f9hlkj.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp89f9hlkj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp89f9hlkj.cpp:2:\n/tmp/tmp89f9hlkj.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] / 10;\n        \
    \    long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplxsp3p8o.cpp: In function 'int main()':\n/tmp/tmplxsp3p8o.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmplxsp3p8o.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmplxsp3p8o.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplxsp3p8o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] < 0) {\n                nums[i]\
    \ = nums[i] * -1;\n            }\n            if(nums[i] % 10 % 2 != 0 && nums[i]\
    \ / 10 % 10 % 2 != 0) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprgo162eh.cpp: In function 'int main()':\n/tmp/tmprgo162eh.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprgo162eh.cpp:2:\n/tmp/tmprgo162eh.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmprgo162eh.cpp:27:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmprgo162eh.cpp:27:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmprgo162eh.cpp:27:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmprgo162eh.cpp:27:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprgo162eh.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprgo162eh.cpp:2:\n/tmp/tmprgo162eh.cpp:27:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxez5wvmj.cpp: In function 'int main()':\n/tmp/tmpxez5wvmj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpxez5wvmj.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpxez5wvmj.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxez5wvmj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            int firstDigit = nums[i] % 10;\n     \
    \       int lastDigit = nums[i] / 10;\n            if(firstDigit % 2 != 0 && lastDigit\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3j5ymow9.cpp: In function 'int main()':\n/tmp/tmp3j5ymow9.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3j5ymow9.cpp:2:\n/tmp/tmp3j5ymow9.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmp3j5ymow9.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmp3j5ymow9.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp3j5ymow9.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp3j5ymow9.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp3j5ymow9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3j5ymow9.cpp:2:\n/tmp/tmp3j5ymow9.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] / 10;\n        \
    \    long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplxsp3p8o.cpp: In function 'int main()':\n/tmp/tmplxsp3p8o.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmplxsp3p8o.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmplxsp3p8o.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplxsp3p8o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] / 10;\n        \
    \    long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplxsp3p8o.cpp: In function 'int main()':\n/tmp/tmplxsp3p8o.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmplxsp3p8o.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmplxsp3p8o.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplxsp3p8o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] % 10;\n        \
    \    long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpob4d44nz.cpp: In function 'int main()':\n/tmp/tmpob4d44nz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpob4d44nz.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpob4d44nz.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpob4d44nz.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpob4d44nz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob4d44nz.cpp:2:\n/tmp/tmpob4d44nz.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            int first = nums[i] % 10;\n          \
    \  int last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyzv9yv_0.cpp: In function 'int main()':\n/tmp/tmpyzv9yv_0.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyzv9yv_0.cpp:2:\n/tmp/tmpyzv9yv_0.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpyzv9yv_0.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpyzv9yv_0.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpyzv9yv_0.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyzv9yv_0.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpyzv9yv_0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyzv9yv_0.cpp:2:\n/tmp/tmpyzv9yv_0.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] / 10;\n        \
    \    long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplxsp3p8o.cpp: In function 'int main()':\n/tmp/tmplxsp3p8o.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmplxsp3p8o.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmplxsp3p8o.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplxsp3p8o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n  \
    \      if(nums[i] > 10) {\n            long num = nums[i];\n            long first\
    \ = num % 10;\n            long last = num;\n            while(last >= 10) {\n\
    \                last /= 10;\n            }\n            if(first % 2 != 0 &&\
    \ last % 2 != 0) {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n   \
    \ assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqv6csp9f.cpp: In function 'int main()':\n/tmp/tmpqv6csp9f.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqv6csp9f.cpp:2:\n/tmp/tmpqv6csp9f.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpqv6csp9f.cpp:30:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpqv6csp9f.cpp:30:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpqv6csp9f.cpp:30:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqv6csp9f.cpp:30:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqv6csp9f.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqv6csp9f.cpp:2:\n/tmp/tmpqv6csp9f.cpp:30:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       long num = nums[i];\n        if(num > 10) {\n            long first =\
    \ num % 10;\n            long last = num / 10;\n            if(first % 2 != 0\
    \ && last % 2 != 0) {\n                count++;\n            }\n        }\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcy1oxob6.cpp: In function 'int main()':\n/tmp/tmpcy1oxob6.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcy1oxob6.cpp:2:\n/tmp/tmpcy1oxob6.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpcy1oxob6.cpp:27:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpcy1oxob6.cpp:27:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpcy1oxob6.cpp:27:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpcy1oxob6.cpp:27:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpcy1oxob6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcy1oxob6.cpp:2:\n/tmp/tmpcy1oxob6.cpp:27:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            if(nums[i] % 2 != 0) {\n             \
    \   if(nums[i] < 0) {\n                    if((nums[i] % 10) % 2 != 0) {\n   \
    \                     count++;\n                    }\n                }\n   \
    \             else {\n                    if((nums[i] / 10) % 2 != 0) {\n    \
    \                    count++;\n                    }\n                }\n    \
    \        }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjflxzdei.cpp: In function 'int main()':\n/tmp/tmpjflxzdei.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjflxzdei.cpp:2:\n/tmp/tmpjflxzdei.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpjflxzdei.cpp:33:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpjflxzdei.cpp:33:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpjflxzdei.cpp:33:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpjflxzdei.cpp:33:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpjflxzdei.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjflxzdei.cpp:2:\n/tmp/tmpjflxzdei.cpp:33:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxez5wvmj.cpp: In function 'int main()':\n/tmp/tmpxez5wvmj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpxez5wvmj.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpxez5wvmj.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxez5wvmj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] / 10;\n        \
    \    long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplxsp3p8o.cpp: In function 'int main()':\n/tmp/tmplxsp3p8o.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmplxsp3p8o.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmplxsp3p8o.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmplxsp3p8o.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplxsp3p8o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplxsp3p8o.cpp:2:\n/tmp/tmplxsp3p8o.cpp:26:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] / 10;\n         \
    \   long last = nums[i] % 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxez5wvmj.cpp: In function 'int main()':\n/tmp/tmpxez5wvmj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpxez5wvmj.cpp:26:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpxez5wvmj.cpp:26:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpxez5wvmj.cpp:26:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxez5wvmj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxez5wvmj.cpp:2:\n/tmp/tmpxez5wvmj.cpp:26:7"
  stdout: ''
