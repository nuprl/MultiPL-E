language: cpp
name: HumanEval_28_concatenate
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (auto s : strings) {\n      \
    \  ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptxs3s334.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmptxs3s334.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return ss.str();\n     ^\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmptxs3s334.cpp: In function 'int main()':\n/tmp/tmptxs3s334.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptxs3s334.cpp:2:\n/tmp/tmptxs3s334.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmptxs3s334.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptxs3s334.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed ini"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (auto s : strings) {\n      \
    \  ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptxs3s334.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmptxs3s334.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return ss.str();\n     ^\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmptxs3s334.cpp: In function 'int main()':\n/tmp/tmptxs3s334.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptxs3s334.cpp:2:\n/tmp/tmptxs3s334.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmptxs3s334.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptxs3s334.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed ini"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n\tstd::stringstream ss;\n\tfor (std::string s : strings) {\n\t\t\
    ss << s;\n\t}\n\treturn ss.str();\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp831xqy49.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp831xqy49.cpp:10:23: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n  for (std::string s : strings) {\n                       ^\n\
    /tmp/tmp831xqy49.cpp: In function 'int main()':\n/tmp/tmp831xqy49.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = concatenate;\n     \
    \     ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n        \
    \         from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp831xqy49.cpp:2:\n/tmp/tmp831xqy49.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp831xqy49.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp831xqy49.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp831xqy49.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp831xqy49.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp831xqy49.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp831xqy49.cpp:2:\n/usr/include/c++/4.8.2/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (auto s : strings) {\n      \
    \  ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptxs3s334.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmptxs3s334.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return ss.str();\n     ^\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmptxs3s334.cpp: In function 'int main()':\n/tmp/tmptxs3s334.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptxs3s334.cpp:2:\n/tmp/tmptxs3s334.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmptxs3s334.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptxs3s334.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed ini"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n  std::stringstream ss;\n  for (std::string s : strings) {\n   \
    \ ss << s;\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgmr9b4su.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpgmr9b4su.cpp:10:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n   for (std::string s : strings) {\n                        ^\n\
    /tmp/tmpgmr9b4su.cpp: In function 'int main()':\n/tmp/tmpgmr9b4su.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = concatenate;\n     \
    \     ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n        \
    \         from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgmr9b4su.cpp:2:\n/tmp/tmpgmr9b4su.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpgmr9b4su.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpgmr9b4su.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpgmr9b4su.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgmr9b4su.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpgmr9b4su.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpgmr9b4su.cpp:2:\n/usr/include/c++/4.8."
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (auto s : strings) {\n      \
    \  ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptxs3s334.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmptxs3s334.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return ss.str();\n     ^\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmptxs3s334.cpp: In function 'int main()':\n/tmp/tmptxs3s334.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptxs3s334.cpp:2:\n/tmp/tmptxs3s334.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmptxs3s334.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptxs3s334.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed ini"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (auto s : strings) {\n      \
    \  ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptxs3s334.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmptxs3s334.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return ss.str();\n     ^\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmptxs3s334.cpp: In function 'int main()':\n/tmp/tmptxs3s334.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptxs3s334.cpp:2:\n/tmp/tmptxs3s334.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmptxs3s334.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptxs3s334.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed ini"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (auto s : strings) {\n      \
    \  ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptxs3s334.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmptxs3s334.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return ss.str();\n     ^\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmptxs3s334.cpp: In function 'int main()':\n/tmp/tmptxs3s334.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptxs3s334.cpp:2:\n/tmp/tmptxs3s334.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmptxs3s334.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptxs3s334.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed ini"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp400gomfq.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp400gomfq.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings) {\n              \
    \  ^\n/tmp/tmp400gomfq.cpp:10:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &s : strings) {\n                    ^\n/tmp/tmp400gomfq.cpp:\
    \ In function 'int main()':\n/tmp/tmp400gomfq.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp400gomfq.cpp:2:\n/tmp/tmp400gomfq.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp400gomfq.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp400gomfq.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp400gomfq.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp400gomfq.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp400gomfq.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (const auto& s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpos9h0y8h.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpos9h0y8h.cpp:10:22: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (const auto& s : strings) {\n        \
    \              ^\n/tmp/tmpos9h0y8h.cpp:10:26: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (const auto& s : strings) {\n          \
    \                ^\n/tmp/tmpos9h0y8h.cpp: In function 'int main()':\n/tmp/tmpos9h0y8h.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpos9h0y8h.cpp:2:\n/tmp/tmpos9h0y8h.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpos9h0y8h.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpos9h0y8h.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpos9h0y8h.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpos9h0y8h.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpos9h0y8h.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy4o_1ywq.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpy4o_1ywq.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpy4o_1ywq.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpy4o_1ywq.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpy4o_1ywq.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpy4o_1ywq.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpy4o_1ywq.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpy4o_1ywq.cpp: In function 'int main()':\n/tmp/tmpy4o_1ywq.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy4o_1ywq.cpp:2:\n/tmp/tmpy4o_1ywq.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpy4o_1ywq.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpy4o_1ywq.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpy4o_1ywq.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy4o_1ywq.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (auto s : strings) {\n      \
    \  ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptxs3s334.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmptxs3s334.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return ss.str();\n     ^\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmptxs3s334.cpp: In function 'int main()':\n/tmp/tmptxs3s334.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptxs3s334.cpp:2:\n/tmp/tmptxs3s334.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmptxs3s334.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptxs3s334.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed ini"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (auto const& s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprta0451w.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmprta0451w.cpp:10:22: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto const& s : strings) {\n        \
    \              ^\n/tmp/tmprta0451w.cpp:10:26: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (auto const& s : strings) {\n          \
    \                ^\n/tmp/tmprta0451w.cpp: In function 'int main()':\n/tmp/tmprta0451w.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprta0451w.cpp:2:\n/tmp/tmprta0451w.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmprta0451w.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmprta0451w.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmprta0451w.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprta0451w.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmprta0451w.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (int i = 0; i < strings.size();\
    \ i++) {\n        result += strings[i];\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4bqnpl51.cpp: In function 'int main()':\n/tmp/tmp4bqnpl51.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4bqnpl51.cpp:2:\n/tmp/tmp4bqnpl51.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp4bqnpl51.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp4bqnpl51.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp4bqnpl51.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp4bqnpl51.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp4bqnpl51.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp4bqnpl51.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/b"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (auto s : strings) {\n      \
    \  ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptxs3s334.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmptxs3s334.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return ss.str();\n     ^\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmptxs3s334.cpp: In function 'int main()':\n/tmp/tmptxs3s334.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptxs3s334.cpp:2:\n/tmp/tmptxs3s334.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmptxs3s334.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptxs3s334.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed ini"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy4o_1ywq.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpy4o_1ywq.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpy4o_1ywq.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpy4o_1ywq.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpy4o_1ywq.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpy4o_1ywq.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpy4o_1ywq.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpy4o_1ywq.cpp: In function 'int main()':\n/tmp/tmpy4o_1ywq.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy4o_1ywq.cpp:2:\n/tmp/tmpy4o_1ywq.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpy4o_1ywq.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpy4o_1ywq.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpy4o_1ywq.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy4o_1ywq.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (auto s : strings) {\n      \
    \  ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptxs3s334.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmptxs3s334.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return ss.str();\n     ^\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmptxs3s334.cpp: In function 'int main()':\n/tmp/tmptxs3s334.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptxs3s334.cpp:2:\n/tmp/tmptxs3s334.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmptxs3s334.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptxs3s334.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed ini"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp400gomfq.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp400gomfq.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings) {\n              \
    \  ^\n/tmp/tmp400gomfq.cpp:10:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &s : strings) {\n                    ^\n/tmp/tmp400gomfq.cpp:\
    \ In function 'int main()':\n/tmp/tmp400gomfq.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp400gomfq.cpp:2:\n/tmp/tmp400gomfq.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp400gomfq.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp400gomfq.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp400gomfq.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp400gomfq.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp400gomfq.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (auto s : strings) {\n      \
    \  ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptxs3s334.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmptxs3s334.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return ss.str();\n     ^\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmptxs3s334.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmptxs3s334.cpp: In function 'int main()':\n/tmp/tmptxs3s334.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptxs3s334.cpp:2:\n/tmp/tmptxs3s334.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmptxs3s334.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmptxs3s334.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptxs3s334.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed ini"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::stringstream ss;\n    for (std::string s : strings) {\n\
    \        ss << s;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqex_eyzp.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpqex_eyzp.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmpqex_eyzp.cpp: In function 'int main()':\n/tmp/tmpqex_eyzp.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqex_eyzp.cpp:2:\n/tmp/tmpqex_eyzp.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpqex_eyzp.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpqex_eyzp.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqex_eyzp.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqex_eyzp.cpp:2:\n/usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (std::string s : strings) {\n \
    \       result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6aqkst02.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp6aqkst02.cpp:10:26: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (std::string s : strings) {\n                      \
    \    ^\n/tmp/tmp6aqkst02.cpp: In function 'int main()':\n/tmp/tmp6aqkst02.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6aqkst02.cpp:2:\n/tmp/tmp6aqkst02.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp6aqkst02.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp6aqkst02.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6aqkst02.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6aqkst02.cpp:2:\n/usr/include/c++/"
  stdout: ''
