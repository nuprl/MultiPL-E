language: cpp
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int\
    \ i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn6ivy02t.cpp: In function 'int main()':\n/tmp/tmpn6ivy02t.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn6ivy02t.cpp:2:\n/tmp/tmpn6ivy02t.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long fact = 1;\n  for (int i = 1; i <= n; i++) {\n\
    \    fact *= i;\n  }\n  return fact * special_factorial(n - 1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp71ssudtt.cpp: In function 'int main()':\n/tmp/tmp71ssudtt.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp71ssudtt.cpp:2:\n/tmp/tmp71ssudtt.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf5ygrp8.cpp: In function 'int main()':\n/tmp/tmpsf5ygrp8.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsf5ygrp8.cpp:2:\n/tmp/tmpsf5ygrp8.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n \
    \   return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpczaq9ch1.cpp: In function 'int main()':\n/tmp/tmpczaq9ch1.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczaq9ch1.cpp:2:\n/tmp/tmpczaq9ch1.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // TODO: Implement\
    \ this function\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbq6qexfu.cpp: In function 'int main()':\n/tmp/tmpbq6qexfu.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbq6qexfu.cpp:2:\n/tmp/tmpbq6qexfu.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n\
    \    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnw5wc5cw.cpp: In function 'int main()':\n/tmp/tmpnw5wc5cw.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnw5wc5cw.cpp:2:\n/tmp/tmpnw5wc5cw.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpp14i88yi.cpp: In function 'int main()':\n/tmp/tmpp14i88yi.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp14i88yi.cpp:2:\n/tmp/tmpp14i88yi.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\
    \ {\n        return 1;\n    }\n    long result = 1;\n    for (int i = n; i > 0;\
    \ i--) {\n        result *= i;\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprxfbdz2c.cpp: In function 'int main()':\n/tmp/tmprxfbdz2c.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprxfbdz2c.cpp:2:\n/tmp/tmprxfbdz2c.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppk7oottu.cpp: In function 'int main()':\n/tmp/tmppk7oottu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppk7oottu.cpp:2:\n/tmp/tmppk7oottu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long res = 1;\n\
    \  for (int i = n; i > 0; i--) {\n    res *= i;\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzjjjhh34.cpp: In function 'int main()':\n/tmp/tmpzjjjhh34.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzjjjhh34.cpp:2:\n/tmp/tmpzjjjhh34.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++)\n  {\n      fact = fact * i;\n  }\n  return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5rq9aprc.cpp: In function 'int main()':\n/tmp/tmp5rq9aprc.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5rq9aprc.cpp:2:\n/tmp/tmp5rq9aprc.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    // Write your\
    \ code here\n    // To print results to the standard output you can use printf()\n\
    \    // Example: printf(\"%s\", \"Hello world!\");\n    if(n==0)\n        return\
    \ 1;\n    else\n        return n*special_factorial(n-1);\n}\nint main() {\n  \
    \  auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq_968x7m.cpp: In function 'int main()':\n/tmp/tmpq_968x7m.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq_968x7m.cpp:2:\n/tmp/tmpq_968x7m.cpp:22:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppk7oottu.cpp: In function 'int main()':\n/tmp/tmppk7oottu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppk7oottu.cpp:2:\n/tmp/tmppk7oottu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n\
    \    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnw5wc5cw.cpp: In function 'int main()':\n/tmp/tmpnw5wc5cw.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnw5wc5cw.cpp:2:\n/tmp/tmpnw5wc5cw.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwcosfdu.cpp: In function 'int main()':\n/tmp/tmpkwcosfdu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkwcosfdu.cpp:2:\n/tmp/tmpkwcosfdu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwcosfdu.cpp: In function 'int main()':\n/tmp/tmpkwcosfdu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkwcosfdu.cpp:2:\n/tmp/tmpkwcosfdu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0s0d93ck.cpp: In function 'int main()':\n/tmp/tmp0s0d93ck.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0s0d93ck.cpp:2:\n/tmp/tmp0s0d93ck.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n \
    \   return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpczaq9ch1.cpp: In function 'int main()':\n/tmp/tmpczaq9ch1.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczaq9ch1.cpp:2:\n/tmp/tmpczaq9ch1.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppk7oottu.cpp: In function 'int main()':\n/tmp/tmppk7oottu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppk7oottu.cpp:2:\n/tmp/tmppk7oottu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplb9vo0td.cpp: In function 'int main()':\n/tmp/tmplb9vo0td.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplb9vo0td.cpp:2:\n/tmp/tmplb9vo0td.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf5ygrp8.cpp: In function 'int main()':\n/tmp/tmpsf5ygrp8.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsf5ygrp8.cpp:2:\n/tmp/tmpsf5ygrp8.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwcosfdu.cpp: In function 'int main()':\n/tmp/tmpkwcosfdu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkwcosfdu.cpp:2:\n/tmp/tmpkwcosfdu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf5ygrp8.cpp: In function 'int main()':\n/tmp/tmpsf5ygrp8.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsf5ygrp8.cpp:2:\n/tmp/tmpsf5ygrp8.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppk7oottu.cpp: In function 'int main()':\n/tmp/tmppk7oottu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppk7oottu.cpp:2:\n/tmp/tmppk7oottu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *=\
    \ i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxy1yv5c_.cpp: In function 'int main()':\n/tmp/tmpxy1yv5c_.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxy1yv5c_.cpp:2:\n/tmp/tmpxy1yv5c_.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    assert(n >\
    \ 0);\n    long result = 1;\n    for (int i = 1; i <= n; i++) {\n        result\
    \ *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpy2p70x58.cpp: In function 'int main()':\n/tmp/tmpy2p70x58.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy2p70x58.cpp:2:\n/tmp/tmpy2p70x58.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int\
    \ i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn6ivy02t.cpp: In function 'int main()':\n/tmp/tmpn6ivy02t.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn6ivy02t.cpp:2:\n/tmp/tmpn6ivy02t.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long res = 1;\n  for(int i\
    \ = 1; i <= n; i++) {\n    res *= i;\n  }\n  return res;\n}\nint main() {\n  \
    \  auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8i20iq7c.cpp: In function 'int main()':\n/tmp/tmp8i20iq7c.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8i20iq7c.cpp:2:\n/tmp/tmp8i20iq7c.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long ans =\
    \ 1;\n    for(int i = n; i > 0; i--) {\n        ans *= i;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkqh88o1s.cpp: In function 'int main()':\n/tmp/tmpkqh88o1s.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkqh88o1s.cpp:2:\n/tmp/tmpkqh88o1s.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpp14i88yi.cpp: In function 'int main()':\n/tmp/tmpp14i88yi.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp14i88yi.cpp:2:\n/tmp/tmpp14i88yi.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwe77bezt.cpp: In function 'int main()':\n/tmp/tmpwe77bezt.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwe77bezt.cpp:2:\n/tmp/tmpwe77bezt.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\
    \ {\n        return 1;\n    }\n    long result = 1;\n    for (long i = 1; i <=\
    \ n; i++) {\n        result *= i;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu8orgjy3.cpp: In function 'int main()':\n/tmp/tmpu8orgjy3.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu8orgjy3.cpp:2:\n/tmp/tmpu8orgjy3.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptlw774xt.cpp: In function 'int main()':\n/tmp/tmptlw774xt.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptlw774xt.cpp:2:\n/tmp/tmptlw774xt.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++)\n    fact *= i;\n  return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkdwrs31t.cpp: In function 'int main()':\n/tmp/tmpkdwrs31t.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkdwrs31t.cpp:2:\n/tmp/tmpkdwrs31t.cpp:22:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwe77bezt.cpp: In function 'int main()':\n/tmp/tmpwe77bezt.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwe77bezt.cpp:2:\n/tmp/tmpwe77bezt.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n\
    \    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvjtp5n9a.cpp: In function 'int main()':\n/tmp/tmpvjtp5n9a.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvjtp5n9a.cpp:2:\n/tmp/tmpvjtp5n9a.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // your code\
    \ here\n  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact\
    \ * i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp4vgqesfx.cpp: In function 'int main()':\n/tmp/tmp4vgqesfx.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4vgqesfx.cpp:2:\n/tmp/tmp4vgqesfx.cpp:22:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long fact = 1;\n  for (long i = 1; i <= n; i++) {\n\
    \    fact *= i;\n  }\n  return fact * special_factorial(n - 1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphdij39ps.cpp: In function 'int main()':\n/tmp/tmphdij39ps.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphdij39ps.cpp:2:\n/tmp/tmphdij39ps.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long factorial = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphq6q5ikh.cpp: In function 'int main()':\n/tmp/tmphq6q5ikh.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphq6q5ikh.cpp:2:\n/tmp/tmphq6q5ikh.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0s0d93ck.cpp: In function 'int main()':\n/tmp/tmp0s0d93ck.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0s0d93ck.cpp:2:\n/tmp/tmp0s0d93ck.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tlong result\
    \ = 1;\n\tfor (int i = n; i > 0; i--) {\n\t\tresult *= i;\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3q2cgd1.cpp: In function 'int main()':\n/tmp/tmpb3q2cgd1.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3q2cgd1.cpp:2:\n/tmp/tmpb3q2cgd1.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long fact = 1;\n  for (int i = 1; i <= n; i++) {\n\
    \    fact *= i;\n  }\n  return fact * special_factorial(n - 1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp71ssudtt.cpp: In function 'int main()':\n/tmp/tmp71ssudtt.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp71ssudtt.cpp:2:\n/tmp/tmp71ssudtt.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact =\
    \ fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm3ycevf8.cpp: In function 'int main()':\n/tmp/tmpm3ycevf8.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm3ycevf8.cpp:2:\n/tmp/tmpm3ycevf8.cpp:22:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppk7oottu.cpp: In function 'int main()':\n/tmp/tmppk7oottu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppk7oottu.cpp:2:\n/tmp/tmppk7oottu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\
    \ {\n        return 1;\n    }\n    long result = 1;\n    for (int i = n; i > 0;\
    \ i--) {\n        result *= i;\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprxfbdz2c.cpp: In function 'int main()':\n/tmp/tmprxfbdz2c.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprxfbdz2c.cpp:2:\n/tmp/tmprxfbdz2c.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwe77bezt.cpp: In function 'int main()':\n/tmp/tmpwe77bezt.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwe77bezt.cpp:2:\n/tmp/tmpwe77bezt.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  for (long i\
    \ = n - 1; i > 0; i--) {\n    result *= i;\n  }\n  for (long i = n - 2; i > 0;\
    \ i--) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2foi1_m1.cpp: In function 'int main()':\n/tmp/tmp2foi1_m1.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2foi1_m1.cpp:2:\n/tmp/tmp2foi1_m1.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // your code\
    \ here\n  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact\
    \ * i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp4vgqesfx.cpp: In function 'int main()':\n/tmp/tmp4vgqesfx.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4vgqesfx.cpp:2:\n/tmp/tmp4vgqesfx.cpp:22:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long factorial = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp0539jn7.cpp: In function 'int main()':\n/tmp/tmpp0539jn7.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp0539jn7.cpp:2:\n/tmp/tmpp0539jn7.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwe77bezt.cpp: In function 'int main()':\n/tmp/tmpwe77bezt.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwe77bezt.cpp:2:\n/tmp/tmpwe77bezt.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int\
    \ i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn6ivy02t.cpp: In function 'int main()':\n/tmp/tmpn6ivy02t.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn6ivy02t.cpp:2:\n/tmp/tmpn6ivy02t.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwe77bezt.cpp: In function 'int main()':\n/tmp/tmpwe77bezt.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwe77bezt.cpp:2:\n/tmp/tmpwe77bezt.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // TODO: Implement\
    \ this function\n  long factorial = 1;\n  for (int i = 1; i <= n; i++) {\n   \
    \ factorial *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgny58e15.cpp: In function 'int main()':\n/tmp/tmpgny58e15.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgny58e15.cpp:2:\n/tmp/tmpgny58e15.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n \
    \   return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpczaq9ch1.cpp: In function 'int main()':\n/tmp/tmpczaq9ch1.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczaq9ch1.cpp:2:\n/tmp/tmpczaq9ch1.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwcosfdu.cpp: In function 'int main()':\n/tmp/tmpkwcosfdu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkwcosfdu.cpp:2:\n/tmp/tmpkwcosfdu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ return 1;\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc6xxu1jm.cpp: In function 'int main()':\n/tmp/tmpc6xxu1jm.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc6xxu1jm.cpp:2:\n/tmp/tmpc6xxu1jm.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Your code\
    \ here\n  long long int fact = 1;\n  for(int i = n; i > 0; i--)\n  {\n    fact\
    \ = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8r8zdxgw.cpp: In function 'int main()':\n/tmp/tmp8r8zdxgw.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8r8zdxgw.cpp:2:\n/tmp/tmp8r8zdxgw.cpp:22:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdoz07opv.cpp: In function 'int main()':\n/tmp/tmpdoz07opv.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdoz07opv.cpp:2:\n/tmp/tmpdoz07opv.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwe77bezt.cpp: In function 'int main()':\n/tmp/tmpwe77bezt.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwe77bezt.cpp:2:\n/tmp/tmpwe77bezt.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\
    \ {\n        return 1;\n    }\n    long fact = 1;\n    for (int i = 1; i <= n;\
    \ i++) {\n        fact *= i;\n    }\n    return fact * special_factorial(n - 1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppctsspjy.cpp: In function 'int main()':\n/tmp/tmppctsspjy.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppctsspjy.cpp:2:\n/tmp/tmppctsspjy.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kk8skdo.cpp: In function 'int main()':\n/tmp/tmp1kk8skdo.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kk8skdo.cpp:2:\n/tmp/tmp1kk8skdo.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwe77bezt.cpp: In function 'int main()':\n/tmp/tmpwe77bezt.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwe77bezt.cpp:2:\n/tmp/tmpwe77bezt.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for(int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpliklplzj.cpp: In function 'int main()':\n/tmp/tmpliklplzj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpliklplzj.cpp:2:\n/tmp/tmpliklplzj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        factorial *= i;\n    }\n  \
    \  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpma0chn2f.cpp: In function 'int main()':\n/tmp/tmpma0chn2f.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpma0chn2f.cpp:2:\n/tmp/tmpma0chn2f.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvm0auvlt.cpp: In function 'int main()':\n/tmp/tmpvm0auvlt.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvm0auvlt.cpp:2:\n/tmp/tmpvm0auvlt.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Your code\
    \ here\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpb6qpnqka.cpp: In function 'int main()':\n/tmp/tmpb6qpnqka.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb6qpnqka.cpp:2:\n/tmp/tmpb6qpnqka.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplb9vo0td.cpp: In function 'int main()':\n/tmp/tmplb9vo0td.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplb9vo0td.cpp:2:\n/tmp/tmplb9vo0td.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwcosfdu.cpp: In function 'int main()':\n/tmp/tmpkwcosfdu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkwcosfdu.cpp:2:\n/tmp/tmpkwcosfdu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\
    \ {\n        return 1;\n    }\n    long result = 1;\n    for (int i = 1; i <=\
    \ n; i++) {\n        result *= i;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4it9l47c.cpp: In function 'int main()':\n/tmp/tmp4it9l47c.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4it9l47c.cpp:2:\n/tmp/tmp4it9l47c.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int\
    \ i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn6ivy02t.cpp: In function 'int main()':\n/tmp/tmpn6ivy02t.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn6ivy02t.cpp:2:\n/tmp/tmpn6ivy02t.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long fact = 1;\n  for (int i = 1; i <= n; i++) {\n\
    \    fact *= i;\n  }\n  return fact * special_factorial(n - 1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp71ssudtt.cpp: In function 'int main()':\n/tmp/tmp71ssudtt.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp71ssudtt.cpp:2:\n/tmp/tmp71ssudtt.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppk7oottu.cpp: In function 'int main()':\n/tmp/tmppk7oottu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppk7oottu.cpp:2:\n/tmp/tmppk7oottu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long factorial\
    \ = 1;\n  for (int i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp0a667229: /tmp/tmp0a667229.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long factorial = 1;\n  for (int i = 1; i <= n; i++)\
    \ {\n    factorial *= i;\n  }\n  return factorial * special_factorial(n - 1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf5ygrp8.cpp: In function 'int main()':\n/tmp/tmpsf5ygrp8.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsf5ygrp8.cpp:2:\n/tmp/tmpsf5ygrp8.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwcosfdu.cpp: In function 'int main()':\n/tmp/tmpkwcosfdu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkwcosfdu.cpp:2:\n/tmp/tmpkwcosfdu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppk7oottu.cpp: In function 'int main()':\n/tmp/tmppk7oottu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppk7oottu.cpp:2:\n/tmp/tmppk7oottu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwe77bezt.cpp: In function 'int main()':\n/tmp/tmpwe77bezt.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwe77bezt.cpp:2:\n/tmp/tmpwe77bezt.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (long i = 1; i <= n; i++) {\n    long factorial = 1;\n\
    \    for (long j = 1; j <= i; j++) {\n      factorial *= j;\n    }\n    result\
    \ *= factorial;\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf5ygrp8.cpp: In function 'int main()':\n/tmp/tmpsf5ygrp8.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsf5ygrp8.cpp:2:\n/tmp/tmpsf5ygrp8.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf5ygrp8.cpp: In function 'int main()':\n/tmp/tmpsf5ygrp8.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsf5ygrp8.cpp:2:\n/tmp/tmpsf5ygrp8.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int\
    \ i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpym6cstms: /tmp/tmpym6cstms.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int\
    \ i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpym6cstms: /tmp/tmpym6cstms.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwcosfdu.cpp: In function 'int main()':\n/tmp/tmpkwcosfdu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkwcosfdu.cpp:2:\n/tmp/tmpkwcosfdu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long factorial = 1;\n  for (int i = 1; i <= n; i++)\
    \ {\n    factorial *= i;\n  }\n  return factorial * special_factorial(n - 1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf5ygrp8.cpp: In function 'int main()':\n/tmp/tmpsf5ygrp8.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsf5ygrp8.cpp:2:\n/tmp/tmpsf5ygrp8.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kk8skdo.cpp: In function 'int main()':\n/tmp/tmp1kk8skdo.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kk8skdo.cpp:2:\n/tmp/tmp1kk8skdo.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf5ygrp8.cpp: In function 'int main()':\n/tmp/tmpsf5ygrp8.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsf5ygrp8.cpp:2:\n/tmp/tmpsf5ygrp8.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0s0d93ck.cpp: In function 'int main()':\n/tmp/tmp0s0d93ck.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0s0d93ck.cpp:2:\n/tmp/tmp0s0d93ck.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kk8skdo.cpp: In function 'int main()':\n/tmp/tmp1kk8skdo.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kk8skdo.cpp:2:\n/tmp/tmp1kk8skdo.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long\
    \ i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpj2zjhusd: /tmp/tmpj2zjhusd.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplb9vo0td.cpp: In function 'int main()':\n/tmp/tmplb9vo0td.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplb9vo0td.cpp:2:\n/tmp/tmplb9vo0td.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwe77bezt.cpp: In function 'int main()':\n/tmp/tmpwe77bezt.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwe77bezt.cpp:2:\n/tmp/tmpwe77bezt.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n\
    \    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpgi26irvx: /tmp/tmpgi26irvx.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        result *= i;\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = special_factorial;\n \
    \   assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpbjqcygvh: /tmp/tmpbjqcygvh.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwe77bezt.cpp: In function 'int main()':\n/tmp/tmpwe77bezt.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwe77bezt.cpp:2:\n/tmp/tmpwe77bezt.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplb9vo0td.cpp: In function 'int main()':\n/tmp/tmplb9vo0td.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplb9vo0td.cpp:2:\n/tmp/tmplb9vo0td.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for(int i = n; i > 0; i--)\n        fact *= i;\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpwmzfnqsi: /tmp/tmpwmzfnqsi.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int\
    \ i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn6ivy02t.cpp: In function 'int main()':\n/tmp/tmpn6ivy02t.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn6ivy02t.cpp:2:\n/tmp/tmpn6ivy02t.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // your code\
    \ here\n  int i,j,k,l,m,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20,n21,n22,n23,n24,n25,n26,n27,n28,n29,n30,n31,n32,n33,n34,n35,n36,n37,n38,n39,n40,n41,n42,n43,n44,n45,n46,n47,n48,n49,n50,n51,n52,n53,n54,n55,n56,n57,n58,n59,n60,n61,n62,n63,n64,n65,n66,n67,n68,n69,n70,n71,n72,n73,n74,n75,n76,n77,n78,n79,n80,n81,n82,n83,n84,n85,n86,n87,n88,n89,n90,n91,n92,n93,n94,n95,n96,n97,n98,n99,n100,n101,n102,n103,n104,n105,n106,n107,n108,n109,n110,n111,n112,n113,n114,n115,n116,n117,n118,n119,n120,n121,n122,n123,n124,n125,n126,n127,n128,n129,n130,n131,n132,n133,n134,n135,n136,n137,n138,n139,n140,n141,n142,n143,n144,n145,n146,n147,n148,n149,n150,n151,n152,n153,n154,n155,n156,n157,n158,n159,n160,n161,n162,n163,n164,n\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvwujlcyr.cpp: In function \u2018long int special_factorial(long\
    \ int)\u2019:\n/tmp/tmpvwujlcyr.cpp:14:1: error: expected initializer before \u2018\
    }\u2019 token\n   14 | }\n      | ^\n/tmp/tmpvwujlcyr.cpp:14:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659747555
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    // Write your\
    \ code here\n    // To print results to the standard output you can use printf()\n\
    \    // Example: printf(\"%s\", \"Hello world!\");\n    long result = 1;\n   \
    \ for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmptsk9oya6: /tmp/tmptsk9oya6.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppk7oottu.cpp: In function 'int main()':\n/tmp/tmppk7oottu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppk7oottu.cpp:2:\n/tmp/tmppk7oottu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    long factorial = 1;\n    for (long\
    \ j = i; j > 0; j--) {\n      factorial *= j;\n    }\n    result *= factorial;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long res = 1;\n\
    \  for (int i = n; i > 0; i--) {\n    res *= i;\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzjjjhh34.cpp: In function 'int main()':\n/tmp/tmpzjjjhh34.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzjjjhh34.cpp:2:\n/tmp/tmpzjjjhh34.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        factorial *= i;\n    }\n  \
    \  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpma0chn2f.cpp: In function 'int main()':\n/tmp/tmpma0chn2f.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpma0chn2f.cpp:2:\n/tmp/tmpma0chn2f.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf5ygrp8.cpp: In function 'int main()':\n/tmp/tmpsf5ygrp8.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsf5ygrp8.cpp:2:\n/tmp/tmpsf5ygrp8.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppk7oottu.cpp: In function 'int main()':\n/tmp/tmppk7oottu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppk7oottu.cpp:2:\n/tmp/tmppk7oottu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long\
    \ i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpibx13yg_: /tmp/tmpibx13yg_.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // TODO: Implement\
    \ this function.\n  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact\
    \ = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpubu6ikfi: /tmp/tmpubu6ikfi.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf5ygrp8.cpp: In function 'int main()':\n/tmp/tmpsf5ygrp8.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsf5ygrp8.cpp:2:\n/tmp/tmpsf5ygrp8.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact=1;\n  for(int i=n;i>0;i--)\n\
    \  {\n    fact=fact*i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp9tzxnddi: /tmp/tmp9tzxnddi.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwe77bezt.cpp: In function 'int main()':\n/tmp/tmpwe77bezt.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwe77bezt.cpp:2:\n/tmp/tmpwe77bezt.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf5ygrp8.cpp: In function 'int main()':\n/tmp/tmpsf5ygrp8.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsf5ygrp8.cpp:2:\n/tmp/tmpsf5ygrp8.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppk7oottu.cpp: In function 'int main()':\n/tmp/tmppk7oottu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppk7oottu.cpp:2:\n/tmp/tmppk7oottu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppk7oottu.cpp: In function 'int main()':\n/tmp/tmppk7oottu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppk7oottu.cpp:2:\n/tmp/tmppk7oottu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (long i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpzwjpsbvw: /tmp/tmpzwjpsbvw.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf5ygrp8.cpp: In function 'int main()':\n/tmp/tmpsf5ygrp8.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsf5ygrp8.cpp:2:\n/tmp/tmpsf5ygrp8.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        factorial *= i;\n    }\n \
    \   return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp733wyjl6: /tmp/tmp733wyjl6.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // TODO: Implement\
    \ this function\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbq6qexfu.cpp: In function 'int main()':\n/tmp/tmpbq6qexfu.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbq6qexfu.cpp:2:\n/tmp/tmpbq6qexfu.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf5ygrp8.cpp: In function 'int main()':\n/tmp/tmpsf5ygrp8.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsf5ygrp8.cpp:2:\n/tmp/tmpsf5ygrp8.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n\
    \    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpgi26irvx: /tmp/tmpgi26irvx.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwe77bezt.cpp: In function 'int main()':\n/tmp/tmpwe77bezt.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwe77bezt.cpp:2:\n/tmp/tmpwe77bezt.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long long int\
    \ fact = 1;\n  for(int i = 1; i <= n; i++)\n    fact *= i;\n  return fact;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpotx9ygrl: /tmp/tmpotx9ygrl.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplb9vo0td.cpp: In function 'int main()':\n/tmp/tmplb9vo0td.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplb9vo0td.cpp:2:\n/tmp/tmplb9vo0td.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // TODO: Implement\
    \ this function.\n  long fact = 1;\n  for(int i = 1; i <= n; i++) {\n    fact\
    \ *= i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpyzrvy5he: /tmp/tmpyzrvy5he.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long factorial = 1;\n  for (long i = n; i > 0; i--)\
    \ {\n    factorial *= i;\n  }\n  return factorial * special_factorial(n - 1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0s0d93ck.cpp: In function 'int main()':\n/tmp/tmp0s0d93ck.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0s0d93ck.cpp:2:\n/tmp/tmp0s0d93ck.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppk7oottu.cpp: In function 'int main()':\n/tmp/tmppk7oottu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppk7oottu.cpp:2:\n/tmp/tmppk7oottu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwe77bezt.cpp: In function 'int main()':\n/tmp/tmpwe77bezt.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwe77bezt.cpp:2:\n/tmp/tmpwe77bezt.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwcosfdu.cpp: In function 'int main()':\n/tmp/tmpkwcosfdu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkwcosfdu.cpp:2:\n/tmp/tmpkwcosfdu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf5ygrp8.cpp: In function 'int main()':\n/tmp/tmpsf5ygrp8.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsf5ygrp8.cpp:2:\n/tmp/tmpsf5ygrp8.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwcosfdu.cpp: In function 'int main()':\n/tmp/tmpkwcosfdu.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkwcosfdu.cpp:2:\n/tmp/tmpkwcosfdu.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    long factorial = 1;\n    for (long\
    \ j = i; j > 0; j--) {\n      factorial *= j;\n    }\n    result *= factorial;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (long i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpzwjpsbvw: /tmp/tmpzwjpsbvw.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplb9vo0td.cpp: In function 'int main()':\n/tmp/tmplb9vo0td.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplb9vo0td.cpp:2:\n/tmp/tmplb9vo0td.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long result = n;\n  for (int i = n - 1; i > 0; i--)\
    \ {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp5u5jzcz5: /tmp/tmp5u5jzcz5.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  if(n==0)\n    return 1;\n\
    \  else\n    return n*special_factorial(n-1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp_35szidw: /tmp/tmp_35szidw.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n\
    \    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnw5wc5cw.cpp: In function 'int main()':\n/tmp/tmpnw5wc5cw.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnw5wc5cw.cpp:2:\n/tmp/tmpnw5wc5cw.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\
    \ {\n        return 1;\n    }\n    long result = 1;\n    for (long i = 1; i <=\
    \ n; i++) {\n        result *= i;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu8orgjy3.cpp: In function 'int main()':\n/tmp/tmpu8orgjy3.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu8orgjy3.cpp:2:\n/tmp/tmpu8orgjy3.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\
    \ {\n        return 1;\n    }\n    long fact = 1;\n    for (int i = 1; i <= n;\
    \ i++) {\n        fact *= i;\n    }\n    return fact * special_factorial(n - 1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppctsspjy.cpp: In function 'int main()':\n/tmp/tmppctsspjy.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppctsspjy.cpp:2:\n/tmp/tmppctsspjy.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy_5z6nx.cpp: In function 'int main()':\n/tmp/tmpvy_5z6nx.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvy_5z6nx.cpp:2:\n/tmp/tmpvy_5z6nx.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf5ygrp8.cpp: In function 'int main()':\n/tmp/tmpsf5ygrp8.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsf5ygrp8.cpp:2:\n/tmp/tmpsf5ygrp8.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n\
    \    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpgi26irvx: /tmp/tmpgi26irvx.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwe77bezt.cpp: In function 'int main()':\n/tmp/tmpwe77bezt.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwe77bezt.cpp:2:\n/tmp/tmpwe77bezt.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgw1aqj.cpp: In function 'int main()':\n/tmp/tmpbjgw1aqj.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbjgw1aqj.cpp:2:\n/tmp/tmpbjgw1aqj.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long factorial = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp0539jn7.cpp: In function 'int main()':\n/tmp/tmpp0539jn7.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp0539jn7.cpp:2:\n/tmp/tmpp0539jn7.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // your code\
    \ here\n  long fact=1;\n  for(int i=n;i>=1;i--)\n  {\n    fact=fact*i;\n  }\n\
    \  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n  \
    \  assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp7p9z7b2r: /tmp/tmp7p9z7b2r.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747555
