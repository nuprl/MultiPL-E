language: cpp
name: HumanEval_139_special_factorial
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int\
    \ i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpx76ktsbh: /tmp/tmpx76ktsbh.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long fact = 1;\n  for (int i = 1; i <= n; i++) {\n\
    \    fact *= i;\n  }\n  return fact * special_factorial(n - 1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe676bxaa: /tmp/tmpe676bxaa.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n \
    \   return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpdzqbdygq: /tmp/tmpdzqbdygq.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // TODO: Implement\
    \ this function\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpd57f7soi: /tmp/tmpd57f7soi.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n\
    \    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp42iqlfl2: /tmp/tmp42iqlfl2.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpevn01aj_: /tmp/tmpevn01aj_.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\
    \ {\n        return 1;\n    }\n    long result = 1;\n    for (int i = n; i > 0;\
    \ i--) {\n        result *= i;\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpazzm62bf: /tmp/tmpazzm62bf.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpf6v04fe7: /tmp/tmpf6v04fe7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long res = 1;\n\
    \  for (int i = n; i > 0; i--) {\n    res *= i;\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8j001t4p: /tmp/tmp8j001t4p.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++)\n  {\n      fact = fact * i;\n  }\n  return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpdxejdma4: /tmp/tmpdxejdma4.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    // Write your\
    \ code here\n    // To print results to the standard output you can use printf()\n\
    \    // Example: printf(\"%s\", \"Hello world!\");\n    if(n==0)\n        return\
    \ 1;\n    else\n        return n*special_factorial(n-1);\n}\nint main() {\n  \
    \  auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpsmtce86v: /tmp/tmpsmtce86v.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpf6v04fe7: /tmp/tmpf6v04fe7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n\
    \    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp42iqlfl2: /tmp/tmp42iqlfl2.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpqzwf1fox: /tmp/tmpqzwf1fox.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpqzwf1fox: /tmp/tmpqzwf1fox.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp3q2rivd6: /tmp/tmp3q2rivd6.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n \
    \   return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpdzqbdygq: /tmp/tmpdzqbdygq.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpf6v04fe7: /tmp/tmpf6v04fe7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp2xuk472p: /tmp/tmp2xuk472p.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe676bxaa: /tmp/tmpe676bxaa.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpqzwf1fox: /tmp/tmpqzwf1fox.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe676bxaa: /tmp/tmpe676bxaa.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpf6v04fe7: /tmp/tmpf6v04fe7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *=\
    \ i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp8wblwce2: /tmp/tmp8wblwce2.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    assert(n >\
    \ 0);\n    long result = 1;\n    for (int i = 1; i <= n; i++) {\n        result\
    \ *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpeaj4x0nm: /tmp/tmpeaj4x0nm.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int\
    \ i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpx76ktsbh: /tmp/tmpx76ktsbh.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long res = 1;\n  for(int i\
    \ = 1; i <= n; i++) {\n    res *= i;\n  }\n  return res;\n}\nint main() {\n  \
    \  auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe47pomk3: /tmp/tmpe47pomk3.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long ans =\
    \ 1;\n    for(int i = n; i > 0; i--) {\n        ans *= i;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmplhnbw3r8: /tmp/tmplhnbw3r8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpevn01aj_: /tmp/tmpevn01aj_.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4ta5waue: /tmp/tmp4ta5waue.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\
    \ {\n        return 1;\n    }\n    long result = 1;\n    for (long i = 1; i <=\
    \ n; i++) {\n        result *= i;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8x1nh8q_: /tmp/tmp8x1nh8q_.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpyn9t5ag5: /tmp/tmpyn9t5ag5.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++)\n    fact *= i;\n  return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmplc3uv79x: /tmp/tmplc3uv79x.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4ta5waue: /tmp/tmp4ta5waue.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n\
    \    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmphr7qh149: /tmp/tmphr7qh149.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // your code\
    \ here\n  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact\
    \ * i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpvjggtjt5: /tmp/tmpvjggtjt5.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long fact = 1;\n  for (long i = 1; i <= n; i++) {\n\
    \    fact *= i;\n  }\n  return fact * special_factorial(n - 1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long factorial = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp614rrxj4: /tmp/tmp614rrxj4.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp3q2rivd6: /tmp/tmp3q2rivd6.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n\tlong result\
    \ = 1;\n\tfor (int i = n; i > 0; i--) {\n\t\tresult *= i;\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfv7rhpu7: /tmp/tmpfv7rhpu7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long fact = 1;\n  for (int i = 1; i <= n; i++) {\n\
    \    fact *= i;\n  }\n  return fact * special_factorial(n - 1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact =\
    \ fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpn2yhl_r2: /tmp/tmpn2yhl_r2.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpf6v04fe7: /tmp/tmpf6v04fe7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\
    \ {\n        return 1;\n    }\n    long result = 1;\n    for (int i = n; i > 0;\
    \ i--) {\n        result *= i;\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpazzm62bf: /tmp/tmpazzm62bf.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4ta5waue: /tmp/tmp4ta5waue.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  for (long i\
    \ = n - 1; i > 0; i--) {\n    result *= i;\n  }\n  for (long i = n - 2; i > 0;\
    \ i--) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpfmkv9ler: /tmp/tmpfmkv9ler.cpp:27: int main(): Assertion `candidate((5))
    == (34560)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // your code\
    \ here\n  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact\
    \ * i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpvjggtjt5: /tmp/tmpvjggtjt5.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long factorial = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpkpgpen8g: /tmp/tmpkpgpen8g.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4ta5waue: /tmp/tmp4ta5waue.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int\
    \ i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpx76ktsbh: /tmp/tmpx76ktsbh.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4ta5waue: /tmp/tmp4ta5waue.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // TODO: Implement\
    \ this function\n  long factorial = 1;\n  for (int i = 1; i <= n; i++) {\n   \
    \ factorial *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp92grh6yr: /tmp/tmp92grh6yr.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n \
    \   return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpdzqbdygq: /tmp/tmpdzqbdygq.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpqzwf1fox: /tmp/tmpqzwf1fox.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ return 1;\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpcevct_m7: /tmp/tmpcevct_m7.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Your code\
    \ here\n  long long int fact = 1;\n  for(int i = n; i > 0; i--)\n  {\n    fact\
    \ = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpwbzecwe0: /tmp/tmpwbzecwe0.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4hxab5g2: /tmp/tmp4hxab5g2.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4ta5waue: /tmp/tmp4ta5waue.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\
    \ {\n        return 1;\n    }\n    long fact = 1;\n    for (int i = 1; i <= n;\
    \ i++) {\n        fact *= i;\n    }\n    return fact * special_factorial(n - 1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpphyjn2yx: /tmp/tmpphyjn2yx.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4ta5waue: /tmp/tmp4ta5waue.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for(int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpbj_nnr91: /tmp/tmpbj_nnr91.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        factorial *= i;\n    }\n  \
    \  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpf9zlozch: /tmp/tmpf9zlozch.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpt8j8e5ys: /tmp/tmpt8j8e5ys.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Your code\
    \ here\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpztr3zcmu: /tmp/tmpztr3zcmu.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp2xuk472p: /tmp/tmp2xuk472p.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpqzwf1fox: /tmp/tmpqzwf1fox.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\
    \ {\n        return 1;\n    }\n    long result = 1;\n    for (int i = 1; i <=\
    \ n; i++) {\n        result *= i;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp7kmm54bi: /tmp/tmp7kmm54bi.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int\
    \ i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpx76ktsbh: /tmp/tmpx76ktsbh.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long fact = 1;\n  for (int i = 1; i <= n; i++) {\n\
    \    fact *= i;\n  }\n  return fact * special_factorial(n - 1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpf6v04fe7: /tmp/tmpf6v04fe7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long factorial\
    \ = 1;\n  for (int i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpn1l4s9y5: /tmp/tmpn1l4s9y5.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long factorial = 1;\n  for (int i = 1; i <= n; i++)\
    \ {\n    factorial *= i;\n  }\n  return factorial * special_factorial(n - 1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe676bxaa: /tmp/tmpe676bxaa.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpqzwf1fox: /tmp/tmpqzwf1fox.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpf6v04fe7: /tmp/tmpf6v04fe7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4ta5waue: /tmp/tmp4ta5waue.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (long i = 1; i <= n; i++) {\n    long factorial = 1;\n\
    \    for (long j = 1; j <= i; j++) {\n      factorial *= j;\n    }\n    result\
    \ *= factorial;\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe676bxaa: /tmp/tmpe676bxaa.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe676bxaa: /tmp/tmpe676bxaa.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int\
    \ i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpr8yash34: /tmp/tmpr8yash34.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int\
    \ i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpr8yash34: /tmp/tmpr8yash34.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpqzwf1fox: /tmp/tmpqzwf1fox.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long factorial = 1;\n  for (int i = 1; i <= n; i++)\
    \ {\n    factorial *= i;\n  }\n  return factorial * special_factorial(n - 1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe676bxaa: /tmp/tmpe676bxaa.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpphyjn2yx: /tmp/tmpphyjn2yx.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe676bxaa: /tmp/tmpe676bxaa.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp3q2rivd6: /tmp/tmp3q2rivd6.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpphyjn2yx: /tmp/tmpphyjn2yx.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long\
    \ i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp20wo_udf: /tmp/tmp20wo_udf.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp2xuk472p: /tmp/tmp2xuk472p.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4ta5waue: /tmp/tmp4ta5waue.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n\
    \    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpnx_27hs_: /tmp/tmpnx_27hs_.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        result *= i;\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = special_factorial;\n \
    \   assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp5n04vnnx: /tmp/tmp5n04vnnx.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4ta5waue: /tmp/tmp4ta5waue.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp2xuk472p: /tmp/tmp2xuk472p.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for(int i = n; i > 0; i--)\n        fact *= i;\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpkei1bd8l: /tmp/tmpkei1bd8l.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int\
    \ i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpx76ktsbh: /tmp/tmpx76ktsbh.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // your code\
    \ here\n  int i,j,k,l,m,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20,n21,n22,n23,n24,n25,n26,n27,n28,n29,n30,n31,n32,n33,n34,n35,n36,n37,n38,n39,n40,n41,n42,n43,n44,n45,n46,n47,n48,n49,n50,n51,n52,n53,n54,n55,n56,n57,n58,n59,n60,n61,n62,n63,n64,n65,n66,n67,n68,n69,n70,n71,n72,n73,n74,n75,n76,n77,n78,n79,n80,n81,n82,n83,n84,n85,n86,n87,n88,n89,n90,n91,n92,n93,n94,n95,n96,n97,n98,n99,n100,n101,n102,n103,n104,n105,n106,n107,n108,n109,n110,n111,n112,n113,n114,n115,n116,n117,n118,n119,n120,n121,n122,n123,n124,n125,n126,n127,n128,n129,n130,n131,n132,n133,n134,n135,n136,n137,n138,n139,n140,n141,n142,n143,n144,n145,n146,n147,n148,n149,n150,n151,n152,n153,n154,n155,n156,n157,n158,n159,n160,n161,n162,n163,n164,n\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe2zoxj9y.cpp: In function \u2018long int special_factorial(long\
    \ int)\u2019:\n/tmp/tmpe2zoxj9y.cpp:14:1: error: expected initializer before \u2018\
    }\u2019 token\n   14 | }\n      | ^\n/tmp/tmpe2zoxj9y.cpp:14:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    // Write your\
    \ code here\n    // To print results to the standard output you can use printf()\n\
    \    // Example: printf(\"%s\", \"Hello world!\");\n    long result = 1;\n   \
    \ for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmppwrvbnsm: /tmp/tmppwrvbnsm.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpf6v04fe7: /tmp/tmpf6v04fe7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    long factorial = 1;\n    for (long\
    \ j = i; j > 0; j--) {\n      factorial *= j;\n    }\n    result *= factorial;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long res = 1;\n\
    \  for (int i = n; i > 0; i--) {\n    res *= i;\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8j001t4p: /tmp/tmp8j001t4p.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        factorial *= i;\n    }\n  \
    \  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpf9zlozch: /tmp/tmpf9zlozch.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe676bxaa: /tmp/tmpe676bxaa.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpf6v04fe7: /tmp/tmpf6v04fe7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long\
    \ i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8yaim8t_: /tmp/tmp8yaim8t_.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // TODO: Implement\
    \ this function.\n  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact\
    \ = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpfvp305gc: /tmp/tmpfvp305gc.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe676bxaa: /tmp/tmpe676bxaa.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact=1;\n  for(int i=n;i>0;i--)\n\
    \  {\n    fact=fact*i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpvqlbxw4l: /tmp/tmpvqlbxw4l.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4ta5waue: /tmp/tmp4ta5waue.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe676bxaa: /tmp/tmpe676bxaa.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpf6v04fe7: /tmp/tmpf6v04fe7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpf6v04fe7: /tmp/tmpf6v04fe7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (long i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpp5scdcpx: /tmp/tmpp5scdcpx.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe676bxaa: /tmp/tmpe676bxaa.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        factorial *= i;\n    }\n \
    \   return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpw8pjl6tm: /tmp/tmpw8pjl6tm.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // TODO: Implement\
    \ this function\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpd57f7soi: /tmp/tmpd57f7soi.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe676bxaa: /tmp/tmpe676bxaa.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n\
    \    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpnx_27hs_: /tmp/tmpnx_27hs_.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4ta5waue: /tmp/tmp4ta5waue.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long long int\
    \ fact = 1;\n  for(int i = 1; i <= n; i++)\n    fact *= i;\n  return fact;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpi3y9y0bj: /tmp/tmpi3y9y0bj.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp2xuk472p: /tmp/tmp2xuk472p.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // TODO: Implement\
    \ this function.\n  long fact = 1;\n  for(int i = 1; i <= n; i++) {\n    fact\
    \ *= i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpdjzh07yr: /tmp/tmpdjzh07yr.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long factorial = 1;\n  for (long i = n; i > 0; i--)\
    \ {\n    factorial *= i;\n  }\n  return factorial * special_factorial(n - 1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n\
    \  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp3q2rivd6: /tmp/tmp3q2rivd6.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpf6v04fe7: /tmp/tmpf6v04fe7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4ta5waue: /tmp/tmp4ta5waue.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpqzwf1fox: /tmp/tmpqzwf1fox.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe676bxaa: /tmp/tmpe676bxaa.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpqzwf1fox: /tmp/tmpqzwf1fox.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    long factorial = 1;\n    for (long\
    \ j = i; j > 0; j--) {\n      factorial *= j;\n    }\n    result *= factorial;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long fact =\
    \ 1;\n  for (long i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpp5scdcpx: /tmp/tmpp5scdcpx.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp2xuk472p: /tmp/tmp2xuk472p.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long result = n;\n  for (int i = n - 1; i > 0; i--)\
    \ {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp9jvlwevb: /tmp/tmp9jvlwevb.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  if(n==0)\n    return 1;\n\
    \  else\n    return n*special_factorial(n-1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpif4z4f8y: /tmp/tmpif4z4f8y.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long result = 1;\n  for (long i = n; i > 0; i--) {\n\
    \    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp42iqlfl2: /tmp/tmp42iqlfl2.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\
    \ {\n        return 1;\n    }\n    long result = 1;\n    for (long i = 1; i <=\
    \ n; i++) {\n        result *= i;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8x1nh8q_: /tmp/tmp8x1nh8q_.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\
    \ {\n        return 1;\n    }\n    long fact = 1;\n    for (int i = 1; i <= n;\
    \ i++) {\n        fact *= i;\n    }\n    return fact * special_factorial(n - 1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp36jwexkc: /tmp/tmp36jwexkc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe676bxaa: /tmp/tmpe676bxaa.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\
    \ {\n    return 1;\n  }\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n\
    \    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpnx_27hs_: /tmp/tmpnx_27hs_.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long result\
    \ = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4ta5waue: /tmp/tmp4ta5waue.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  long result\
    \ = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxmbecbj7: /tmp/tmpxmbecbj7.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long factorial = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpkpgpen8g: /tmp/tmpkpgpen8g.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n  // your code\
    \ here\n  long fact=1;\n  for(int i=n;i>=1;i--)\n  {\n    fact=fact*i;\n  }\n\
    \  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n  \
    \  assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxx19nhbt: /tmp/tmpxx19nhbt.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660056939
