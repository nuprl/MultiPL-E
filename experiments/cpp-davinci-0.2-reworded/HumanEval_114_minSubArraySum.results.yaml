language: cpp
name: HumanEval_114_minSubArraySum
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        minSum = std::min(minSum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9yftsmc9: /tmp/tmp9yftsmc9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = 0;\n    for (long num : nums)\
    \ {\n        sum += num;\n        min_sum = std::min(min_sum, sum);\n        if\
    \ (sum > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long sum = 0;\n    for (auto num : nums)\
    \ {\n        sum += num;\n        minSum = std::min(minSum, sum);\n        if\
    \ (sum > 0) {\n            sum = 0;\n        }\n    }\n    return minSum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long current_sum = nums[0];\n    for (int\
    \ i = 1; i < nums.size(); i++) {\n        current_sum = std::min(nums[i], current_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, current_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long currentSum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        currentSum += nums[i];\n        if (currentSum < minSum) {\n\
    \            minSum = currentSum;\n        }\n        if (currentSum > 0) {\n\
    \            currentSum = 0;\n        }\n    }\n    return minSum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpah5iozyv: /tmp/tmpah5iozyv.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm636t779: /tmp/tmpm636t779.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   min_sum = std::min(min_sum, sum);\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = 0;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n\
    \            min_sum = sum;\n        }\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5cd_hp4_: /tmp/tmp5cd_hp4_.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm636t779: /tmp/tmpm636t779.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = LONG_MAX;\n    long sum = 0;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        sum += nums[i];\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpv4_frv4d: /tmp/tmpv4_frv4d.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        minSum = std::min(minSum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long minSum = 0;\n    long min = nums[0];\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        if (nums[i] < min) {\n        \
    \    min = nums[i];\n        }\n        sum += nums[i];\n        if (sum - minSum\
    \ < minSum) {\n            minSum = sum - minSum;\n        }\n    }\n    if (minSum\
    \ == 0) {\n        return min;\n    }\n    return minSum;\n}\nint main() {\n \
    \   auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpcmoldsj6: /tmp/tmpcmoldsj6.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)-3}))) == (-6)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = LONG_MAX;\n    long sum = 0;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n\
    \            min_sum = sum;\n        }\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (int i = 0; i < nums.size(); i++) {\n        curr_sum += nums[i];\n\
    \        if (curr_sum < min_sum) {\n            min_sum = curr_sum;\n        }\n\
    \        if (curr_sum > 0) {\n            curr_sum = 0;\n        }\n    }\n  \
    \  return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2,\
    \ (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm636t779: /tmp/tmpm636t779.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long min_sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmppsq339r9: /tmp/tmppsq339r9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    if (nums.size() == 0) {\n        return 0;\n    }\n    long minSum =\
    \ nums[0];\n    long currSum = nums[0];\n    for (int i = 1; i < nums.size();\
    \ i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n        minSum\
    \ = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint main() {\n \
    \   auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        curr_sum += nums[i];\n        if (curr_sum < min_sum) {\n  \
    \          min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n     \
    \       curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_n22nyra: /tmp/tmp_n22nyra.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n  long minSum = nums[0];\n  long sum = 0;\n  for (long num : nums) {\n  \
    \  sum += num;\n    minSum = std::min(minSum, sum);\n    if (sum > 0) {\n    \
    \  sum = 0;\n    }\n  }\n  return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9yftsmc9: /tmp/tmp9yftsmc9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0, curr_sum = 0;\n    for (auto num : nums) {\n      \
    \  curr_sum += num;\n        if (curr_sum < min_sum) {\n            min_sum =\
    \ curr_sum;\n        }\n        if (curr_sum > 0) {\n            curr_sum = 0;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpyjc2pbrw: /tmp/tmpyjc2pbrw.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long min = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpnb5vh5w9: /tmp/tmpnb5vh5w9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055914
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5cd_hp4_: /tmp/tmp5cd_hp4_.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpv4_frv4d: /tmp/tmpv4_frv4d.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = 0;\n    for (int i = 0; i\
    \ < nums.size(); i++) {\n        currSum += nums[i];\n        if (currSum < minSum)\
    \ {\n            minSum = currSum;\n        }\n        if (currSum > 0) {\n  \
    \          currSum = 0;\n        }\n    }\n    return minSum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (long num : nums) {\n  \
    \      sum += num;\n        if (sum < minSum) {\n            minSum = sum;\n \
    \       }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmphlsaujyt: /tmp/tmphlsaujyt.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055914
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long current_sum = nums[0];\n    for (int\
    \ i = 1; i < nums.size(); i++) {\n        current_sum = std::min(nums[i], current_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, current_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = 0;\n    for (long num : nums)\
    \ {\n        sum += num;\n        min_sum = std::min(min_sum, sum);\n        if\
    \ (sum > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = 0;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n\
    \            min_sum = sum;\n        }\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currentSum = 0;\n    for (long num :\
    \ nums) {\n        currentSum += num;\n        if (currentSum < minSum) {\n  \
    \          minSum = currentSum;\n        }\n        if (currentSum > 0) {\n  \
    \          currentSum = 0;\n        }\n    }\n    return minSum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055914
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpv4_frv4d: /tmp/tmpv4_frv4d.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   min_sum = std::min(min_sum, sum);\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9yftsmc9: /tmp/tmp9yftsmc9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long curr_sum = 0;\n    for (auto num : nums)\
    \ {\n        curr_sum += num;\n        if (curr_sum < min_sum) {\n           \
    \ min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n            curr_sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5wsxllfa: /tmp/tmp5wsxllfa.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055914
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055914
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpnp27y7xd: /tmp/tmpnp27y7xd.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpv4_frv4d: /tmp/tmpv4_frv4d.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpv4_frv4d: /tmp/tmpv4_frv4d.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n  long min_sum = nums[0];\n  long curr_sum = nums[0];\n  for (int i = 1;\
    \ i < nums.size(); i++) {\n    curr_sum = std::min(nums[i], curr_sum + nums[i]);\n\
    \    min_sum = std::min(min_sum, curr_sum);\n  }\n  return min_sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm636t779: /tmp/tmpm636t779.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5cd_hp4_: /tmp/tmp5cd_hp4_.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   min_sum = std::min(min_sum, sum);\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5cd_hp4_: /tmp/tmp5cd_hp4_.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpv4_frv4d: /tmp/tmpv4_frv4d.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long current_sum = nums[0];\n    for (int\
    \ i = 1; i < nums.size(); i++) {\n        current_sum = std::min(nums[i], current_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, current_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n      \
    \  min_sum = std::min(min_sum, sum);\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055914
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = 0;\n    for (auto num : nums)\
    \ {\n        sum += num;\n        min_sum = std::min(min_sum, sum);\n        if\
    \ (sum > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm636t779: /tmp/tmpm636t779.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto i = nums.begin();\
    \ i != nums.end(); ++i) {\n        sum += *i;\n        if (sum < min_sum) {\n\
    \            min_sum = sum;\n        }\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpw9nltxr5: /tmp/tmpw9nltxr5.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgeufuwpt: /tmp/tmpgeufuwpt.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long currSum = 0;\n    for (auto num : nums) {\n\
    \        currSum += num;\n        if (currSum < minSum) {\n            minSum\
    \ = currSum;\n        }\n        if (currSum > 0) {\n            currSum = 0;\n\
    \        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpo4hlzl_d: /tmp/tmpo4hlzl_d.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055914
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9yftsmc9: /tmp/tmp9yftsmc9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (long i = 0; i < nums.size(); i++) {\n        curr_sum += nums[i];\n\
    \        if (curr_sum < min_sum) {\n            min_sum = curr_sum;\n        }\n\
    \        if (curr_sum > 0) {\n            curr_sum = 0;\n        }\n    }\n  \
    \  return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2,\
    \ (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055914
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long sum = nums[0];\n    for (int i = 1;\
    \ i < nums.size(); i++) {\n        sum = std::min(nums[i], sum + nums[i]);\n \
    \       minSum = std::min(minSum, sum);\n    }\n    return minSum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055914
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = LONG_MAX;\n    long sum = 0;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n\
    \            min_sum = sum;\n        }\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long current_sum = nums[0];\n    for (int\
    \ i = 1; i < nums.size(); i++) {\n        current_sum = std::min(nums[i], current_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, current_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5cd_hp4_: /tmp/tmp5cd_hp4_.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n  long minSum = 0;\n  long sum = 0;\n  for (auto num : nums) {\n    sum +=\
    \ num;\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpupb78fh9: /tmp/tmpupb78fh9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055914
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = LONG_MAX;\n    long curr_sum = 0;\n    for (long i = 0;\
    \ i < nums.size(); i++) {\n        curr_sum += nums[i];\n        if (curr_sum\
    \ < min_sum) {\n            min_sum = curr_sum;\n        }\n        if (curr_sum\
    \ > 0) {\n            curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm636t779: /tmp/tmpm636t779.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpv4_frv4d: /tmp/tmpv4_frv4d.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long currentSum = 0;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        currentSum += nums[i];\n        if (currentSum\
    \ < minSum) {\n            minSum = currentSum;\n        }\n        if (currentSum\
    \ > 0) {\n            currentSum = 0;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpp51q8snj: /tmp/tmpp51q8snj.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        curr_sum += nums[i];\n        if (curr_sum < min_sum) {\n  \
    \          min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n     \
    \       curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_n22nyra: /tmp/tmp_n22nyra.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (auto num : nums) {\n        curr_sum += num;\n        min_sum =\
    \ std::min(min_sum, curr_sum);\n        if (curr_sum > 0) {\n            curr_sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long curr_sum = 0;\n    for (auto num : nums)\
    \ {\n        curr_sum += num;\n        if (curr_sum < min_sum) {\n           \
    \ min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n            curr_sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5wsxllfa: /tmp/tmp5wsxllfa.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055914
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long current_sum = nums[0];\n    for (int\
    \ i = 1; i < nums.size(); i++) {\n        current_sum = std::min(nums[i], current_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, current_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (auto num : nums) {\n        curr_sum += num;\n        min_sum =\
    \ std::min(min_sum, curr_sum);\n        if (curr_sum > 0) {\n            curr_sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055914
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = 0;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n\
    \            min_sum = sum;\n        }\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n  \
    \      sum += num;\n        if (sum < minSum) {\n            minSum = sum;\n \
    \       }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpep2kzoqh: /tmp/tmpep2kzoqh.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        curr_sum += nums[i];\n        if (curr_sum < min_sum) {\n  \
    \          min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n     \
    \       curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_n22nyra: /tmp/tmp_n22nyra.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = 0;\n    for (long num : nums)\
    \ {\n        sum += num;\n        min_sum = std::min(min_sum, sum);\n        if\
    \ (sum > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = 0;\n    for (auto num : nums)\
    \ {\n        sum += num;\n        min_sum = std::min(min_sum, sum);\n        if\
    \ (sum > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055914
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = LONG_MAX;\n    long sum = 0;\n    for (long num : nums)\
    \ {\n        sum += num;\n        min_sum = std::min(min_sum, sum);\n        if\
    \ (sum > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055914
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = LONG_MAX;\n    long curr_sum = 0;\n    for (long i = 0;\
    \ i < nums.size(); i++) {\n        curr_sum += nums[i];\n        if (curr_sum\
    \ < min_sum) {\n            min_sum = curr_sum;\n        }\n        if (curr_sum\
    \ > 0) {\n            curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpnp27y7xd: /tmp/tmpnp27y7xd.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long currentSum = 0;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        currentSum += nums[i];\n        if (currentSum\
    \ < minSum) {\n            minSum = currentSum;\n        }\n        if (currentSum\
    \ > 0) {\n            currentSum = 0;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpp51q8snj: /tmp/tmpp51q8snj.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055914
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = LONG_MAX;\n    long sum = 0;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        sum += nums[i];\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        curr_sum += nums[i];\n        if (curr_sum < min_sum) {\n  \
    \          min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n     \
    \       curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_n22nyra: /tmp/tmp_n22nyra.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        curr_sum += nums[i];\n        if (curr_sum < min_sum) {\n  \
    \          min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n     \
    \       curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_n22nyra: /tmp/tmp_n22nyra.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5cd_hp4_: /tmp/tmp5cd_hp4_.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055914
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long curr_sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        curr_sum += nums[i];\n        if (curr_sum < min_sum) {\n  \
    \          min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n     \
    \       curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_9c4l4ws: /tmp/tmp_9c4l4ws.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto it = nums.begin();\
    \ it != nums.end(); ++it) {\n        sum += *it;\n        if (sum < min_sum) {\n\
    \            min_sum = sum;\n        }\n    }\n    return min_sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpt4vh2ew8: /tmp/tmpt4vh2ew8.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9yftsmc9: /tmp/tmp9yftsmc9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5cd_hp4_: /tmp/tmp5cd_hp4_.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm636t779: /tmp/tmpm636t779.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5cd_hp4_: /tmp/tmp5cd_hp4_.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = nums[0];\n    for (int i = 1;\
    \ i < nums.size(); i++) {\n        sum = std::min(nums[i], sum + nums[i]);\n \
    \       min_sum = std::min(min_sum, sum);\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm636t779: /tmp/tmpm636t779.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = nums[0];\n    for (int i = 1;\
    \ i < nums.size(); i++) {\n        sum = std::min(nums[i], sum + nums[i]);\n \
    \       min_sum = std::min(min_sum, sum);\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9yftsmc9: /tmp/tmp9yftsmc9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm636t779: /tmp/tmpm636t779.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpnp27y7xd: /tmp/tmpnp27y7xd.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055914
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long min_sum = std::numeric_limits<long>::max();\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n      \
    \  min_sum = std::min(min_sum, sum);\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpl4s_xvd1: /tmp/tmpl4s_xvd1.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto i = nums.begin();\
    \ i != nums.end(); ++i) {\n        sum += *i;\n        if (sum < min_sum) {\n\
    \            min_sum = sum;\n        }\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpw9nltxr5: /tmp/tmpw9nltxr5.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long curr_sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        curr_sum += nums[i];\n        if (curr_sum < min_sum) {\n  \
    \          min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n     \
    \       curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_9c4l4ws: /tmp/tmp_9c4l4ws.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long current_sum = nums[0];\n    for (int\
    \ i = 1; i < nums.size(); i++) {\n        current_sum = std::min(nums[i], current_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, current_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm636t779: /tmp/tmpm636t779.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = INT_MAX;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        min_sum = std::min(min_sum, sum);\n\
    \        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n      \
    \  minSum = std::min(minSum, sum);\n        if (sum > 0) {\n            sum =\
    \ 0;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5cd_hp4_: /tmp/tmp5cd_hp4_.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        curr_sum += nums[i];\n        if (curr_sum < min_sum) {\n  \
    \          min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n     \
    \       curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_n22nyra: /tmp/tmp_n22nyra.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm636t779: /tmp/tmpm636t779.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long currSum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        currSum += nums[i];\n        if (currSum < minSum) {\n     \
    \       minSum = currSum;\n        }\n        if (currSum > 0) {\n           \
    \ currSum = 0;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp87g6sxvl: /tmp/tmp87g6sxvl.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = nums[0];\n    for (int i = 1;\
    \ i < nums.size(); i++) {\n        sum = std::min(nums[i], sum + nums[i]);\n \
    \       min_sum = std::min(min_sum, sum);\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto n : nums) {\n        sum += n;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long min = std::numeric_limits<long>::max();\n   \
    \ for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if\
    \ (sum < min) {\n            min = sum;\n        }\n        if (sum > 0) {\n \
    \           sum = 0;\n        }\n    }\n    return min;\n}\nint main() {\n   \
    \ auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n  \
    \      sum += num;\n        if (sum < minSum) {\n            minSum = sum;\n \
    \       }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpep2kzoqh: /tmp/tmpep2kzoqh.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055914
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9yftsmc9: /tmp/tmp9yftsmc9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9yftsmc9: /tmp/tmp9yftsmc9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n  long min_sum = 0;\n  long curr_sum = 0;\n  for (long i = 0; i < nums.size();\
    \ i++) {\n    curr_sum += nums[i];\n    if (curr_sum < min_sum) {\n      min_sum\
    \ = curr_sum;\n    }\n    if (curr_sum > 0) {\n      curr_sum = 0;\n    }\n  }\n\
    \  return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2,\
    \ (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpkftg44cy: /tmp/tmpkftg44cy.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto n : nums) {\n   \
    \     sum += n;\n        if (sum < min_sum) {\n            min_sum = sum;\n  \
    \      }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmplbhv7k55: /tmp/tmplbhv7k55.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9yftsmc9: /tmp/tmp9yftsmc9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (long num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto x : nums) {\n   \
    \     sum += x;\n        if (sum < min_sum) {\n            min_sum = sum;\n  \
    \      }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp4npsx0vr: /tmp/tmp4npsx0vr.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm636t779: /tmp/tmpm636t779.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055913
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055914
