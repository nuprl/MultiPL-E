name: HumanEval_104_unique_digits
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
  \ integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n\
  // Note: Returned vector should be sorted in increasing order.\n// For example:\n\
  // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
  // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
  \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
  \ unique_digits(std::vector<long> x) {\n"
tests: "}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
  \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
  \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
  \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
  \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
  \ (std::vector<long>({(long)31, (long)135})));\n}\n"
completions: ["    std::vector<long> res;\n    for(int i = 0; i < x.size(); i++) {\n\
    \        if(x[i] < 10) {\n            res.push_back(x[i]);\n        } else {\n\
    \            int flag = 0;\n            while(x[i] > 0) {\n                if(x[i]\
    \ % 2 == 0) {\n                    flag = 1;\n                    break;\n   \
    \             }\n                x[i] /= 10;\n            }\n            if(flag\
    \ == 0) {\n                res.push_back(x[i]);\n            }\n        }\n  \
    \  }\n    return res;", "    std::vector<long> res;\n    for(auto i : x) {\n \
    \       bool flag = true;\n        while(i) {\n            if(i % 2 == 0) {\n\
    \                flag = false;\n                break;\n            }\n      \
    \      i /= 10;\n        }\n        if(flag) res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> res;\n    for(auto i:x){\n\
    \        int flag=0;\n        while(i){\n            if(i%2==0){\n           \
    \     flag=1;\n                break;\n            }\n            i/=10;\n   \
    \     }\n        if(flag==0)\n            res.push_back(i);\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;", "    std::vector<long> res;\n    for(int i = 0; i < x.size();\
    \ i++) {\n        long num = x[i];\n        bool flag = true;\n        while(num\
    \ > 0) {\n            if(num % 2 == 0) {\n                flag = false;\n    \
    \            break;\n            }\n            num /= 10;\n        }\n      \
    \  if(flag) {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> res;\n    for(int i =\
    \ 0; i < x.size(); i++) {\n        int num = x[i];\n        int flag = 0;\n  \
    \      while(num > 0) {\n            int rem = num % 10;\n            if(rem %\
    \ 2 == 0) {\n                flag = 1;\n                break;\n            }\n\
    \            num = num / 10;\n        }\n        if(flag == 0) {\n           \
    \ res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;", "    std::vector<long> res;\n    for(long i = 0; i < x.size();\
    \ i++) {\n        long num = x[i];\n        bool flag = true;\n        while(num\
    \ > 0) {\n            if(num % 2 == 0) {\n                flag = false;\n    \
    \            break;\n            }\n            num /= 10;\n        }\n      \
    \  if(flag) {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> res;\n    for(int i =\
    \ 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;", " \
    \   std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n    \
    \    int num = x[i];\n        bool isUnique = true;\n        while (num > 0) {\n\
    \            int digit = num % 10;\n            if (digit % 2 == 0) {\n      \
    \          isUnique = false;\n                break;\n            }\n        \
    \    num /= 10;\n        }\n        if (isUnique) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;",
  "    std::vector<long> ans;\n    for(auto i:x){\n        int flag=0;\n        while(i){\n\
    \            if(i%2==0){\n                flag=1;\n                break;\n  \
    \          }\n            i/=10;\n        }\n        if(flag==0)\n           \
    \ ans.push_back(i);\n    }\n    sort(ans.begin(),ans.end());\n    return ans;",
  "    std::vector<long> res;\n    for(auto i:x){\n        int flag=0;\n        while(i){\n\
    \            if(i%2==0){\n                flag=1;\n                break;\n  \
    \          }\n            i/=10;\n        }\n        if(flag==0)\n           \
    \ res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n    return\
    \ res;", "    std::vector<long> res;\n    for(int i = 0; i < x.size(); i++) {\n\
    \        int num = x[i];\n        bool flag = true;\n        while(num) {\n  \
    \          int rem = num % 10;\n            if(rem % 2 == 0) {\n             \
    \   flag = false;\n                break;\n            }\n            num /= 10;\n\
    \        }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<long>\
    \ result;\n    for (auto i : x) {\n        std::string s = std::to_string(i);\n\
    \        bool flag = true;\n        for (auto j : s) {\n            if ((j - '0')\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n        }\n        if (flag) {\n            result.push_back(i);\n  \
    \      }\n    }\n    std::sort(result.begin(), result.end());\n    return result;",
  "    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n    \
    \    long num = x[i];\n        bool is_unique = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                is_unique = false;\n   \
    \             break;\n            }\n            num /= 10;\n        }\n     \
    \   if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;", "    std::vector<long>\
    \ result;\n    for (int i = 0; i < x.size(); i++) {\n        long num = x[i];\n\
    \        bool flag = true;\n        while (num > 0) {\n            if (num % 2\
    \ == 0) {\n                flag = false;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;",
  "    std::vector<long> result;\n    for (auto i : x) {\n        bool flag = true;\n\
    \        while (i > 0) {\n            if ((i % 10) % 2 == 0) {\n             \
    \   flag = false;\n                break;\n            }\n            i /= 10;\n\
    \        }\n        if (flag) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;", " \
    \   std::vector<long> res;\n    for(int i = 0; i < x.size(); i++) {\n        int\
    \ num = x[i];\n        bool flag = true;\n        while(num > 0) {\n         \
    \   int rem = num % 10;\n            if(rem % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    sort(res.begin(), res.end());\n    return res;", "    std::vector<long>\
    \ result;\n    for (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n\
    \        } else {\n            bool is_unique = true;\n            while (i >\
    \ 0) {\n                if (i % 2 == 0) {\n                    is_unique = false;\n\
    \                    break;\n                }\n                i /= 10;\n   \
    \         }\n            if (is_unique) {\n                result.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;", "    std::vector<long> res;\n    for(auto i:x){\n      \
    \  int flag=0;\n        while(i){\n            if(i%2==0){\n                flag=1;\n\
    \                break;\n            }\n            i/=10;\n        }\n      \
    \  if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;", "    std::vector<long> res;\n    for(int i = 0; i < x.size();\
    \ i++) {\n        int flag = 0;\n        long num = x[i];\n        while(num >\
    \ 0) {\n            if(num % 10 % 2 == 0) {\n                flag = 1;\n     \
    \           break;\n            }\n            num /= 10;\n        }\n       \
    \ if(flag == 0) {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> res;\n    for(auto i:x){\n\
    \        int flag=0;\n        while(i>0){\n            if(i%2==0){\n         \
    \       flag=1;\n                break;\n            }\n            i/=10;\n \
    \       }\n        if(flag==0)\n            res.push_back(i);\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;"]
stop_tokens:
- "\n}"
