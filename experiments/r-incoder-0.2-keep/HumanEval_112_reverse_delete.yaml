name: HumanEval_112_reverse_delete
language: r
prompt: "# Task\n# We are given two strings s and c, you have to deleted all the characters\
  \ in s that are equal to any character in c\n# then check if the result string is\
  \ palindrome.\n# A string is called palindrome if it reads the same backward as\
  \ forward.\n# You should return a tuple containing the result string and True/False\
  \ for the check.\n# Example\n# For s = \"abcde\", c = \"ae\", the result should\
  \ be ('bcd',False)\n# For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n\
  # For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\nreverse_delete\
  \ <- function(s, c) {"
tests: "test_humaneval <- function() {\ncandidate <- reverse_delete\n    if(!identical(candidate('abcde',\
  \ 'ae'), c('bcd', FALSE))){quit('no', 1)}\n    if(!identical(candidate('abcdef',\
  \ 'b'), c('acdef', FALSE))){quit('no', 1)}\n    if(!identical(candidate('abcdedcba',\
  \ 'ab'), c('cdedc', TRUE))){quit('no', 1)}\n    if(!identical(candidate('dwik',\
  \ 'w'), c('dik', FALSE))){quit('no', 1)}\n    if(!identical(candidate('a', 'a'),\
  \ c('', TRUE))){quit('no', 1)}\n    if(!identical(candidate('abcdedcba', ''), c('abcdedcba',\
  \ TRUE))){quit('no', 1)}\n    if(!identical(candidate('abcdedcba', 'v'), c('abcdedcba',\
  \ TRUE))){quit('no', 1)}\n    if(!identical(candidate('vabba', 'v'), c('abba', TRUE))){quit('no',\
  \ 1)}\n    if(!identical(candidate('mamma', 'mia'), c('', TRUE))){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: []
stop_tokens:
- "\n#"
- "\n```"
