name: HumanEval_91_is_bored
language: r
prompt: "# You'll be given a string of words, and your task is to count the number\n\
  # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
  \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
  )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
  )\n# 1\nis_bored <- function(S) {"
tests: "test_humaneval <- function() {\ncandidate <- is_bored\n    if(!identical(candidate('Hello\
  \ world'), 0)){quit('no', 1)}\n    if(!identical(candidate('Is the sky blue?'),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('I love It !'), 1)){quit('no',\
  \ 1)}\n    if(!identical(candidate('bIt'), 0)){quit('no', 1)}\n    if(!identical(candidate('I\
  \ feel good today. I will be productive. will kill It'), 2)){quit('no', 1)}\n  \
  \  if(!identical(candidate('You and I are going for a walk'), 0)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  S <- unlist(strsplit(S, split = \" \"))\n  sum(grepl(\"^I\", S))\n\
    }\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nThe\
    \ is_bored function works well on short sentences, but it fails on long sentences.\n\
    Let's try it on a long sentence.\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather. Hello world\")\n</cell>\n<text>\nThe\
    \ is_bored function fails because \"Hello world\" doesn't start with the letter\
    \ \"I\".\nLet's try it on a short sentence.\n\n\n</text>\n<cell>\nis_bored(\"\
    Hello world\")\n</cell>\n<text>\nThe is_bored function works well on short sentences,\
    \ but it fails on long sentences.\nLet's try it on a long sentence.\n\n\n</text>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather. Hello\
    \ world\")\n</cell>\n<text>\nThe is_bored function fails because \"Hello world\"\
    \ doesn't start with the letter \"I\".\nLet's try it on a short sentence.\n\n\n\
    </text>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<text>\nThe is_bored function\
    \ works well on short sentences, but it fails on long sentences.\nLet's try it\
    \ on a long sentence.\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather. Hello world\")\n</cell>\n<text>\nThe is_bored\
    \ function fails because \"Hello world\" doesn't start with the letter \"I\".\n\
    Let's try it on a short sentence.\n\n\n</text>\n<cell>\nis_bored(\"Hello world\"\
    )\n</cell>\n<text>\nThe is_bored function works well on short sentences, but it\
    \ fails on long sentences.\nLet's try it on a long sentence.\n\n\n</text>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather. Hello world\"\
    )\n</cell>\n<text>\nThe is_bored function fails because \"Hello world\" doesn't\
    \ start with the letter \"I\".\nLet's try it on a short sentence.\n\n\n</text>\n\
    <cell>\nis_bored(\"Hello world\")\n</cell>\n<text>\nThe is_bored function works\
    \ well on short ", "\n  S <- unlist(strsplit(S, split = \" \"))\n  sum(grepl(\"\
    ^I\", S))\n}\n</cell>\n<cell>", "\n  S <- tolower(S)\n  S <- gsub(\"[.!?]\", \"\
    \ \", S)\n  S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"^i\", S))\n}\n</cell>\n\
    <text>\nRun the cell below to test your solution.\n\n\n</text>\n<cell>", "\n \
    \ S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n\
    <cell>", "\n  S <- unlist(strsplit(S, split=\".?!\"))\n  sum(grepl(\"^I\", S))\n\
    }\n", "\n  S <- unlist(strsplit(S, split=\".?!\"))\n  sum(grepl(\"^I\", S))\n\
    }\n</cell>\n<cell>", "\n  S <- gsub(\"[.?!]\", \"\", S)\n  sum(grepl(\"^I\", S))\n\
    }\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"\
    match.length\") > 0)\n}\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<text>\nThe boredom function is a very simple function that counts\
    \ the number of boredoms within a string. Let's see how it works on a larger example:\n\
    \n\n</text>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n</cell>\n<text>\nThe boredom function works well for short strings,\
    \ but it fails for longer strings. Let's see how it works on a longer string:\n\
    \n\n</text>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather. My friends love me too. He is my friend.\")\n</cell>\n<text>\nThe boredom\
    \ function fails to identify the sentence as a boredom sentence. Let's see how\
    \ it works on a longer string:\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather. My friends love me too. He is my friend.\
    \ My friends love me too. He is my friend. My friends love me too. He is my friend.\"\
    )\n</cell>\n<text>\nThe boredom function fails to identify the sentence as a boredom\
    \ sentence. Let's see how it works on a longer string:\n\n\n</text>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather. My friends\
    \ love me too. He is my friend. My friends love me too. He is my friend. My friends\
    \ love me too. He is my friend. My friends love me too. He is my friend. My friends\
    \ love me too. He is my friend. My friends love me too. He is my friend. My friends\
    \ love me too. He is my friend. My friends love me too. He is my friend. My friends\
    \ love me too. He is my friend. My friends love me too. He is my friend. My friends\
    \ love me too. He ", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms,\
    \ \"match.length\") > 0)\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"\
    .\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split=\"\\\\.|\\\\?|!\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S,\
    \ split=\".?!\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<text>\nNow let's try\
    \ it out on a few examples:\n\n\n</text>\n<cell>\nis_bored(\"Hello world\")\n\
    </cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather.\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather. \")\n</cell>\n<text>\nAnd now a function that will count\
    \ the number of boredoms in a string.\n\n\n</text>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split=\"\\\\.|\\\\?|!\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n\
    \  S <- gsub(\"[.!?]\", \"\", S)\n  return(sum(grepl(\"^I\", S)))\n}\n", "\n \
    \ boredoms <- gregexpr(\"[I].*[!.?]\", S)\n  sum(attr(boredoms, \"match.length\"\
    ) > 0)\n}\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n}\n",
  "\n  S <- unlist(strsplit(S, split = \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n\
    <text>\nRun the cell below to test your function.\n\n\n</text>\n<cell>", "\n \
    \ S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n\
    <cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n\
    }\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nis_bored\
    \ is pretty straightforward, so you might want to try it out on your own sentences.\n\
    \n\n</text>\n<cell>"]
stop_tokens:
- "\n#"
- "\n```"
