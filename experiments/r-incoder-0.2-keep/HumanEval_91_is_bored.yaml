name: HumanEval_91_is_bored
language: r
prompt: "# You'll be given a string of words, and your task is to count the number\n\
  # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
  \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
  )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
  )\n# 1\nis_bored <- function(S) {"
tests: "test_humaneval <- function() {\ncandidate <- is_bored\n    if(!identical(candidate('Hello\
  \ world'), 0)){quit('no', 1)}\n    if(!identical(candidate('Is the sky blue?'),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('I love It !'), 1)){quit('no',\
  \ 1)}\n    if(!identical(candidate('bIt'), 0)){quit('no', 1)}\n    if(!identical(candidate('I\
  \ feel good today. I will be productive. will kill It'), 2)){quit('no', 1)}\n  \
  \  if(!identical(candidate('You and I are going for a walk'), 0)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  S <- unlist(strsplit(S, split = \" \"))\n  sum(grepl(\"^I\", S))\n\
    }\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nThe\
    \ is_bored function works well on short sentences, but it fails on long sentences.\n\
    Let's try it on a long sentence.\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather. Hello world\")\n</cell>\n<text>\nThe\
    \ is_bored function fails because \"Hello world\" doesn't start with the letter\
    \ \"I\".\nLet's try it on a short sentence.\n\n\n</text>\n<cell>\nis_bored(\"\
    Hello world\")\n</cell>\n<text>\nThe is_bored function works well on short sentences,\
    \ but it fails on long sentences.\nLet's try it on a long sentence.\n\n\n</text>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather. Hello\
    \ world\")\n</cell>\n<text>\nThe is_bored function fails because \"Hello world\"\
    \ doesn't start with the letter \"I\".\nLet's try it on a short sentence.\n\n\n\
    </text>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<text>\nThe is_bored function\
    \ works well on short sentences, but it fails on long sentences.\nLet's try it\
    \ on a long sentence.\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather. Hello world\")\n</cell>\n<text>\nThe is_bored\
    \ function fails because \"Hello world\" doesn't start with the letter \"I\".\n\
    Let's try it on a short sentence.\n\n\n</text>\n<cell>\nis_bored(\"Hello world\"\
    )\n</cell>\n<text>\nThe is_bored function works well on short sentences, but it\
    \ fails on long sentences.\nLet's try it on a long sentence.\n\n\n</text>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather. Hello world\"\
    )\n</cell>\n<text>\nThe is_bored function fails because \"Hello world\" doesn't\
    \ start with the letter \"I\".\nLet's try it on a short sentence.\n\n\n</text>\n\
    <cell>\nis_bored(\"Hello world\")\n</cell>\n<text>\nThe is_bored function works\
    \ well on short ", "\n  S <- unlist(strsplit(S, split = \" \"))\n  sum(grepl(\"\
    ^I\", S))\n}\n</cell>\n<cell>", "\n  S <- tolower(S)\n  S <- gsub(\"[.!?]\", \"\
    \ \", S)\n  S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"^i\", S))\n}\n</cell>\n\
    <text>\nRun the cell below to test your solution.\n\n\n</text>\n<cell>", "\n \
    \ S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n\
    <cell>", "\n  S <- unlist(strsplit(S, split=\".?!\"))\n  sum(grepl(\"^I\", S))\n\
    }\n", "\n  S <- unlist(strsplit(S, split=\".?!\"))\n  sum(grepl(\"^I\", S))\n\
    }\n</cell>\n<cell>", "\n  S <- gsub(\"[.?!]\", \"\", S)\n  sum(grepl(\"^I\", S))\n\
    }\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"\
    match.length\") > 0)\n}\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<text>\nThe boredom function is a very simple function that counts\
    \ the number of boredoms within a string. Let's see how it works on a larger example:\n\
    \n\n</text>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n</cell>\n<text>\nThe boredom function works well for short strings,\
    \ but it fails for longer strings. Let's see how it works on a longer string:\n\
    \n\n</text>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather. My friends love me too. He is my friend.\")\n</cell>\n<text>\nThe boredom\
    \ function fails to identify the sentence as a boredom sentence. Let's see how\
    \ it works on a longer string:\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather. My friends love me too. He is my friend.\
    \ My friends love me too. He is my friend. My friends love me too. He is my friend.\"\
    )\n</cell>\n<text>\nThe boredom function fails to identify the sentence as a boredom\
    \ sentence. Let's see how it works on a longer string:\n\n\n</text>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather. My friends\
    \ love me too. He is my friend. My friends love me too. He is my friend. My friends\
    \ love me too. He is my friend. My friends love me too. He is my friend. My friends\
    \ love me too. He is my friend. My friends love me too. He is my friend. My friends\
    \ love me too. He is my friend. My friends love me too. He is my friend. My friends\
    \ love me too. He is my friend. My friends love me too. He is my friend. My friends\
    \ love me too. He ", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms,\
    \ \"match.length\") > 0)\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"\
    .\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split=\"\\\\.|\\\\?|!\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S,\
    \ split=\".?!\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<text>\nNow let's try\
    \ it out on a few examples:\n\n\n</text>\n<cell>\nis_bored(\"Hello world\")\n\
    </cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather.\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather. \")\n</cell>\n<text>\nAnd now a function that will count\
    \ the number of boredoms in a string.\n\n\n</text>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split=\"\\\\.|\\\\?|!\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n\
    \  S <- gsub(\"[.!?]\", \"\", S)\n  return(sum(grepl(\"^I\", S)))\n}\n", "\n \
    \ boredoms <- gregexpr(\"[I].*[!.?]\", S)\n  sum(attr(boredoms, \"match.length\"\
    ) > 0)\n}\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n}\n",
  "\n  S <- unlist(strsplit(S, split = \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n\
    <text>\nRun the cell below to test your function.\n\n\n</text>\n<cell>", "\n \
    \ S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n\
    <cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n\
    }\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nis_bored\
    \ is pretty straightforward, so you might want to try it out on your own sentences.\n\
    \n\n</text>\n<cell>", "\n  boredoms <- gregexpr(\"[I].*\", S)\n  sum(boredoms[[1]]\
    \ == 0)\n}\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\n\
    is_bored is defined above as is_bored. Let's see how to use it below.\n\n\n</text>\n\
    <cell>", "\n  S <- unlist(strsplit(S, split=\"\\\\.|\\\\?|!\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split = \"[.?!]\"\
    ))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- tolower(S)\n  bored <- 0\n  \n  for(i\
    \ in 1:length(S)) {\n    if(S[i] == \"i\") {\n      bored <- bored + 1\n    }\n\
    \  }\n  \n  return(bored)\n}\n", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"\
    ^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\n\
    is_bored is defined above and can be used like this:\n\n\n</text>\n<cell>\nis_bored(\"\
    Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nQuestion 2.2: Write a function is_hungry\
    \ that takes a string as input and returns a boolean (True or False) indicating\
    \ whether the string is hungry or not.\n\nHint: Use regular expressions to solve\
    \ this problem.\n\n\n</text>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"\
    ))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  boredoms\
    \ <- gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n}\n</cell>\n<cell>", "\n  boredoms\
    \ <- grep(\"^I\", S, perl = TRUE)\n  length(boredoms)\n}\n", "\n  boredoms <-\
    \ gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split=\".?!\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S <- tolower(S)\n\
    \  S <- gsub(\"[.!?]\", \" \", S)\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"\
    ^i\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"\\\\.|\\\\\
    ?|!\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- tolower(S)\n  S <- gsub(\"[.!?]\"\
    , \"\", S)\n  S <- unlist(strsplit(S, \" \"))\n  return(sum(grepl(\"^i\", S)))\n\
    }\n</cell>\n<text>\nRun the cell below to test your function.\n\n\n</text>\n<cell>",
  "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n\
    }\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split = \"[.?!]\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n</cell>\n<text>\nNow let's try it out on some boredom:\n\n\n</text>\n\
    <cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nNow try it out\
    \ on some nonboredom:\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue. I am tired\
    \ of this. I love this weather.\")\n</cell>\n<text>\nNow try it out on some nonboredom:\n\
    \n\n</text>\n<cell>\nis_bored(\"The sky is blue. I am tired of this. I love this\
    \ weather.\")\n</cell>\n<text>\nNow try it out on some nonboredom:\n\n\n</text>\n\
    <cell>\nis_bored(\"The sky is blue. I am tired of this. I love this weather.\"\
    )\n</cell>\n<text>\nNow try it out on some nonboredom:\n\n\n</text>\n<cell>\n\
    is_bored(\"The sky is blue. I am tired of this. I love this weather.\")\n</cell>\n\
    <text>\nNow try it out on some nonboredom:\n\n\n</text>\n<cell>\nis_bored(\"The\
    \ sky is blue. I am tired of this. I love this weather.\")\n</cell>\n<text>\n\
    Now try it out on some nonboredom:\n\n\n</text>\n<cell>\nis_bored(\"The sky is\
    \ blue. I am tired of this. I love this weather.\")\n</cell>\n<text>\nNow try\
    \ it out on some nonboredom:\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue.\
    \ I am tired of this. I love this weather.\")\n</cell>\n<text>\nNow try it out\
    \ on some nonboredom:\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue. I am tired\
    \ of this. I love this weather.\")\n</cell>\n<text>\nNow try it out on some nonboredom:\n\
    \n\n</text>\n<cell>\nis_bored(\"The sky is blue. I am tired of this. I love this\
    \ weather.\")\n</cell>\n<text>\nNow try it ", "\n  S <- strsplit(S, \" \")[[1]]\n\
    \  sum(grepl(\"^I\", S))\n}\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms,\
    \ \"match.length\") > 0)\n}\n</cell>\n<cell>", "\n  boredoms <- gregexpr(\"^I\"\
    , S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n</cell>\n<cell>", "\n  S\
    \ <- unlist(strsplit(S, split = \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n\
    <cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nis_bored is defined\
    \ above as is_bored. Let's see how to use it.\n\n\n</text>\n<cell>\nis_bored(\"\
    Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nThe is_bored function works well for\
    \ our examples. Let's try it on the next one:\n\n\n</text>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n<text>\n\
    It works well for sentences, but not so well for paragraphs. Let's try it on the\
    \ next one:\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather.\\nThe weather is beautiful.\")\n</cell>\n<text>\nIt works\
    \ well for paragraphs, but not so well for sentences. Let's try it on the next\
    \ one:\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I\
    \ love this weather.\\nThe weather is beautiful.\\nThe weather is beautiful.\"\
    )\n</cell>\n<text>\nIt works well for paragraphs, but not so well for sentences.\
    \ Let's try it on the next one:\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather.\\nThe weather is beautiful.\\nThe weather\
    \ is beautiful.\\nThe weather is beautiful.\\nThe weather is beautiful.\\nThe\
    \ weather is beautiful.\\nThe weather is beautiful.\\nThe weather is beautiful.\\\
    nThe weather is beautiful.\\nThe weather is beautiful.\\nThe weather is beautiful.\\\
    nThe weather is beautiful.\\nThe weather is beautiful.\\nThe weather is beautiful.\\\
    nThe weather is beautiful.\\nThe weather is beautiful.\\nThe weather is beautiful.\\\
    nThe weather is beautiful.\\nThe weather is beautiful.\\nThe weather is beautiful.\\\
    nThe weather is beautiful.\\nThe weather is beautiful", "\n  S <- strsplit(S,\
    \ \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split = \"[?!.]\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- gsub(\"[.?!]\"\
    , \"\", S)\n  return(sum(grepl(\"^I\", S)))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split=\".\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  boredoms <- gregexpr(\"^I\"\
    , S)\n  sum(boredoms[[1]][1] != -1)\n}\n</cell>\n<text>\nNow let's test our function\
    \ on the first few sentences.\n\n\n</text>\n<cell>\nis_bored(\"Hello world\")\n\
    </cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<text>\nIt works!\n\nNow let's write a function that takes in a string\
    \ and returns the same string with only the first letter capitalized.\n\n\n</text>\n\
    <cell>", "\n  S <- tolower(S)\n  S <- gsub(\"[.!?]\", \" \", S)\n  S <- strsplit(S,\
    \ \" \")[[1]]\n  sum(grepl(\"^i\", S))\n}\n</cell>\n<text>\nRun the cell below\
    \ to test your function.\n\n\n</text>\n<cell>", "\n  S <- unlist(strsplit(S, split\
    \ = \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S <- tolower(S)\n\
    \  S <- gsub(\"[.?!]\", \"\", S)\n  S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"\
    ^i\", S))\n}\n", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n\
    }\n", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n", "\n  S\
    \ <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n\
    <cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nis_bored is pretty\
    \ straightforward, but it would be nice to have a function that can count the\
    \ number of boredoms given a set of boredom sentences. We can do this by modifying\
    \ is_bored so that it returns a vector of boredom counts.\n\n\n</text>\n<cell>",
  "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n}\n", "\n  S <- tolower(S)\n\
    \  S <- gsub(\"[.?!]\", \"\", S)\n  return(length(grep(\"^i\", S)))\n}\n</cell>\n\
    <cell>", "\n  S <- unlist(strsplit(S, split=\"\\\\.|\\\\?|!\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\n\
    is_bored is now a function, so you can call it on any string and it will return\
    \ an integer.\n\n\n</text>\n<text>\nPart 2: Practice with regular expressions\n\
    Now that you've seen how to count boredoms, let's practice with regular expressions.\n\
    \nThe function grepl will let you search for a pattern within a string. For example,\n\
    \n\n</text>\n<cell>\ngrepl(\"^I\", c(\"I\", \"love\", \"this\", \"weather\"))\n\
    </cell>\n<text>\nwill return a vector of TRUE/FALSE values indicating whether\
    \ each string starts with \"I\".\n\ngrepl is similar to grep, but instead of returning\
    \ a vector of matches, it returns a logical vector. For example,\n\n\n</text>\n\
    <cell>\ngrepl(\"^I\", c(\"I\", \"love\", \"this\", \"weather\"))\n</cell>\n<text>\n\
    will return a vector of TRUE/FALSE values indicating whether each string starts\
    \ with \"I\".\n\nIn this problem, you'll be working with regular expressions to\
    \ solve a problem related to boredom.\n\nThe function str_count will let you count\
    \ the number of times a pattern appears in a string. For example,\n\n\n</text>\n\
    <cell>\nstr_count(c(\"I\", \"love\", \"this\", \"weather\"), \"^I\")\n</cell>\n\
    <text>\nwill return a vector of integers indicating how many times each string\
    \ starts with \"I\".\n\nIn this problem, you'll be working with regular expressions\
    \ to solve a problem related to boredom.\n\nThe function str_count will let you\
    \ count the number of times a pattern appears in a string. For example,\n\n\n\
    </text>\n<cell>\nstr_count(c(\"I\", \"love\", \"this\", \"weather\"), \"^I\")\n\
    </cell>\n<text>\nwill return a vector of integers indicating how many times each\
    \ string starts with \"I\".\n\nIn this problem, you'll be working with regular\
    \ expressions to solve a problem related to boredom.\n\nThe function str_count\
    \ will let you count the number of times a pattern appears in a string. For example,\n\
    \n\n</text>\n<cell>\nstr_count(c(\"I\", \"love\", \"this\", \"weather\"), \"^I\"\
    )\n</cell>\n<text>\nwill return a vector of integers indicating how many times\
    \ each string starts with \"I\".\n\nIn this problem, you'll be working with ",
  "\n  S <- gsub(\"[.?!]\", \"\", S)\n  return(sum(grepl(\"^I\", S)))\n}\n", "\n \
    \ S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n\
    <cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nPart 2: Putting\
    \ it all together\nNow that we have some bored sentences, let's put them all together\
    \ and count the boredoms.\n\n\n</text>\n<cell>\nbored_sentences <- c(\"Hello world\"\
    , \"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n<cell>\n\
    is_bored(bored_sentences)\n</cell>\n<text>\nPart 3: Finding out which ones are\
    \ really bored\nNow that we have some bored sentences, let's find out which ones\
    \ are really bored.\n\n\n</text>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"\
    \\\\.|\\\\?|!\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S,\
    \ split = \" \"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S,\
    \ split=\"\\\\.|\\\\?|!\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"\
    Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nThe boredom function works with any\
    \ kind of sentence, even if the sentence is too long.\n\n\n</text>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather. I am a bored\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of times the word \"bored\" appears in the string.\n\n\n</text>\n<cell>", "\n\
    \  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n\
    }\n</cell>\n<cell>", "\n  boredoms <- gregexpr(\"[I].*\", S)\n  sum(attr(boredoms,\
    \ \"match.length\") > 0)\n}\n", "\n  S <- unlist(strsplit(S, split=\".?!\"))\n\
    \  sum(grepl(\"^I\", S))\n}\n", "\n  S <- tolower(S)\n  S <- gsub(\"[.!?]\", \"\
    \ \", S)\n  S <- gsub(\"^I \", \"\", S)\n  S <- gsub(\"I $\", \"\", S)\n  S <-\
    \ gsub(\"^I \", \"\", S)\n  S <- gsub(\"I $\", \"\", S)\n  S <- gsub(\"^I \",\
    \ \"\", S)\n  S <- gsub(\"I $\", \"\", S)\n  S <- gsub(\"^I \", \"\", S)\n  S\
    \ <- gsub(\"I $\", \"\", S)\n  S <- gsub(\"^I \", \"\", S)\n  S <- gsub(\"I $\"\
    , \"\", S)\n  S <- gsub(\"^I \", \"\", S)\n  S <- gsub(\"I $\", \"\", S)\n  S\
    \ <- gsub(\"^I \", \"\", S)\n  S <- gsub(\"I $\", \"\", S)\n  S <- gsub(\"^I \"\
    , \"\", S)\n  S <- gsub(\"I $\", \"\", S)\n  S <- gsub(\"^I \", \"\", S)\n  S\
    \ <- gsub(\"I $\", \"\", S)\n  S <- gsub(\"^I \", \"\", S)\n  S <- gsub(\"I $\"\
    , \"\", S)\n  S <- gsub(\"^I \", \"\", S)\n  S <- gsub(\"I $\", \"\", S)\n  S\
    \ <- gsub(\"^I \", \"\", S)\n  S <- gsub(\"I $\", \"\", S)\n  S <- gsub(\"^I \"\
    , \"\", S)\n  S <- gsub(\"I $\", \"\", S)\n  S <- gsub(\"^I \", \"\", S)\n  S\
    \ <- gsub(\"I $\", \"\", S)\n  S <- gsub(\"^I \", \"\", S)\n  S <- gsub(\"I $\"\
    , \"\", S)\n  S <- gsub(\"^I \", \"\", S)\n  S <- gsub(\"I $\", \"\", S)\n  S\
    \ <- gsub(\"^I \", \"\", S)\n  S <- gsub(\"I $\", \"\", S)\n  S <- gsub(\"^I \"\
    , \"\", S)\n  S <- gsub(\"I $\", \"\", S)\n  S <- gsub(\"^I \", \"\", S)\n  S\
    \ <- gsub(\"I $\", \"\", S)\n  S <- gsub(\"^I \", \"\", S)\n  S <- gsub(\"I $\"\
    , \"\", S)\n  S <- gsub(\"^I \", \"\"", "\n  S <- unlist(strsplit(S, split = \"\
    [.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<text>\nRun the cell below to\
    \ test your function\n\n\n</text>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<text>\nNow that you have your function, it's time to put it together\
    \ with the next question: what is the probability that someone is bored?\n\n\n\
    </text>\n<cell>", "\n  boredoms <- grep(\"^I\", S, perl = TRUE)\n  length(boredoms)\n\
    }\n", "\n  boredoms <- 0\n  \n  for(i in 1:(length(S) - 1)) {\n    if(S[i] ==\
    \ \"I\" && S[i+1] == \"I\") {\n      boredoms <- boredoms + 1\n    }\n  }\n  \n\
    \  return(boredoms)\n}\n", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n\
    }\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n}\n", "\n  boredoms\
    \ <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n", "\n\
    \  S <- gsub(\"[.?!]\", \"\", S)\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S,\
    \ split=\"[?!.]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S <- strsplit(S,\
    \ \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S, split=\"\
    \\\\.|\\\\?|!\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  boredoms <- gregexpr(\"\
    ^I\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n", "\n  S <- unlist(strsplit(S,\
    \ \" \"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S, split=\"\
    [.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<text>\nRun the cell below to\
    \ test your function\n\n\n</text>\n<cell>", "\n  boredoms <- gregexpr(\"^I\",\
    \ S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n</cell>\n<text>\nNow let's\
    \ test our function\n\n\n</text>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<text>\nAnd now let's see how it works on a larger corpus\n\n\n</text>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather.\"\
    )\n</cell>\n<text>\nNow let's try it on a larger corpus\n\n\n</text>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n\
    <text>\nNow let's try it on a larger corpus\n\n\n</text>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n<text>\n\
    Now let's try it on a larger corpus\n\n\n</text>\n<cell>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.\")\n</cell>\n<text>\nNow let's\
    \ try it on a larger corpus\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather.\")\n</cell>\n<text>\nNow let's try\
    \ it on a larger corpus\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather.\")\n</cell>\n<text>\nNow let's try it on\
    \ a larger corpus\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather.\")\n</cell>\n<text>\nNow let's try it on a larger\
    \ corpus\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather.\")\n</cell>\n<text>\nNow let's try it on a larger corpus\n\
    \n\n</text>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather.\")\n</cell>\n<text>\nNow let's try it on a larger corpus\n\n\n</text>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather.\"\
    )\n</cell>\n", "\n  S <- unlist(strsplit(S, split = \"[.?!]\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\n\
    is_bored is defined above as is_bored. Let's see how to use it.\n\n\n</text>\n\
    <cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n\
    }\n</cell>\n<cell>", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms,\
    \ \"match.length\") > 0)\n}\n", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n\
    \  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"\
    [.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"Hello world\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n</cell>\n<text>\nis_bored is now a function that takes in a string\
    \ and returns the number of boredoms in the string.\n\nNext write a function that\
    \ takes in a string and returns the number of times the word \"I\" appears in\
    \ the string, ignoring case. Use a regular expression to ignore case.\n\n\n</text>\n\
    <cell>", "\n  boredoms <- grep(\"^I\", S, value = TRUE)\n  length(boredoms)\n\
    }\n", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n", "\n  S\
    \ <- tolower(S)\n  S <- gsub(\"[.?!]\", \"\", S)\n  S <- unlist(strsplit(S, \"\
    \ \"))\n  sum(grepl(\"^i\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split=\".?!\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  boredoms\
    \ <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n</cell>\n\
    <cell>", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n", "\n\
    \  S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  boredoms\
    \ <- gregexpr(\"[I].+\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n\
    </cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"\\\\.|\\\\?|!\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n</cell>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather.?\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather.!?\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather.!?\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather.!?\")\n</cell>\n<cell>\nis_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather.!?\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather.!?\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather.!?\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather.!?\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather.!?\")\n</cell>\n<cell>\nis_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather.!?\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining", "\n  boredoms <- gregexpr(\"\
    ^I\", S)\n  sum(boredoms > 0)\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<text>\nNow let's test\
    \ your function\n\n\n</text>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nGreat! Now you have a function that counts how many boredoms there are\
    \ in a string.\n\n\n</text>\n<text>\nPart 2: Extracting boredom sentences\nNow\
    \ that you have your is_bored function, you will write a function that takes in\
    \ a string and returns the string with the \"boredom\" removed. Your function\
    \ should only take in a string and return a string.\n\n\n</text>\n<cell>", "\n\
    \  S <- tolower(S)\n  S <- gsub(\"[.?!]\", \"\", S)\n  return(sum(grepl(\"^i\"\
    , S)))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n\
    \  sum(grepl(\"^I\", S))\n}\n", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"\
    ^I\", S))\n}\n</cell>\n<cell>", "\n  boredoms <- gregexpr(\"[I].*\", S)\n  sum(boredoms[[1]][-1]\
    \ != -1)\n}\n</cell>\n<cell>", "\n  S <- tolower(S)\n  S <- gsub(\"[.!?]\", \"\
    \ \", S)\n  S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"^i\", S))\n}\n", "\n\
    \  boredoms <- grep(\"^I\", S, value = TRUE)\n  length(boredoms)\n}\n", "\n  S\
    \ <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  boredoms\
    \ <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n</cell>\n\
    <text>\nNow let's try it out on our example sentence:\n\n\n</text>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\n\
    It correctly identifies that the sentence is bored!\n\nNow let's try it out on\
    \ a different sentence:\n\n\n</text>\n<cell>\nis_bored(\"The weather is sweet.\
    \ The sky is blue. Hello world\")\n</cell>\n<text>\nIt correctly identifies that\
    \ the sentence is not bored!\n\nTry it out with your own sentences:\n\n\n</text>\n\
    <cell>\nis_bored(\"The weather is sweet. The sky is blue. Hello world\")\n</cell>\n\
    <cell>\nis_bored(\"The weather is sweet. The sky is blue. Hello world\")\n</cell>\n\
    <text>\nGreat! Now you know how to identify whether a sentence is bored or not\
    \ based on its content.\n\n\n</text>\n<text>\nPart 2: Extracting bored sentences\n\
    Now that you've seen how to identify whether a sentence is bored or not based\
    \ on its content, let's extract all the bored sentences.\n\nYou'll be given a\
    \ text corpus of sentences. Just like in the previous exercises, you first need\
    \ to remove punctuation, lower the case, and tokenize all the sentences into the\
    \ individual words. After that, you should count the bored sentences.\n\nFor this\
    \ exercise, you will be using regular expressions. In general, you should be able\
    \ to find regular expressions for all the punctuation in the text corpus.\n\n\
    Instructions\n\nRemove all punctuation using gsub(). Store the result in a variable\
    \ called punc.\nLower all the letters using tolower(). Store the result in a variable\
    \ called lower.\nTokenize the sentences using strsplit(). Store the result in\
    \ a variable called sentences.\nFor each sentence in sentences, count the bored\
    \ sentences using is_bored(). Store the result in a variable called bored.\nPrint\
    \ the bored sentences.\n\n\n</text>\n<cell>", "\n  boredoms <- gregexpr(\"^I\"\
    , S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n</cell>\n<cell>\nis_bored(\"\
    Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nis_bored is now a function that takes\
    \ a string and returns the number of boredoms it finds.\n\n\n</text>\n<text>\n\
    Question 2: Write a function that takes a string and returns the number of boredoms\
    \ it finds.\n\n\n</text>\n<cell>", "\n  boredoms <- grep(\"^I\", S, value = TRUE)\n\
    \  length(boredoms)\n}\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms,\
    \ \"match.length\") > 0)\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"\
    .?!\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S, split=\"\\\
    \\.|\\\\?|!\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<text>\nRun the cell below\
    \ to test your function.\n\n\n</text>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<text>\nFinally, write a function that takes in a string and returns\
    \ the same string with all words reversed.\n\n\n</text>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split=\"\\\\.|\\\\?|!\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- strsplit(S,\
    \ \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S, split=\"\
    .\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<text>\nRun the cell below to test\
    \ your function\n\n\n</text>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nQuestion 3\nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'a'.\n\n\n</text>\n<cell>",
  "\n  S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S,\
    \ split = \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<text>\nRun the cell\
    \ below to test your function.\n\n\n</text>\n<cell>\nis_bored(\"Hello world\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n</cell>\n<text>\nFinally, write a function that takes in a string\
    \ and returns the same string with the words reversed.\n\n\n</text>\n<cell>",
  "\n  S <- gsub(\"[.?!]\", \"\", S)\n  sum(grepl(\"^I\", S))\n}\n", "\n  boredoms\
    \ <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n", "\n\
    \  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n\
    \  S <- unlist(strsplit(S, split = \" \"))\n  sum(grepl(\"^I\", S))\n}\n", "\n\
    \  S <- unlist(strsplit(S, split=\"\\\\.|\\\\?|!\"))\n  sum(grepl(\"^I\", S))\n\
    }\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n</cell>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather.?\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather.!?\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather.!?\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather.!?\")\n</cell>\n<cell>\nis_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather.!?\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather.!?\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather.!?\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather.!?\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather.!?\")\n</cell>\n<cell>\nis_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather.!?\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining", "\n  S <- unlist(strsplit(S,\
    \ split = \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S <-\
    \ unlist(strsplit(S, split=\".\"))\n  bored <- which(grepl(\"^I\", S))\n  return(length(bored))\n\
    }\n</cell>\n<cell>", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n\
    }\n", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n</cell>\n\
    <cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nis_bored is pretty\
    \ straightforward, but it would be more efficient to vectorize is_bored and use\
    \ apply to run it on each sentence in turn.\n\n\n</text>\n<cell>\nis_bored <-\
    \ function(S) {\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n\
    </cell>\n<cell>\nis_bored <- Vectorize(is_bored)\n</cell>\n<cell>\nis_bored(\"\
    Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<cell>\nis_bored <- function(S) {\n  S <- strsplit(S,\
    \ \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\nis_bored <- Vectorize(is_bored)\n\
    </cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nis_bored\
    \ is pretty straightforward, but it would be more efficient to vectorize is_bored\
    \ and use apply to run it on each sentence in turn.\n\n\n</text>\n<cell>\nis_bored\
    \ <- function(S) {\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n\
    }\n</cell>\n<cell>\nis_bored <- Vectorize(is_bored)\n</cell>\n<cell>\nis_bored(\"\
    Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<cell>\nis_bored <- function(S) {\n  S <- strsplit(S,\
    \ \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\nis_bored <- Vectorize(is_bored)\n\
    </cell>\n<cell>\nis_bored(\"Hello world\")", "\n  boredoms <- gregexpr(\"^I\"\
    , S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n", "\n  boredoms <- gregexpr(\"\
    [I].*\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n", "\n  S <- unlist(strsplit(S,\
    \ split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<text>\nNow let's try\
    \ it out on some boredom:\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nNow try it out on a\
    \ different boredom:\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue. I am tired\
    \ of this weather\")\n</cell>\n<text>\nNow try it out on a bored sentence:\n\n\
    \n</text>\n<cell>\nis_bored(\"The sky is blue. I am tired of this weather. I am\
    \ bored\")\n</cell>\n<text>\nAnd now try it out on a bored sentence:\n\n\n</text>\n\
    <cell>\nis_bored(\"The sky is blue. I am tired of this weather. I am bored. I\
    \ am bored\")\n</cell>\n<text>\nNow try it out on a bored sentence:\n\n\n</text>\n\
    <cell>\nis_bored(\"The sky is blue. I am tired of this weather. I am bored. I\
    \ am bored. I am bored\")\n</cell>\n<text>\nNow try it out on a bored sentence:\n\
    \n\n</text>\n<cell>\nis_bored(\"The sky is blue. I am tired of this weather. I\
    \ am bored. I am bored. I am bored. I am bored. I am bored\")\n</cell>\n<text>\n\
    Now try it out on a bored sentence:\n\n\n</text>\n<cell>\nis_bored(\"The sky is\
    \ blue. I am tired of this weather. I am bored. I am bored. I am bored. I am bored.\
    \ I am bored. I am bored. I am bored. I am bored\")\n</cell>\n<text>\nNow try\
    \ it out on a bored sentence:\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue.\
    \ I am tired of this weather. I am bored. I am bored. I am bored. I am bored.\
    \ I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am\
    \ bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored.\
    \ I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am\
    \ bored. ", "\n  S <- unlist(strsplit(S, split=\"\\\\.|\\\\?|!\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n</cell>\n<cell>", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(boredoms\
    \ > 0)\n}\n", "\n  S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"^I\", S))\n\
    }\n", "\n  S <- unlist(strsplit(S, split = \"[?!.]\"))\n  sum(grepl(\"^I\", S))\n\
    }\n", "\n  boredoms <- grep(\"^I\", S, perl = TRUE)\n  length(boredoms)\n}\n",
  "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S,\
    \ split = \"[\\.\\?\\!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n\
    \  S <- tolower(S)\n  bored <- grepl(\"^i\", S)\n  sum(bored)\n}\n", "\n  S <-\
    \ unlist(strsplit(S, split=\"\\\\.|\\\\?|!\"))\n  sum(grepl(\"^I\", S))\n}\n",
  "\n  S <- unlist(strsplit(S, split=\"[?!.]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n\
    <cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n\
    }\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nBONUS:\
    \ Write a function that takes a string and returns the number of words in that\
    \ string that contain letters a-z or A-Z.\n\n\n</text>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split = \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"\
    Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nis_bored is now a function, and you\
    \ can test it on a few examples:\n\n\n</text>\n<cell>\nis_bored(\"Hello world\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather.\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather.!\")\n</cell>\n<cell>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.!?\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather.!?!\")\n</cell>\n<text>\n\
    Now that you've written a function, you can call it on any string:\n\n\n</text>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather.!?!?\"\
    )\n</cell>\n<text>\nAnd you can call it on multiple strings:\n\n\n</text>\n<cell>\n\
    is_bored(\"Hello world\", \"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<text>\nExercise: Write a function that takes a string and returns\
    \ the number of words in the string. \nThe function should ignore punctuation\
    \ and only count the words. \nIt should ignore numbers and only count the words.\n\
    It should ignore words that are only one character long.\nIt should ignore words\
    \ that are longer than one character.\nIt should ignore words that are longer\
    \ than five characters.\nIt should ignore words that are longer than ten characters.\n\
    It should ignore words that are longer than twenty characters.\nIt should ignore\
    \ words that are longer than twenty characters. \nIt should ignore words that\
    \ are longer than thirty characters.\nIt should ignore words that are longer than\
    \ thirty characters. \nIt should ignore words that are longer than forty characters.\n\
    It should ignore words that are longer than forty characters. \nIt should ignore\
    \ words that are long", "\n  S <- unlist(strsplit(S, split=\"[\\.\\?!]\"))\n \
    \ sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"\
    [?!.]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split = \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  boredoms\
    \ <- gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n}\n", "\n  S <- tolower(S)\n  S\
    \ <- gsub(\"[.!?]\", \" \", S)\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"\
    ^i\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"\
    ^I\", S))\n}\n</cell>\n<cell>", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms,\
    \ \"match.length\") > 0)\n}\n</cell>\n<cell>", "\n  S <- gsub(\"[.?!]\", \"\"\
    , S)\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"Hello world\")\n\
    </cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<text>\nis_bored is now a function that takes a string and returns\
    \ an integer. Next we'll write a function that takes a list of strings and returns\
    \ a list of integers where the ith entry is the number of boredoms of sentence\
    \ i.\n\n\n</text>\n<cell>", "\n  S <- gsub(\"[.?!]\", \"\", S)\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"\
    match.length\") > 0)\n}\n</cell>\n<cell>", "\n  S <- tolower(S)\n  S <- gsub(\"\
    [.?!]\", \"\", S)\n  S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"^i\", S))\n\
    }\n</cell>\n<cell>", "\n  S <- gsub(\"[.?!]\", \"\", S)\n  sum(grepl(\"^I\", S))\n\
    }\n", "\n  S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"^I\", S))\n}\n", "\n\
    \  S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\n\
    is_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n</cell>\n<text>\nis_bored is pretty straightforward,\
    \ but it would be nice to have it return 0 if the string starts with \"I\" and\
    \ 1 otherwise. Let's add that as a new function bored.\n\n\n</text>\n<cell>\n\
    bored <- function(S) {\n  S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"^I\"\
    , S))\n}\n</cell>\n<cell>\nbored(\"Hello world\")\n</cell>\n<cell>\nbored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nNow\
    \ we can use is_bored and bored to count the number of boredoms in a string.\n\
    \n\n</text>\n<cell>\nbored(is_bored(\"Hello world\"))\n</cell>\n<cell>\nbored(is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\"))\n</cell>\n<text>\n\
    And now we can use is_bored and bored to count the number of boredoms in a string.\n\
    \n\n</text>\n<cell>\nbored(is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\"))\n</cell>\n<text>\nAnd now we can use is_bored and bored to\
    \ count the number of boredoms in a string.\n\n\n</text>\n<cell>\nbored(is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\"))\n</cell>\n<text>\n\
    And now we can use is_bored and bored to count the number of boredoms in a string.\n\
    \n\n</text>\n<cell>\nbored(is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\"))\n</cell>\n<text>\nAnd now we can use is_bored and bored to\
    \ count the number of boredoms in a string.\n\n\n</text>\n<cell>\nbored(is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\"))\n</cell>\n<text>\n\
    And now we can use is_bored and bored to count the number of boredoms in a string.\n\
    \n\n</text>\n<cell>\nbored(is_bo", "\n  S <- unlist(strsplit(S, split = \"[.?!]\"\
    ))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S, split=\".?!\"\
    ))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- tolower(S)\n  bored <- grepl(\"^i\"\
    , S)\n  sum(bored)\n}\n", "\n  S <- unlist(strsplit(S, split = \"[.?!]\"))\n \
    \ sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n\
    \  sum(grepl(\"^I\", S))\n}\n</cell>\n<text>\nRun the cell below to test your\
    \ function.\n\n\n</text>\n<cell>", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms,\
    \ \"match.length\") > 0)\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"\
    .?!\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  boredoms <- gregexpr(\"\
    ^I\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n</cell>\n<cell>", "\n\
    \  S <- tolower(S)\n  S <- gsub(\"[.!?]\", \" \", S)\n  S <- strsplit(S, \" \"\
    )[[1]]\n  sum(grepl(\"^i\", S))\n}\n", "\n  S <- unlist(strsplit(S, split=\".\"\
    ))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S, split=\".?!\"\
    ))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<text>\nis_bored is defined above as is_bored. Let's see how to use\
    \ it below.\n\n\n</text>\n<cell>", "\n  boredoms <- grep(\"^I\", S, value = TRUE)\n\
    \  length(boredoms)\n}\n", "\n  S <- unlist(strsplit(S, split = \"[.?!]\"))\n\
    \  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<text>\nBONUS: Write a function that takes a string and returns the\
    \ number of words in the string that are palindromes. A palindrome is a word that\
    \ is the same when read from left to right. For example:\n>>> is_palindrome(\"\
    racecar\")\nTrue\n>>> is_palindrome(\"racecars\")\nFalse\n>>> is_palindrome(\"\
    A man, a plan, a canal: Panama\")\nTrue\n>>> is_palindrome(\"A man, a plan, a\
    \ canal: Panama\")\nTrue\n>>> is_palindrome(\"A man, a plan, a canal: Panama\"\
    )\nTrue\n>>> is_palindrome(\"A man, a plan, a canal: Panama\")\nTrue\n>>> is_palindrome(\"\
    A man, a plan, a canal: Panama\")\nTrue\n>>> is_palindrome(\"A man, a plan, a\
    \ canal: Panama\")\nTrue\n>>> is_palindrome(\"A man, a plan, a canal: Panama\"\
    )\nTrue\n>>> is_palindrome(\"A man, a plan, a canal: Panama\")\nTrue\n>>> is_palindrome(\"\
    A man, a plan, a canal: Panama\")\nTrue\n>>> is_palindrome(\"A man, a plan, a\
    \ canal: Panama\")\nTrue\n>>> is_palindrome(\"A man, a plan, a canal: Panama\"\
    )\nTrue\n>>> is_palindrome(\"A man, a plan, a canal: Panama\")\nTrue\n>>> is_palindrome(\"\
    A man, a plan, a canal: Panama\")\nTrue\n>>> is_palindrome(\"A man, a plan, a\
    \ canal: Panama\")\nTrue\n>>> is_palindrome(\"A man, a plan, a canal: Panama\"\
    )\nTrue\n>>> is_palindrome(\"A man, a plan, a canal: Panama\")\nTrue\n>>> is_palindrome(\"\
    A man, a plan, a canal: ", "\n  S <- unlist(strsplit(S, split=\".?!\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n\
    \  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"\
    \\\\.|\\\\?|!\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  boredoms\
    \ <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n", "\n\
    \  S <- unlist(strsplit(S, split = \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n",
  "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n\
    \  S <- gsub(\"[.?!]\", \"\", S)\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<text>\n\
    Run the cell below to test your solution. Note that the function is_bored returns\
    \ a single scalar value, so there is no need to put it in a list or use cbind\
    \ to create a matrix. Also note that because is_bored returns a single value,\
    \ the cbind line is wrapped in an sapply call, which converts the output of is_bored\
    \ to numeric values before cbinding the results with the original data.\n\n\n\
    </text>\n<cell>", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n\
    }\n</cell>\n<cell>", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n\
    }\n", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n\
    }\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nis_bored\
    \ is defined above as is_bored. Let's see how to use it below.\n\n\n</text>\n\
    <cell>", "\n  S <- unlist(strsplit(S, split = \"[.?!]\"))\n  sum(grepl(\"^I\"\
    , S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n \
    \ sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  boredoms <- grep(\"^I\", S,\
    \ perl=TRUE)\n  length(boredoms)\n}\n", "\n  S <- unlist(strsplit(S, split=\"\\\
    \\.|\\\\?|!\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S, \"\
    \ \"))\n  bored <- which(grepl(\"^I\", S))\n  length(bored)\n}\n</cell>\n<cell>",
  "\n  boredoms <- grep(\"^I\", S, perl=TRUE)\n  return(length(boredoms))\n}\n</cell>\n\
    <cell>", "\n  S <- unlist(strsplit(S, split = \"[?!.]\"))\n  sum(grepl(\"^I\"\
    , S))\n}\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n}\n</cell>\n\
    <cell>", "\n  S <- gsub(\"[.?!]\", \"\", S)\n  return(sum(grepl(\"^I\", S)))\n\
    }\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"match.length\"\
    ) > 0)\n}\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\n\
    Now write a function that takes a string and returns the number of boredoms \n\
    that occur in the string followed by the number of times those boredoms \noccur\
    \ consecutively within a window of length 3.\n\nFor example, \n>>> count_boredoms_consecutively(\"\
    The sky is blue. The sun is shining. I love this weather.\")\n(2, 1)\n\n</text>\n\
    <cell>\ncount_boredoms_consecutively <- function(S) {\n  boredoms <- gregexpr(\"\
    ^I\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n</cell>\n<cell>\ncount_boredoms_consecutively(\"\
    The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n<text>\n\
    Now write a function that takes a string and returns the number of boredoms \n\
    that occur in the string followed by the number of times those boredoms \noccur\
    \ consecutively within a window of length 3, plus one.\n\nFor example, \n>>> count_boredoms_consecutively(\"\
    The sky is blue. The sun is shining. I love this weather.\")\n(2, 1)\n\n</text>\n\
    <cell>\ncount_boredoms_consecutively <- function(S) {\n  boredoms <- gregexpr(\"\
    ^I\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n</cell>\n<cell>\ncount_boredoms_consecutively(\"\
    The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n<text>\n\
    Now write a function that takes a string and returns the number of boredoms \n\
    that occur in the string followed by the number of times those boredoms \noccur\
    \ consecutively within a window of length 3, plus one.\n\nFor example, \n>>> count_boredoms_consecutively(\"\
    The sky is blue. The sun is shining. I love this weather.\")\n(2, 1)\n\n</text>\n\
    <cell>\ncount_boredoms_consecutively <- function(S) {\n  boredoms <- gregexpr(\"\
    ^I\", S)\n  sum(attr(boredoms, \"match.length", "\n  S <- tolower(S)\n  S <- gsub(\"\
    [.?!]\", \"\", S)\n  S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"^i\", S))\n\
    }\n</cell>\n<text>\nRun the cell below to test your function\n\n\n</text>\n<cell>\n\
    is_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n</cell>\n<text>\nNow let's write a function\
    \ that takes in a string and returns the number of times the word \"bored\" appears\
    \ in a string.\n\nYour function should take in a string and return a number. bored\
    \ appears in the string S exactly once.\n\nThe function is_bored should only return\
    \ a number for bored strings. All other strings should return a number 0.\n\n\
    To solve this problem, you can use a for loop to iterate through all the words\
    \ in the string. \nIf you feel confident with for loops, you can also solve this\
    \ problem with vectorized functions (we will learn about these in later modules).\
    \ \nThe for loop approach is more straightforward, but if you don't feel confident\
    \ with for loops, feel free to uncomment the for loop block and run the cell to\
    \ see how it works.\n\n\n</text>\n<cell>", "\n  boredoms <- gregexpr(\"^I\", S)\n\
    \  sum(attr(boredoms, \"match.length\") > 0)\n}\n", "\n  S <- gsub(\"[.!?]\",\
    \ \"\", S)\n  S <- gsub(\"^I\", \"\", S)\n  return(length(grep(\"^I\", S)))\n\
    }\n", "\n  S <- unlist(strsplit(S, split=\"\\\\.|\\\\?|!\"))\n  sum(grepl(\"^I\"\
    , S))\n}\n</cell>\n<cell>", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"\
    ^I\", S))\n}\n</cell>\n<text>\nNow let's try it out:\n\n\n</text>\n<cell>\nis_bored(\"\
    Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nNow try it out on some different sentences:\n\
    \n\n</text>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather.\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather.\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather.\")\n</cell>\n<cell>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather.\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather.\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather.\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather.\")\n</cell>\n<cell>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather.\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is ", "\n  S <- unlist(strsplit(S, split\
    \ = \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<text>\nRun the cell below\
    \ to test your function\n\n\n</text>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<text>\nQuestion 3\nWrite a function that takes in a string and returns\
    \ the number of times the word \"bored\" appears in the string.\n\n\n</text>\n\
    <cell>", "\n  S <- tolower(S)\n  S <- gsub(\"[.!?]\", \" \", S)\n  S <- strsplit(S,\
    \ \" \")[[1]]\n  sum(grepl(\"^i\", S))\n}\n</cell>\n<cell>", "\n  S <- strsplit(S,\
    \ \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S,\
    \ split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<text>\nNow let's test\
    \ your function\n\n\n</text>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nAnd now let's run it on some real data\n\n\n</text>\n<cell>", "\n  S <-\
    \ unlist(strsplit(S, split=\".?!\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\n\
    is_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n</cell>\n<text>\nBONUS: Write a function\
    \ that takes a string and returns a list of all the words in that string. Ignore\
    \ casing.\n\n\n</text>\n<cell>", "\n  S <- tolower(S)\n  S <- gsub(\"[.?!]\",\
    \ \"\", S)\n  S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"^i\", S))\n}\n</cell>\n\
    <cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nWrite a function\
    \ is_hungry that takes a string and checks whether the string starts with \"I\
    \ hungry\". Return 1 if the string starts with \"I hungry\" and 0 otherwise.\n\
    \n\n</text>\n<cell>", "\n  S <- tolower(S)\n  bored <- grepl(\"^i\", S)\n  sum(bored)\n\
    }\n</cell>\n<cell>", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n\
    }\n", "\n  S <- tolower(S)\n  S <- gsub(\"[.!?]\", \" \", S)\n  S <- unlist(strsplit(S,\
    \ \" \"))\n  sum(grepl(\"^i\", S))\n}\n", "\n  S <- unlist(strsplit(S, split =\
    \ \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>"]
stop_tokens:
- "\n#"
- "\n```"
