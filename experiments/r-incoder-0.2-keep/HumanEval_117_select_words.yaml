name: HumanEval_117_select_words
language: r
prompt: "# Given a string s and a natural number n, you have been tasked to implement\
  \ \n# a function that returns a list of all words from string s that contain exactly\
  \ \n# n consonants, in order these words appear in the string s.\n# If the string\
  \ s is empty then the function should return an empty list.\n# Note: you may assume\
  \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
  Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
  \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2)\
  \ ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
  Uncle sam\", 3) ==> [\"Uncle\"]\nselect_words <- function(s, n) {"
tests: "test_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
  \ had a little lamb', 4), c('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
  \ had a little lamb', 3), c('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
  \ white space', 2), c())){quit('no', 1)}\n    if(!identical(candidate('Hello world',\
  \ 4), c('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
  \ c('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), c())){quit('no',\
  \ 1)}\n    if(!identical(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  words <- list()\n \
    \ \n  for(i in 1:n){\n    \n    words <- c(words, grep(paste0(\"\\\\b\", substr(s,\
    \ i, i + 1), \"\\\\b\"), s, value = TRUE))\n    \n  }\n  \n  return(words)\n}\n",
  "\n  \n  if(s == \"\") {\n    return(list())\n  }\n  \n  words <- list()\n  \n \
    \ for(i in 1:n-1) {\n    \n    words <- c(words, grep(paste0(\"[[:alpha:]]{\"\
    , i, \"}\"), s))\n    \n  }\n  \n  return(words)\n}\n", "\n  \n  if(s == \"\"\
    ) {\n    return(list())\n  }\n  \n  words <- unlist(strsplit(s, \" \"))\n  \n\
    \  return(words[grepl(\"^[[:alpha:]]{n}$\", words)])\n}\n", "\n  \n  if(s == \"\
    \") {\n    return(list())\n  }\n  \n  consonants <- c(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n  \n  words <- list()\n  \n  for(i\
    \ in 1:n){\n    \n    for(j in 1:length(s)){\n      \n      if(substr(s, j, 1)\
    \ == consonants[i]){\n        \n        words[[i]] <- substr(s, j, 1)\n      \
    \  \n        break\n      }\n    }\n  }\n  \n  return(words)\n}\n", "\n  \n  #\
    \ Your code here\n  \n}\n", "\n  \n  # Write your code here\n  \n}\n</cell>\n\
    <cell>", "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>", "\n  \n  # Write\
    \ your code here\n  \n}\n</cell>\n<cell>", "\n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  ", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  # Write your code here\n\
    \  \n}\n", "\n  \n  s <- tolower(s)\n  \n  if(s == \"\") {\n    return(list())\n\
    \  }\n  \n  words <- list()\n  \n  for(i in 1:n-1) {\n    \n    words <- c(words,\
    \ grep(paste0(\"[[:alpha:]]{\", i, \"}\"), s, value = TRUE))\n    \n  }\n  \n\
    \  return(words)\n}\n", "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>", "\n\
    \  \n  # Your code here\n  \n}\n</cell>\n<cell>", "\n  \n  if(s == \"\") {\n \
    \   return(list())\n  }\n  \n  words <- list()\n  \n  for(i in 1:n){\n    \n \
    \   for(j in 1:n){\n      \n      if(j > i){\n        \n        words[[i]] <-\
    \ paste(s[(i - 1):(i - j + 1)], collapse = \" \")\n      }\n      \n      if(j\
    \ == i){\n        \n        words[[i]] <- paste(s[(i - 1):i], collapse = \" \"\
    )\n      }\n      \n    }\n    \n  }\n  \n  return(words)\n}\n\nselect_words(\"\
    Mary had a little lamb\", 4)", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n\
    \  \n  # Your code here\n  \n}\n", "\n  \n  # Write your code here\n  \n}\n</cell>\n\
    <cell>", "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>", "\n  \n  # Your code\
    \ here\n  \n}\n</cell>\n<cell>", "\n  \n  words <- c()\n  \n  for(i in 1:n){\n\
    \    \n    words <- c(words, grep(\"^[[:alpha:]]+\", s, value = TRUE))\n    \n\
    \  }\n  \n  return(words)\n  \n}\n", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n\
    \  \n  # Write your code here\n  \n}\n</cell>\n<cell>", "\n  \n  words <- c()\n\
    \  \n  for(i in 1:n){\n    \n    words <- c(words, grep(paste0(\"^\", substr(s,\
    \ i, i), \"$\"), s))\n    \n  }\n  \n  return(words)\n  \n}\n", "\n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  ", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  if(s\
    \ == \"\") {\n    return(list())\n  }\n  \n  words <- strsplit(s, \" \")\n  \n\
    \  return(words[[1]][grep(paste0(\"^\", paste0(\"[[:alpha:]]\", 1:n, \"$\")),\
    \ \n                           words[[1]])])\n}\n</cell>\n<cell>\nselect_words(\"\
    Mary had a little lamb\", 4)\n</cell>\n<cell>\nselect_words(\"Mary had a little\
    \ lamb\", 3)\n</cell>\n<cell>\nselect_words(\"simple white space\", 2)\n</cell>\n\
    <cell>\nselect_words(\"Hello world\", 4)\n</cell>\n<cell>\nselect_words(\"Uncle\
    \ sam\", 3)\n</cell>\n<text>\nProblem 3\nThe function should return a list of\
    \ all words from string s that contain exactly n vowels, in order these words\
    \ appear in the string s.\nIf the string s is empty then the function should return\
    \ an empty list.\nNote: you may assume the input string contains only letters\
    \ and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"\
    ]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\"\
    , 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nselect_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2)\
    \ ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle\
    \ sam\", 3) ==> [\"Uncle\"]\nselect_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"\
    ]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\"\
    , 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nselect_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2)\
    \ ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Un",
  "\n  \n  words <- list()\n  \n  if(s == \"\") {\n    \n    words <- list()\n   \
    \ \n  } else {\n    \n    words <- unlist(strsplit(s, \" \"))\n    \n    words\
    \ <- words[grepl(\"[[:alpha:]]\", words)]\n    \n    words <- words[grepl(\"[[:space:]]\"\
    , words)]\n    \n    words <- words[grepl(\"[[:punct:]]\", words)]\n    \n   \
    \ words <- words[grepl(\"[[:digit:]]\", words)]\n    \n    words <- words[grepl(\"\
    [[:upper:]]\", words)]\n    \n    words <- words[grepl(\"[[:lower:]]\", words)]\n\
    \    \n    words <- words[grepl(\"[[:digit:]]\", words)]\n    \n    words <- words[grepl(\"\
    [[:alpha:]]\", words)]\n    \n    words <- words[grepl(\"[[:lower:]]\", words)]\n\
    \    \n    words <- words[grepl(\"[[:upper:]]\", words)]\n    \n    words <- words[grepl(\"\
    [[:punct:]]\", words)]\n    \n    words <- words[grepl(\"[[:space:]]\", words)]\n\
    \    \n    words <- words[grepl(\"[[:digit:]]\", words)]\n    \n    words <- words[grepl(\"\
    [[:alpha:]]\", words)]\n    \n    words <- words[grepl(\"[[:lower:]]\", words)]\n\
    \    \n    words <- words[grepl(\"[[:upper:]]\", words)]\n    \n    words <- words[grepl(\"\
    [[:punct:]]\", words)]\n    \n    words <- words[grepl(\"[[:space:]]\", words)]\n\
    \    \n    words <- words[grepl(\"[[:digit:]]\", words)]\n    \n    words <- words[grepl(\"\
    [[:alpha:]]\", words)]\n    \n    words <- words[grepl(\"[[:lower:]]\", words)]\n\
    \    \n    words <- words[grepl(\"[[:upper:]]\", words)]\n    \n    words <- words[grepl(\"\
    [[:punct:]]\", words)]\n    \n    words <- words[grepl(\"[[:space:]]\", words)]\n\
    \    \n    words <- words[grepl(\"[[:", "\n  \n  if(s == \"\") {\n    return(list())\n\
    \  }\n  \n  words <- unlist(strsplit(s, \" \"))\n  \n  return(words[grepl(\"^[[:alpha:]]+$\"\
    , words) & \n               grepl(\"^[[:alpha:]]+$\", words) &\n             \
    \  grepl(\"^[[:alpha:]]+$\", words) &\n               grepl(\"^[[:alpha:]]+$\"\
    , words) &\n               grepl(\"^[[:alpha:]]+$\", words) &\n              \
    \ grepl(\"^[[:alpha:]]+$\", words) &\n               grepl(\"^[[:alpha:]]+$\"\
    , words) &\n               grepl(\"^[[:alpha:]]+$\", words) &\n              \
    \ grepl(\"^[[:alpha:]]+$\", words) &\n               grepl(\"^[[:alpha:]]+$\"\
    , words) &\n               grepl(\"^[[:alpha:]]+$\", words) &\n              \
    \ grepl(\"^[[:alpha:]]+$\", words) &\n               grepl(\"^[[:alpha:]]+$\"\
    , words) &\n               grepl(\"^[[:alpha:]]+$\", words) &\n              \
    \ grepl(\"^[[:alpha:]]+$\", words) &\n               grepl(\"^[[:alpha:]]+$\"\
    , words) &\n               grepl(\"^[[:alpha:]]+$\", words) &\n              \
    \ grepl(\"^[[:alpha:]]+$\", words) &\n               grepl(\"^[[:alpha:]]+$\"\
    , words) &\n               grepl(\"^[[:alpha:]]+$\", words) &\n              \
    \ grepl(\"^[[:alpha:]]+$\", words) &\n               grepl(\"^[[:alpha:]]+$\"\
    , words) &\n               grepl(\"^[[:alpha:]]+$\", words) &\n              \
    \ grepl(\"^[[:alpha:]]+$\", words) &\n               grepl(\"^[[:alpha:]]+$\"\
    , words) &\n               grepl(\"^[[:alpha:]]+$\", words) &\n              \
    \ grepl(\"^[[:alpha:]]+$\", words) &\n               grepl(\"^[[:alpha:]]+$\"\
    , words) &\n               grepl(\"^[[:alpha:]]+$\", words) &\n              \
    \ grepl(\"^[[:alpha:]]+$\", word", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n\
    \  \n  # Write your code here\n  \n}\n</cell>\n<cell>", "\n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  ", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  ", "\n  \n  if(s == \"\") {\n    return(list())\n  }\n  \n\
    \  words <- unlist(strsplit(s, \" \"))\n  \n  return(words[grepl(\"^[[:alpha:]]{n}[[:alpha:]]$\"\
    , words, perl = TRUE)])\n}\n", "\n  \n  # Write your code here\n  \n}\n</cell>\n\
    <cell>", "\n  \n  # Your code here\n  \n}\n", "\n  \n  # Write your code here\n\
    \  \n}\n", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  words <- list()\n \
    \ \n  for(i in 1:n){\n    \n    words <- c(words, grep(paste0(\"\\\\b\", substr(s,\
    \ i, i+1), \"\\\\b\"), s))\n    \n  }\n  \n  return(words)\n  \n}\n", "\n  \n\
    \  words <- list()\n  \n  if(length(s) == 0) {\n    return(words)\n  }\n  \n \
    \ for(i in 1:(n - 1)) {\n    \n    words <- c(words, grep(paste0(\"[[:alpha:]]\"\
    , i), s))\n    \n  }\n  \n  return(words)\n}\n", "\n  \n  # Write your code here\n\
    \  \n}\n</cell>\n<cell>", "\n  \n  if(s == \"\") {\n    return(list())\n  }\n\
    \  \n  words <- list()\n  \n  for(i in 1:length(s)) {\n    \n    if(substr(s[i],1,1)\
    \ == substr(s[i+1],1,1)) {\n      words[[i]] <- substr(s[i],1,1)\n      \n   \
    \   if(length(words) == n) {\n        break\n      }\n      \n      i <- i+1\n\
    \      \n      if(substr(s[i],1,1) == substr(s[i+1],1,1)) {\n        words[[i]]\
    \ <- substr(s[i],1,1)\n        \n        if(length(words) == n) {\n          break\n\
    \        }\n      }\n    }\n  }\n  \n  return(words)\n}\n", "\n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  ", "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>", "\n\
    \  \n  if(s == \"\") {\n    return(list())\n  }\n  \n  words <- unlist(strsplit(s,\
    \ \" \"))\n  \n  return(words[grepl(\"^[[:alpha:]]{n}[[:alpha:]]$\", words, perl\
    \ = TRUE)])\n}\n", "\n  \n  words <- list()\n  \n  for(i in 1:n){\n    \n    temp\
    \ <- gregexpr(paste0(\"[[:alpha:]]+\", paste0(\"[[:alpha:]]+\", \n      paste0(\"\
    [[:alpha:]]+\", paste0(\"[[:alpha:]]+\", paste0(\"[[:alpha:]]+\", \n        paste0(\"\
    [[:alpha:]]+\", paste0(\"[[:alpha:]]+\", paste0(\"[[:alpha:]]+\", \n         \
    \ paste0(\"[[:alpha:]]+\", paste0(\"[[:alpha:]]+\", paste0(\"[[:alpha:]]+\", \n\
    \            paste0(\"[[:alpha:]]+\", paste0(\"[[:alpha:]]+\", paste0(\"[[:alpha:]]+\"\
    , \n              paste0(\"[[:alpha:]]+\", paste0(\"[[:alpha:]]+\", paste0(\"\
    [[:alpha:]]+\", \n                paste0(\"[[:alpha:]]+\", paste0(\"[[:alpha:]]+\"\
    , paste0(\"[[:alpha:]]+\", \n                  paste0(\"[[:alpha:]]+\", paste0(\"\
    [[:alpha:]]+\", paste0(\"[[:alpha:]]+\", \n                    paste0(\"[[:alpha:]]+\"\
    , paste0(\"[[:alpha:]]+\", paste0(\"[[:alpha:]]+\", \n                      paste0(\"\
    [[:alpha:]]+\", paste0(\"[[:alpha:]]+\", paste0(\"[[:alpha:]]+\", \n         \
    \               paste0(\"[[:alpha:]]+\", paste0(\"[[:alpha:]]+\", paste0(\"[[:alpha:]]+\"\
    , \n                          paste0(\"[[:alpha:]]+\", paste0(\"[[:alpha:]]+\"\
    , paste0(\"[[:alpha:]]+\", \n                            paste0(\"[[:alpha:]]+\"\
    , paste0(\"[[:alpha:]]+\", paste0(\"[[:alpha:]]+\", \n                       \
    \       paste0(\"[[:alpha:]]+\", paste0(\"[[:alpha:]]+\", paste0(\"[[:alpha:]]+\"\
    , \n                                paste0(\"[[:alpha:]]+\", paste0(\"[[:alpha:]]+\"\
    , paste0(\"[[:alpha:]]+\", \n                                  paste0(\"[[:alpha:]]+\"\
    , paste0(\"[", "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>", "\n  \n  #\
    \ Write your code here\n  \n}\n</cell>\n<text>\nTest your code\nRun the cell below\
    \ to test your code.\n\n\n</text>\n<cell>", "\n  \n  words <- c()\n  \n  if(s\
    \ == \"\") {\n    return(words)\n  }\n  \n  for(i in 1:n-1) {\n    \n    for(j\
    \ in 1:length(s)) {\n      \n      if(substr(s, j, 1) == substr(s, j+1, 1)) {\n\
    \        \n        words <- c(words, substr(s, 1, j-1))\n        \n      }\n \
    \     \n    }\n    \n  }\n  \n  return(words)\n}\n", "\n  \n  # Write your code\
    \ here\n  \n}\n</cell>\n<cell>", "\n  \n  if(s == \"\") {\n    return(list())\n\
    \  }\n  \n  words <- list()\n  \n  for(i in 1:(length(s) - (n - 1))) {\n    \n\
    \    word <- substring(s, i, i + n)\n    \n    if(length(word) == n) {\n     \
    \ \n      words <- c(words, word)\n      \n    }\n    \n  }\n  \n  return(words)\n\
    \  \n}\n", "\n  \n  words <- c()\n  \n  for(i in 1:n){\n    \n    words <- c(words,\
    \ grep(paste0(\"\\\\b\", substr(s, i, i + 1), \"\\\\b\"), s))\n    \n  }\n  \n\
    \  return(words)\n  \n}\n\nselect_words(\"Mary had a little lamb\", 4) ==> [\"\
    little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"\
    ]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\"\
    , 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,regex |>\nHere is a base R solution using gregexpr\
    \ and regmatches:\n<code>\nselect_words <- function(s, n) {\n  regmatches(s, gregexpr(\"\
    [[:alpha:]]+\", s, perl=TRUE))[[1]]\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,regex\
    \ |>\nHere is a base R solution:\n<code>\nselect_words <- function(s, n) {\n \
    \ words <- unlist(strsplit(s, \" \"))\n  words <- words[words == \"\"]\n  words\
    \ <- words[words != \"\"]\n  words <- words[seq_len(n)]\n  return(words)\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nHere is a base R solution:\n<code>\n\
    select_words <- function(s, n) {\n  words <- unlist(strsplit(s, \" \"))\n  words\
    \ <- words[words == \"\"]\n  words <- words[words != \"\"]\n  words <- words[seq_len(n)]\n\
    \  return(words)\n}\n</code>\n<|/ a tags=r,regex |>\n<| a tags=r,regex |>\nHere\
    \ is a base R solution:\n<code>\nselect_words <- function(s, n) {\n  words <-\
    \ unlist(strsplit(s, \" \"))\n  words <- words[words == \"\"]\n  words <- words[words\
    \ != \"\"]\n  words <- words[seq_len(n)]\n  return(words)\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,regex |>\nHere is a base R solution:\n<code>\nselect_words <-\
    \ function(s, n) {\n  words <- unlist(strsplit(s, \" \"))\n  words <- words[words\
    \ == \"\"]\n  words <- words[words != \"\"]", "\n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  ", "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>", "\n  \n  words <-\
    \ c()\n  \n  for(i in 1:n){\n    \n    words <- c(words, grep(\"^[[:alpha:]]+$\"\
    , s, value = TRUE))\n    \n  }\n  \n  return(words)\n}\n", "\n  \n  if(s == \"\
    \") {\n    return(list())\n  }\n  \n  words <- unlist(strsplit(s, \" \"))\n  \n\
    \  return(words[grepl(\"^[[:alpha:]]{n}$\", words, perl = TRUE)])\n}\n</cell>\n\
    <cell>", "\n  \n  words <- list()\n  \n  for(i in 1:n){\n    \n    words <- c(words,\
    \ grep(paste0(\"[[:alpha:]]{\", i, \"}\"), s))\n    \n  }\n  \n  return(words)\n\
    }\n", "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>", "\n  \n  # Write your\
    \ code here\n  \n}\n</cell>\n<cell>", "\n  \n  if(s == \"\") {\n    return(list())\n\
    \  }\n  \n  consonants <- c(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\")\n  \n  words <- list()\n  \n  for(i in 1:n-1) {\n    \n   \
    \ for(j in 1:length(consonants)) {\n      \n      if(grepl(paste(consonants[j],\
    \ collapse = \"|\"), s)) {\n        \n        words <- c(words, paste(substr(s,\
    \ 1, i), collapse = \"\"))\n        \n        break\n      }\n      \n    }\n\
    \    \n  }\n  \n  return(words)\n}\n\nselect_words(\"Mary had a little lamb\"\
    , 4)\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,string,regex |>\nHere's a solution\
    \ using stringr::str_extract:\n<code>\nlibrary(stringr)\nlibrary(dplyr)\n\nselect_words\
    \ <- function(s, n) {\n  \n  consonants <- c(\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n  \n  words <- list()\n  \n  for(i in 1:n-1)\
    \ {\n    \n    for(j in 1:length(consonants)) {\n      \n      if(grepl(paste(consonants[j],\
    \ collapse = \"|\"), s)) {\n        \n        words <- c(words, str_extract(s,\
    \ paste(consonants[j], collapse = \"|\")))\n        \n        break\n      }\n\
    \      \n    }\n    \n  }\n  \n  return(words)\n}\n\nselect_words(\"Mary had a\
    \ little lamb\", 4)\n</code>\n<|/ a dscore=1 |>\n<| a |>\nHere's a solution using\
    \ stringr::str_extract:\n<code>\nlibrary(stringr)\nlibrary(dplyr)\n\nselect_words\
    \ <- function(s, n) {\n  \n  consonants <- c(\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n  \n  words <- list()\n  \n  for(i in 1:n-1)\
    \ {\n    \n    for(j in 1:length(consonants)) {\n      \n      if(grepl(paste(consonants[j],\
    \ collapse = \"|\"), s)) {\n        \n        words <- c(words, str_extract(s,\
    \ paste(conson", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  ", "\n  \n  # Write your code here\n  \n}\n</cell>\n<cell>",
  "\n  \n  # Your code here\n  \n}\n</cell>\n<text>\nTest your code\nRun the cell\
    \ below to test your code.\n\nBecause of the way the grader is written, if you\
    \ run multiple cells you can see the output from previous cells appear in the\
    \ subsequent cells.\n\n\n</text>\n<cell>", "\n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  ", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  ", "\n  \n  words <- c()\n  \n  if(s == \"\") {\n    return(words)\n  }\n\
    \  \n  for(i in 1:(length(s) - (n - 1))) {\n    \n    for(j in (i + 1):(length(s)\
    \ - (n - 1))) {\n      \n      if(substr(s[i:j], i, n) == substr(s, i, n)) {\n\
    \        \n        words <- c(words, substr(s, i, n))\n      }\n    }\n  }\n \
    \ \n  return(words)\n}\n", "\n  \n  words <- c()\n  \n  for(i in 1:n){\n    \n\
    \    words <- c(words, grep(paste0(\"\\\\b\", substr(s, i, i+1), \"\\\\b\"), s,\
    \ value = TRUE))\n    \n  }\n  \n  return(words)\n}\n\nselect_words(\"Mary had\
    \ a little lamb\", 4)\n</code>\n<|/ a tags=r,regex |>\n<| c |>\nThanks for your\
    \ answer. Can you please explain what does \"\\\\b\" mean?\n<|/ c |>\n<| c |>\n\
    `\\\\b` means word boundary (a space or a punctuation mark). See [this link](https://www.regular-expressions.info/wordboundaries.html)\
    \ for more details.\n<|/ c |>\n<| c |>\nThanks. I understand it now.\n<|/ c |>\n\
    <| a dscore=1 |>\nHere is a base R solution:\n<code>\nselect_words <- function(s,\
    \ n) {\n  \n  words <- c()\n  \n  for(i in 1:n){\n    \n    words <- c(words,\
    \ grep(paste0(\"\\\\b\", substr(s, i, i+1), \"\\\\b\"), s, value = TRUE))\n  \
    \  \n  }\n  \n  return(words)\n}\n\nselect_words(\"Mary had a little lamb\", 4)\n\
    </code>\n<|/ a tags=r,regex |>\n<| a dscore=1 |>\nHere is a base R solution:\n\
    <code>\nselect_words <- function(s, n) {\n  \n  words <- c()\n  \n  for(i in 1:n){\n\
    \    \n    words <- c(words, grep(paste0(\"\\\\b\", substr(s, i, i+1), \"\\\\\
    b\"), s, value = TRUE))\n    \n  }\n  \n  return(words)\n}\n\nselect_words(\"\
    Mary had a little lamb\", 4)\n</code>\n<|/ a tags=r,regex |>\n<| a dscore=1 |>\n\
    Here's a base R solution:\n<code>\nselect_words <- function(s, n) {\n  \n  words\
    \ <- c()\n  \n  for(i in 1:n){\n    \n    words <- c(words, grep(paste0(\"\\\\\
    b\", substr(s, i, i+1), \"\\\\b\"), s, value = TRUE))\n    \n  }\n  \n  return(words)\n\
    }\n\nselect_words(\"Mary had a little lamb\", 4)\n</code>\n<|/ a tags=r,regex\
    \ |>\n<| a dscore=1 |>\nHere is a base R solution:\n<code>\nselect_words <- function(s,\
    \ n) {\n  \n  words <- c()\n", "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>",
  "\n  \n  if(s == \"\") {\n    return(list())\n  }\n  \n  words <- list()\n  \n \
    \ for(i in 1:n) {\n    \n    words <- c(words, grep(paste0(\"\\\\b\", substr(s,\
    \ i, i + 1), \"\\\\b\"), s))\n    \n  }\n  \n  return(words)\n}\n", "\n  \n  #\
    \ Write your code here\n  \n}\n</cell>\n<cell>", "\n  \n  if(s == \"\") {\n  \
    \  return(list())\n  }\n  \n  words <- list()\n  \n  for(i in 1:n) {\n    \n \
    \   temp <- unlist(strsplit(s, split = \"\\\\s\"))\n    \n    for(j in 1:length(temp))\
    \ {\n      \n      if(length(grep(temp[j], words)) == 0) {\n        \n       \
    \ words[[j]] <- temp[j]\n      }\n    }\n  }\n  \n  return(words)\n}\n", "\n \
    \ \n  if(length(s) == 0) {\n    return(list())\n  }\n  \n  words <- list()\n \
    \ \n  for(i in 1:(n - 1)) {\n    \n    for(j in (i + 1):n) {\n      \n      if(grepl(paste0(\"\
    [[:alpha:]]\", i), s) & grepl(paste0(\"[[:alpha:]]\", j), s)) {\n        \n  \
    \      words[[i]] <- c(words[[i]], paste0(s[i], s[j]))\n      }\n    }\n  }\n\
    \  \n  return(words)\n}\n", "\n  \n  # Your code here\n  \n}\n</cell>\n<text>\n\
    Test your code\nRun the cell below to test your code.\n\n\n</text>\n<cell>", "\n\
    \  \n  # Your code here\n  \n}\n</cell>\n<cell>", "\n  \n  if(s == \"\") {\n \
    \   return(list())\n  }\n  \n  words <- list()\n  \n  for(i in 1:(length(s) -\
    \ n)) {\n    \n    word <- substr(s, i, i + n)\n    \n    if(word != \"\") {\n\
    \      \n      if(length(word) == n) {\n        \n        words[[length(words)\
    \ + 1]] <- word\n      }\n    }\n  }\n  \n  return(words)\n}\n", "\n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  ", "\n  \n  words <- list()\n  \n  if(s == \"\") {\n\
    \    return(words)\n  }\n  \n  for(i in 1:n-1) {\n    \n    words <- c(words,\
    \ grep(paste0(\"\\\\b\", substr(s, i, i + 1), \"\\\\b\"), s))\n  }\n  \n  return(words)\n\
    }\n</cell>\n<cell>\nselect_words(\"Mary had a little lamb\", 4)\n</cell>\n<cell>\n\
    select_words(\"Mary had a little lamb\", 3)\n</cell>\n<cell>\nselect_words(\"\
    simple white space\", 2)\n</cell>\n<cell>\nselect_words(\"Hello world\", 4)\n\
    </cell>\n<cell>\nselect_words(\"Uncle sam\", 3)\n</cell>\n<text>\nProblem 3\n\
    The function should take as input a list of words and a number n, and return a\
    \ list of all words from \nthe list that contain exactly n vowels.\nIf the list\
    \ contains less than n vowels then return an empty list.\nIf the list contains\
    \ exactly n vowels then return that list.\nIf the list contains more than n vowels\
    \ then return a list of all words from the list \nthat contain at least n vowels.\n\
    If n is negative then return an empty list.\nExamples:\nvowel_words(\"Mary had\
    \ a little lamb\", 4) ==> [\"little\", \"lamb\"]\nvowel_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\nvowel_words(\"simple white space\", 2)\
    \ ==> []\nvowel_words(\"Hello world\", 4) ==> [\"world\"]\nvowel_words(\"Uncle\
    \ sam\", 3) ==> [\"sam\", \"Uncle\"]\nvowel_words([\"Mary\", \"had\", \"a\", \"\
    little\", \"lamb\"], 4) ==> [\"little\", \"lamb\"]\nvowel_words([\"Mary\", \"\
    had\", \"a\", \"little\", \"lamb\"], 3) ==> [\"Mary\", \"lamb\"]\nvowel_words([\"\
    simple\", \"white\", \"space\"], 2) ==> []\nvowel_words([\"Hello\", \"world\"\
    ], 4) ==> [\"world\"]\nvowel_words([\"Uncle\", \"sam\"], 3) ==> [\"sam\", \"Uncle\"\
    ]\nvowel_words([\"Mary\", \"had\", \"a\", \"little\", \"lamb\"], -1) ==> []\n\
    vowel_words([\"Mary\", \"had\", \"a\", \"little\", \"lamb\"], 0) ==> []\nvowel_words([\"\
    Mary\", \"had\", \"a\", \"little\", \"lamb\"], 1) ==> [\"Mary\", \"lamb\"]\nvowel_words([\"\
    Mary\", \"had\", \"a\", \"little\", \"lamb\"], 2) ==> ", "\n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  ", "\n  \n  # Write your code here\n  \n}\n</cell>\n<cell>",
  "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  # Your code here\n  \n}\n</cell>\n\
    <cell>", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  if(s == \"\") {\n  \
    \  return(list())\n  }\n  \n  words <- list()\n  \n  for(i in 1:(n - 1)) {\n \
    \   \n    words <- c(words, grep(paste0(\"[[:alpha:]]{\", i, \"}\"), s))\n   \
    \ \n  }\n  \n  return(words)\n}\n", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n\
    \  \n  if(s == \"\") {\n    return(list())\n  }\n  \n  words <- unlist(strsplit(s,\
    \ \" \"))\n  \n  return(words[grepl(\"^[[:alpha:]]{n}[[:alpha:]]+$\", words)])\n\
    }\n", "\n  \n  words <- c()\n  \n  if(s == \"\") {\n    return(words)\n  }\n \
    \ \n  for(i in 1:n){\n    \n    words <- c(words, grep(paste0(\"\\\\b\", substr(s,\
    \ i, i + 1), \"\\\\b\"), s))\n  }\n  \n  return(words)\n}\n\nselect_words(\"Mary\
    \ had a little lamb\", 4)\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,regex |>\n\
    This can be done with gregexpr and regmatches:\n<code>\nselect_words <- function(s,\
    \ n) {\n  regmatches(s, gregexpr(\"[[:alpha:]]{n}\", s))\n}\n\nselect_words(\"\
    Mary had a little lamb\", 4)", "\n  \n  if(s == \"\") {\n    return(list())\n\
    \  }\n  \n  words <- unlist(strsplit(s, \" \"))\n  \n  return(words[grepl(\"^[[:alpha:]]{n}$\"\
    , words, perl = TRUE)])\n}\n", "\n  \n  if(s == \"\") {\n    return(list())\n\
    \  }\n  \n  words <- list()\n  \n  for(i in 1:(n - 1)) {\n    \n    for(j in 1:(n\
    \ - 1)) {\n      \n      if(substr(s, i, i + 1) == substr(s, j, j + 1)) {\n  \
    \      \n        words <- c(words, substr(s, i, i + 1))\n        \n      }\n \
    \     \n    }\n    \n  }\n  \n  return(words)\n}\n", "\n  \n  # Your code here\n\
    \  \n}\n</cell>\n<cell>", "\n  \n  if(length(s) == 0) {\n    return(list())\n\
    \  }\n  \n  words <- list()\n  \n  for(i in 1:(length(s) - n)) {\n    \n    word\
    \ <- substring(s, i, i + n)\n    \n    if(length(word) == n) {\n      \n     \
    \ words[[length(words)]] <- word\n      \n      if(length(words) == n) {\n   \
    \     break\n      }\n    }\n  }\n  \n  return(words)\n}\n", "\n  \n  # Write\
    \ your code here\n  \n}\n</cell>\n<cell>", "\n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  ", "\n  \n  words <- c()\n  \n  if(length(s) == 0) {\n    return(words)\n \
    \ }\n  \n  for(i in 1:(length(s) - n)) {\n    \n    temp <- substring(s, i, i\
    \ + n)\n    \n    if(length(gregexpr(\"[aeiou]\", temp)) > 0) {\n      \n    \
    \  words <- c(words, temp)\n      \n    }\n    \n  }\n  \n  return(words)\n  \n\
    }\n", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  if(s == \"\") {\n    return(list())\n\
    \  }\n  \n  words <- strsplit(s, \" \")\n  \n  return(words[[1]][grepl(paste0(\"\
    ^\", paste0(\"[[:alpha:]]\", 1:n, \"$\"), collapse = \"|\"), \n              \
    \              words[[1]])])\n}\n", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n\
    \  \n  # Write your code here\n  \n}\n</cell>\n<cell>", "\n  \n  # Your code here\n\
    \  \n}\n</cell>\n<cell>", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  # Your\
    \ code here\n  \n}\n</cell>\n<cell>", "\n  \n  # Your code here\n  \n}\n</cell>\n\
    <cell>", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  if(s == \"\") {\n  \
    \  return(list())\n  }\n  \n  words <- list()\n  \n  for(i in 1:(length(s) - (n\
    \ - 1))) {\n    \n    word <- substr(s, i, i + n)\n    \n    if(length(word) ==\
    \ n) {\n      \n      words <- c(words, word)\n      \n    }\n    \n  }\n  \n\
    \  return(words)\n  \n}\n", "\n  \n  # Write your code here\n  \n}\n</cell>\n\
    <cell>", "\n  \n  s <- tolower(s)\n  \n  if(length(s)==0) {\n    return(list())\n\
    \  }\n  \n  words <- list()\n  \n  for(i in 1:(length(s) - (n-1))) {\n    \n \
    \   word <- substring(s, i, i+n)\n    \n    if(length(word)==n) {\n      words\
    \ <- c(words, word)\n    }\n  }\n  \n  return(words)\n}\n", "\n  \n  if(s == \"\
    \") {\n    return(list())\n  }\n  \n  words <- list()\n  \n  for(i in 1:n){\n\
    \    \n    word <- unlist(strsplit(s, split = \"\\\\s\"))[i]\n    \n    for(j\
    \ in 1:length(word)){\n      \n      if(word[j] == \"c\" || word[j] == \"C\" ||\
    \ word[j] == \"d\" || word[j] == \"D\" || word[j] == \"h\" || word[j] == \"H\"\
    \ || word[j] == \"l\" || word[j] == \"L\" || word[j] == \"o\" || word[j] == \"\
    O\" || word[j] == \"r\" || word[j] == \"R\" || word[j] == \"s\" || word[j] ==\
    \ \"S\" || word[j] == \"t\" || word[j] == \"T\" || word[j] == \"v\" || word[j]\
    \ == \"V\" || word[j] == \"y\" || word[j] == \"Y\"){\n        \n        words\
    \ <- c(words, word)\n      }\n    }\n  }\n  \n  return(words)\n}\n", "\n  \n \
    \ if(s == \"\") {\n    return(list())\n  }\n  \n  words <- unlist(strsplit(s,\
    \ \" \"))\n  \n  return(words[grepl(\"^[[:alpha:]]{n}$\", words)])\n}\n", "\n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  # Your code here\n  \n}\n", "\n\
    \  \n  if(s == \"\") {\n    return(list())\n  }\n  \n  words <- list()\n  \n \
    \ for(i in 1:(length(s) - n)) {\n    \n    word <- substr(s, i, i + n)\n    \n\
    \    if(grepl(\"[aeiou]\", word)) {\n      \n      words[[i]] <- word\n      \n\
    \    }\n    \n  }\n  \n  return(words)\n  \n}\n", "\n  \n  if(s == \"\") {\n \
    \   return(list())\n  }\n  \n  words <- list()\n  \n  for(i in 1:(length(s) -\
    \ n)) {\n    \n    word <- substr(s, i, i + n)\n    \n    if(length(word) == n)\
    \ {\n      words <- c(words, word)\n    }\n  }\n  \n  return(words)\n}\n", "\n\
    \  \n  # Your code here\n  \n}\n</cell>\n<cell>", "\n  \n  # Write your code here\n\
    \  \n}\n", "\n  \n  words <- c()\n  \n  for(i in 1:n){\n    \n    words <- c(words,\
    \ grep(paste0(\"[[:alpha:]]{\", i, \"}\"), s))\n    \n  }\n  \n  return(words)\n\
    \  \n}\n", "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>", "\n  \n  if(s ==\
    \ \"\") {\n    return(list())\n  }\n  \n  words <- unlist(strsplit(s, \" \"))\n\
    \  \n  return(words[grepl(\"^[[:alpha:]]{n}$\", words, fixed = TRUE)])\n}\n",
  "\n  \n  # Write your code here\n  \n}\n</cell>\n<cell>", "\n  \n  if(s == \"\"\
    ) {\n    return(list())\n  }\n  \n  words <- list()\n  \n  for(i in 1:(length(s)\
    \ - n)) {\n    \n    words <- c(words, substring(s, i, i + n))\n  }\n  \n  return(words)\n\
    }\n", "\n  \n  if(s == \"\") {\n    return(list())\n  }\n  \n  words <- unlist(strsplit(s,\
    \ \" \"))\n  \n  return(words[grepl(\"^[[:alpha:]]{n}$\", words, perl = TRUE)])\n\
    }\n", "\n  \n  if(length(s) == 0) {\n    return(list())\n  }\n  \n  words <- list()\n\
    \  \n  for(i in 1:(length(s) - n)) {\n    \n    word <- substring(s, i, i + n)\n\
    \    \n    if(length(word) == n) {\n      words[[i]] <- word\n    }\n  }\n  \n\
    \  return(words)\n}\n", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  ", "\n  \n  if(s == \"\") {\n    return(list())\n  }\n\
    \  \n  words <- list()\n  \n  for(i in 1:(length(s) - n)) {\n    \n    word <-\
    \ substring(s, i, i + n)\n    \n    if(grepl(\"[aeiou]\", word)) {\n      \n \
    \     words <- c(words, word)\n      \n    }\n    \n  }\n  \n  return(words)\n\
    \  \n}\n", "\n  \n  # Your code here\n  \n}\n", "\n  \n  words <- c()\n  \n  for(i\
    \ in 1:n){\n    \n    words <- c(words, grep(\"[[:alpha:]]\", s, value = TRUE))\n\
    \    \n  }\n  \n  return(words)\n}\n\nselect_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"\
    , \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThank you so much for your help! I really\
    \ appreciate it!\n<|/ c |>\n<| c |>\nNo worries, happy to help :)\n<|/ c |>\n\
    <| a dscore=0 |>\nHere is a solution using stringr package:\n<code>\nlibrary(stringr)\n\
    \nselect_words <- function(s, n) {\n  words <- str_extract_all(s, pattern = \"\
    [[:alpha:]]{n}\")\n  return(words)\n}\n\nselect_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"\
    , \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\
    </code>\n<|/ a tags=r,regex |>\n<| c |>\nThank you so much for your help! I really\
    \ appreciate it!\n<|/ c |>\n<| a tags=r,regex |>\n<code>\nselect_words <- function(s,\
    \ n) {\n  \n  words <- c()\n  \n  for(i in 1:n){\n    \n    words <- c(words,\
    \ grep(\"[[:alpha:]]\", s, value = TRUE))\n    \n  }\n  \n  return(words)\n}\n\
    \nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"\
    Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white\
    \ space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you ",
  "\n  \n  # Write your code here\n  \n}\n</cell>\n<cell>", "\n  \n  if(s == \"\"\
    ) {\n    return(list())\n  }\n  \n  words <- list()\n  \n  for(i in 1:(length(s)\
    \ - n)) {\n    \n    words <- c(words, substring(s, i, i + n))\n    \n  }\n  \n\
    \  return(words)\n}\n", "\n  \n  # Your code here\n  \n}\n", "\n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  ", "\n  \n  if(s == \"\") {\n    return(list())\n  }\n \
    \ \n  words <- list()\n  \n  for(i in 1:n-1) {\n    \n    words <- c(words, grep(paste0(\"\
    [[:alpha:]]{\", i, \"}\"), s))\n    \n  }\n  \n  return(words)\n  \n}\n", "\n\
    \  \n  # Write your code here\n  \n}\n", "\n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ",
  "\n  \n  if(length(s) == 0) {\n    return(list())\n  }\n  \n  if(length(s) %% n\
    \ != 0) {\n    return(list())\n  }\n  \n  words <- list()\n  \n  for(i in 1:(length(s)\
    \ %% n)) {\n    \n    words <- c(words, unlist(strsplit(s[(i+1):(length(s)-n+i)],\
    \ \" \")))\n  }\n  \n  return(words)\n}\n\nselect_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"\
    , \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello\
    \ world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\
    </code>\n<|/ a tags=r,string,regex |>\n<| c |>\nThis doesn't seem to work when\
    \ there are multiple spaces between words. For example, if I try `select_words(\"\
    Mary had a little lamb\", 4)` I get `[1] \"Mary\"  \"lamb\"`\n<|/ c |>\n<| c |>\n\
    Yes, I noticed that and fixed it. I also added a note about how to handle multiple\
    \ spaces between words.\n<|/ c |>\n<| c |>\nI added a note about how to handle\
    \ multiple spaces between words.\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution\
    \ using stringr::str_extract_all:\n<code>\nlibrary(stringr)\n\nselect_words <-\
    \ function(s, n) {\n  \n  if(length(s) == 0) {\n    return(list())\n  }\n  \n\
    \  if(length(s) %% n != 0) {\n    return(list())\n  }\n  \n  words <- list()\n\
    \  \n  for(i in 1:(length(s) %% n)) {\n    \n    words <- c(words, str_extract_all(s,\
    \ paste0(\"\\\\s\", 1:n, \"\\\\s\")))\n  }\n  \n  return(words)\n}\n\nselect_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2)\
    \ ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle\
    \ sam\", 3) ==> [\"Uncle\"]\n</code>\n<|/ a tags=r,string,regex |>\n<| a tags=r,string,regex\
    \ |>\nHere's a base R solution:\n<code>\nselect_words <- ", "\n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  ", "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>", "\n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  # Your code here\n  \n}\n</cell>\n\
    <cell>", "\n  \n  if(s == \"\") {\n    return(list())\n  }\n  \n  words <- list()\n\
    \  \n  for(i in 1:(length(s) - (n - 1))) {\n    \n    word <- substr(s, i, i +\
    \ n)\n    \n    if(length(word) == n) {\n      \n      words[[i]] <- word\n  \
    \    \n    }\n    \n  }\n  \n  return(words)\n  \n}\n", "\n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  ", "\n  \n  if(s == \"\") {\n    return(list())\n  }\n  \n  words\
    \ <- strsplit(s, \" \")[[1]]\n  \n  return(words[sapply(words, function(x) length(gregexpr(paste0(\"\
    ^\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"\
    [\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"\
    [\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"\
    [\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"\
    [\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"\
    [\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"\
    [\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"\
    [\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"\
    [\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"\
    [\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"\
    [\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"\
    [\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"\
    [\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"\
    [\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"\
    [\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"[\", paste0(\"\
    [\", paste0(\"[\", paste0(\"[\", paste0", "\n  \n  # Write your code here\n  \n\
    }\n", "\n  \n  if(s == \"\") {\n    return(list())\n  }\n  \n  words <- list()\n\
    \  \n  for(i in 1:n){\n    \n    words <- c(words, grep(paste0(\"[[:alpha:]]\"\
    , i), s))\n    \n  }\n  \n  return(words)\n}\n", "\n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  ", "\n  \n  if(length(s) == 0) {\n    return(list())\n  }\n  \n  words\
    \ <- list()\n  \n  for(i in 1:length(s)) {\n    \n    if(substr(s[i],i,i) == substr(s[i],i,i)\
    \ + substr(s[i],i+1,i)) {\n      \n      words[[i]] <- substr(s[i],1,i)\n    \
    \  \n      if(length(words) == n) {\n        break\n      }\n    }\n  }\n  \n\
    \  return(words)\n}\n</cell>\n<cell>\nselect_words(\"Mary had a little lamb\"\
    , 4)\n</cell>\n<cell>\nselect_words(\"Mary had a little lamb\", 3)\n</cell>\n\
    <cell>\nselect_words(\"simple white space\", 2)\n</cell>\n<cell>\nselect_words(\"\
    Hello world\", 4)\n</cell>\n<cell>\nselect_words(\"Uncle sam\", 3)\n</cell>\n\
    <text>\nProblem 3\nThe function should return a list of all words from string\
    \ s that contain exactly n vowels, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty list.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"\
    Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white\
    \ space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nselect_words(\"Mary had a little lamb\", 2) ==>\
    \ [\"little\", \"lamb\"]\nselect_words(\"Mary had a little lamb\", 1) ==> [\"\
    Mary\", \"little\", \"lamb\"]\nselect_words(\"Mary had a little lamb\", 0) ==>\
    \ [\"Mary\", \"little\", \"lamb\"]\nselect_words(\"Mary had a little lamb\", -1)\
    \ ==> [\"Mary\", \"little\", \"lamb\"]\nselect_words(\"Mary had a little lamb\"\
    , -2) ==> [\"Mary\", \"little\", \"lamb\"]\nselect_words(\"Mary had a little lamb\"\
    , -3) ==> [\"Mary\", \"little\", \"lamb\"]\nselect_words(\"Mary had a little lamb\"\
    , -4) ==> [\"Mary\", \"little\", \"lamb\"]\nselect_words(\"Mary had a little lamb\"\
    , -5) ==> [\"Mary\", \"little\", \"lamb\"]\nselect_words(\"Mary had a little lamb\"\
    , -6) ==> [\"Mary\", \"", "\n  \n  if(s == \"\") {\n    return(list())\n  }\n\
    \  \n  words <- list()\n  \n  for(i in 1:n){\n    \n    word <- strsplit(s, \"\
    \ \")[[i]]\n    \n    for(j in 1:length(word)){\n      \n      if(grepl(paste0(\"\
    [[:alpha:]]\", word[j]), s)){\n        \n        words[[i]] <- word[j]\n     \
    \   \n        break\n      }\n    }\n  }\n  \n  return(words)\n}\n", "\n  \n \
    \ # Your code here\n  \n}\n</cell>\n<cell>", "\n  \n  # Your code here\n  \n}\n",
  "\n  \n  # Write your code here\n  \n}\n", "\n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ",
  "\n  \n  if(s == \"\") {\n    return(list())\n  }\n  \n  words <- list()\n  \n \
    \ for(i in 1:(length(s) - n + 1)) {\n    \n    word <- substring(s, i, i + n)\n\
    \    \n    if(word == \"\") {\n      next\n    }\n    \n    words <- c(words,\
    \ word)\n    \n  }\n  \n  return(words)\n}\n", "\n  \n  if(s == \"\") {\n    return(list())\n\
    \  }\n  \n  words <- list()\n  \n  for(i in 1:n-1) {\n    \n    for(j in 1:(length(s)\
    \ - i)) {\n      \n      if(substr(s, j + i, j + i + 1) == \"\") {\n        \n\
    \        words[[i]] <- substr(s, j + i, j + i + 1)\n      }\n      \n    }\n \
    \   \n  }\n  \n  return(words)\n}\n", "\n  \n  # Your code here\n  \n}\n", "\n\
    \  \n  if(s == \"\") {\n    return(list())\n  }\n  \n  words <- unlist(strsplit(s,\
    \ \" \"))\n  \n  return(words[grepl(\"^[[:alpha:]]{n}$\", words)])\n}\n</cell>\n\
    <cell>\nselect_words(\"Mary had a little lamb\", 4)\n</cell>\n<cell>\nselect_words(\"\
    Mary had a little lamb\", 3)\n</cell>\n<cell>\nselect_words(\"simple white space\"\
    , 2)\n</cell>\n<cell>\nselect_words(\"Hello world\", 4)\n</cell>\n<cell>\nselect_words(\"\
    Uncle sam\", 3)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string that are less than or equal to\
    \ 4 letters long.\n\n\n</text>\n<cell>", "\n  \n  # Your code here\n  \n}\n</cell>\n\
    <cell>", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  ", "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>", "\n  \n  if(s\
    \ == \"\") {\n    return(list())\n  }\n  \n  words <- list()\n  \n  for(i in 1:(length(s)\
    \ - (n - 1))) {\n    \n    if(substr(s, i, i + n) == paste0(\"^\", paste0(\"[[:alpha:]]\"\
    , 1:n))) {\n      words <- c(words, substr(s, i, i + n))\n    }\n  }\n  \n  return(words)\n\
    }\n\nselect_words(\"Mary had a little lamb\", 4)\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThanks for your answer. I am not allowed to use any packages other than\
    \ base R. I am also not allowed to use any loops. I edited my question to reflect\
    \ this.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any packages.\n\
    <|/ c |>\n<| a tags=r,regex |>\n<code>\nselect_words <- function(s, n) {\n  \n\
    \  if(s == \"\") {\n    return(list())\n  }\n  \n  words <- list()\n  \n  for(i\
    \ in 1:(length(s) - (n - 1))) {\n    \n    if(substr(s, i, i + n) == paste0(\"\
    ^\", paste0(\"[[:alpha:]]\", 1:n))) {\n      words <- c(words, substr(s, i, i\
    \ + n))\n    }\n  }\n  \n  return(words)\n}\n\nselect_words(\"Mary had a little\
    \ lamb\", 4)\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,regex |>\n<code>\nselect_words\
    \ <- function(s, n) {\n  \n  if(s == \"\") {\n    return(list())\n  }\n  \n  words\
    \ <- list()\n  \n  for(i in 1:(length(s) - (n - 1))) {\n    \n    if(substr(s,\
    \ i, i + n) == paste0(\"^\", paste0(\"[[:alpha:]]\", 1:n))) {\n      words <-\
    \ c(words, substr(s, i, i + n))\n    }\n  }\n  \n  return(words)\n}\n\nselect_words(\"\
    Mary had a little lamb\", 4)\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    select_words <- function(s, n) {\n  \n  if(s == \"\") {\n    return(list())\n\
    \  }\n  \n  words <- list()\n  \n  for(i in 1:(length(s) - (n - 1))) {\n    \n\
    \    if(substr(s, i, i + n) == paste0(\"^\", paste0(\"[[:alpha:]]\", 1:n))) {\n\
    \      ", "\n  \n  if(s == \"\") {\n    return(list())\n  }\n  \n  words <- unlist(strsplit(s,\
    \ \" \"))\n  \n  return(words[grepl(\"^[[:alpha:]]{n}$\", words, perl = TRUE)])\n\
    }\n", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  # Write your code here\n\
    \  \n}\n</cell>\n<cell>", "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>",
  "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>", "\n  \n  # Your code here\n\
    \  \n}\n</cell>\n<text>\nTest your code\nRun the cell below to test your code.\n\
    \nBecause of the way things are written above, your solution will be tested on\
    \ a smaller set of inputs.  When you run this cell, you will see the output returned\
    \ for your 'select_words' function.\n\n\n</text>\n<cell>", "\n  \n  words <- list()\n\
    \  \n  for(i in 1:n){\n    \n    words <- c(words, grep(paste0(\"\\\\b\", substr(s,\
    \ i, i + 1), \"\\\\b\"), s))\n    \n  }\n  \n  return(words)\n}\n</code>\n<|/\
    \ a tags=r,regex |>\n<| c |>\nThis doesn't seem to work for the case where there\
    \ are multiple consonants in a row. For example, `select_words(\"Mary had a little\
    \ lamb\", 3)` returns `[1] \"Mary\" \"lamb\"` instead of `[1] \"Mary\" \"lamb\"\
    \ \"little\"`\n<|/ c |>\n<| c |>\nI missed that case. I've updated my answer to\
    \ account for that case.\n<|/ c |>\n<| a dscore=2 |>\nThis seems to work:\n<code>\n\
    select_words <- function(s, n) {\n  words <- list()\n  for(i in 1:n){\n    words\
    \ <- c(words, grep(paste0(\"\\\\b\", substr(s, i, i + 1), \"\\\\b\"), s))\n  }\n\
    \  return(words)\n}\n</code>\n<|/ a tags=r,regex |>\n<| c |>\nThis doesn't seem\
    \ to work for the case where there are multiple consonants in a row. For example,\
    \ `select_words(\"Mary had a little lamb\", 3)` returns `[1] \"Mary\" \"lamb\"\
    ` instead of `[1] \"Mary\" \"lamb\" \"little\"`\n<|/ c |>\n<| c |>\nI missed that\
    \ case. I've updated my answer to account for that case.\n<|/ c |>\n<| a tags=r,regex\
    \ |>\nHere's a solution that uses stringr::str_extract_all:\n<code>\nselect_words\
    \ <- function(s, n) {\n  words <- stringr::str_extract_all(s, paste0(\"\\\\b\"\
    , paste0(letters, collapse = \"|\"), \"\\\\b\"))\n  words <- words[lengths(words)\
    \ == n]\n  return(words)\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nHere's\
    \ a solution using stringr::str_extract_all:\n<code>\nselect_words <- function(s,\
    \ n) {\n  words <- stringr::str_extract_all(s, paste0(\"\\\\b\", paste0(letters,\
    \ collapse = \"|\"), \"\\\\b\"))\n  words <- words[lengths(words) == n]\n  return(words)\n\
    }\n</code>\n<|/ a tags=r,regex |>\n<| a dscore=1 |>\nHere's a solution using stringr::str_extract_all:\n\
    <code>\nselect_words <- function(", "\n  \n  s <- tolower(s)\n  \n  if(length(s)\
    \ == 0) {\n    return(list())\n  }\n  \n  words <- list()\n  \n  for(i in 1:length(s))\
    \ {\n    \n    word <- substr(s, i, i)\n    \n    if(length(word) == n) {\n  \
    \    \n      words <- c(words, word)\n      \n    }\n    \n  }\n  \n  return(words)\n\
    \  \n}\n", "\n  \n  # Write your code here\n  \n}\n", "\n  \n  if(s == \"\") {\n\
    \    return(list())\n  }\n  \n  words <- list()\n  \n  for(i in 1:length(s)) {\n\
    \    \n    if(substr(s[i],1,1) == substr(s[n],1,1)) {\n      \n      words[[i]]\
    \ <- substr(s[i],1,1)\n      \n      if(length(words) == n) {\n        break\n\
    \      }\n    }\n  }\n  \n  return(words)\n}\n", "\n  \n  words <- c()\n  \n \
    \ for(i in 1:n){\n    \n    for(j in 1:n){\n      \n      if(j > i){\n       \
    \ \n        if(grepl(paste0(\"[[:alpha:]]\", paste0(\"[[:alpha:]]\", 1:i)), s)\
    \ & grepl(paste0(\"[[:alpha:]]\", paste0(\"[[:alpha:]]\", 1:j)), s)){\n      \
    \    \n          words <- c(words, paste0(\"[[:alpha:]]\", paste0(\"[[:alpha:]]\"\
    , 1:i)))\n          words <- c(words, paste0(\"[[:alpha:]]\", paste0(\"[[:alpha:]]\"\
    , 1:j)))\n          \n        }\n      }\n    }\n  }\n  \n  return(words)\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThank you so much for your answer! I really appreciate\
    \ it! I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it seems to work fine, but I still have a few questions.\
    \ I ran the code and it ", "\n  \n  words <- list()\n  \n  for(i in 1:n){\n  \
    \  \n    words <- c(words, grep(paste0(\"\\\\b\", substr(s, i, i+1), \"\\\\b\"\
    ), s))\n    \n  }\n  \n  return(words)\n  \n}\n", "\n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  ", "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>", "\n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  ", "\n  \n  if(s == \"\") {\n    return(list())\n \
    \ }\n  \n  words <- list()\n  \n  for(i in 1:(length(s) - (n - 1))) {\n    \n\
    \    word <- substr(s, i, i + n)\n    \n    if(length(word) == n) {\n      \n\
    \      words[[i]] <- word\n      \n    }\n    \n  }\n  \n  return(words)\n  \n\
    }\n", "\n  \n  if(s == \"\") {\n    return(list())\n  }\n  \n  words <- unlist(strsplit(s,\
    \ \" \"))\n  \n  return(words[grepl(\"[aeiou]\", words) & nchar(words) == n])\n\
    }\n", "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>", "\n  \n  if(s == \"\"\
    ) {\n    return(list())\n  }\n  \n  words <- list()\n  \n  for(i in 1:n) {\n \
    \   \n    words <- c(words, grep(paste0(\"\\\\b\", substr(s, i, i+1), \"\\\\b\"\
    ), s))\n    \n  }\n  \n  return(words)\n}\n", "\n  \n  # Write your code here\n\
    \  \n}\n</cell>\n<cell>", "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>",
  "\n  \n  # Write your code here\n  \n}\n</cell>\n<cell>", "\n  \n  # Your code here\n\
    \  \n}\n</cell>\n<cell>", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  ", "\n  \n  words <- list()\n  \n  for(i in 1:n){\n\
    \    \n    words <- c(words, grep(\"[[:alpha:]]\", s, value = TRUE))\n    \n \
    \ }\n  \n  return(words)\n  \n}\n", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ",
  "\n  \n  words <- c()\n  \n  for(i in 1:n){\n    \n    words <- c(words, grep(paste0(\"\
    \\\\b\", substr(s, i, i+1), \"\\\\b\"), s))\n  }\n  \n  return(words)\n}\n", "\n\
    \  \n  # Write your code here\n  \n}\n</cell>\n<cell>", "\n  \n  # Your code here\n\
    \  \n}\n</cell>\n<cell>", "\n  \n  # Write your code here\n  \n}\n", "\n  \n \
    \ # Write your code here\n  \n}\n</cell>\n<cell>", "\n  \n  # Write your code\
    \ here\n  \n}\n</cell>\n<cell>", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  "]
stop_tokens:
- "\n#"
- "\n```"
