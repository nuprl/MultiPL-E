name: HumanEval_23_strlen
language: r
prompt: "# Return length of given string\n# >>> strlen('')\n# 0\n# >>> strlen('abc')\n\
  # 3\nstrlen <- function(string) {"
tests: "test_humaneval <- function() {\ncandidate <- strlen\n    if(!identical(candidate(''),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('x'), 1)){quit('no', 1)}\n   \
  \ if(!identical(candidate('asdasnakj'), 9)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  nchar(string)\n}\n", "\n  nchar(string)\n}\n", "\n  nchar(string)\n\
    }\n", "\n  return(length(unlist(strsplit(string, \"\"))))\n}\n", "\n  nchar(string)\n\
    }\n", "\n  nchar(string)\n}\n", "\n  nchar(string)\n}\n", "\n  return(length(as.character(string)))\n\
    }\n", "\n  nchar(string)\n}\n", "\n  nchar(string)\n}\n", "\n  nchar(string)\n\
    }\n", "\n  nchar(string)\n}\n", "\n  nchar(string)\n}\n", "\n  nchar(string)\n\
    }\n", "\n  nchar(string)\n}\n", "\n  nchar(string)\n}\n", "\n  nchar(string)\n\
    }\n", "\n  n <- nchar(as.character(string))\n  return(n)\n}\n", "\n  nchar(string)\n\
    }\n", "\n  nchar(string)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
