name: HumanEval_145_order_by_points
language: r
prompt: "# Write a function which sorts the given list of integers\n# in ascending\
  \ order according to the sum of their digits.\n# Note: if there are several items\
  \ with similar sum of their digits,\n# order them based on their index in original\
  \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11,\
  \ 1, -12, 11]\n# >>> order_by_points([]) == []\norder_by_points <- function(nums)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- order_by_points\n    if(!identical(candidate(c(1,\
  \ 11, -1, -11, -12)), c(-1, -11, 1, -12, 11))){quit('no', 1)}\n    if(!identical(candidate(c(1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)), c(0, 2, 3, 6, 53,\
  \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457))){quit('no', 1)}\n    if(!identical(candidate(c()),\
  \ c())){quit('no', 1)}\n    if(!identical(candidate(c(1, -11, -32, 43, 54, -98,\
  \ 2, -3)), c(-3, -32, -98, -11, 1, 2, 43, 54))){quit('no', 1)}\n    if(!identical(candidate(c(1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)), c(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9))){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(0, 6, 6, -76, -21, 23, 4)), c(-76, -21, 0,\
  \ 4, 23, 6, 6))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  nums <- nums[order(sum(nums), decreasing = TRUE)]\n  nums\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n\
    library(stringr)\nlibrary(tidyr)\n\ndf <- data.frame(\n  x = c(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\"),\n  y = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130,\
    \ 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280)\n\
    )\n\ndf %>%\n  mutate(\n    z = str_split(x, \"\")[[1]],\n    z = map_chr(z, ~str_count(.x,\
    \ \"\\\\d\"))\n  ) %>%\n  group_by(z) %>%\n  summarise(\n    z = sum(y),\n   \
    \ n = n()\n  ) %>%\n  ungroup() %>%\n  mutate(\n    z = str_c(\"z\", z),\n   \
    \ z = str_c(\"n\", z)\n  ) %>%\n  pivot_wider(names_from = z, values_from = n)\n",
  "\n  nums <- nums[order(as.numeric(as.vector(lapply(nums, sum))),\n            \
    \          decreasing = TRUE)]\n  nums\n}\n", "\n  nums <- sort(nums)\n  nums[order(nums,\
    \ decreasing = TRUE)]\n}\n", "\n  nums <- nums[order(sum(nums), decreasing = TRUE)]\n\
    \  nums[order(match(nums, sort(nums)), decreasing = TRUE)]\n}\n", "\n  nums <-\
    \ sort(nums)\n  nums[order(as.numeric(lapply(nums, sum, na.rm = TRUE)))]\n}\n",
  "\n  nums <- sort(nums)\n  nums[order(nums, decreasing = TRUE)]\n}\n", "\n  nums\
    \ <- sort(nums)\n  nums[order(nums, decreasing = TRUE)]\n}\n", "\n  nums <- sort(nums)\n\
    \  nums[order(nums, decreasing = TRUE)]\n}\n", "\n  nums <- sort(nums)\n  nums[order(nums,\
    \ decreasing = TRUE)]\n}\n", "\n  nums <- sort(nums)\n  nums[order(nums, decreasing\
    \ = TRUE)]\n}\n", "\n  nums <- sort(nums)\n  nums[order(nums, decreasing = TRUE)]\n\
    }\n</cell>\n<cell>", "\n  nums <- sort(nums)\n  nums[order(nums, decreasing =\
    \ TRUE)]\n}\n", "\n  nums <- sort(nums)\n  nums[order(as.integer(nums), decreasing\
    \ = TRUE)]\n}\n</cell>\n<cell>", "\n  nums <- nums[order(sum(nums), decreasing\
    \ = TRUE)]\n  nums\n}\n", "\n  nums <- sort(nums)\n  nums[order(nums, decreasing\
    \ = TRUE)]\n}\n", "\n  nums <- sort(nums)\n  nums[order(nums, decreasing = TRUE)]\n\
    }\n</cell>\n<cell>", "\n  nums <- nums[order(sum(nums), decreasing = TRUE)]\n\
    \  nums\n}\n</cell>\n<cell>", "\n  nums <- sort(nums)\n  nums[order(nums, decreasing\
    \ = TRUE)]\n}\n", "\n  nums <- nums[order(sum(nums), decreasing = TRUE)]\n  nums[order(match(nums,\
    \ unique(nums)), decreasing = TRUE)]\n}\n", "\n  nums <- sort(nums)\n  nums[order(nums,\
    \ decreasing = TRUE)]\n}\n</cell>\n<cell>"]
stop_tokens:
- "\n#"
- "\n```"
