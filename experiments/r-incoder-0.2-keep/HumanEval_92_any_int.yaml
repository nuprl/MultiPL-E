name: HumanEval_92_any_int
language: r
prompt: "# Create a function that takes 3 numbers.\n# Returns true if one of the numbers\
  \ is equal to the sum of the other two, and all numbers are integers.\n# Returns\
  \ false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n# any_int(3,\
  \ 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6, -2.2, 2) \u279E\
  \ False\nany_int <- function(x, y, z) {"
tests: "test_humaneval <- function() {\ncandidate <- any_int\n    if(!identical(candidate(2,\
  \ 3, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
  \ 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(-4,\
  \ 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 1, 1), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3.0,\
  \ 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  x %in% y | y %in% z | z %in% x | z %in% y\n}\n", "\n  any(x !=\
    \ y | x != z | y != z)\n}\n", "\n  x <- as.integer(x)\n  y <- as.integer(y)\n\
    \  z <- as.integer(z)\n  return(x %in% c(y, z) & y %in% c(x, z) & z %in% c(x,\
    \ y))\n}\n</cell>\n<cell>", "\n  x %in% y | y %in% z | z %in% x | z %in% y\n}\n",
  "\n  x %in% y | y %in% z | z %in% x | z %in% y\n}\n", "\n  any(x != y | x != z |\
    \ y != z | x != floor(x) | y != floor(y) | z != floor(z))\n}\n", "\n  any(x !=\
    \ y | x != z | y != z | x != floor(x) | y != floor(y) | z != floor(z))\n}\n",
  "\n  return(\n    all(x %in% c(y, z)) &&\n    all(y %in% c(x, y)) &&\n    all(z\
    \ %in% c(x, y))\n  )\n}\n", "\n  return(\n    all(x %in% c(y, z)) &&\n    all(y\
    \ %in% c(x, y)) &&\n    all(z %in% c(x, y))\n  )\n}\n", "\n  x %in% y | y %in%\
    \ z | z %in% x | z %in% y\n}\n", "\n  any(x != y | x != z | y != z)\n}\n", "\n\
    \  any(x != y | x != z | y != z)\n}\n", "\n  return(\n    is.integer(x) & is.integer(y)\
    \ &\n    is.integer(z) & x == y & x == z & y != z\n  )\n}\n", "\n  any(x != y\
    \ & x != z & y != z)\n}\n", "\n  return(\n    all(x %in% c(y, z)) &&\n    all(y\
    \ %in% c(x, z)) &&\n    all(z %in% c(x, y))\n  )\n}\n", "\n  return(\n    is.integer(x)\
    \ & is.integer(y) &\n    is.integer(z) & is.numeric(x) & is.numeric(y) & is.numeric(z)\
    \ &\n    x != 0 & y != 0 & z != 0 &\n    x != Inf & y != Inf & z != Inf &\n  \
    \  x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n",
  "\n  x %in% y | y %in% z | z %in% x | z %in% y\n}\n</cell>\n<cell>", "\n  return(\n\
    \    is.integer(x) & is.integer(y) &\n    is.integer(z) & is.numeric(x) & is.numeric(y)\
    \ & is.numeric(z) &\n    x != 0 & y != 0 & z != 0 &\n    x != Inf & y != Inf &\
    \ z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n", "\n  return(\n    all(x %in% c(y, z)) &&\n    all(y %in% c(x,\
    \ y)) &&\n    all(z %in% c(x, y))\n  )\n}\n", "\n  x <- as.integer(x)\n  y <-\
    \ as.integer(y)\n  z <- as.integer(z)\n  return(x %in% c(y, z) & y %in% c(x, z)\
    \ & z %in% c(x, y))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
