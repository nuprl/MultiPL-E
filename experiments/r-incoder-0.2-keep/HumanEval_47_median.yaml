name: HumanEval_47_median
language: r
prompt: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4, 5])\n\
  # 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\nmedian <- function(l) {"
tests: "test_humaneval <- function() {\ncandidate <- median\n    if(!identical(candidate(c(3,\
  \ 1, 2, 4, 5)), 3)){quit('no', 1)}\n    if(!identical(candidate(c(-10, 4, 6, 1000,\
  \ 10, 20)), 8.0)){quit('no', 1)}\n    if(!identical(candidate(c(5)), 5)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(6, 5)), 5.5)){quit('no', 1)}\n    if(!identical(candidate(c(8,\
  \ 1, 3, 9, 9, 2, 7)), 7)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  l <- sort(l)\n  length(l) %% 2 == 0 ? (l[length(l)/2] + l[(length(l)/2)-1])/2\
    \ : l[length(l)/2]\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution,\
    \ but I wonder if there is a way to avoid the sort and just find the median without\
    \ sorting.\n<|/ c |>\n<| c |>\nThe median is always at the midpoint of the sorted\
    \ list, so you can just find the midpoint and divide by two. `median(l)` will\
    \ give you the median.\n<|/ c |>\n<| c |>\nThe median is always at the midpoint\
    \ of the sorted list, so you can just find the midpoint and divide by two. `median(l)`\
    \ will give you the median.\n<|/ c |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to avoid the sort and just find the median without sorting.\n\
    <|/ c |>\n<| c |>\nThe median is always at the midpoint of the sorted list, so\
    \ you can just find the midpoint and divide by two. `median(l)` will give you\
    \ the median.\n<|/ c |>\n<| a tags=median,r |>\nThe median of a vector is defined\
    \ as the value that appears more than n/2 times in the vector. \n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis answer is better than the accepted one\
    \ because it doesn't require sorting.\n<|/ c |>\n<| c |>\nThis answer is better\
    \ than the accepted one because it doesn't require sorting.\n<|/ c |>\n<| c |>\n\
    This answer is better than the accepted one because it doesn't require sorting.\n\
    <|/ c |>\n<| c |>\nThis answer is better than the accepted one because it doesn't\
    \ require sorting.\n<|/ c |>\n<| c |>\nThis answer is better than the accepted\
    \ one because it doesn't require sorting.\n<|/ c |>\n<| a dscore=5 |>\nThe median\
    \ of a vector is defined as the value that appears more than n/2 times in the\
    \ vector. \n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r |>\n<| c |>\n\
    This answer is better than the accepted one because it doesn't require sorting.\n\
    <|/ c |>\n<| c |>\nThis answer is better than the accepted one because it doesn't\
    \ require sorting.\n<|/ c |>\n<| c |>\nThis answer is better than the accepted\
    \ one because it doesn't require ", "\n  l <- sort(l)\n  n <- length(l)\n  if\
    \ (n < 2) return(NA)\n  return(l[(n+1)/2])\n}\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nI like this solution, but I wonder if there is a way to avoid the sorting\
    \ step if all you need is the median.\n<|/ c |>\n<| c |>\nThe median is defined\
    \ as the value that occurs in the middle of the sorted list. Sorting is not necessary\
    \ to get the median.\n<|/ c |>\n<| c |>\nI like this solution, but I wonder if\
    \ there is a way to avoid the sorting step if all you need is the median.\n<|/\
    \ c |>\n<| c |>\nI like this solution, but I wonder if there is a way to avoid\
    \ the sorting step if all you need is the median.\n<|/ c |>\n<| c |>\nI like this\
    \ solution, but I wonder if there is a way to avoid the sorting step if all you\
    \ need is the median.\n<|/ c |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if `x` is of length 1.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if `x` is of length 1.\n<|/ c |>\n<| c |>\n\
    This doesn't work if `x` is of length 1.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if `x` is of length 1.\n<|/ c |>\n<| c |>\nThis doesn't work if `x` is of length\
    \ 1.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r\
    \ |>\n<| c |>\nThis doesn't work if `x` is of length 1.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if `x` is of length 1.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ `x` is of length 1.\n<|/ c |>\n<| c |>\nThis doesn't work if `x` is of length\
    \ 1.\n<|/ c |>\n<| c |>\nThis doesn't work if `x` is of length 1.\n<|/ c |>\n\
    <| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5 tags=median,r |>\n<|\
    \ c |>\nThis doesn't work if `x` is of length 1.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if `x` is of length 1.\n<|/", "\n  l <- sort(l)\n  n <- length(l)\n  if\
    \ (n < 1) return(NA)\n  return(l[n / 2])\n}\n", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 1) return(NA)\n  m <- floor(n/2)\n  return(l[m])\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nI like your use of median as a function name.  I didn't\
    \ know you could do that.  I thought you had to define it yourself in R.  Thanks!\n\
    <|/ c |>\n<| c |>\n: I believe that `median` is already defined as a function\
    \ in R.  I believe that `median` was introduced into R version 2.15.\n<|/ c |>\n\
    <| c |>\n: I believe that `median` is defined as a function in R version 2.15.\
    \  I believe that `median` was introduced into R version 2.15.\n<|/ c |>\n<| c\
    \ |>\n: I believe that `median` is defined as a function in R version 2.15.  I\
    \ believe that `median` was introduced into R version 2.15.\n<|/ c |>\n<| c |>\n\
    : I believe that `median` is defined as a function in R version 2.15.  I believe\
    \ that `median` was introduced into R version 2.15.\n<|/ c |>\n<| a |>\nThe median\
    \ of a vector is defined as the middle value of a sorted list.  So the median\
    \ of a vector is just the middle value of a sorted list.  \n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=2 tags=r,statistics |>\n<| a tags=r,statistics |>\nThe median\
    \ of a vector is defined as the middle value of a sorted list. So the median of\
    \ a vector is just the middle value of a sorted list. \n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\nThe median of a vector is defined as the\
    \ middle value of a sorted list. So the median of a vector is just the middle\
    \ value of a sorted list. \n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1 tags=r,statistics\
    \ |>\n<| a dscore=1 |>\nThe median of a vector is defined as the middle value\
    \ of a sorted list. So the median of a vector is just the middle value of a sorted\
    \ list. \n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,statistics |>\n<| a dscore=1\
    \ |>\nThe median of a vector is defined as the middle value of a sorted list.\
    \ So the median of a vector is just the middle value of a sorted list. \n<code>\n\
    median(sort(x))\n</code>\n<|/ a tags=r,statistics |>\n<| a ", "\n  l <- sort(l)\n\
    \  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n/2])\n}\n", "\n  l <-\
    \ sort(l)\n  length(l) / 2 # median\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nI like\
    \ this solution, but I wonder if there is a way to do this without having to sort\
    \ the list. Perhaps something that would return the median of the list without\
    \ sorting the list?\n<|/ c |>\n<| c |>\nI added a solution without sorting.\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis is not the median of the list, but rather the median of the sorted\
    \ list.\n<|/ c |>\n<| c |>\nThis is not the median of the list, but rather the\
    \ median of the sorted list.\n<|/ c |>\n<| c |>\nThis is not the median of the\
    \ list, but rather the median of the sorted list.\n<|/ c |>\n<| c |>\nThis is\
    \ not the median of the list, but rather the median of the sorted list.\n<|/ c\
    \ |>\n<| c |>\nThis is not the median of the list, but rather the median of the\
    \ sorted list.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis is not the median of the list, but rather the median\
    \ of the sorted list.\n<|/ c |>\n<| c |>\nThis is not the median of the list,\
    \ but rather the median of the sorted list.\n<|/ c |>\n<| c |>\nThis is not the\
    \ median of the list, but rather the median of the sorted list.\n<|/ c |>\n<|\
    \ c |>\nThis is not the median of the list, but rather the median of the sorted\
    \ list.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis is not the median of the list, but rather the median of the\
    \ sorted list.\n<|/ c |>\n<| c |>\nThis is not the median of the list, but rather\
    \ the median of the sorted list.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis is not the median of the list, but rather\
    \ the median of the sorted list.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=r |>\n<| c |>\nThis is not the median of the list, but rather\
    \ the median of the ", "\n  l <- sort(l)\n  length(l) %% 2 == 0 & length(l) >\
    \ 1 & !is.na(l) & !is.nan(l) & !is.infinite(l)\n  l[length(l)]\n}\n</cell>\n<cell>\n\
    median([3, 1, 2, 4, 5])\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    The median of a finite set of numbers is called the \"middle\" of the set. For\
    \ example, in the set {1, 2, 3, 4}, the median is (2 + 3) / 2 = 2.5.\n\nThe median\
    \ is often used to find the value that lies at the center of a data set. For example,\
    \ in the set {1, 2, 3, 4}, the median is (2 + 3) / 2 = 2.5.\n\nThe median is also\
    \ used to find the value that lies at the \"middle\" of a data set when there\
    \ are an even number of data points. For example, in the set {1, 2, 3, 4}, the\
    \ median is (2 + 3) / 2 = 2.5.\n\nThe median is also used to find the value that\
    \ lies at the \"middle\" of a data set when there are an odd number of data points.\
    \ For example, in the set {1, 2, 3, 4}, the median is (2 + 3) / 2 = 2.5.\n\nThe\
    \ median is also used to find the value that lies at the \"middle\" of a data\
    \ set when there are an even number of data points and an odd number of data points.\
    \ For example, in the set {1, 2, 3, 4}, the median is (2 + 3) / 2 = 2.5.\n\nThe\
    \ median is also used to find the value that lies at the \"middle\" of a data\
    \ set when there are an even number of data points and an even number of data\
    \ points. For example, in the set {1, 2, 3, 4}, the median is (2 + 3) / 2 = 2.5.\n\
    \nThe median is also used to find the value that lies at the \"middle\" of a data\
    \ set when there are an odd number of data points and an odd number of data points.\
    \ For example, in the set {1, 2, 3, 4}, the median is (2 + 3) / 2 = 2.5.\n\n\n\
    </text>\n<text>\nThe median is also used to find the value that lies at the \"\
    middle\" of a data set when there are an even number of data points and an odd\
    \ number of data points. For example, in the set {1, 2, 3, 4}, the median is (2\
    \ + 3) / 2 = 2.5.\n\n\n</text>\n<text>\nThe median is also used to find the value\
    \ that lies at the \"middle\" of a data set when there are an even number of data\
    \ points and an even number of data points. For example, in the set {1, 2, 3,\
    \ 4}, the median is (2 + 3) / 2 = 2.5.\n\n\n</text>\n<text>\nThe median is also\
    \ used to find the value that lies at the \"middle\" of a data set when there\
    \ are an odd number of data point", "\n  l <- sort(l)\n  n <- length(l)\n  if\
    \ (n < 2) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nI like this solution, but I wonder if there is a way to do this without\
    \ having to sort the list?\n<|/ c |>\n<| c |>\nYes, there is. See my answer below.\n\
    <|/ c |>\n<| c |>\nI like the `median` function from [this answer](http://stackoverflow.com/a/131517/636656).\n\
    <|/ c |>\n<| c |>\nI like this solution as well, but I wonder if there is a way\
    \ to do this without having to sort the list?\n<|/ c |>\n<| c |>\nI like the median\
    \ function from [this answer](http://stackoverflow.com/a/131517/636656).\n<|/\
    \ c |>\n<| a dscore=5 |>\nThe median function from Hadley Wickham is very nice,\
    \ but I wonder if there is a way to do this without having to sort the list?\n\
    \nYes, there is. You can use the function na.locf from the package zoo to fill\
    \ the missing values with NA.\n<code>\nlibrary(zoo)\nx <- c(1:5, NA)\nna.locf(x)",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  m <- floor((n +\
    \ 1) / 2)\n  return(l[m])\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThanks, I appreciate\
    \ your help. I did try the median function but was getting an error message that\
    \ said \"Error in median.default(l) : need numeric data\". Turns out that I had\
    \ a factor in my data set. Once I removed that, it worked fine.\n<|/ c |>\n<|\
    \ c |>\nI added a median function which should handle factors correctly.\n<|/\
    \ c |>\n<| c |>\nThanks, I appreciate your help. I did try the median function\
    \ but was getting an error message that said \"Error in median.default(l) : need\
    \ numeric data\". Turns out that I had a factor in my data set. Once I removed\
    \ that, it worked fine.\n<|/ c |>\n<| a dscore=0 |>\nThe median of a vector is\
    \ just the middle value.  So if you have a vector with n elements, you can find\
    \ the median by taking the middle value and dividing by n.\n<code>\nmedian(myvector)\n\
    </code>\n<|/ a tags=r |>\n<| c |>\nThanks, I appreciate your help. I did try the\
    \ median function but was getting an error message that said \"Error in median.default(l)\
    \ : need numeric data\". Turns out that I had a factor in my data set. Once I\
    \ removed that, it worked fine.\n<|/ c |>\n<| a tags=r |>\nThe median of a vector\
    \ is just the middle value. So if you have a vector with n elements, you can find\
    \ the median by taking the middle value and dividing by n.\n<code>\nmedian(myvector)\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks, I appreciate your help. I did try\
    \ the median function but was getting an error message that said \"Error in median.default(l)\
    \ : need numeric data\". Turns out that I had a factor in my data set. Once I\
    \ removed that, it worked fine.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(myvector)\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks, I appreciate your help. I did try\
    \ the median function but was getting an error message that said \"Error in median.default(l)\
    \ : need numeric data\". Turns out that I had a factor in my data set. Once I\
    \ removed that, it worked fine.\n<|/ c |>\n<| a tags=r ", "\n  l <- sort(l)\n\
    \  n <- length(l)\n  if (n < 2) return(NA)\n  i <- floor(n/2)\n  return(l[i])\n\
    }\n", "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r,median |>\nA simple solution is to use median()\
    \ from the stats package:\n<code>\nmedian(mylist)\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=r,median |>\n<code>\nmedian(mylist)\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n<|/ a tags=r,median |>\n<| a\
    \ tags=r,median |>\n<code>\nmedian(mylist)\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,median\
    \ |>\n<code>\nmedian(mylist)\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,median |>\n\
    <code>\nmedian(mylist)\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    median(mylist)\n</code>\n<|/ a tags=r,median |>\n<| a |>\n<code>\nmedian(mylist)\n\
    </code>\n<|/ a tags=r,median dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(mylist)\n\
    </code>\n<|/ a tags=r,median |>\n<| a tags=r,median |>\n<code>\nmedian(mylist)\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,median |>\n<code>\nmedian(mylist)\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,median |>\n<code>\nmedian(mylist)\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\n<code>\nmedian(mylist)\n</code>\n<|/ a dscore=1 tags=r,median\
    \ |>\n<| a tags=r,median |>\n<code>\nmedian(mylist)\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a tags=r,median |>\n<code>\nmedian(mylist)\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ |>\n<code>\nmedian(mylist)\n</code>\n<|/ a dscore=1 tags=r,median |>\n<| a dscore=1\
    \ |>\n<code>\nmedian(mylist)\n</code>\n<|/ a tags=r,median |>\n<| a tags=r,median\
    \ |>\n<code>\nmedian(mylist)", "\n  n <- length(l)\n  if (n < 1) return(NA)\n\
    \  sort(l)[n / 2]\n}\n", "\n  l <- sort(l)\n  return(l[length(l)/2])\n}\n</cell>\n\
    <cell>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<cell>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the standard\
    \ deviation of a list of numbers.\n\n\n</text>\n<cell>", "\n  l <- sort(l)\n \
    \ n <- length(l)\n  if (n < 2) return(NA)\n  i <- floor(n/2)\n  return(l[i])\n\
    }\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n\
    \ / 2])\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `median(1:10)`\
    \ returns `NA` instead of `3`.\n<|/ c |>\n<| c |>\nI tested it on R 3.2.2 and\
    \ R 3.2.1 on Windows. I got `3` on both.\n<|/ c |>\n<| c |>\nI tested it on R\
    \ 3.2.2 on Mac and I got `NA` on both.\n<|/ c |>\n<| c |>\nI tested it on R 3.2.1\
    \ on Mac and I got `NA` on both.\n<|/ c |>\n<| c |>\nI tested it on R 3.2.1 on\
    \ Windows and I got `3` on both.\n<|/ c |>\n<| a dscore=2 |>\nThe median of a\
    \ vector is defined as the value that occurs the most frequently in the vector.\
    \  So if you want the median of a vector, just find the frequency of each element\
    \ in the vector, find the element that occurs the most frequently in the vector,\
    \ and return the element that occurs the most frequently in the vector.\n<code>\n\
    median <- function(x) {\n  freq <- table(x)\n  names(freq)[which.max(freq)]\n\
    }\n</code>\n<|/ a tags=median,r |>\n<| c |>\nThis doesn't work for me. `median(1:10)`\
    \ returns `NA` instead of `3`.\n<|/ c |>\n<| c |>\nI tested it on R 3.2.2 and\
    \ R 3.2.1 on Windows. I got `3` on both.\n<|/ c |>\n<| c |>\nI tested it on R\
    \ 3.2.2 on Mac and I got `NA` on both.\n<|/ c |>\n<| c |>\nI tested it on R 3.2.1\
    \ on Mac and I got `NA` on both.\n<|/ c |>\n<| c |>\nI tested it on R 3.2.1 on\
    \ Windows and I got `3` on both.\n<|/ c |>\n<| a dscore=2 |>\nThe median of a\
    \ vector is defined as the value that occurs the most frequently in the vector.\
    \ So if you want the median of a vector, just find the frequency of each element\
    \ in the vector, find the element that occurs the most frequently in the vector,\
    \ and return the element that occurs the most frequently in the vector.\n<code>",
  "\n  l <- sort(l)\n  length(l)/2\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like\
    \ this solution, but I wonder if it would be more efficient to sort the list first,\
    \ then find the median.\n<|/ c |>\n<| c |>\nYes, it would be more efficient. Sorting\
    \ is a O(n log n) operation, while finding the median is O(n).\n<|/ c |>\n<| c\
    \ |>\nI added a solution that sorts the list first, then finds the median.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. I am not familiar with R, but I wonder\
    \ if there is a way to do this without using any packages. I guess it would be\
    \ more efficient to sort the list first, then find the median.\n<|/ c |>\n<| c\
    \ |>\nI added a solution that sorts the list first, then finds the median.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about finding the median\
    \ of a list of numbers, not finding the median of a sorted list.\n<|/ c |>\n<|\
    \ c |>\nI guess it would be more efficient to sort the list first, then find the\
    \ median.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a\
    \ tags=median,r |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a\
    \ tags=median,r |>\n<| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1\
    \ |>\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n\
    \ / 2])\n}\n", "\n  l <- sort(l)\n  return(median(l))\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nI like this solution, but I wonder why you use `return(median(l))`\
    \ instead of just `median(l)`?\n<|/ c |>\n<| c |>\nI like it because it is more\
    \ concise. `median(l)` would return `NULL` if the list is empty. `return(median(l))`\
    \ would return `NULL` if the list is empty.\n<|/ c |>\n<| c |>\nI like it because\
    \ it is more concise. `median(l)` would return `NULL` if the list is empty. `return(median(l))`\
    \ would return `NULL` if the list is empty.\n<|/ c |>\n<| c |>\nI like it because\
    \ it is more concise. `median(l)` would return `NULL` if the list is empty. `return(median(l))`\
    \ would return `NULL` if the list is empty.\n<|/ c |>\n<| c |>\nI like it because\
    \ it is more concise. `median(l)` would return `NULL` if the list is empty. `return(median(l))`\
    \ would return `NULL` if the list is empty.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a tags=median,r |>\n<| c |>\nThis doesn't answer\
    \ the question, which is about how to find the median of a list of numbers, not\
    \ how to sort them.\n<|/ c |>\n<| c |>\nThis doesn't answer the question, which\
    \ is about how to find the median of a list of numbers, not how to sort them.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question, which is about how to find\
    \ the median of a list of numbers, not how to sort them.\n<|/ c |>\n<| a tags=median,r\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't\
    \ answer the question, which is about how to find the median of a list of numbers,\
    \ not how to sort them.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=median,r |>\n<| a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=median,r |>\n<| c |>\nThis doesn't answer the question, which is about\
    \ how to find the median of a list of numbers, not how to sort them.\n<|/ ", "\n\
    \  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n\
    }\n", "\n  n <- length(l)\n  if (n == 0) return(NA)\n  sort(l)[floor(length(l)/2)]\n\
    }\n</code>\n<|/ a tags=r,median |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to avoid the sorting. Maybe `median(sort(l))` would work?\n\
    <|/ c |>\n<| c |>\nYes, that would work. `median` sorts the input anyway, so you\
    \ might as well just sort it yourself.\n<|/ c |>\n<| c |>\nI guess I should have\
    \ been more clear in my question. I'm looking for a way to avoid the sorting altogether.\
    \ I'm looking for a way to find the median without having to sort the list first.\n\
    <|/ c |>\n<| c |>\nI guess I should have been more clear in my question. I'm looking\
    \ for a way to find the median without having to sort the list first. I'm looking\
    \ for a way to find the median without having to sort the list first.\n<|/ c |>\n\
    <| c |>\nI guess I should have been more clear in my question. I'm looking for\
    \ a way to find the median without having to sort the list first. I'm looking\
    \ for a way to find the median without having to sort the list first.\n<|/ c |>\n\
    <| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median dscore=5 |>\n<|\
    \ c |>\nI guess I should have been more clear in my question. I'm looking for\
    \ a way to avoid the sorting altogether. I'm looking for a way to find the median\
    \ without having to sort the list first.\n<|/ c |>\n<| c |>\nI guess I should\
    \ have been more clear in my question. I'm looking for a way to find the median\
    \ without having to sort the list first. I'm looking for a way to find the median\
    \ without having to sort the list first.\n<|/ c |>\n<| c |>\nI guess I should\
    \ have been more clear in my question. I'm looking for a way to find the median\
    \ without having to sort the list first. I'm looking for a way to find the median\
    \ without having to sort the list first.\n<|/ c |>\n<| c |>\nI guess I should\
    \ have been more clear in my question. I'm looking for a way to find the median\
    \ without having to sort the list first. I'm looking for a way to find the median\
    \ without having to sort the list first.\n<|/ c |>\n<| c |>\nI guess I should\
    \ have been more clear in my question. I'm looking for a way to find the median\
    \ without having to sort the list first. I'm looking for a way to find the median\
    \ without having to sort the list first.\n<|/ c |>\n<| a tag", "\n  l <- sort(l)\n\
    \  n <- length(l)\n  if (n < 2) return(NA)\n  m <- floor(n/2)\n  return(l[m])\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nI like your solution. Could you please explain\
    \ the `median` function? What does it do?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to the code. Hope it helps.\n<|/ c |>\n<| c |>\nI added some comments to the\
    \ code. Hope it helps.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nmedian(1:10)\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\n\
    median(1:10)\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedian(1:10)\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=1 |>\n<| a tags=r\
    \ |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nmedian(1:10)\n\
    </code>\n<|/ a dscore=1 tags=r |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\n\
    median(1:10)\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n", "\n  l <- sort(l)\n\
    \  length(l) %% 2 == 0L ? median(l[1L]) : median(l[1L], l[length(l)]) / 2\n}\n\
    </code>\n<|/ a dscore=5 tags=r,statistics,median |>\n<| c |>\nI like this solution\
    \ the best. No need to reinvent the wheel. Thanks!\n<|/ c |>\n<| c |>\nI like\
    \ this solution the best. No need to reinvent the wheel. Thanks!\n<|/ c |>\n<|\
    \ c |>\nI like this solution the best. No need to reinvent the wheel. Thanks!\n\
    <|/ c |>\n<| c |>\nI like this solution the best. No need to reinvent the wheel.\
    \ Thanks!\n<|/ c |>\n<| c |>\nI like this solution the best. No need to reinvent\
    \ the wheel. Thanks!\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(1:10)\n</code>\n\
    <|/ a tags=r,statistics,median |>\n<| c |>\nThis doesn't give the median of the\
    \ whole vector, it gives the median of the values within the vector. For example,\
    \ median(1:10) = 2.5, but median(1:10) = 2.\n<|/ c |>\n<| c |>\nThis doesn't give\
    \ the median of the whole vector, it gives the median of the values within the\
    \ vector. For example, median(1:10) = 2.5, but median(1:10) = 2.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't give the median of the whole vector, it gives the median\
    \ of the values within the vector. For example, median(1:10) = 2.5, but median(1:10)\
    \ = 2.\n<|/ c |>\n<| c |>\nThis doesn't give the median of the whole vector, it\
    \ gives the median of the values within the vector. For example, median(1:10)\
    \ = 2.5, but median(1:10) = 2.\n<|/ c |>\n<| c |>\nThis doesn't give the median\
    \ of the whole vector, it gives the median of the values within the vector. For\
    \ example, median(1:10) = 2.5, but median(1:10) = 2.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r,statistics,median |>\n<| c |>\n\
    This doesn't give the median of the whole vector, it gives the median of the values\
    \ within the vector. For example, median(1:10) = 2.5, but median(1:10) = 2.\n\
    <|/ c |>\n<| c |>\nThis doesn't give the median of the ", "\n  l <- sort(l)\n\
    \  return(l[length(l)/2])\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    median<-function(x){\n  x<-sort(x)\n  return(x[length(x)/2])\n}\n</code>\n<|/\
    \ a tags=r |>\n<| a tags=r |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  return(x[length(x)/2])\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWelcome to Stack Overflow! While this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  return(x[length(x)/2])\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nWelcome to Stack Overflow! While this code\
    \ may answer the question, providing additional context regarding why and/or how\
    \ this code answers the question improves its long-term value.\n<|/ c |>\n<| a\
    \ tags=r |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  return(x[length(x)/2])\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWelcome to Stack Overflow! While this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  return(x[length(x)/2])\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nWelcome to Stack Overflow! While this code\
    \ may answer the question, providing additional context regarding why and/or how\
    \ this code answers the question improves its long-term value.\n<|/ c |>\n<| a\
    \ tags=r |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  return(x[length(x)/2])\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWelcome to Stack Overflow! While this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  m <- floor(n/2)\n\
    \  return(l[m])\n}\n</code>\n<|/ a tags=r,median |>\n<| c |>\nI like the idea\
    \ of using median to find the median, but I wonder why you use ceiling instead\
    \ of floor? It seems to me that ceiling would give the same result as floor.\n\
    <|/ c |>\n<| c |>\nI used ceiling because I wanted to round up to the nearest\
    \ even number. floor() would give the nearest integer and ceiling() would give\
    \ the nearest even integer.\n<|/ c |>\n<| c |>\nI see. Thanks for the clarification.\n\
    <|/ c |>\n<| c |>\nI like the idea of using median to find the median, but I wonder\
    \ why you use ceiling instead of floor? It seems to me that ceiling would give\
    \ the same result as floor.\n<|/ c |>\n<| c |>\nI used ceiling because I wanted\
    \ to round up to the nearest even number. floor() would give the nearest integer\
    \ and ceiling() would give the nearest even integer.\n<|/ c |>\n<| a dscore=5\
    \ |>\nThe median of a set of numbers is defined as the value that occurs the most\
    \ frequently in the set.  In R this can be calculated using the table function:\n\
    <code>\n> table(c(1,2,3,4,5,6,7,8,9,10))\n 1  2  3  4  5  6  7  8  9 10 \n10 10\
    \ 10 10 10 10 10 10 10 10 \n</code>\nThe median is then simply the value that\
    \ occurs the most frequently in the table:\n<code>\n> median(c(1,2,3,4,5,6,7,8,9,10))\n\
    [1] 10\n</code>\n<|/ a tags=r,median |>\n<| c |>\nThis is not the median of the\
    \ set, but rather the median of the frequency of values in the set. E.g. `table(c(1,2,3,4,5,6,7,8,9,10))`\
    \ gives `1 2 3 4 5 6 7 8 9 10` and the median is `10`.\n<|/ c |>\n<| c |>\nYes,\
    \ I realize that.  I thought the OP was asking for the median of the set.  I guess\
    \ I misunderstood the question.  I thought the OP was asking for the median of\
    \ the frequency of values in the set.\n<|/ c |>\n<| c |>\nI guess I misunderstood\
    \ the question. I thought the OP was asking for the median of the frequency of\
    \ values in the set. ", "\n  sort(l)[length(l)%%2 == 0][length(l)%%2 == 1]\n}\n\
    </code>\n<|/ a tags=r,statistics |>\n<| c |>\nThis doesn't work if the list is\
    \ of length 1. Try it with `median(list(1))`.\n<|/ c |>\n<| c |>\nI fixed the\
    \ problem you mentioned\n<|/ c |>\n<| c |>\nThe median of a single value is undefined.\n\
    <|/ c |>\n<| c |>\nThe median of a single value is undefined. `median(list(1))`\
    \ returns `NaN`\n<|/ c |>\n<| c |>\nThe median of a single value is undefined.\
    \ `median(list(1))` returns `NaN`\n<|/ c |>\n<| a tags=r,statistics |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if the\
    \ list is of length 1. Try it with `median(list(1))`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if the list is of length 1. Try it with `median(list(1))`.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if the list is of length 1. Try it with `median(list(1))`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the list is of length 1. Try it with `median(list(1))`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the list is of length 1. Try it with `median(list(1))`.\n\
    <|/ c |>\n<| a tags=r,statistics |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't work if the list is of length 1. Try it with `median(list(1))`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the list is of length 1. Try it with `median(list(1))`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the list is of length 1. Try it with `median(list(1))`.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,statistics\
    \ |>\n<| c |>\nThis doesn't work if the list is of length 1. Try it with `median(list(1))`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the list is of length 1. Try it with `median(list(1))`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the list is of length 1. Try it ", "\n\
    \  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, but I wonder if\
    \ there is a way to do this without having to sort the list. Maybe by using a\
    \ different data structure that doesn't require sorting (like a binary search\
    \ tree)?\n<|/ c |>\n<| c |>\n: I doubt that there is an efficient way to do this\
    \ without sorting. Sorting is the most efficient way to find the median.\n<|/\
    \ c |>\n<| c |>\n: I doubt that there is an efficient way to do this without sorting.\
    \ Sorting is the most efficient way to find the median.\n<|/ c |>\n<| c |>\n:\
    \ I doubt that there is an efficient way to do this without sorting. Sorting is\
    \ the most efficient way to find the median.\n<|/ c |>\n<| c |>\n: I doubt that\
    \ there is an efficient way to do this without sorting. Sorting is the most efficient\
    \ way to find the median.\n<|/ c |>\n<| a tags=median,r |>\n<code>\nmedian.default\
    \ <- function(x) {\n  n <- length(x)\n  if (n == 1) return(x)\n  m <- floor(n/2)\n\
    \  return(x[m])\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted\
    \ answer. No need to sort the list first.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. No need to sort the list first.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. No need to sort the list first.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. No need to sort the list first.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. No need to sort the list first.\n\
    <|/ c |>\n<| a tags=median,r |>\n<code>\nmedian.default <- function(x) {\n  n\
    \ <- length(x)\n  if (n == 1) return(x)\n  m <- floor(n/2)\n  return(x[m])\n}\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. No need\
    \ to sort the list first.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ No need to sort the list first.\n<|/ c |>\n<| a tags=median,r |>\n<code>\nmedian",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n/2])\n\
    }\n</cell>\n<text>\nExercise 3\nWrite a function that returns the mode of a list\
    \ of numbers. If the list has more than one mode, the function should return the\
    \ smallest one. For example, mode([1, 1, 2, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, ", "\n  l <- sort(l)\n\
    \  length(l) / 2 # median\n}\n</code>\n<|/ a tags=r,list,median |>\n<| a dscore=2\
    \ |>\n<code>\nmedian(as.numeric(as.character(unlist(list1))))\n</code>\n<|/ a\
    \ tags=r,list,median |>\n<| c |>\nThis doesn't work if you have NAs in your list.\
    \ `median(as.numeric(as.character(unlist(list1))))` returns NA for me\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\nmedian(as.numeric(as.character(unlist(list1))))\n</code>\n\
    <|/ a tags=r,list,median |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric(as.character(unlist(list1))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric(as.character(unlist(list1))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric(as.character(unlist(list1))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric(as.character(unlist(list1))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(unlist(list1))))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(unlist(list1))))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(unlist(list1))))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(unlist(list1))))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(unlist(list1))))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric(as.character(unlist(list1))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(unlist(list1))",
  "\n  sort(l)[length(l)%%2 == 0][((length(l)+1)/2)-1]\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't work for me. `median(list(1:10))` returns `NA`\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for me. `median(list(1:10))` returns `NA`\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `median(list(1:10))` returns `NA`\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `median(list(1:10))` returns `NA`\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `median(list(1:10))` returns `NA`\n\
    <|/ c |>\n<| a tags=r,median |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't work for me. `median(list(1:10))` returns `NA`\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for me. `median(list(1:10))` returns `NA`\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `median(list(1:10))` returns `NA`\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `median(list(1:10))` returns `NA`\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `median(list(1:10))` returns `NA`\n\
    <|/ c |>\n<| a tags=r,median |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't work for me. `median(list(1:10))` returns `NA`\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for me. `median(list(1:10))` returns `NA`\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `median(list(1:10))` returns `NA`\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `median(list(1:10))` returns `NA`\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `median(list(1:10))` returns `NA`\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r,median\
    \ |>\n<| ", "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n",
  "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/\
    \ a tags=r |>\n<| c |>\nThis doesn't seem to work if you have a list of lists.\
    \ For example: `median(list(c(1,2,3), c(4,5,6)))` returns `3` instead of `2.5`.\n\
    <|/ c |>\n<| c |>\n: I added a version that works with lists of lists.\n<|/ c\
    \ |>\n<| c |>\nThanks, I added a version that works with lists of lists.\n<|/\
    \ c |>\n<| a tags=r |>\nHere's a solution using sapply and median:\n<code>\nmedian(sapply(x,\
    \ median))\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't seem to work if\
    \ you have a list of lists. For example: `median(list(c(1,2,3), c(4,5,6)))` returns\
    \ `3` instead of `2.5`.\n<|/ c |>\n<| c |>\n: I added a version that works with\
    \ lists of lists.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder why `sapply`\
    \ doesn't work. `sapply` should return a list with one element for each element\
    \ in `x`, right?\n<|/ c |>\n<| c |>\n: Yes, `sapply` returns a list with one element\
    \ for each element in `x`, but `median` expects a vector as its argument. `sapply`\
    \ returns a list because `median` expects a vector as its argument. `sapply` returns\
    \ a list because `median` expects a vector as its argument.\n<|/ c |>\n<| c |>\n\
    : I added a version that works with lists of lists.\n<|/ c |>\n<| a tags=r |>\n\
    Here's a solution using sapply and median:\n<code>\nmedian(sapply(x, median))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't seem to work if you have a list\
    \ of lists. For example: `median(list(c(1,2,3), c(4,5,6)))` returns `3` instead\
    \ of `2.5`.\n<|/ c |>\n<| c |>\n: I added a version that works with lists of lists.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work if you have a list of lists. For\
    \ example: `median(list(c(1,2,3), c(4,5,6)))` returns `3` instead of `2.5`.\n\
    <|/ c |>\n<| c ", "\n  sort(l)[length(l)%%2 == 0][length(l)%%2 == 1]\n}\n</code>\n\
    <|/ a tags=r,list,median |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post.\n<|/ c |>\n<| c |>\nI agree with you, but I believe that my answer does\
    \ answer the question as asked. Perhaps I misunderstood the question?\n<|/ c |>\n\
    <| c |>\nI agree with you, but I believe that my answer does answer the question\
    \ as asked. Perhaps I misunderstood the question?\n<|/ c |>\n<| c |>\nI agree\
    \ with you, but I believe that my answer does answer the question as asked. Perhaps\
    \ I misunderstood the question?\n<|/ c |>\n<| c |>\nI agree with you, but I believe\
    \ that my answer does answer the question as asked. Perhaps I misunderstood the\
    \ question?\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post.\n<|/ c |>\n<| c |>\nThis does provide an answer\
    \ to the question. He asked how to find the median of a list containing numbers.\
    \ He didn't ask for an alternative way to find the median.\n<|/ c |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post.\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post.\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post.\n<|/ c |>\n<| a tags=r,list,median\
    \ |>\n<code>\nmedian(as.numeric(as.character(list)))\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a ", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 2) return(NA)\n  return(l[n/2])\n}\n", "\n  l <- sort(l)\n  length(l)\
    \ / 2 # median\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI like your answer but\
    \ I'm a little confused on how it works. Could you please explain how it works?\n\
    <|/ c |>\n<| c |>\nI added some comments to my answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nI added some comments to my answer. Hope it helps.\n<|/ c |>\n<| c |>\n\
    I added some comments to my answer. Hope it helps.\n<|/ c |>\n<| a dscore=2 |>\n\
    The median of a vector is defined as the middle number of the sorted vector. \n\
    <code>\nmedian(1:10)\n</code>\nwill return the middle number of the sorted vector.\
    \ \n<code>\nmedian(1:10)\n[1] 5\n</code>\n<|/ a tags=r,median |>\n<| c |>\nThis\
    \ doesn't answer the question. OP wants the median of *all* the numbers in the\
    \ vector.\n<|/ c |>\n<| c |>\nThe median of a vector is defined as the middle\
    \ number of the sorted vector. `median(1:10)` will return the middle number of\
    \ the sorted vector. `median(1:10)` will return the middle number of the sorted\
    \ vector. `median(1:10)` will return the middle number of the sorted vector. `median(1:10)`\
    \ will return the middle number of the sorted vector. `median(1:10)` will return\
    \ the middle number of the sorted vector. `median(1:10)` will return the middle\
    \ number of the sorted vector. `median(1:10)` will return the middle number of\
    \ the sorted vector. `median(1:10)` will return the middle number of the sorted\
    \ vector. `median(1:10)` will return the middle number of the sorted vector. `median(1:10)`\
    \ will return the middle number of the sorted vector. `median(1:10)` will return\
    \ the middle number of the sorted vector. `median(1:10)` will return the middle\
    \ number of the sorted vector. `median(1:10)` will return the middle number of\
    \ the sorted vector. `median(1:10)` will return the middle number of the sorted\
    \ vector. `median(1:10)` will return the middle number of the sorted vector. `median(1:10)`\
    \ will return the middle number of the sorted vector. `median(1:10)` will return\
    \ the middle number of the sorted vector. `median(1:10)` will return the middle\
    \ number of the sorted vector. `median(1:10)` will return the middle number of\
    \ the sorted vector. `median(1:10)` will ", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 2) return(NA)\n  m <- floor(n/2)\n  return(l[m])\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| a dscore=2 |>\n<code>\nmedian(1:10)\n[1] 5\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=2 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r |>\n<| a dscore=2\
    \ |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r |>\n<| a |>\n<code>\nmedian(1:10)\n\
    </code>\n<|/ a tags=r dscore=2 |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    median(1:10)\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\n\
    median(1:10)\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedian(1:10)\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=2 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>", "\n  l <- sort(l)\n  length(l)/2\n}\n</cell>\n<cell>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<cell>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the mode of a list of numbers.\
    \ Your function should return the number that appears most frequently in the list.\
    \ For example, mode([1, 1, 2, 3]) should return 1.\n\n\n</text>\n<cell>", "\n\
    \  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n/2])\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r,sorting |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1 tags=r,sorting\
    \ |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1 tags=r,sorting\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,sorting\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,sorting\
    \ |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,sorting\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,sorting\
    \ |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,sorting\
    \ |>\n<| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,sorting dscore=1\
    \ |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,", "\n\
    \  l <- sort(l)\n  n <- length(l)\n  if (n == 0) return(NA)\n  m <- floor(n/2)\n\
    \  return(l[m])\n}\n</code>\n<|/ a |>\n<| a tags=r |>\n<code>\nmedian(mylist)\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't answer the question. OP asked\
    \ how to find the median of a list, not how to find the median of a numeric vector.\n\
    <|/ c |>\n<| c |>\nThis answer is correct for finding the median of a list. OP\
    \ asked how to find the median of a numeric vector. He didn't ask for an alternative\
    \ to finding the median.\n<|/ c |>\n<| c |>\nThis answer is correct for finding\
    \ the median of a list. OP asked how to find the median of a numeric vector. He\
    \ didn't ask for an alternative to finding the median.\n<|/ c |>\n<| c |>\nThis\
    \ answer is correct for finding the median of a list. OP asked how to find the\
    \ median of a numeric vector. He didn't ask for an alternative to finding the\
    \ median.\n<|/ c |>\n<| c |>\nThis answer is correct for finding the median of\
    \ a list. OP asked how to find the median of a numeric vector. He didn't ask for\
    \ an alternative to finding the median.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    median(mylist)\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(mylist)\n\
    </code>\n<|/ a dscore=5 |>\n<| a dscore=5 |>\n<code>\nmedian(mylist)\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(mylist)\n</code>\n<|/ a dscore=5\
    \ |>\n<| a dscore=5 |>\n<code>\nmedian(mylist)\n</code>\n<|/ a tags=r |>\n<| a\
    \ dscore=5 |>\n<code>\nmedian(mylist)\n</code>\n<|/ a tags=r |>\n<| a |>\n<code>\n\
    median(mylist)\n</code>\n<|/ a dscore=5 tags=r |>\n<| a dscore=5 |>\n<code>\n\
    median(mylist)\n</code>\n<|/ a tags=r |>\n<| a dscore=5 tags=r |>\n<code>\nmedian(mylist)\n\
    </code>\n<|/ a |>\n<| a dscore=5 |>\n<code>\nmedian(mylist)\n</code>\n", "\n \
    \ sort(l)[length(l)%%2 == 0][floor(length(l)%%2 == 0)]\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like your solution, but I wonder why you didn't use `median`\
    \ from the `stats` package?\n<|/ c |>\n<| c |>\nI didn't know about `median` from\
    \ the `stats` package. Thanks for pointing it out. I've updated my answer accordingly.\n\
    <|/ c |>\n<| a |>\nHere's a solution using dplyr and purrr:\n<code>\nlibrary(dplyr)\n\
    library(purrr)\n\ndf %>%\n  group_by(group) %>%\n  summarise(median = median(val))\
    \ %>%\n  ungroup()\n", "\n  sort(l)[length(l)%%2 == 0][length(l)%%2 == 1]\n}\n\
    </code>\n<|/ a tags=median,r |>\n<| c |>\nI like this solution, but I wonder why\
    \ you use `median` instead of `median` from the `stats` package?\n<|/ c |>\n<|\
    \ c |>\nBecause `median` from the `stats` package doesn't work when `l` is empty.\n\
    <|/ c |>\n<| c |>\n`median` from the `stats` package also doesn't work when `l`\
    \ is empty.\n<|/ c |>\n<| c |>\n`median` from the `stats` package also doesn't\
    \ work when `l` is empty.\n<|/ c |>\n<| c |>\n`median` from the `stats` package\
    \ also doesn't work when `l` is empty.\n<|/ c |>\n<| a tags=median,r |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for empty\
    \ lists.\n<|/ c |>\n<| c |>\nThis doesn't work for empty lists.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work for empty lists.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for empty lists.\n<|/ c |>\n<| c |>\nThis doesn't work for empty lists.\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r\
    \ |>\n<| c |>\nThis doesn't work for empty lists.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for empty lists.\n<|/ c |>\n<| c |>\nThis doesn't work for empty lists.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for empty lists.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for empty lists.\n<|/ c |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for empty lists.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work for empty lists.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for empty lists.\n<|/ c |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for empty lists.\n<|/ c\
    \ |>", "\n  sort(l)[length(l)%%2 == 0][floor(length(l)/2)]\n}\n</code>\n<|/ a\
    \ dscore=5 |>\n<| c |>\nI like this solution, because it doesn't require any packages.\
    \ However, it does require a little more memory than `median` does, since it sorts\
    \ the entire list before finding the median.\n<|/ c |>\n<| c |>\nYes, but this\
    \ solution is more efficient than `median` because it doesn't require sorting\
    \ the entire list. `median` requires sorting a list with length `2^n`, where `n`\
    \ is the length of the list. `median` requires sorting a list with length `2^n`,\
    \ where `n` is the length of the list. `median` requires sorting a list with length\
    \ `2^n`, where `n` is the length of the list. `median` requires sorting a list\
    \ with length `2^n`, where `n` is the length of the list. `median` requires sorting\
    \ a list with length `2^n`, where `n` is the length of the list. `median` requires\
    \ sorting a list with length `2^n`, where `n` is the length of the list. `median`\
    \ requires sorting a list with length `2^n`, where `n` is the length of the list.\
    \ `median` requires sorting a list with length `2^n`, where `n` is the length\
    \ of the list. `median` requires sorting a list with length `2^n`, where `n` is\
    \ the length of the list. `median` requires sorting a list with length `2^n`,\
    \ where `n` is the length of the list. `median` requires sorting a list with length\
    \ `2^n`, where `n` is the length of the list. `median` requires sorting a list\
    \ with length `2^n`, where `n` is the length of the list. `median` requires sorting\
    \ a list with length `2^n`, where `n` is the length of the list. `median` requires\
    \ sorting a list with length `2^n`, where `n` is the length of the list. `median`\
    \ requires sorting a list with length `2^n`, where `n` is the length of the list.\
    \ `median` requires sorting a list with length `2^n`, where `n` is the length\
    \ of the list. `median` requires sorting a list with length `2^n`, where `n` is\
    \ the length of the list. `median` requires sorting a list with length `2^n`,\
    \ where `n` is the length of the list. `median` requires sorting a list with length\
    \ `2^n`, where `n` is the length of the list. `median` requires sorting a list\
    \ with length `2^n`, where `n` is the length of the list. `median` requires sorting\
    \ a list with length `2^n`, where `n` is the length of the list. `median` requires\
    \ sorting a list with length `2^n`, ", "\n  l <- sort(l)\n  n <- length(l)\n \
    \ if (n < 2) return(NA)\n  return(l[n/2])\n}\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nI like this answer because it doesn't require any packages. I didn't know\
    \ about `median` until I read this answer. Thanks!\n<|/ c |>\n<| c |>\nI like\
    \ this answer because it doesn't require any packages. I didn't know about `median`\
    \ until I read this answer. Thanks!\n<|/ c |>\n<| c |>\nI like this answer because\
    \ it doesn't require any packages. I didn't know about `median` until I read this\
    \ answer. Thanks!\n<|/ c |>\n<| c |>\nI like this answer because it doesn't require\
    \ any packages. I didn't know about `median` until I read this answer. Thanks!\n\
    <|/ c |>\n<| c |>\nI like this answer because it doesn't require any packages.\
    \ I didn't know about `median` until I read this answer. Thanks!\n<|/ c |>\n<|\
    \ a dscore=5 |>\nThe median of a vector is defined as the value that occurs the\
    \ most frequently in the vector.  So you can just use which.max to find the index\
    \ of the most frequent element:\n<code>\n> x <- c(1,1,2,3,3,4,4,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,",
  "\n  l <- sort(l)\n  length(l) %% 2 == 0 ? (l[length(l)] + l[(length(l) + 1) / 2])\
    \ / 2\n  : (l[length(l)] + l[length(l) - 1]) / 2\n}\n", "\n  l <- sort(l)\n  n\
    \ <- length(l)\n  if (n < 1) return(NA)\n  return(l[n/2])\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=2 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<|\
    \ a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=2 |>\n<| a tags=r\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<|\
    \ a dscore=2 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| a dscore=2\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\n\
    median(sort(x))\n</code>\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2)\
    \ return(NA)\n  return(l[n / 2])\n}\n", "\n  l <- sort(l)\n  return(l[length(l)/2])\n\
    }\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n  return(l[n/2])\n\
    }\n</code>\n<|/ a tags=r,list,median |>\n<| a |>\n<code>\nmedian(as.list(1:10))\n\
    </code>\n<|/ a tags=r,list,median dscore=5 |>\n<| c |>\nThis should be the accepted\
    \ answer. `as.list` converts a vector to a list. `median` can then be applied\
    \ to this list. `median(as.list(1:10))` returns `3`.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. `as.list` converts a vector to a list. `median`\
    \ can then be applied to this list. `median(as.list(1:10))` returns `3`.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer. `as.list` converts a vector\
    \ to a list. `median` can then be applied to this list. `median(as.list(1:10))`\
    \ returns `3`.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. `as.list`\
    \ converts a vector to a list. `median` can then be applied to this list. `median(as.list(1:10))`\
    \ returns `3`.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. `as.list`\
    \ converts a vector to a list. `median` can then be applied to this list. `median(as.list(1:10))`\
    \ returns `3`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(as.list(1:10))\n</code>\n\
    <|/ a tags=r,list,median |>\n<| c |>\nThis should be the accepted answer. `as.list`\
    \ converts a vector to a list. `median` can then be applied to this list. `median(as.list(1:10))`\
    \ returns `3`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(as.list(1:10))\n</code>\n\
    <|/ a tags=r,list,median |>\n<| c |>\nThis should be the accepted answer. `as.list`\
    \ converts a vector to a list. `median` can then be applied to this list. `median(as.list(1:10))`\
    \ returns `3`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(as.list(1:10))\n</code>\n\
    <|/ a tags=r,list,median |>\n<| c |>\nThis should be the accep", "\n  l <- sort(l)\n\
    \  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/\
    \ a dscore=4 |>\n<| c |>\nI like this solution, but I believe it can be improved\
    \ by using `na.rm=TRUE` when calling `median`.\n<|/ c |>\n<| c |>\nI agree, `median`\
    \ should have a `na.rm` argument to handle `NA` values correctly.\n<|/ c |>\n\
    <| a dscore=4 |>\nI like using dplyr for these kinds of things:\n<code>\nlibrary(dplyr)\n\
    df %>% \n  group_by(group) %>% \n  summarise(median = median(value))\n</code>\n\
    <|/ a tags=r,median |>\n<| c |>\nThis doesn't seem to work if you want the median\
    \ of multiple groups. For example, if you have two groups `group1` and `group2`\
    \ and you want the median of both groups, then `group_by(group1, group2) %>% summarise(median\
    \ = median(value))` doesn't work.\n<|/ c |>\n<| c |>\nThis doesn't work if you\
    \ have NAs in the data\n<|/ c |>\n<| a tags=r,median |>\nA simple way is to use\
    \ dplyr::na.omit() and then dplyr::summarise(median = median(value))\n<code>\n\
    df %>% \n  na.omit() %>% \n  summarise(median = median(value))\n</code>\n<|/ a\
    \ dscore=4 |>\n<| c |>\nThis doesn't work if you have NAs in the data\n<|/ c |>\n\
    <| c |>\nThis doesn't work if you have NAs in the data\n<|/ c |>\n<| a |>\nA simple\
    \ way is to use dplyr::na.omit() and then dplyr::summarise(median = median(value))\n\
    <code>\ndf %>% \n  na.omit() %>% \n  summarise(median = median(value))\n</code>\n\
    <|/ a dscore=4 tags=r,median |>\n<| a dscore=3 |>\nA simple way is to use dplyr::na.omit()\
    \ and then dplyr::summarise(median = median(value))\n<code>\ndf %>% \n  na.omit()\
    \ %>% \n  summarise(median = median(value))\n</code>\n<|/ a tags=r,median |>\n\
    <| a dscore=3 |>\nA simple way is to use dplyr::na.omit() ", "\n  l <- sort(l)\n\
    \  length(l) %% 2 == 0 ? (l[length(l)/2] + l[(length(l)/2)-1])/2 : l[length(l)/2]\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, but I wonder if\
    \ there is a way to make it more efficient. I'm thinking about a way to avoid\
    \ the sort, but I don't know if that is possible.\n<|/ c |>\n<| c |>\nI added\
    \ a more efficient solution that doesn't sort the list first\n<|/ c |>\n<| c |>\n\
    I added a more efficient solution that doesn't sort the list first\n<|/ c |>\n\
    <| c |>\nI added a more efficient solution that doesn't sort the list first\n\
    <|/ c |>\n<| c |>\nI added a more efficient solution that doesn't sort the list\
    \ first\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r\
    \ |>\n<| c |>\nThis should be the accepted answer. `median` does not sort the\
    \ list before taking the median.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. `median` does not sort the list before taking the median.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. `median` does not sort the list before\
    \ taking the median.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. `median`\
    \ does not sort the list before taking the median.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. `median` does not sort the list before taking the median.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r\
    \ |>\n<| c |>\nThis should be the accepted answer. `median` does not sort the\
    \ list before taking the median.\n<|/ c |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. `median`\
    \ does not sort the list before taking the median.\n<|/ c |>\n<| a tags=median,r\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should\
    \ be the accepted answer. `median` does not ", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 2) return(NA)\n  i <- floor((n - 1) / 2)\n  return(l[i])\n}\n</code>\n\
    <|/ a tags=median,r |>\n<| c |>\nThis doesn't work if you have a list with negative\
    \ numbers. Try `median(c(-10, 4, 6, 1000, 10, 20))` which returns `NA`.\n<|/ c\
    \ |>\n<| c |>\nI added a version that handles negative numbers. I tested it on\
    \ RStudio and it works.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code\
    \ works perfectly for positive numbers, but for negative numbers it returns `NA`\
    \ instead of `-7.5`.\n<|/ c |>\n<| c |>\nI tested it on RStudio and it works.\
    \ I added a version that handles negative numbers. I tested it on RStudio and\
    \ it works.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works perfectly\
    \ for positive numbers, but for negative numbers it returns `NA` instead of `-7.5`.\n\
    <|/ c |>\n<| a tags=median,r |>\nHere's a function that will return the median\
    \ of a vector:\n<code>\nmedian.vec <- function(x) {\n  x <- sort(x)\n  n <- length(x)\n\
    \  if (n < 2) return(NA)\n  i <- floor((n - 1) / 2)\n  return(x[i])\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have a list with negative\
    \ numbers. Try `median.vec(c(-10, 4, 6, 1000, 10, 20))` which returns `NA`.\n\
    <|/ c |>\n<| c |>\nI added a version that handles negative numbers. I tested it\
    \ on RStudio and it works.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code\
    \ works perfectly for positive numbers, but for negative numbers it returns `NA`\
    \ instead of `-7.5`.\n<|/ c |>\n<| c |>\nI tested it on RStudio and it works.\
    \ I added a version that handles negative numbers. I tested it on RStudio and\
    \ it works.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works perfectly\
    \ for positive numbers, but for negative numbers it returns `NA` instead of `-7.5`.\n\
    <|/ c |>\n<| a dscore=5 |>\nThe median of a vector is defined as the middle number ",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n/2])\n\
    }\n", "\n  l <- sort(l)\n  length(l)/2\n}\n</code>\n<|/ a tags=r,sorting |>\n\
    <| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,sorting dscore=5 |>\n\
    <| c |>\nThis should be the accepted answer. `median(sort(x))` will give you the\
    \ median of the sorted vector `x`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=r,sorting |>\n<| c |>\nThis should be the accepted answer.\
    \ `median(sort(x))` will give you the median of the sorted vector `x`.\n<|/ c\
    \ |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5\
    \ |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,sorting\
    \ |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5\
    \ |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5\
    \ |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,sorting\
    \ |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5\
    \ |>\n<| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,sorting dscore=5\
    \ |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,sorting\
    \ |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5\
    \ |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,sorting\
    \ |>\n<| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5 tags=r,sorting\
    \ |>\n<| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5 tags=r,sorting\
    \ |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5\
    \ |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5\
    \ |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=", "\n  l\
    \ <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nI like your solution, but I wonder if there\
    \ is a way to do it without creating a new vector. Maybe using an apply function?\n\
    <|/ c |>\n<| c |>\nI added a solution without creating a new vector. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for the edit. I was trying to figure out how to do that\
    \ without creating a new vector. Your solution works perfectly!\n<|/ c |>\n<|\
    \ a tags=r |>\nHere is a solution using dplyr and purrr packages:\n<code>\nlibrary(dplyr)\n\
    library(purrr)\n", "\n  l <- sort(l)\n  return(median(l))\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThe median of a set of numbers is defined as the middle number of the\
    \ set. Your function returns the median of the sorted list.\n<|/ c |>\n<| c |>\n\
    : Yes, I know. I was just trying to give an example of the median of a set of\
    \ numbers. I thought it would be helpful to show that median can be calculated\
    \ using the median function. I will edit my answer to include a median function.\n\
    <|/ c |>\n<| c |>\nThe median of a set of numbers is defined as the middle number\
    \ of the set. Your function returns the median of the sorted list.\n<|/ c |>\n\
    <| c |>\n: Yes, I know. I was just trying to give an example of the median of\
    \ a set of numbers. I thought it would be helpful to show that median can be calculated\
    \ using the median function. I will edit my answer to include a median function.\n\
    <|/ c |>\n<| c |>\nThe median of a set of numbers is defined as the middle number\
    \ of the set. Your function returns the median of the sorted list.\n<|/ c |>\n\
    <| a tags=r,median,statistics |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. No need to reinvent the wheel.\
    \ `median` already does this.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. No need to reinvent the wheel. `median` already does this.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. No need to reinvent the wheel. `median`\
    \ already does this.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No\
    \ need to reinvent the wheel. `median` already does this.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. No need to reinvent the wheel. `median` already\
    \ does this.\n<|/ c |>\n<| a tags=r,median,statistics |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. No need\
    \ to reinvent the wheel. `median` already does this.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. No need to reinvent the wheel. `median` already\
    \ does this.\n<|/ c |>\n<| a tags=r,median,statistics |>\n", "\n  l <- sort(l)\n\
    \  return(median(l))\n}\n", "\n  l <- sort(l)\n  length(l) %% 2 == 0 & length(l)\
    \ > 1 & l[length(l)] == l[length(l) - 1] + 1 &\n    median(l[seq(1, length(l),\
    \ 2)])\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to make it more efficient. I'm guessing there is, but I don't\
    \ know how.\n<|/ c |>\n<| c |>\nI added a more efficient version. Hope it helps.\n\
    <|/ c |>\n<| c |>\nI added a more efficient version. Hope it helps.\n<|/ c |>\n\
    <| c |>\nI added a more efficient version. Hope it helps.\n<|/ c |>\n<| c |>\n\
    I added a more efficient version. Hope it helps.\n<|/ c |>\n<| a dscore=5 |>\n\
    A simple solution is to use median() from the stats package:\n<code>\nmedian(1:10)\n\
    </code>\n<|/ a tags=r,statistics |>\n<| c |>\n`median` doesn't always return the\
    \ correct answer, e.g. `median(c(1,2,3))` returns `3` instead of `2`.\n<|/ c |>\n\
    <| c |>\n`median(c(1,2,3))` returns `2` on my machine.\n<|/ c |>\n<| c |>\n`median(c(1,2,3))`\
    \ returns `2` on my machine.\n<|/ c |>\n<| c |>\n`median(c(1,2,3))` returns `2`\
    \ on my machine.\n<|/ c |>\n<| c |>\n`median(c(1,2,3))` returns `2` on my machine.\n\
    <|/ c |>\n<| a tags=r,statistics |>\nThe median of a vector is the value that\
    \ occurs the most frequently in the vector. \n<code>\nmedian(1:10)\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\n`median(c(1,2,3))` returns `3` instead of `2`.\n<|/\
    \ c |>\n<| c |>\n`median(c(1,2,3))` returns `2` on my machine.\n<|/ c |>\n<| c\
    \ |>\n`median(c(1,2,3))` returns `2` on my machine.\n<|/ c |>\n<| c |>\n`median(c(1,2,3))`\
    \ returns `2` on my machine.\n<|/ c |>\n<| c |>\n`median(c(1,2,3))` ", "\n  n\
    \ <- length(l)\n  if (n < 1) return(NA)\n  m <- floor(n/2)\n  return(l[m] + l[m+1])/2\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like your solution, but I wonder why\
    \ you use `floor` instead of `ceiling`?\n<|/ c |>\n<| c |>\nBecause `ceiling`\
    \ would return `3` for `median([3, 1, 2, 4, 5])` instead of `4`.\n<|/ c |>\n<|\
    \ c |>\n`ceiling` would return `3` for `median([3, 1, 2, 4, 5])` instead of `4`\
    \ because `ceiling` rounds up. `floor` would return `4` for `median([3, 1, 2,\
    \ 4, 5])` instead of `3`.\n<|/ c |>\n<| c |>\n`median` returns `NA` when `n <\
    \ 1`, so `median(list())` returns `NA` instead of `NaN`.\n<|/ c |>\n<| c |>\n\
    `median(list())` returns `NaN` instead of `NA` because `NaN` is `NaN`. `NaN` is\
    \ `NaN` because `NaN` is `NaN`. `NaN` is `NaN` because `NaN` is `NaN`.\n<|/ c\
    \ |>\n<| a dscore=5 |>\nThe median of a vector is defined as the value that occurs\
    \ the most frequently in the vector. \n<code>\nmedian(1:10)\n[1] 5.5\n</code>\n\
    The median of a data frame is defined as the value that occurs the most frequently\
    \ in the data frame. \n<code>\nmedian(mtcars$mpg)\n[1] 10.2\n</code>\nThe median\
    \ of a matrix is defined as the value that occurs the most frequently in the matrix.\
    \ \n<code>\nmedian(matrix(1:9, ncol = 2))\n[1] 5.5\n</code>\nThe median of a list\
    \ is defined as the value that occurs the most frequently in the list. \n<code>\n\
    median(list(1,4,5,6,7,8,9))\n[1] 5.5\n</code>\nThe median of a vector is defined\
    \ as the value that occurs the most frequently in the vector. \n<code>\nmedian(1:10)\n\
    [1] 5.5\n</code>\nThe median of a data frame is defined as the value that occurs\
    \ the most frequently in the data frame. \n<code>\nmedian(mtcars$mpg)\n[1] 10.2\n\
    </code>\nThe median of a matrix is defined as the value that occurs the most frequently\
    \ in the matrix. \n<code>\nmedian(matrix(1:9, ncol = 2))\n[1] 5.", "\n  l <- sort(l)\n\
    \  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\nI like using dplyr for these kinds of problems.\
    \ \n<code>\nlibrary(dplyr)\nlibrary(magrittr)\n", "\n  l <- sort(l)\n  return(l[length(l)/2])\n\
    }\n</cell>\n<text>\nThe median of a list of numbers is defined as the middle number\
    \ in the list. For example, the median of a list of numbers [3, 1, 2, 4, 5] would\
    \ be the number 2.\n\nThe median is useful for finding the value in a list that\
    \ is the closest to the middle of the list. For example, if the list is [3, 1,\
    \ 2, 4, 5], the median is 2, because it is in the middle of the list. If the list\
    \ is [3, 1, 2, 4, 6, 10], the median is 3, because it is three numbers away from\
    \ the middle of the list. As you can see, this function does not always return\
    \ the exact middle of the list. For example, if the list is [3, 1, 2, 4, 6, 10],\
    \ the median is 3, because there are two 3's in the list. If the list is [3, 1,\
    \ 2, 4, 6, 10, 20], the median is 3, because there are three 3's in the list.\n\
    \nThe median is also useful for finding the value in a list that is the farthest\
    \ from the middle of the list. For example, if the list is [3, 1, 2, 4, 5], the\
    \ median is 2, because it is in the middle of the list. If the list is [3, 1,\
    \ 2, 4, 6, 10], the median is 4, because it is four numbers away from the middle\
    \ of the list. As you can see, this function does not always return the exact\
    \ middle of the list. For example, if the list is [3, 1, 2, 4, 6, 10], the median\
    \ is 4, because there are four 4's in the list. If the list is [3, 1, 2, 4, 6,\
    \ 10, 20], the median is 4, because there are four 4's in the list.\n\nThe median\
    \ is useful for finding the value in a list that is the closest to the middle\
    \ of the list. For example, if the list is [3, 1, 2, 4, 5], the median is 2, because\
    \ it is in the middle of the list. If the list is [3, 1, 2, 4, 6, 10], the median\
    \ is 3, because it is three numbers away from the middle of the list. As you can\
    \ see, this function does not always return the exact middle of the list. For\
    \ example, if the list is [3, 1, 2, 4, 6, 10], the median is 3, because there\
    \ are two 3's in the list. If the list is [3, 1, 2, 4, 6, 10, 20], the median\
    \ is 3, because there are three 3's in the list.\n\nThe median is also useful\
    \ for finding the value in a list that is the farthest from the middle of the\
    \ list. For example, if the list is [3, 1, 2, 4, 5], the median is 2, because\
    \ it is in the middle of the list. If the list is [3, 1, 2, 4, 6, 10], the median\
    \ is 4, because it is four numbers away from the middle of the list. As you can\
    \ see, this function does not always return the exact middle of the list. For\
    \ example, if the list is [3, 1, 2, 4, 6, 10], the median is 4, because there\
    \ are four 4's in the list. If the list is [3, 1, 2, 4, 6, 10, 20], the median\
    \ is 4, because there are four 4", "\n  l <- sort(l)\n  return(median(l))\n}\n\
    </code>\n<|/ a tags=r |>\n<| a |>\nA simple solution is to use na.approx() from\
    \ the zoo package:\n<code>\nlibrary(zoo)\nmedian(zoo(1:10, na.rm = TRUE))", "\n\
    \  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n\
    }\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  m <- floor((n\
    \ + 1) / 2)\n  return(l[m])\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nI like your\
    \ `median` function.  I added a version that doesn't require `sort`.  I added\
    \ a version that doesn't require `ifelse`.\n<|/ c |>\n<| c |>\nI like your `median`\
    \ function.  I added a version that doesn't require `sort`.  I added a version\
    \ that doesn't require `ifelse`.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nmedian(1:10)\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n</code>\n<|/ a\
    \ dscore=4 |>\n<| a dscore=3 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r |>\n\
    <| a tags=r |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3\
    \ |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\n\
    median(1:10)\n</code>\n<|/ a dscore=3 |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nmedian(1:10)\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=3 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=3 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r |>\n<| a dscore=3\
    \ |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r |>\n<| a |>\n<code>\nmedian(1:10)\n\
    </code>\n<|/ a dscore=3 tags=r |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=3 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r |>\n<| a dscore=3\
    \ |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r ", "\n  l <- sort(l)\n  n <-\
    \ length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| c |>\nThis doesn't work if you have a vector with more than two elements.\
    \ For example, median(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)) returns 15, but\
    \ median(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)) returns 16. Perhaps I misunderstood\
    \ your question?\n<|/ c |>\n<| c |>\nI thought the OP was asking for the median\
    \ of the entire vector, not the median of each element. Your solution works fine\
    \ for that case.\n<|/ c |>\n<| c |>\nI misunderstood your question. Sorry. Your\
    \ solution works fine for that case.\n<|/ c |>\n<| a tags=r |>\nI wrote a function\
    \ that does this for you:\n<code>\nmedian.all <- function(x) {\n  x <- sort(x)\n\
    \  n <- length(x)\n  if (n < 2) return(NA)\n  return(x[n / 2])\n}\n</code>\n<|/\
    \ a dscore=4 |>\n<| c |>\nThis doesn't work if you have a vector with more than\
    \ two elements. For example, median(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)) returns\
    \ 15, but median(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)) returns 16. Perhaps\
    \ I misunderstood your question?\n<|/ c |>\n<| a dscore=4 |>\n<code>\nmedian.all\
    \ <- function(x) {\n  x <- sort(x)\n  n <- length(x)\n  if (n < 2) return(NA)\n\
    \  return(x[n / 2])\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian.all\
    \ <- function(x) {\n  x <- sort(x)\n  n <- length(x)\n  if (n < 2) return(NA)\n\
    \  return(x[n / 2])\n}\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\n<code>\n\
    median.all <- function(x) {\n  x <- sort(x)\n  n <- length(x)\n  if (n < 2) return(NA)\n\
    \  return(x[n / 2])\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian.all\
    \ <- function(x) {\n  x <- sort(", "\n  l <- sort(l)\n  n <- length(l)\n  if (n\
    \ < 2) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't seem to work. `median([1,2,3,4,5])` returns `3` instead of `2.5`.\n\
    <|/ c |>\n<| c |>\nI added a version that works with negative numbers as well.\n\
    <|/ c |>\n<| c |>\nI added a version that works with negative numbers as well.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n\
    \  if(n<2){\n    return(NA)\n  }\n  return(x[n/2])\n}\n</code>\n<|/ a tags=median,r\
    \ |>\n<| a |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n  if(n<2){\n\
    \    return(NA)\n  }\n  return(x[n/2])\n}\n</code>\n<|/ a tags=median,r dscore=2\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n\
    \  if(n<2){\n    return(NA)\n  }\n  return(x[n/2])\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n\
    \  if(n<2){\n    return(NA)\n  }\n  return(x[n/2])\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n\
    \  if(n<2){\n    return(NA)\n  }\n  return(x[n/2])\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n\
    \  if(n<2){\n    return(NA)\n  }\n  return(x[n/2])\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=median,", "\n  sort(l)[length(l)%%2 == 0][((length(l)%%2)+1)/2]\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, but I believe it\
    \ can be simplified a little bit by removing the `if` statement and just doing\
    \ `median(sort(l))`\n<|/ c |>\n<| c |>\nThis solution does not work if there are\
    \ NAs in the list. `median(sort(c(NA,1,2)))` returns `NA` instead of `1`.\n<|/\
    \ c |>\n<| c |>\nI believe this solution does not work if there are NAs in the\
    \ list. median(sort(c(NA,1,2))) returns NA instead of 1. I believe this solution\
    \ does not work if there are NAs in the list. median(sort(c(NA,1,2))) returns\
    \ NA instead of 1. I believe this solution does not work if there are NAs in the\
    \ list. median(sort(c(NA,1,2))) returns NA instead of 1. I believe this solution\
    \ does not work if there are NAs in the list. median(sort(c(NA,1,2))) returns\
    \ NA instead of 1. I believe this solution does not work if there are NAs in the\
    \ list. median(sort(c(NA,1,2))) returns NA instead of 1. I believe this solution\
    \ does not work if there are NAs in the list. median(sort(c(NA,1,2))) returns\
    \ NA instead of 1. I believe this solution does not work if there are NAs in the\
    \ list. median(sort(c(NA,1,2))) returns NA instead of 1. I believe this solution\
    \ does not work if there are NAs in the list. median(sort(c(NA,1,2))) returns\
    \ NA instead of 1. I believe this solution does not work if there are NAs in the\
    \ list. median(sort(c(NA,1,2))) returns NA instead of 1. I believe this solution\
    \ does not work if there are NAs in the list. median(sort(c(NA,1,2))) returns\
    \ NA instead of 1. I believe this solution does not work if there are NAs in the\
    \ list. median(sort(c(NA,1,2))) returns NA instead of 1. I believe this solution\
    \ does not work if there are NAs in the list. median(sort(c(NA,1,2))) returns\
    \ NA instead of 1. I believe this solution does not work if there are NAs in the\
    \ list. median(sort(c(NA,1,2))) returns NA instead of 1. I believe this solution\
    \ does not work if there are NAs in the list. median(sort(c(NA,1,2))) returns\
    \ NA instead of 1. I believe this solution does not work if there are NAs in the\
    \ list. median(sort(c(NA,1,2))) returns NA instead of 1. I believe this solution\
    \ does not ", "\n  n <- length(l)\n  if (n == 0) return(NA)\n  m <- floor(n/2)\n\
    \  return(l[m])\n}\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n\
    \  return(l[n / 2])\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution.\
    \ Very concise. Thanks!\n<|/ c |>\n<| c |>\nI like this solution as well. Very\
    \ concise. Thanks!\n<|/ c |>\n<| c |>\nI like this solution as well. Very concise.\
    \ Thanks!\n<|/ c |>\n<| c |>\nI like this solution as well. Very concise. Thanks!\n\
    <|/ c |>\n<| c |>\nI like this solution as well. Very concise. Thanks!\n<|/ c\
    \ |>\n<| a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't work if x is a vector of NAs. `median(sort(c(NA,NA,NA)))`\
    \ returns `NA` instead of `NA`\n<|/ c |>\n<| c |>\nThis doesn't work if x is a\
    \ vector of NAs. median(sort(c(NA,NA,NA))) returns NA instead of NA\n<|/ c |>\n\
    <| c |>\nThis doesn't work if x is a vector of NAs. median(sort(c(NA,NA,NA)))\
    \ returns NA instead of NA\n<|/ c |>\n<| c |>\nThis doesn't work if x is a vector\
    \ of NAs. median(sort(c(NA,NA,NA))) returns NA instead of NA\n<|/ c |>\n<| c |>\n\
    This doesn't work if x is a vector of NAs. median(sort(c(NA,NA,NA))) returns NA\
    \ instead of NA\n<|/ c |>\n<| a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work if x is a vector of NAs. median(sort(c(NA,NA,NA)))\
    \ returns NA instead of NA\n<|/ c |>\n<| c |>\nThis doesn't work if x is a vector\
    \ of NAs. median(sort(c(NA,NA,NA))) returns NA instead of NA\n<|/ c |>\n<| c |>\n\
    This doesn't work if x is a vector of NAs. median(sort(c(NA,NA,NA))) returns NA\
    \ instead of NA\n<|/ c |>\n<| c |>\nThis ", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 2) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/ a tags=r |>\n<|\
    \ c |>\nThis doesn't seem to work if you have a list with only one element. `median(c(1))`\
    \ returns `NA` instead of `1`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for\
    \ pointing it out. Now it works.\n<|/ c |>\n<| c |>\nI added a version that doesn't\
    \ require sorting.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't seem to work if you have a list with\
    \ only one element. `median(c(1))` returns `NA` instead of `1`.\n<|/ c |>\n<|\
    \ c |>\nI fixed the bug, thanks for pointing it out. Now it works.\n<|/ c |>\n\
    <| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This doesn't seem to work if you have a list with only one element. `median(c(1))`\
    \ returns `NA` instead of `1`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for\
    \ pointing it out. Now it works.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't seem to work if you have a list\
    \ with only one element. `median(c(1))` returns `NA` instead of `1`.\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| a dscore=4\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| a dscore=4 |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't seem to work\
    \ if you have a list with only one element. `median(c(1))` returns `NA` instead\
    \ of `1`.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a\
    \ tags=r |>\n<| a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nThanks for your answer. Could you please\
    \ explain why you used `median` instead of `mean`? I thought `mean` was more appropriate\
    \ for my case.\n<|/ c |>\n<| c |>\n`mean` will give the mean of a vector whereas\
    \ `median` will give the median of a vector. `mean` will give the mean of a vector\
    \ whereas `median` will give the median of a vector. `mean` will give the mean\
    \ of a vector whereas `median` will give the median of a vector. `mean` will give\
    \ the mean of a vector whereas `median` will give the median of a vector. `mean`\
    \ will give the mean of a vector whereas `median` will give the median of a vector.\
    \ `mean` will give the mean of a vector whereas `median` will give the median\
    \ of a vector. `mean` will give the mean of a vector whereas `median` will give\
    \ the median of a vector. `mean` will give the mean of a vector whereas `median`\
    \ will give the median of a vector. `mean` will give the mean of a vector whereas\
    \ `median` will give the median of a vector. `mean` will give the mean of a vector\
    \ whereas `median` will give the median of a vector. `mean` will give the mean\
    \ of a vector whereas `median` will give the median of a vector. `mean` will give\
    \ the mean of a vector whereas `median` will give the median of a vector. `mean`\
    \ will give the mean of a vector whereas `median` will give the median of a vector.\
    \ `mean` will give the mean of a vector whereas `median` will give the median\
    \ of a vector. `mean` will give the mean of a vector whereas `median` will give\
    \ the median of a vector. `mean` will give the mean of a vector whereas `median`\
    \ will give the median of a vector. `mean` will give the mean of a vector whereas\
    \ `median` will give the median of a vector. `mean` will give the mean of a vector\
    \ whereas `median` will give the median of a vector. `mean` will give the mean\
    \ of a vector whereas `median` will give the median of a vector. `mean` will give\
    \ the mean of a vector whereas `median` will give the median of a vector. `mean`\
    \ will ", "\n  n <- length(l)\n  if (n == 0) return(NA)\n  m <- floor(n/2)\n \
    \ return(l[m])\n}\n", "\n  l <- sort(l)\n  length(l) / 2 # median\n}\n</code>\n\
    <|/ a tags=r,list,median |>\n<| c |>\nI like this solution, but I wonder if there\
    \ is a way to avoid the sorting step. I wonder if there is a way to get the median\
    \ without sorting.\n<|/ c |>\n<| c |>\nI added a solution that does not sort the\
    \ list. Not sure if this is more efficient though.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that does not sort the list. Not sure if this is more efficient though.\n\
    <|/ c |>\n<| c |>\nI added a solution that does not sort the list. Not sure if\
    \ this is more efficient though.\n<|/ c |>\n<| a dscore=5 |>\nHere's a solution\
    \ using R's built-in median() function:\n<code>\nmedian(mylist)\n</code>\n<|/\
    \ a tags=r,list,median |>\n<| c |>\nThis doesn't work if your list contains NAs.\
    \ `median(mylist)` returns NA.\n<|/ c |>\n<| c |>\nThis doesn't work if your list\
    \ contains NAs. median(mylist) returns NA.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if your list contains NAs. median(mylist) returns NA.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if your list contains NAs. median(mylist) returns NA.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if your list contains NAs. median(mylist) returns NA.\n\
    <|/ c |>\n<| a tags=r,list,median |>\n<code>\nmedian(mylist)\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't work if your list contains NAs. median(mylist) returns\
    \ NA.\n<|/ c |>\n<| c |>\nThis doesn't work if your list contains NAs. median(mylist)\
    \ returns NA.\n<|/ c |>\n<| c |>\nThis doesn't work if your list contains NAs.\
    \ median(mylist) returns NA.\n<|/ c |>\n<| c |>\nThis doesn't work if your list\
    \ contains NAs. median(mylist) returns NA.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if your list contains NAs. median(mylist) returns NA.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nmedian(mylist)\n</code>", "\n  l <- sort(l)\n  length(l)/2\n}\n\
    </code>\n<|/ a tags=r |>\n<| a dscore=0 |>\nI wrote a function that returns the\
    \ median of a vector. \n<code>\nmedian.vec <- function(x){\n  x <- sort(x)\n \
    \ length(x)/2\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis does not provide an\
    \ answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/16009274)\n\
    <|/ c |>\n<| c |>\nIt does provide an answer to the question. He asked how to\
    \ find the median of a vector. He also asked how to find the median of a vector.\
    \ He also asked how to find the median of a vector. He also asked how to find\
    \ the median of a vector. He also asked how to find the median of a vector. He\
    \ also asked how to find the median of a vector. He also asked how to find the\
    \ median of a vector. He also asked how to find the median of a vector. He also\
    \ asked how to find the median of a vector. He also asked how to find the median\
    \ of a vector. He also asked how to find the median of a vector. He also asked\
    \ how to find the median of a vector. He also asked how to find the median of\
    \ a vector. He also asked how to find the median of a vector. He also asked how\
    \ to find the median of a vector. He also asked how to find the median of a vector.\
    \ He also asked how to find the median of a vector. He also asked how to find\
    \ the median of a vector. He also asked how to find the median of a vector. He\
    \ also asked how to find the median of a vector. He also asked how to find the\
    \ median of a vector. He also asked how to find the median of a vector. He also\
    \ asked how to find the median of a vector. He also asked how to find the median\
    \ of a vector. He also asked how to find the median of a vector. He also asked\
    \ how to find the median of a vector. He also asked how to find the median of\
    \ a vector. He also asked how to find the median of a vector. He also asked how\
    \ to find the median of a vector. He also asked how to find the median of a vector.\
    \ He also asked how to find the median of a vector. He also asked how to find\
    \ the median of a vector. He also asked how to find the median of a vector. He\
    \ also asked ", "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like your `median` function.  I added\
    \ a version that doesn't require the extra package.  I hope you don't mind that\
    \ I added it to your answer.\n<|/ c |>\n<| c |>\nI added your version to my answer.\n\
    <|/ c |>\n<| c |>\nI added your version to my answer.\n<|/ c |>\n<| c |>\nI added\
    \ your version to my answer.\n<|/ c |>\n<| c |>\nI added your version to my answer.\n\
    <|/ c |>\n<| a tags=r,median |>\nHere's a function that returns the median of\
    \ a vector:\n<code>\nmedian.vec <- function(x) {\n  n <- length(x)\n  if(n < 1)\
    \ return(NA)\n  sort(x)[n / 2]\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ work for vectors with negative numbers. Try `median.vec(c(1,-2,3))` which returns\
    \ `NA`.\n<|/ c |>\n<| c |>\nI added a version that doesn't require the extra package.\n\
    <|/ c |>\n<| c |>\nI added your version to my answer.\n<|/ c |>\n<| c |>\nI added\
    \ your version to my answer.\n<|/ c |>\n<| c |>\nI added your version to my answer.\n\
    <|/ c |>\n<| a |>\n<code>\nmedian.vec <- function(x) {\n  n <- length(x)\n  if(n\
    \ < 1) return(NA)\n  sort(x)[n / 2]\n}\n</code>\n<|/ a dscore=5 tags=r,median\
    \ |>\n<| c |>\nI added your version to my answer.\n<|/ c |>\n<| c |>\nI added\
    \ your version to my answer.\n<|/ c |>\n<| a |>\n<code>\nmedian.vec <- function(x)\
    \ {\n  n <- length(x)\n  if(n < 1) return(NA)\n  sort(x)[n / 2]\n}\n</code>\n\
    <|/ a dscore=4 tags=r,median |>\n<| c |>\nI added your version to my answer.\n\
    <|/ c |>\n<| a tags=r,median |>\n<code>\nmedian.vec <- function(x) {\n  n <- length(x)\n\
    \  if(n < 1) return(NA)\n", "\n  l <- sort(l)\n  return(l[length(l)/2])\n}\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the mode of a vector. For example,\
    \ the mode of the vector [3, 3, 3, 3] would be 3. The function should return NA\
    \ if the vector is empty.\n\n\n</text>\n<cell>", "\n  n <- length(l)\n  if (n\
    \ == 0) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    I like your median function.  I added a version that uses `median` from the `MASS`\
    \ package to my answer.\n<|/ c |>\n<| a dscore=3 |>\nThe median of a vector is\
    \ defined as the value that occurs the most frequently in the vector.  In other\
    \ words, it is the value that occurs the most frequently in the vector.\nThe median\
    \ of a vector is defined as the value that occurs the least frequently in the\
    \ vector.  In other words, it is the value that occurs the least frequently in\
    \ the vector.\nThe median of a vector is defined as the value that occurs the\
    \ middle value in the vector.  In other words, it is the value that occurs the\
    \ middle value in the vector.\nThe median of a vector is defined as the value\
    \ that occurs the middle value in the vector.  In other words, it is the value\
    \ that occurs the middle value in the vector.\nThe median of a vector is defined\
    \ as the value that occurs the middle value in the vector.  In other words, it\
    \ is the value that occurs the middle value in the vector.\nThe median of a vector\
    \ is defined as the value that occurs the middle value in the vector.  In other\
    \ words, it is the value that occurs the middle value in the vector.\nThe median\
    \ of a vector is defined as the value that occurs the middle value in the vector.\
    \  In other words, it is the value that occurs the middle value in the vector.\n\
    The median of a vector is defined as the value that occurs the middle value in\
    \ the vector.  In other words, it is the value that occurs the middle value in\
    \ the vector.\nThe median of a vector is defined as the value that occurs the\
    \ middle value in the vector.  In other words, it is the value that occurs the\
    \ middle value in the vector.\nThe median of a vector is defined as the value\
    \ that occurs the middle value in the vector.  In other words, it is the value\
    \ that occurs the middle value in the vector.\nThe median of a vector is defined\
    \ as the value that occurs the middle value in the vector.  In other words, it\
    \ is the value that occurs the middle value in the vector.\nThe median of a vector\
    \ is defined as the value that occurs the middle value in the vector.  In other\
    \ words, it is the value that occurs the middle value in the vector.\nThe median\
    \ of a vector is defined as the value that occurs the middle value in the vector.\
    \  In other words, it is the value that occurs the middle value in the vector.\n\
    The median of a vector is defined as the value that occurs the middle value in\
    \ the vector.  In other words, it is the value that occurs the middle value in\
    \ the vector.\nThe median of a vector is defined as the value that occurs the\
    \ middle value in the vector.  In other words, it is the value that occurs the\
    \ middle value in the vector.\nThe median of a vector is defined ", "\n  l <-\
    \ sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n}\n\
    </code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))`\
    \ returns `3` instead of `2.5`.\n<|/ c |>\n<| c |>\nI tested it and it works fine\
    \ for me. Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\nYes, I copied\
    \ it correctly. Maybe it's because I'm using a Mac?\n<|/ c |>\n<| c |>\nI tested\
    \ it on Windows and it works fine. Are you sure you copied it correctly?\n<|/\
    \ c |>\n<| c |>\nI copied it exactly as you wrote it. I even tried copying it\
    \ from your answer, but that didn't work either. I'm using a Mac.\n<|/ c |>\n\
    <| a dscore=2 |>\nThe median is defined as the middle value of a sorted list.\
    \ \n<code>\nmedian(1:10)\n[1] 5\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't\
    \ seem to work. `median(c(1,2,3,4,5))` returns `3` instead of `2.5`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works fine for me. Are you sure you copied it correctly?\n\
    <|/ c |>\n<| c |>\nYes, I copied it correctly. Maybe it's because I'm using a\
    \ Mac?\n<|/ c |>\n<| c |>\nI tested it on Windows and it works fine. Are you sure\
    \ you copied it correctly?\n<|/ c |>\n<| c |>\nI copied it exactly as you wrote\
    \ it. I even tried copying it from your answer, but that didn't work either. I'm\
    \ using a Mac.\n<|/ c |>\n<| a dscore=2 |>\nThe median is defined as the middle\
    \ value of a sorted list. \n<code>\nmedian(1:10)\n[1] 5\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\nThe median is defined as the middle value of a sorted list.\
    \ \n<code>\nmedian(1:10)\n[1] 5\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    The median is defined as the middle value of a sorted list. \n<code>\nmedian(1:10)\n\
    [1] 5\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\nThe median is defined as the\
    \ middle value of a sorted ", "\n  l <- sort(l)\n  n <- length(l)\n  if (n ==\
    \ 1) return(l[1])\n  i <- floor(n/2)\n  return(l[(i+1):n])\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThis doesn't seem to work if there are two equal medians.\
    \ For example, median([1,1,2,3]) returns 1 instead of 1.5.\n<|/ c |>\n<| c |>\n\
    It does work if there are two equal medians. Try it yourself. It returns 1.5 for\
    \ median([1,1,2,3]).\n<|/ c |>\n<| c |>\nIt doesn't work if there are two equal\
    \ medians. Try it yourself. It returns 1.5 for median([1,1,2,3]).\n<|/ c |>\n\
    <| c |>\nIt doesn't work if there are two equal medians. Try it yourself. It returns\
    \ 1.5 for median([1,1,2,3]).\n<|/ c |>\n<| c |>\nIt doesn't work if there are\
    \ two equal medians. Try it yourself. It returns 1.5 for median([1,1,2,3]).\n\
    <|/ c |>\n<| a dscore=1 |>\nI wrote a function that returns the median of a vector\
    \ in R. It also returns the positions of the median and the median itself. \n\
    <code>\nmedian.position <- function(x){\n  x <- sort(x)\n  n <- length(x)\n  i\
    \ <- floor(n/2)\n  return(c(median(x), i))\n}\n</code>\n<|/ a tags=median,r |>\n\
    <| a tags=median,r |>\n<code>\nmedian.position <- function(x){\n  x <- sort(x)\n\
    \  n <- length(x)\n  i <- floor(n/2)\n  return(c(median(x), i))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nmedian.position <- function(x){\n  x <- sort(x)\n\
    \  n <- length(x)\n  i <- floor(n/2)\n  return(c(median(x), i))\n}\n</code>\n\
    <|/ a tags=median,r dscore=1 |>\n<| a tags=median,r |>\n<code>\nmedian.position\
    \ <- function(x){\n  x <- sort(x)\n  n <- length(x)\n  i <- floor(n/2)\n  return(c(median(x),\
    \ i))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWelcome to Stack Overflow! While\
    \ this code snippet may solve the question, [including an explanation](//meta.stackexchange.com/questions/114762",
  "\n  sort(l)[length(l)%%2 == 0][length(l)%%2 == 1]\n}\n</cell>\n<cell>\nmedian([3,\
    \ 1, 2, 4, 5])\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe median\
    \ of a finite set of numbers is called the \"middle\" of the set. For example,\
    \ in the set {1, 2, 3, 4}, the median is (2 + 3) / 2 = 2.5.\n\nThe median is often\
    \ used to find the \"typical\" value in a set of numbers, such as the median of\
    \ grades in a class. A typical value is the value such that adding up all the\
    \ numbers in the set and dividing by the number of numbers gives the median.\n\
    \nThe median is also used to find the value with the highest and lowest frequency\
    \ in a set of numbers. For example, the median of {1, 1, 2, 3, 4} is (1 + 1 +\
    \ 2) / 3 = 1.5.\n\nThe median is also used to find the value with the highest\
    \ and lowest frequency in a set of numbers. For example, the median of {1, 1,\
    \ 2, 3, 4} is (1 + 1 + 2) / 3 = 1.5.\n\nThe median is also used to find the value\
    \ with the highest and lowest frequency in a set of numbers. For example, the\
    \ median of {1, 1, 2, 3, 4} is (1 + 1 + 2) / 3 = 1.5.\n\n\n</text>\n<text>\nThe\
    \ median of a finite set of numbers is called the \"middle\" of the set. For example,\
    \ in the set {1, 2, 3, 4}, the median is (2 + 3) / 2 = 2.5.\n\nThe median is often\
    \ used to find the \"typical\" value in a set of numbers, such as the median of\
    \ grades in a class. A typical value is the value such that adding up all the\
    \ numbers in the set and dividing by the number of numbers gives the median.\n\
    \nThe median is also used to find the value with the highest and lowest frequency\
    \ in a set of numbers. For example, the median of {1, 1, 2, 3, 4} is (1 + 1 +\
    \ 2) / 3 = 1.5.\n\nThe median is also used to find the value with the highest\
    \ and lowest frequency in a set of numbers. For example, the median of {1, 1,\
    \ 2, 3, 4} is (1 + 1 + 2) / 3 = 1.5.\n\nThe median is also used to find the value\
    \ with the highest and lowest frequency in a set of numbers. For example, the\
    \ median of {1, 1, 2, 3, 4} is (1 + 1 + 2) / 3 = 1.5.\n\n\n</text>\n<text>\nThe\
    \ median of a finite set of numbers is called the \"middle\" of the set. For example,\
    \ in the set {1, 2, 3, 4}, the median is (2 + 3) / 2 = 2.5.\n\nThe median is often\
    \ used to find the \"typical\" value in a set of numbers, such as the median of\
    \ grades in a class. A typical value is the value such that adding up all the\
    \ numbers in the set and dividing by the number of numbers gives the median.\n\
    \nThe median is also used to find the ", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 2) return(NA)\n  return(l[n/2])\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nI like your solution, although I prefer `median(l)` over `median(sort(l))`\
    \ since it avoids sorting and thus is more efficient.\n<|/ c |>\n<| c |>\nThanks\
    \ for the comment. I edited my answer to include your suggestion.\n<|/ c |>\n\
    <| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(l)))))\
    \ \n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have NA's in\
    \ the list\n<|/ c |>\n<| c |>\nIt doesn't work if you have NA's in the list. Try\
    \ it with `l <- list(a = c(NA,NA), b = c(1,2))`\n<|/ c |>\n<| a tags=r,list,median\
    \ |>\n<code>\nmedian(as.numeric(names(sort(unlist(l))))) \n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(l)))))\
    \ \n</code>\n<|/ a dscore=2 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(l)))))\
    \ \n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(l)))))\
    \ \n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric(names(sort(unlist(l)))))\
    \ \n</code>\n<|/ a tags=r,list,median |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric(names(sort(unlist(l)))))\
    \ \n</code>\n<|/ a tags=r,list,median |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric(names(sort(unlist(l)))))\
    \ \n</code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\n\
    median(as.numeric(names(sort(unlist(l))))) \n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=1 |>\n<code>\nmedian(as.numeric(names(sort(unlist(l))))) \n</code>\n\
    <|/ a tags=", "\n  n <- length(l)\n  if (n == 0) return(NA)\n  sort(l)[n / 2]\n\
    }\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n/2])\n\
    }\n", "\n  l <- sort(l)\n  return(l[length(l)/2])\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThank you for taking the time to write this up. I'm going to try\
    \ it out and see how it works.\n<|/ c |>\n<| c |>\nI ran the code and it seems\
    \ to work perfectly. Thank you so much!\n<|/ c |>\n<| a |>\nI wrote a function\
    \ that does this for you:\n<code>\nmedian.list <- function(x) {\n  x <- sort(x)\n\
    \  return(x[length(x)/2])\n}\n</code>\n<|/ a tags=median,r dscore=1 |>\n<| a tags=median,r\
    \ |>\n<code>\nmedian.list <- function(x) {\n  x <- sort(x)\n  return(x[length(x)/2])\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian.list <- function(x)\
    \ {\n  x <- sort(x)\n  return(x[length(x)/2])\n}\n</code>\n<|/ a tags=median,r\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian.list <- function(x) {\n  x <- sort(x)\n\
    \  return(x[length(x)/2])\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n\
    median.list <- function(x) {\n  x <- sort(x)\n  return(x[length(x)/2])\n}\n</code>\n\
    <|/ a tags=median,r |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a tags=median,r |>\n<code>\nmedian.list <-\
    \ function(x) {\n  x <- sort(x)\n  return(x[length(x)/2])\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nmedian.list <- function(x) {\n \
    \ x <- sort(x)\n  return(x[length(x)/2])\n}\n</code>\n<|/ a tags=median,r |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves ", "\n  l <-\
    \ sort(l)\n  return(l[length(l)/2])\n}\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the mode of a list of numbers. If the list contains more than one\
    \ mode, the function should return the smallest one.\n\nHint: Use unique() on\
    \ the list to remove duplicates.\n\n\n</text>\n<cell>", "\n  sort(l)[length(l)%%2\
    \ == 0][length(l)%%2 == 1]\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nI like this\
    \ solution, but I wonder if there is a way to avoid the double `if` statement?\n\
    <|/ c |>\n<| c |>\nI guess you could use `median` instead of `mean` but that would\
    \ require a little more work to get the median of the medians instead of the medians\
    \ of the means.\n<|/ c |>\n<| c |>\nI guess you could use `median` instead of\
    \ `mean` but that would require a little more work to get the median of the medians\
    \ instead of the medians of the means.\n<|/ c |>\n<| c |>\nI guess you could use\
    \ `median` instead of `mean` but that would require a little more work to get\
    \ the median of the medians instead of the medians of the means.\n<|/ c |>\n<|\
    \ c |>\nI guess you could use `median` instead of `mean` but that would require\
    \ a little more work to get the median of the medians instead of the medians of\
    \ the means.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n<|/\
    \ a tags=r |>\n<| c |>\nThis should be the accepted answer. `median` can take\
    \ any vector and `sort` will sort it for you.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. `median` can take any vector and `sort` will sort it\
    \ for you.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. `median` can\
    \ take any vector and `sort` will sort it for you.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. `median` can take any vector and `sort` will sort it\
    \ for you.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. `median` can\
    \ take any vector and `sort` will sort it for you.\n<|/ c |>\n<| a tags=r |>\n\
    <code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the\
    \ accepted answer. `median` can take any vector and `sort` will sort it for you.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n\
    <| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a d", "\n  l <- sort(l)\n\
    \  n <- length(l)\n  if (n < 1) return(NA)\n  m <- floor(n/2)\n  return(l[m])\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. Your code works perfectly\
    \ for small lists, but for large lists I get the following error message: Error\
    \ in median.default(l) : argument must be numeric or logical\n<|/ c |>\n<| c |>\n\
    I added a version that works with large lists.\n<|/ c |>\n<| c |>\nThanks again!\
    \ Your code works perfectly for small lists, but for large lists I get the following\
    \ error message: Error in median.default(l) : argument must be numeric or logical\n\
    <|/ c |>\n<| c |>\nI added a version that works with large lists.\n<|/ c |>\n\
    <| c |>\nThanks again! Your code works perfectly for small lists, but for large\
    \ lists I get the following error message: Error in median.default(l) : argument\
    \ must be numeric or logical\n<|/ c |>\n<| a dscore=2 |>\nThe median of a vector\
    \ is defined as the middle value of a sorted vector. \n<code>\nmedian(1:10)",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[(n + 1)\
    \ / 2])\n}\n", "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n\
    }\n</code>\n<|/ a tags=r,median |>\n<| c |>\nI like your `median` function, but\
    \ I wonder if it would be more efficient to sort and return the middle element\
    \ of the sorted list. `median` would have to sort and return the middle element\
    \ of the sorted list, which would require O(nlogn) time. Sorting the list would\
    \ require O(n) time. Thus, `median` would require O(nlogn) time.\n<|/ c |>\n<|\
    \ c |>\nI agree with you. Sorting the list would require O(nlogn) time. Thus,\
    \ `median` would require O(nlogn) time.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ Sorting the list would require O(nlogn) time. Thus, `median` would require O(nlogn)\
    \ time.\n<|/ c |>\n<| c |>\nI agree with you. Sorting the list would require O(nlogn)\
    \ time. Thus, `median` would require O(nlogn) time.\n<|/ c |>\n<| c |>\nI agree\
    \ with you. Sorting the list would require O(nlogn) time. Thus, `median` would\
    \ require O(nlogn) time.\n<|/ c |>\n<| a tags=r,median |>\n<code>\nmedian.default\
    \ <- function(x){\n  x <- sort(x)\n  n <- length(x)\n  if(n%%2 == 1) return(x[n/2])\n\
    \  return(x[n/2 - 1] + x[n/2])/2\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like\
    \ your `median.default` function, but I wonder if it would be more efficient to\
    \ sort and return the middle element of the sorted list. `median.default` would\
    \ have to sort and return the middle element of the sorted list, which would require\
    \ O(nlogn) time. Sorting the list would require O(n) time. Thus, `median.default`\
    \ would require O(nlogn) time.\n<|/ c |>\n<| c |>\nI agree with you. Sorting the\
    \ list would require O(nlogn) time. Thus, `median.default` would require O(nlogn)\
    \ time.\n<|/ c |>\n<| c |>\nI agree with you. Sorting the list would require O(nlogn)\
    \ time. Thus, `median", "\n  l <- sort(l)\n  return(median(l))\n}\n</code>\n<|/\
    \ a tags=r,statistics |>\n<| a |>\nThe median of a vector is defined as the value\
    \ that occurs the most frequently in the vector. \n<code>\nmedian(1:10)\n[1] 5\n\
    </code>\nTo find the median of a data frame you can use the function median()\
    \ from the dplyr package. \n<code>\nlibrary(dplyr)\ndf <- data.frame(a = c(1,2,3,4,5,6,7,8,9,10),\
    \ b = c(1,2,3,4,5,6,7,8,9,10))\ndf %>% summarise(median = median(b))\n</code>\n\
    <|/ a tags=r,statistics dscore=2 |>\n<| a tags=r,statistics |>\nThe median of\
    \ a vector is defined as the value that occurs the most frequently in the vector.\
    \ \n<code>\nmedian(1:10)\n[1] 5\n</code>\nTo find the median of a data frame you\
    \ can use the function median() from the dplyr package. \n<code>\nlibrary(dplyr)\n\
    df <- data.frame(a = c(1,2,3,4,5,6,7,8,9,10), b = c(1,2,3,4,5,6,7,8,9,10))\ndf\
    \ %>% summarise(median = median(b))\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,statistics\
    \ |>\nThe median of a vector is defined as the value that occurs the most frequently\
    \ in the vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\nTo find the median of\
    \ a data frame you can use the function median() from the dplyr package. \n<code>\n\
    library(dplyr)\ndf <- data.frame(a = c(1,2,3,4,5,6,7,8,9,10), b = c(1,2,3,4,5,6,7,8,9,10))\n\
    df %>% summarise(median = median(b))\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,statistics\
    \ |>\nThe median of a vector is defined as the value that occurs the most frequently\
    \ in the vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\nTo find the median of\
    \ a data frame you can use the function median() from the dplyr package. \n<code>\n\
    library(dplyr)\ndf <- data.frame(a = c(1,2,3,4,5,6,7,8,9,10), b = c(1,2,3,4,5,6,7,8,9,10))\n\
    df %>% summarise(median = median(b))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\nThe median of a vector is defined as the value that occurs the most frequently\
    \ in the vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\nTo find the median ",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n\
    }\n</code>\n<|/ a tags=r,median,list |>\n<| a dscore=2 |>\nA simple and efficient\
    \ solution is to use median() from base R:\n<code>\nmedian(mylist)\n</code>\n\
    <|/ a tags=r,median,list |>\n<| a dscore=2 |>\n<code>\nmedian(mylist)\n</code>\n\
    <|/ a tags=r,median,list |>\n<| a dscore=2 |>\n<code>\nmedian(mylist)\n</code>\n\
    <|/ a tags=r,median,list |>\n<| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n\
    <|/ a tags=r,median,list |>\n<| a tags=r,median,list |>\n<code>\nmedian(mylist)\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n\
    <|/ a tags=r,median,list |>\n<| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n\
    <|/ a tags=r,median,list |>\n<| a tags=r,median,list |>\n<code>\nmedian(mylist)\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n\
    <|/ a tags=r,median,list |>\n<| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n\
    <|/ a tags=r,median,list |>\n<| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n\
    <|/ a tags=r,median,list |>\n<| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n\
    <|/ a tags=r,median,list |>\n<| a tags=r,median,list |>\n<code>\nmedian(mylist)\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,median,list |>\n<code>\nmedian(mylist)\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,median,list |>\n<code>\nmedian(mylist)\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n\
    <|/ a tags=r,median,list |>\n<| a tags=r,median,list |>\n<code>\nmedian(mylist)\n\
    </code>\n<|/ a dscore", "\n  sort(l)[length(sort(l))/2]\n}\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| a dscore=2 |>\nThe median of a list can be calculated using the median\
    \ function in base R:\n<code>\nmedian(mylist)\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| a tags=r,list,median |>\nI used the median function from base R to get\
    \ the median of a list. \n<code>\nmedian(mylist)\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=r,list,median |>\n<code>\nmedian(mylist)\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n<|/ a tags=r,list,median |>\n\
    <| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n<|/ a tags=r,list,median |>\n\
    <| a |>\n<code>\nmedian(mylist)\n</code>\n<|/ a dscore=1 tags=r,list,median |>\n\
    <| a tags=r,list,median |>\n<code>\nmedian(mylist)\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n<|/ a tags=r,list,median |>\n\
    <| a tags=r,list,median |>\n<code>\nmedian(mylist)\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n<|/ a tags=r,list,median |>\n\
    <| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n<|/ a tags=r,list,median |>\n\
    <| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n<|/ a tags=r,list,median |>\n\
    <| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n<|/ a tags=r,list,median |>\n\
    <| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n<|/ a tags=r,list,median |>\n\
    <| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>\n<|/ a tags=r,list,median |>\n\
    <| a tags=r,list,median |>\n<code>\nmedian(mylist)\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r,list,median |>\n<code>\nmedian(mylist)\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nmedian(mylist)\n</code>", "\n  l <- sort(l)\n  n <-\
    \ length(l)\n  if (n == 0) return(NA)\n  m <- floor(n/2)\n  return(l[m])\n}\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a dscore=2 |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a tags=r,list,median dscore=2 |>\n<| a tags=r,list,median |>\n<code>\n\
    median(as.numeric(as.character(list)))\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,list,median\
    \ |>\n<code>\nmedian(as.numeric(as.character(list)))\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nmedian(as.numeric(as.character(list)))\n</code>\n\
    <|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a |>\n<code>\nmedian(as.numeric(as.character(list)))\n",
  "\n  n <- length(l)\n  if (n == 0) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to make it more efficient. For example, `median(1:1e6)` takes about 5 seconds\
    \ on my machine.\n<|/ c |>\n<| c |>\n: I added a faster solution. `median` uses\
    \ `sort`, so it's O(n log n).\n<|/ c |>\n<| c |>\nI like the `median` function\
    \ but I don't understand how it works. Can you explain how it works?\n<|/ c |>\n\
    <| c |>\n: I added a description.\n<|/ c |>\n<| c |>\nI like your solution, but\
    \ I wonder if there is a way to make it more efficient. For example, `median(1:1e6)`\
    \ takes about 5 seconds on my machine.\n<|/ c |>\n<| a dscore=5 |>\nI wrote a\
    \ package for R that does this for you:\n<code>\ninstall.packages(\"dplyr\")\n\
    library(dplyr)\n</code>\nThe function median will return the median of a vector:\n\
    <code>\n> median(1:10)\n[1] 5\n</code>\n<|/ a tags=r |>\n<| c |>\nThis should\
    \ be the accepted answer. dplyr is very useful.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. dplyr is very useful.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. dplyr is very useful.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. dplyr is very useful.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. dplyr is very useful.\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>\nmedian(1:10)\n</code>\n<|/ a tags=r |>\n<| c |>\nThis should be the accepted\
    \ answer. dplyr is very useful.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. dplyr is very useful.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. dplyr is very useful.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n\
    </code>\n<|/ a d", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n\
    \  i <- floor((n + 1) / 2)\n  return(l[i])\n}\n", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 1) return(NA)\n  i <- floor((n + 1) / 2)\n  return(l[i])\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nThis doesn't work for negative numbers. `median(c(-10,\
    \ 4, 6, 1000, 10, 20))` returns `NA`\n<|/ c |>\n<| c |>\nI added a fix for negative\
    \ numbers. Thanks.\n<|/ c |>\n<| c |>\nI added a fix for negative numbers. Thanks.\n\
    <|/ c |>\n<| c |>\nI added a fix for negative numbers. Thanks.\n<|/ c |>\n<| c\
    \ |>\nI added a fix for negative numbers. Thanks.\n<|/ c |>\n<| a dscore=4 |>\n\
    <code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. `median(c(-10, 4, 6, 1000, 10, 20))` returns `NA`\n<|/\
    \ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=4 |>\n\
    <| c |>\nThis doesn't work for negative numbers. `median(c(-10, 4, 6, 1000, 10,\
    \ 20))` returns `NA`\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `median(c(-10, 4, 6, 1000, 10, 20))` returns `NA`\n<|/ c |>\n<| a dscore=4 |>\n\
    <code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. `median(c(-10, 4, 6, 1000, 10, 20))` returns `NA`\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for negative numbers. `median(c(-10, 4, 6,\
    \ 1000, 10, 20))` returns `NA`\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work for negative numbers. `median(c(-10,\
    \ 4, 6, 1000, 10, 20))` returns `NA`\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work for negative numbers. `median(c(-10,\
    \ 4, 6, 1000, 10, 20))` returns `NA`\n<|/ c |>\n<| a tags=", "\n  l <- sort(l)\n\
    \  length(l)/2\n}\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n\
    \  return(l[n/2])\n}\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n\
    \  m <- floor(n/2)\n  return(l[m])\n}\n</code>\n<|/ a tags=r,median |>\n<| a tags=r,median\
    \ |>\nI wrote a function that returns the median of a vector in R:\n<code>\nmedian.vector\
    \ <- function(vector) {\n  vector <- sort(vector)\n  n <- length(vector)\n  if\
    \ (n < 2) return(NA)\n  m <- floor(n/2)\n  return(vector[m])\n}\n</code>\n<|/\
    \ a dscore=4 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post.\n<|/ c |>\n<| c |>\nI added the function to the answer\n<|/ c |>\n<| a\
    \ dscore=4 |>\n<code>\nmedian.vector <- function(vector) {\n  vector <- sort(vector)\n\
    \  n <- length(vector)\n  if (n < 2) return(NA)\n  m <- floor(n/2)\n  return(vector[m])\n\
    }\n</code>\n<|/ a tags=r,median |>\n<| a tags=r,median |>\n<code>\nmedian.vector\
    \ <- function(vector) {\n  vector <- sort(vector)\n  n <- length(vector)\n  if\
    \ (n < 2) return(NA)\n  m <- floor(n/2)\n  return(vector[m])\n}\n</code>\n<|/\
    \ a dscore=4 |>\n<| a |>\n<code>\nmedian.vector <- function(vector) {\n  vector\
    \ <- sort(vector)\n  n <- length(vector)\n  if (n < 2) return(NA)\n  m <- floor(n/2)\n\
    \  return(vector[m])\n}\n</code>\n<|/ a tags=r,median dscore=4 |>\n<| a dscore=3\
    \ |>\n<code>\nmedian.vector <- function(vector) {\n  vector <- sort(vector)\n\
    \  n <- length(vector)\n  if (n < 2) return(NA)\n  m <- floor(n/2)\n  return(vector[m])\n\
    }\n</code>\n<|/ a tags=r,median |>\n<| a dscore=3 |>\n<code>\nmedian.vector <-\
    \ function(vector) {\n  vector <- sort(vector)\n  n <- length(vector)\n  if (n\
    \ < 2) return(NA)\n  m <- floor(n/2)\n  return(vector[m])\n}\n</code>\n<|/ a tags=r,median\
    \ |>\n<| a dscore", "\n  l <- sort(l)\n  return(median(l))\n}\n", "\n  sort(l)[length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2\
    \ == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%2 == 0][length(l)%%",
  "\n  n <- length(l)\n  if (n == 0) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nI like your use of median as a function name, but I don't think\
    \ it's appropriate to call it `median` since it isn't a function.\n<|/ c |>\n\
    <| c |>\nI agree with you. `median` should be `median` but `median` should be\
    \ `median.numeric` because `median` isn't a function.\n<|/ c |>\n<| c |>\nI agree\
    \ with you. `median` should be `median` but `median` should be `median.numeric`\
    \ because `median` isn't a function.\n<|/ c |>\n<| c |>\nI agree with you. `median`\
    \ should be `median` but `median` should be `median.numeric` because `median`\
    \ isn't a function.\n<|/ c |>\n<| c |>\nI agree with you. `median` should be `median`\
    \ but `median` should be `median.numeric` because `median` isn't a function.\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nmedian.numeric <- function(x) {\n  x <- as.numeric(x)\n\
    \  n <- length(x)\n  if (n == 0) return(NA)\n  sort(x)[n / 2]\n}\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nI like your use of median as a function name, but I\
    \ don't think it's appropriate to call it `median` since it isn't a function.\n\
    <|/ c |>\n<| c |>\nI agree with you. `median` should be `median` but `median`\
    \ should be `median.numeric` because `median` isn't a function.\n<|/ c |>\n<|\
    \ c |>\nI agree with you. `median` should be `median` but `median` should be `median.numeric`\
    \ because `median` isn't a function.\n<|/ c |>\n<| c |>\nI agree with you. `median`\
    \ should be `median` but `median` should be `median.numeric` because `median`\
    \ isn't a function.\n<|/ c |>\n<| c |>\nI agree with you. `median` should be `median`\
    \ but `median` should be `median.numeric` because `median` isn't a function.\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nmedian.numeric <- function(x) {\n  x <- as.numeric(x)\n\
    \  n <- ", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  i <-\
    \ floor((n + 1) / 2)\n  return(l[i])\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n  if(n<2) return(NA)\n\
    \  i<-floor((n+1)/2)\n  return(x[i])\n}\n</code>\n<|/ a tags=r,median |>\n<| a\
    \ |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n  if(n<2) return(NA)\n\
    \  i<-floor((n+1)/2)\n  return(x[i])\n}\n</code>\n<|/ a tags=r,median dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n\
    \  if(n<2) return(NA)\n  i<-floor((n+1)/2)\n  return(x[i])\n}\n</code>\n<|/ a\
    \ tags=r,median |>\n<| a dscore=2 |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n\
    \  n<-length(x)\n  if(n<2) return(NA)\n  i<-floor((n+1)/2)\n  return(x[i])\n}\n\
    </code>\n<|/ a tags=r,median |>\n<| a tags=r,median |>\n<code>\nmedian<-function(x){\n\
    \  x<-sort(x)\n  n<-length(x)\n  if(n<2) return(NA)\n  i<-floor((n+1)/2)\n  return(x[i])\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,median |>\n<code>\nmedian<-function(x){\n\
    \  x<-sort(x)\n  n<-length(x)\n  if(n<2) return(NA)\n  i<-floor((n+1)/2)\n  return(x[i])\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,median |>\n<code>\nmedian<-function(x){\n\
    \  x<-sort(x)\n  n<-length(x)\n  if(n<2) return(NA)\n  i<-floor((n+1)/2)\n  return(x[i])\n",
  "\n  l <- sort(l)\n  return(median(l))\n}\n", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 2) return(NA)\n  return(l[n/2])\n}\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nI like this solution, but I wonder if there is a way to avoid the sort\
    \ (which I believe is O(n log n)) and just return the middle element.  I suspect\
    \ there is, but I haven't found it yet.\n<|/ c |>\n<| c |>\nI believe that `median`\
    \ does a sort internally, so I don't think you can avoid it.\n<|/ c |>\n<| c |>\n\
    I believe that `median` does a sort internally, so I don't think you can avoid\
    \ it.\n<|/ c |>\n<| c |>\nI believe that `median` does a sort internally, so I\
    \ don't think you can avoid it.\n<|/ c |>\n<| c |>\nI believe that `median` does\
    \ a sort internally, so I don't think you can avoid it.\n<|/ c |>\n<| a tags=median,r\
    \ |>\nThe median is defined as the middle value of a sorted list. \n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if x is a vector of length\
    \ 1. Try median(sort(c(1,2))).\n<|/ c |>\n<| c |>\nThis doesn't work if x is a\
    \ vector of length 1. Try median(sort(c(1,2))).\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if x is a vector of length 1. Try median(sort(c(1,2))).\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if x is a vector of length 1. Try median(sort(c(1,2))).\n\
    <|/ c |>\n<| c |>\nThis doesn't work if x is a vector of length 1. Try median(sort(c(1,2))).\n\
    <|/ c |>\n<| a tags=median,r |>\nThe median of a vector is defined as the value\
    \ that occurs in the middle of the sorted vector.  \n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if x is a vector of length\
    \ 1. Try median(sort(c(1,2))).\n<|/ c |>\n<| c |>\nThis doesn't work if x is a\
    \ vector of length 1. Try median(sort(c(1,2))).\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if x is a vector of length 1. Try median(sort(c(1,2))).\n<|/ c |>\n<|",
  "\n  l <- sort(l)\n  length(l)/2\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThanks for\
    \ your answer. Can you please explain how this works?\n<|/ c |>\n<| c |>\nI added\
    \ some comments. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Can\
    \ you please explain how this works?\n<|/ c |>\n<| c |>\nI added some comments.\
    \ Hope it helps.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. `median` will\
    \ return the median of the entire vector, whereas `sort` will return the median\
    \ of the sorted vector.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ `median` will return the median of the entire vector, whereas `sort` will return\
    \ the median of the sorted vector.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=r |>\n<| c |>\nThis should be the accepted answer. `median`\
    \ will return the median of the entire vector, whereas `sort` will return the\
    \ median of the sorted vector.\n<|/ c |>\n<| a |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a dscore=4 tags=r |>\n<| c |>\nThis should be the accepted answer. `median`\
    \ will return the median of the entire vector, whereas `sort` will return the\
    \ median of the sorted vector.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a dscore=4 |>\n<| a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=3 |>\n<| a tags=r\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n\
    <code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| a ", "\n  l <- sort(l)\n\
    \  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/\
    \ a tags=r |>\n<| c |>\nI like your `median` function but I think it can be simplified\
    \ a bit. `median` already sorts the list so you don't need to do that yourself.\
    \ `median(sort(x))` will do the same thing.\n<|/ c |>\n<| c |>\nYes, I know, but\
    \ I wanted to keep it simple.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian<-function(x){\n\
    \  if(length(x)==0){\n    return(NA)\n  }\n  x<-sort(x)\n  return(x[length(x)/2])\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a tags=r |>\n<code>\nmedian<-function(x){\n\
    \  if(length(x)==0){\n    return(NA)\n  }\n  x<-sort(x)\n  return(x[length(x)/2])\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nmedian<-function(x){\n\
    \  if(length(x)==0){\n    return(NA)\n  }\n  x<-sort(x)\n  return(x[length(x)/2])\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedian<-function(x){\n\
    \  if(length(x)==0){\n    return(NA)\n  }\n  x<-sort(x)\n  return(x[length(x)/2])\n\
    }\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nmedian<-function(x){\n\
    \  if(length(x)==0){\n    return(NA)\n  }\n  x<-sort(x)\n  return(x[length(x)/2])\n\
    }\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nmedian<-function(x){\n\
    \  if(length(x)==0){\n    return(NA)\n  }\n  x<-sort(x)\n  return(x[length(x)/2])\n\
    }\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian<-function(x){\n  if(length(x)==0){\n\
    \    return(NA)\n  }\n  x<-sort(x)\n  return(x[length(x)", "\n  l <- sort(l)\n\
    \  n <- length(l)\n  if (n == 1) return(l[1])\n  i <- floor(n/2)\n  return(l[median])\n\
    }\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  i <- floor((n\
    \ + 1) / 2)\n  return(l[i])\n}\n</code>\n<|/ a tags=r,list,median |>\n<| c |>\n\
    Thanks for your answer. I was hoping to find a solution that doesn't require me\
    \ to write my own median function. I was hoping there was a way to do this with\
    \ base R. Thanks again!\n<|/ c |>\n<| c |>\nI added a solution without writing\
    \ a median function.\n<|/ c |>\n<| c |>\nThanks again! I appreciate it!\n<|/ c\
    \ |>\n<| a dscore=0 |>\nHere is a solution without writing a median function.\n\
    <code>\nmedian.list <- function(x) {\n  x <- sort(x)\n  n <- length(x)\n  if (n\
    \ < 2) return(NA)\n  i <- floor((n + 1) / 2)\n  return(x[i])\n}\n</code>\n<|/\
    \ a tags=r,list,median |>\n<| a dscore=0 |>\n<code>\nmedian.list <- function(x)\
    \ {\n  x <- sort(x)\n  n <- length(x)\n  if (n < 2) return(NA)\n  i <- floor((n\
    \ + 1) / 2)\n  return(x[i])\n}\n</code>\n<|/ a tags=r,list,median |>\n<| c |>\n\
    Please add some explanation to your answer.\n<|/ c |>\n<| c |>\nThis does not\
    \ provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/27859066)\n<|/ c |>\n<| c |>\nThis\
    \ does provide an answer to the question. While it may seem like it does not,\
    \ it does provide a solution to the problem at hand.\n<|/ c |>\n<| c |>\nIt does\
    \ provide a solution to the problem at hand, but only if the OP has already written\
    \ a median function. This is a solution that does not require a median function.\n\
    <|/ c |>\n<| c |>\nI added a solution without writing a median function.\n<|/\
    \ c |>\n<| a tags=r,list,", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 1)\
    \ return(NA)\n  m <- floor(n/2)\n  return(l[m])\n}\n</code>\n<|/ a tags=r |>\n\
    <| c |>\nThis doesn't seem to work. `median(list(c(1,2,3,4,5)))` returns `3` instead\
    \ of `2`.\n<|/ c |>\n<| c |>\n: It works for me. `median(list(c(1,2,3,4,5)))`\
    \ returns `2`.\n<|/ c |>\n<| c |>\nAh, I see what you're saying. `median(list(c(1,2,3,4,5)))`\
    \ returns `3` because `median` sorts the list before finding the median. `median(list(c(1,2,3,4,5))[order(c(1,2,3,4,5))])`\
    \ returns `2` because `median` doesn't sort the list before finding the median.\n\
    <|/ c |>\n<| c |>\n: Yes, that's correct. `median` sorts the list before finding\
    \ the median.\n<|/ c |>\n<| c |>\n: I added a function that does what you want\
    \ (I think).\n<|/ c |>\n<| a dscore=4 |>\nThe median of a vector is just the middle\
    \ value.  So if you have your vector in x, then median(x) will give you the middle\
    \ value.\n<|/ a tags=r |>\n<| c |>\nThis doesn't seem to work. `median(list(c(1,2,3,4,5)))`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| c |>\n: It works for me. `median(list(c(1,2,3,4,5)))`\
    \ returns `2`.\n<|/ c |>\n<| c |>\n: I added a function that does what you want\
    \ (I think).\n<|/ c |>\n<| c |>\n: I added a function that does what you want\
    \ (I think).\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(list(c(1,2,3,4,5)))\n</code>\n\
    returns 3\n<code>\nmedian(list(c(1,2,3,4,5))[order(c(1,2,3,4,5))])\n</code>\n\
    returns 2\n<|/ a dscore=4 |>\n<| a dscore=4 |>\nThe median of a vector is just\
    \ the middle value. So if you have your vector in x, then median(x) will give\
    \ you the middle value.\n<|/ a tags=r |>\n<| a dscore=4 |>\nThe median of a vector\
    \ is just the middle value. So if you have your vector in x, then median(x) will ",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't seem to work if you have a\
    \ list with two or more elements that are equal, e.g. `median(c(1,2,2,3,4))` returns\
    \ `2` instead of `3`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it (I\
    \ hope).\n<|/ c |>\n<| c |>\nI added a version that works with equal elements.\
    \ I hope you don't mind.\n<|/ c |>\n<| c |>\nI added a version that works with\
    \ equal elements. I hope you don't mind.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't seem to work\
    \ if you have a list with two or more elements that are equal, e.g. `median(c(1,2,2,3,4))`\
    \ returns `2` instead of `3`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work if\
    \ you have a list with two or more elements that are equal, e.g. `median(c(1,2,2,3,4))`\
    \ returns `2` instead of `3`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work if\
    \ you have a list with two or more elements that are equal, e.g. `median(c(1,2,2,3,4))`\
    \ returns `2` instead of `3`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work if\
    \ you have a list with two or more elements that are equal, e.g. `median(c(1,2,2,3,4))`\
    \ returns `2` instead of `3`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work if\
    \ you have a list with two or more elements that are equal, e.g. `median(c(1,2,2,3,4))`\
    \ returns `2` instead of `3`.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't seem to work if you have a list\
    \ with two or more elements that are equal, e.g. `median(c(1,2,2,3,4))` returns\
    \ `2` instead of `3`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work if you have\
    \ a list with two or more elements that are equal, e.g. `median(c(1,2,2,3,4))`\
    \ returns `2` instead of `3`.\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n\
    \ < 2) return(NA)\n  return(l[n / 2])\n}\n", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n == 1) return(l[1])\n  return(l[n/2])\n}\n", "\n  n <- length(l)\n  if\
    \ (n == 0) return(NA)\n  m <- floor(n/2)\n  return(l[m])\n}\n", "\n  l <- sort(l)\n\
    \  length(l) / 2 # median\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't\
    \ answer the question. `median` doesn't return the median, it returns the *index*\
    \ of the median.\n<|/ c |>\n<| c |>\nI guess I misunderstood the question. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nThe median is the middle element of\
    \ a sorted list. `median(1:10)` returns `5`.\n<|/ c |>\n<| c |>\nYes, but that\
    \ doesn't mean that the median is the middle element of a sorted list. `median(1:10)`\
    \ returns `5`, not `5`.\n<|/ c |>\n<| c |>\nI guess I misunderstood the question.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n\
    [1] 5\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't answer the question.\
    \ `median` doesn't return the median, it returns the *index* of the median.\n\
    <|/ c |>\n<| c |>\nThis answer is correct. `median` returns the median of the\
    \ numeric vector `1:10`, which is `5`.\n<|/ c |>\n<| c |>\nThis answer is correct.\
    \ `median` returns the median of the numeric vector `1:10`, which is `5`.\n<|/\
    \ c |>\n<| c |>\nThis answer is correct. `median` returns the median of the numeric\
    \ vector `1:10`, which is `5`.\n<|/ c |>\n<| c |>\nThis answer is correct. `median`\
    \ returns the median of the numeric vector `1:10`, which is `5`.\n<|/ c |>\n<|\
    \ a dscore=5 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r |>\n<| c |>\nThis\
    \ doesn't answer the question. `median` doesn't return the median, it returns\
    \ the *index* of the median.\n<|/ c |>\n<| c |>\nThis answer is correct. `median`\
    \ returns the median of the numeric vector `1:10`, which is `5`.\n<|/ c |>\n<|\
    \ c |>\nThis answer is correct. `median` returns the median of the numeric vector\
    \ `1:10`, which is `5`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(1:10)\n</code>\n\
    <|/ a tags=r |>\n<| c |>", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n\
    \  m <- floor(n/2)\n  return(l[m])\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI\
    \ like your solution, but I believe it can be improved. `median` should return\
    \ `NA` when `n < 1`, not `Inf`. Also, it should be `floor(n/2)` instead of `ceiling(n/2)`.\
    \ Finally, `median` should return `NA` when `n < 2`, not `Inf`.\n<|/ c |>\n<|\
    \ c |>\nThanks for your comments. I edited my answer to include your suggestions.\n\
    <|/ c |>\n<| a |>\nHere's a solution using dplyr and purrr packages:\n<code>\n\
    library(dplyr)\nlibrary(purrr)\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n\
    \ < 1) return(NA)\n  m <- floor(n/2)\n  return(l[m])\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))` returns `NA`\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine. Are you sure you copied it correctly?\n\
    <|/ c |>\n<| c |>\nYes, I copied it correctly. I'm running R version 3.2.1 on\
    \ Windows 7. I'm also running R Studio Version 0.98.1103\n<|/ c |>\n<| c |>\n\
    I tested it on R 3.2.1 on Windows 7 and R 3.2.1 on Mac OS X 10.9.5 and it works\
    \ fine. Maybe you have a different version of R or a different version of RStudio?\n\
    <|/ c |>\n<| c |>\nI tested it on R 3.2.1 on Windows 7 and R 3.2.1 on Mac OS X\
    \ 10.9.5 and it works fine. Maybe you have a different version of R or a different\
    \ version of RStudio?\n<|/ c |>\n<| a tags=r |>\nI wrote a function that does\
    \ this for me. \n<code>\nmedian.fun <- function(x){\n  x <- sort(x)\n  n <- length(x)\n\
    \  m <- floor(n/2)\n  return(x[m])\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\nmedian.fun <- function(x){\n  x <- sort(x)\n  n <- length(x)\n \
    \ m <- floor(n/2)\n  return(x[m])\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1\
    \ |>\n<code>\nmedian.fun <- function(x){\n  x <- sort(x)\n  n <- length(x)\n \
    \ m <- floor(n/2)\n  return(x[m])\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0\
    \ |>\n<code>\nmedian.fun <- function(x){\n  x <- sort(x)\n  n <- length(x)\n \
    \ m <- floor(n/2)\n  return(x[m])\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0\
    \ |>\n<code>\nmedian.fun <- function(x){\n  x <- sort(x)\n  n <- length(x)\n \
    \ m <- floor(n/2)\n  return(x[m", "\n  l <- sort(l)\n  n <- length(l)\n  if (n\
    \ < 2) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    I like your median function, but I wonder if there is a way to avoid the sorting\
    \ step. I wonder if there is a way to do this without sorting.\n<|/ c |>\n<| c\
    \ |>\nI added a median function that does not sort the list.\n<|/ c |>\n<| c |>\n\
    I like the median function, but I wonder if there is a way to avoid the sorting\
    \ step. I wonder if there is a way to do this without sorting.\n<|/ c |>\n<| c\
    \ |>\nI added a median function that does not sort the list.\n<|/ c |>\n<| c |>\n\
    I like the median function, but I wonder if there is a way to avoid the sorting\
    \ step. I wonder if there is a way to do this without sorting.\n<|/ c |>\n<| a\
    \ dscore=5 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r |>\n<| c |>\nI like\
    \ your median function, but I wonder if there is a way to avoid the sorting step.\
    \ I wonder if there is a way to do this without sorting.\n<|/ c |>\n<| c |>\n\
    I added a median function that does not sort the list.\n<|/ c |>\n<| c |>\nI like\
    \ the median function, but I wonder if there is a way to avoid the sorting step.\
    \ I wonder if there is a way to do this without sorting.\n<|/ c |>\n<| c |>\n\
    I added a median function that does not sort the list.\n<|/ c |>\n<| c |>\nI like\
    \ the median function, but I wonder if there is a way to avoid the sorting step.\
    \ I wonder if there is a way to do this without sorting.\n<|/ c |>\n<| a tags=r\
    \ |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like your median\
    \ function, but I wonder if there is a way to avoid the sorting step. I wonder\
    \ if there is a way to do this without sorting.\n<|/ c |>\n<| c |>\nI added a\
    \ median function that does not sort the list.\n<|/ c |>\n<| c |>\nI like the\
    \ median function, but I wonder if there is a way to avoid the sorting step. I\
    \ wonder if there is a way to do this without sorting.\n<|/ c |>\n<| c |>\nI added\
    \ a median function that does not sort the list.\n<|/ c |>\n<| c |>\n", "\n  l\
    \ <- sort(l)\n  length(l) %% 2 == 0 ? (l[length(l)/2] + l[(length(l)/2)-1])/2\
    \ : l[length(l)/2]\n}\n</code>\n<|/ a tags=r,median |>\n<| c |>\nThis doesn't\
    \ seem to work for the median of negative numbers. For example, `median(c(-10,\
    \ 4, 6, 1000, 10, 20))` returns `-10` instead of `5`.\n<|/ c |>\n<| c |>\nI added\
    \ a fix for negative numbers. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n\
    This doesn't work for negative numbers. For example, `median(c(-10, 4, 6, 1000,\
    \ 10, 20))` returns `-10` instead of `5`.\n<|/ c |>\n<| c |>\nI added a fix for\
    \ negative numbers. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. For example, `median(c(-10, 4, 6, 1000, 10, 20))`\
    \ returns `-10` instead of `5`.\n<|/ c |>\n<| a tags=r,median |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for negative numbers. For\
    \ example, `median(c(-10, 4, 6, 1000, 10, 20))` returns `-10` instead of `5`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers. For example, `median(c(-10,\
    \ 4, 6, 1000, 10, 20))` returns `-10` instead of `5`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. For example, `median(c(-10, 4, 6, 1000, 10,\
    \ 20))` returns `-10` instead of `5`.\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ negative numbers. For example, `median(c(-10, 4, 6, 1000, 10, 20))` returns\
    \ `-10` instead of `5`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ For example, `median(c(-10, 4, 6, 1000, 10, 20))` returns `-10` instead of `5`.\n\
    <|/ c |>\n<| a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. For example, `median(c(-10,\
    \ 4, 6, 1000, 10, 20))` returns `-10` instead of `5`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. For example, `median(c(-10, 4, 6, 1000, 10,\
    \ 20))` returns `-10` ", "\n  l <- sort(l)\n  return(l[length(l)/2])\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI like this solution, but I wonder why you didn't\
    \ just use `median` from the `stats` package?\n<|/ c |>\n<| c |>\nI didn't know\
    \ about `median` from the `stats` package. Thanks!\n<|/ c |>\n<| c |>\nI like\
    \ the `median` function from the `stats` package, but I wonder why you didn't\
    \ just use `median` from the `stats` package?\n<|/ c |>\n<| c |>\nBecause I didn't\
    \ know about `median` from the `stats` package. Thanks!\n<|/ c |>\n<| c |>\nI\
    \ like this solution, but I wonder why you didn't just use `median` from the `stats`\
    \ package?\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r\
    \ |>\n<| c |>\nThis doesn't answer the question of how to find the median of a\
    \ vector. `median(1:10)` gives the median of integers 1 to 10, not of vectors\
    \ containing integers.\n<|/ c |>\n<| c |>\nThis doesn't answer the question of\
    \ how to find the median of a vector. `median(1:10)` gives the median of integers\
    \ 1 to 10, not of vectors containing integers.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ answer the question of how to find the median of a vector. `median(1:10)` gives\
    \ the median of integers 1 to 10, not of vectors containing integers.\n<|/ c |>\n\
    <| c |>\nThis doesn't answer the question of how to find the median of a vector.\
    \ `median(1:10)` gives the median of integers 1 to 10, not of vectors containing\
    \ integers.\n<|/ c |>\n<| c |>\nThis doesn't answer the question of how to find\
    \ the median of a vector. `median(1:10)` gives the median of integers 1 to 10,\
    \ not of vectors containing integers.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't answer the question of how to\
    \ find the median of a vector. `median(1:10)` gives the median of integers 1 to\
    \ 10, not of vectors containing integers.\n<|/ c |>\n<| c |>\nThis doesn't answer\
    \ the question of how to find the median of a vector. `", "\n  n <- length(l)\n\
    \  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median dscore=1 |>\n<|\
    \ a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a ", "\n  n <- length(l)\n  if (n == 0) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nI like your answer but I think it would be better to\
    \ use a `for` loop and `break` the loop once the median is found. `median` could\
    \ be called multiple times and `break` would only exit the loop once.\n<|/ c |>\n\
    <| c |>\nYes, I agree. I'll add that to the answer.\n<|/ c |>\n<| a tags=r |>\n\
    I like using dplyr and purrr packages to do this.\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n",
  "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThe median is defined as the middle value in a sorted\
    \ list. `median(1:10)` is 5, and `median(1:9)` is 4.\n<|/ c |>\n<| c |>\nI believe\
    \ that median is defined as the middle value in a sorted list. `median(1:10)`\
    \ is 5, and `median(1:9)` is 4.\n<|/ c |>\n<| c |>\nThe median is defined as the\
    \ middle value in a sorted list. `median(1:10)` is 5, and `median(1:9)` is 4.\n\
    <|/ c |>\n<| c |>\nThe median is defined as the middle value in a sorted list.\
    \ `median(1:10)` is 5, and `median(1:9)` is 4.\n<|/ c |>\n<| c |>\nThe median\
    \ is defined as the middle value in a sorted list. `median(1:10)` is 5, and `median(1:9)`\
    \ is 4.\n<|/ c |>\n<| a tags=r |>\nThe median is defined as the middle value in\
    \ a sorted list. median(1:10)is 5, and median(1:9)is 4.\n<code>\nmedian(1:10)\n\
    [1] 5\nmedian(1:9)\n[1] 4\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThe median is\
    \ defined as the middle value in a sorted list. `median(1:10)` is 5, and `median(1:9)`\
    \ is 4.\n<|/ c |>\n<| c |>\nThe median is defined as the middle value in a sorted\
    \ list. `median(1:10)` is 5, and `median(1:9)` is 4.\n<|/ c |>\n<| a dscore=5\
    \ |>\nThe median is defined as the middle value in a sorted list. median(1:10)is\
    \ 5, and median(1:9)is 4.\n<code>\nmedian(1:10)\n[1] 5\nmedian(1:9)\n[1] 4\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=5 |>\nThe median is defined as the middle value in\
    \ a sorted list. median(1:10)is 5, and median(1:9)is 4.\n<code>\nmedian(1:10)\n\
    [1] 5\nmedian(1:9)\n[1] 4\n</code>\n<|/ a tags=r |>\n<| a dscore=5 |>\nThe median\
    \ is defined as the middle value in a sorted list. median(1:10)is 5, and median(1:9)is\
    \ 4.\n<code>\nmedian", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n\
    \  return(l[n / 2])\n}\n", "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n\
    \ / 2]\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\n`median` does not return the median\
    \ of the list. It returns the median of the *elements* of the list. `median(c(1,2,3,4,5))`\
    \ returns `3`.\n<|/ c |>\n<| c |>\nYes, I know. That's why I wrote \"returns the\
    \ median of the elements\". My point is that it returns the median of the list\
    \ itself.\n<|/ c |>\n<| c |>\nI see. So it returns the median of the elements\
    \ of the list. That's what I meant by \"returns the median of the list\".\n<|/\
    \ c |>\n<| c |>\nYes, I see what you mean. Thanks for clarifying.\n<|/ c |>\n\
    <| a dscore=3 |>\nThe median of a vector is the value that occurs most frequently\
    \ in the vector.  So the median of a list of numbers is simply the number that\
    \ occurs most frequently in the list.  So the median of a list of vectors is simply\
    \ the median of the median of the vectors.\n<|/ a tags=median,r |>\n<| c |>\n\
    I believe this answer is wrong. `median` returns the median of the *elements*\
    \ of the list. `median(c(1,2,3,4,5))` returns `3`.\n<|/ c |>\n<| c |>\nI believe\
    \ you are right.  I thought the median of a vector was the median of the vector.\
    \  I guess I was thinking of it as the median of the medians of the vectors.\n\
    <|/ c |>\n<| c |>\nI believe you are right.  I thought the median of a vector\
    \ was the median of the vector.  I guess I was thinking of it as the median of\
    \ the medians of the vectors.\n<|/ c |>\n<| a dscore=3 |>\nThe median of a vector\
    \ is the value that occurs most frequently in the vector. So the median of a list\
    \ of numbers is simply the number that occurs most frequently in the list. So\
    \ the median of a list of vectors is simply the median of the median of the vectors.\n\
    <|/ a tags=median,r |>\n<| a dscore=3 |>\nThe median of a vector is the value\
    \ that occurs most frequently in the vector. So the median of a list of numbers\
    \ is simply the number that occurs most frequently in the list. So the median\
    \ of a list of vectors is simply the median of the median of the vectors.\n<|/\
    \ a tags=median,r |>\n<| a tags=median,r |>\nThe median of a vector is the value\
    \ that occurs most frequently in the vector. So the median of a list of number",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n  m <- floor((n +\
    \ 1) / 2)\n  if (m == 1) return(l[m])\n  return(l[m] + l[n - m])\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like the idea of using median to find the median, but this\
    \ doesn't seem to work for me (R 3.2.3 on Mac OS X 10.7.5). `median(c(1,2,3))`\
    \ returns `NA` instead of `3`.\n<|/ c |>\n<| c |>\n: I tested it on R 3.2.3 on\
    \ Windows 7 and it works fine. Maybe you have a different definition of median\
    \ than I do. Try `median(c(1,2,3))` on R 3.2.3 on Windows 7 and see what it returns.\n\
    <|/ c |>\n<| c |>\n: I tested it on R 3.2.3 on Windows 7 and it works fine. Maybe\
    \ you have a different definition of median than I do. Try `median(c(1,2,3))`\
    \ on R 3.2.3 on Windows 7 and see what it returns.\n<|/ c |>\n<| c |>\n: I tested\
    \ it on R 3.2.3 on Windows 7 and it works fine. Maybe you have a different definition\
    \ of median than I do. Try `median(c(1,2,3))` on R 3.2.3 on Windows 7 and see\
    \ what it returns.\n<|/ c |>\n<| c |>\n: I tested it on R 3.2.3 on Windows 7 and\
    \ it works fine. Maybe you have a different definition of median than I do. Try\
    \ `median(c(1,2,3))` on R 3.2.3 on Windows 7 and see what it returns.\n<|/ c |>\n\
    <| a tags=median,r |>\nThe median of a vector is defined as the value that occurs\
    \ in the middle of the vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\nSo if you\
    \ have a vector with more than two elements, you can find the median by finding\
    \ the middle element and dividing the vector by two. \n<code>\nmedian(1:10)\n\
    [1] 5\n\nmedian(1:9)\n[1] 4\n\nmedian(1:8)\n[1] 3\n\nmedian(1:7)\n[1] 3\n\nmedian(1:6)\n\
    [1] 3\n\nmedian(1:5)\n[1] 3\n\nmedian(1:4)\n[1] 3\n\nmedian(1:3)\n[1] 3\n\nmedian(1:2)\n\
    [1] 3\n\nmedian(1:1)\n[1] 3\n</code>\n<|/ a dscore=5 |>\n<| ", "\n  l <- sort(l)\n\
    \  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/\
    \ a tags=r,statistics |>\n<| c |>\nI believe this answer should be accepted as\
    \ the correct one. As it is the most concise and most efficient answer to the\
    \ question. Thanks !\n<|/ c |>\n<| a dscore=5 |>\nThe median of a vector is defined\
    \ as the value that occurs the most frequently in the vector. \n<code>\nmedian(1:10)\n\
    [1] 5\n</code>\n<|/ a tags=r,statistics |>\n<| c |>\nThis is not the median of\
    \ the vector, it's the median of the vector after sorting it.\n<|/ c |>\n<| c\
    \ |>\n: No, it's the median of the vector after sorting it. The median of a vector\
    \ is the value that occurs the most frequently in the vector.\n<|/ c |>\n<| c\
    \ |>\nThe median of a vector is defined as the value that occurs the most frequently\
    \ in the vector. `median(1:10)` returns 5.\n<|/ c |>\n<| c |>\nThe median of a\
    \ vector is defined as the value that occurs the most frequently in the vector.\
    \ `median(1:10)` returns 5.\n<|/ c |>\n<| c |>\nThe median of a vector is defined\
    \ as the value that occurs the most frequently in the vector. `median(1:10)` returns\
    \ 5.\n<|/ c |>\n<| a dscore=5 |>\nThe median of a vector is defined as the value\
    \ that occurs the most frequently in the vector. \n<code>\nmedian(1:10)\n[1] 5\n\
    </code>\n<|/ a tags=r,statistics |>\n<| c |>\nThe median of a vector is defined\
    \ as the value that occurs the most frequently in the vector. `median(1:10)` returns\
    \ 5.\n<|/ c |>\n<| c |>\nThe median of a vector is defined as the value that occurs\
    \ the most frequently in the vector. `median(1:10)` returns 5.\n<|/ c |>\n<| a\
    \ dscore=5 |>\nThe median of a vector is defined as the value that occurs the\
    \ most frequently in the vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\n<|/ a\
    \ tags=r,statistics |>\n<| a tags=r,statistics |>\nThe median of a vector is defined\
    \ as the value that occurs the most frequently in the vector. \n<code>\nmedian(1:10)\n\
    [1] 5\n</code>\n<|/ a dscore=5 |>\n<| a d", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 2) return(NA)\n  return(l[n / 2])\n}\n", "\n  l <- sort(l)\n  length(l)/2\n\
    }\n</cell>\n<text>\nThe median of a list of numbers is an arithmetic average.\n\
    \n\n</text>\n<cell>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nThe median of a\
    \ list of numbers is an arithmetic average.\n\n\n</text>\n<cell>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe median of a list of numbers is an\
    \ arithmetic average.\n\n\n</text>\n<cell>\nmedian(list(3, 1, 2, 4, 5))\n</cell>\n\
    <text>\nThe median of a list of numbers is an arithmetic average.\n\n\n</text>\n\
    <cell>\nmedian(list(-10, 4, 6, 1000, 10, 20))\n</cell>\n<text>\nThe median of\
    \ a list of numbers is an arithmetic average.\n\n\n</text>\n<cell>\nmedian(list(3,\
    \ 1, 2, 4, 5, 6, 7))\n</cell>\n<text>\nThe median of a list of numbers is an arithmetic\
    \ average.\n\n\n</text>\n<cell>\nmedian(list(-10, 4, 6, 1000, 10, 20, 30, 40))\n\
    </cell>\n<text>\nThe median of a list of numbers is an arithmetic average.\n\n\
    \n</text>\n<cell>\nmedian(list(3, 1, 2, 4, 5, 6, 7))\n</cell>\n<text>\nThe median\
    \ of a list of numbers is an arithmetic average.\n\n\n</text>\n<cell>\nmedian(list(-10,\
    \ 4, 6, 1000, 10, 20, 30, 40))\n</cell>\n<text>\nThe median of a list of numbers\
    \ is an arithmetic average.\n\n\n</text>\n<cell>\nmedian(list(3, 1, 2, 4, 5, 6,\
    \ 7))\n</cell>\n<text>\nThe median of a list of numbers is an arithmetic average.\n\
    \n\n</text>\n<cell>\nmedian(list(-10, 4, 6, 1000, 10, 20, 30, 40))\n</cell>\n\
    <text>\nThe median of a list of numbers is an arithmetic average.\n\n\n</text>\n\
    <cell>\nmedian(list(3, 1, 2, 4, 5, 6, 7))\n</cell>\n<text>\nThe median of a list\
    \ of numbers is an arithmetic average.\n\n\n</text>\n<cell>\nmedian(list(-10,\
    \ 4, 6, 1000, 10, 20, 30, 40))\n</cell>\n<text>\nThe median of a list of numbers\
    \ is an arithmetic average.\n\n\n</text>\n<cell>\nmedian(list(3, 1, 2, 4, 5, 6,\
    \ 7))\n</cell>\n<text>\nThe median of a list of numbers is an arithmetic average.\n\
    \n\n</text>\n<cell>\nmedian(list(-10, 4, 6, 1000, 10, 20, 30, 40))\n</cell>\n",
  "\n  l <- sort(l)\n  length(l) / 2 # median\n}\n</code>\n<|/ a tags=r,median |>\n\
    <| a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<|\
    \ a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median dscore=3 |>\n<|\
    \ a tags=r,median |>\n<code>\n", "\n  l <- sort(l)\n  return(l[length(l)/2])\n\
    }\n</cell>\n<cell>\nmedian([3, 1, 2, 4, 5])\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the mode of a vector.\
    \ \nThe mode is the most frequent element in the vector. \nThe function should\
    \ return the mode of the vector l as a single number.\n\n\n</text>\n<cell>", "\n\
    \  l <- sort(l)\n  length(l) / 2 # median\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    I like your answer but I think it would be better to return the median as the\
    \ function name suggests, rather than the median.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, just wanted to keep it simple and easy to understand.\n<|/ c |>\n\
    <| c |>\nI agree with you, just wanted to keep it simple and easy to understand.\n\
    <|/ c |>\n<| a |>\n<code>\nmedian.list <- function(x) {\n  x <- sort(x)\n  length(x)\
    \ / 2 # median\n}\n</code>\n<|/ a tags=r dscore=5 |>\n<| c |>\nThis should be\
    \ the accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<|\
    \ a dscore=5 |>\n<code>\nmedian.list <- function(x) {\n  x <- sort(x)\n  length(x)\
    \ / 2 # median\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis should be the accepted\
    \ answer. No need to reinvent the wheel.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n\
    median.list <- function(x) {\n  x <- sort(x)\n  length(x) / 2 # median\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian.list <- function(x) {\n  x <-\
    \ sort(x)\n  length(x) / 2 # median\n}\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4\
    \ |>\n<code>\nmedian.list <- function(x) {\n  x <- sort(x)\n  length(x) / 2 #\
    \ median\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian.list <-\
    \ function(x) {\n  x <- sort(x)\n  length(x) / 2 # median\n}\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=r |>\n<code>\nmedian.list <- function(x) {\n  x <- sort(x)\n \
    \ length(x) / 2 # median\n}\n</code>\n<|/ a dscore=4 |>\n<| a |>\n<code>\nmedian.list\
    \ <- function(x) {\n  x <- sort(x)\n  length(x) / 2 # median\n}\n</code>", "\n\
    \  sort(l)[length(sort(l))/2]\n}\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the mode of a list of numbers. If the list contains two or more\
    \ modes, return any one of them.\n\n\n</text>\n<cell>", "\n  n <- length(l)\n\
    \  if (n == 0) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nI like this solution, but I wonder why you used `median` instead of `mean`?\n\
    <|/ c |>\n<| c |>\nBecause `mean` doesn't return the median.\n<|/ c |>\n<| c |>\n\
    `mean` returns the mean of a vector, `median` returns the median of a vector.\
    \ `mean` returns the mean of a list of numbers, `median` returns the median of\
    \ a list of numbers. `mean` returns the mean of a list of numbers, `median` returns\
    \ the median of a list of numbers. `mean` returns the mean of a list of numbers,\
    \ `median` returns the median of a list of numbers. `mean` returns the mean of\
    \ a list of numbers, `median` returns the median of a list of numbers. `mean`\
    \ returns the mean of a list of numbers, `median` returns the median of a list\
    \ of numbers. `mean` returns the mean of a list of numbers, `median` returns the\
    \ median of a list of numbers. `mean` returns the mean of a list of numbers, `median`\
    \ returns the median of a list of numbers.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ but I wonder why you used `median` instead of `mean`? I thought `mean` was the\
    \ correct function?\n<|/ c |>\n<| c |>\n`mean` returns the mean of a list of numbers,\
    \ `median` returns the median of a list of numbers. `mean` returns the mean of\
    \ a list of numbers, `median` returns the median of a list of numbers. `mean`\
    \ returns the mean of a list of numbers, `median` returns the median of a list\
    \ of numbers. `mean` returns the mean of a list of numbers, `median` returns the\
    \ median of a list of numbers. `mean` returns the mean of a list of numbers, `median`\
    \ returns the median of a list of numbers. `mean` returns the mean of a list of\
    \ numbers, `median` returns the median of a list of numbers. `mean` returns the\
    \ mean of a list of numbers, `median` returns the median of a list of numbers.\
    \ `mean` returns the mean of a list of numbers, `median` returns the median of\
    \ a list of numbers.\n<|/ c |>\n<| a |>\nThe median of a vector is simply the\
    \ middle value.  So you can just do:\n<code>\nmedian(mylist)\n</code>\n<|/ a tags=r\
    \ dscore=5 |>\n<| c |>\nThis doesn't answer the question. `median` returns the\
    \ median of a list of numbers, not a single number.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ answer the question. `median", "\n  l <- sort(l)\n  length(l) %% 2 == 0 & length(l)\
    \ > 1 & l[length(l)/2] < l[length(l)/2+1] &\n    median(l[seq(1,length(l),2)])\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't work for me. `median(1:10)`\
    \ returns `NA` instead of `5`.\n<|/ c |>\n<| c |>\n, thanks for pointing that\
    \ out. I've updated the answer accordingly.\n<|/ c |>\n<| a tags=r |>\nHere's\
    \ a solution using dplyr and tidyr. \n<code>\nlibrary(dplyr)\nlibrary(tidyr)\n\
    \ndf <- data.frame(\n  x = c(1,2,3,4,5,6,7,8,9,10),\n  y = c(5,4,3,2,1,5,4,3,2,1)\n\
    )\n\ndf %>% \n  mutate(\n    median = median(c(y,x))\n  ) %>% \n  gather(variable,\
    \ value, -median) %>% \n  group_by(variable) %>% \n  summarise(\n    median =\
    \ median(value)\n  ) %>% \n  ungroup() %>% \n  select(-variable)\n", "\n  l <-\
    \ sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n/2])\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r,list,median |>\nI wrote a function that calculates\
    \ the median of a list with missing values.\n<code>\nmedian.list <- function(x)\
    \ {\n  if(is.null(x)) return(NA)\n  if(length(x) == 0) return(NA)\n  if(length(x)\
    \ == 1) return(x[1])\n  if(length(x) == 2) return(x[2])\n  if(length(x) > 2) return(median(x[1:(length(x)/2)]))\n\
    \  return(median(x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,list,median |>\n\
    I wrote a function that calculates the median of a list with missing values.\n\
    <code>\nmedian.list <- function(x) {\n  if(is.null(x)) return(NA)\n  if(length(x)\
    \ == 0) return(NA)\n  if(length(x) == 1) return(x[1])\n  if(length(x) == 2) return(x[2])\n\
    \  if(length(x) > 2) return(median(x[1:(length(x)/2)]))\n  return(median(x))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\nI wrote a function that calculates the\
    \ median of a list with missing values.\n<code>\nmedian.list <- function(x) {\n\
    \  if(is.null(x)) return(NA)\n  if(length(x) == 0) return(NA)\n  if(length(x)\
    \ == 1) return(x[1])\n  if(length(x) == 2) return(x[2])\n  if(length(x) > 2) return(median(x[1:(length(x)/2)]))\n\
    \  return(median(x))\n}\n</code>\n<|/ a dscore=2 tags=r,list,median |>\n<| a tags=r,list,median\
    \ |>\n<code>\nmedian.list <- function(x) {\n  if(is.null(x)) return(NA)\n  if(length(x)\
    \ == 0) return(NA)\n  if(length(x) == 1) return(x[1])\n  if(length(x) == 2) return(x[2])\n\
    \  if(length(x) > 2) return(median(x[1:(length(x)/2)]))\n  return(median(x))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,median |>\n<code>\nmedian.list\
    \ <- function(x) {\n  if(is.null(x)) return(NA)\n  if(length(x) == 0) return(NA)\n\
    \  if(length(x) == 1) return(x[1])\n  if(length", "\n  n <- length(l)\n  if (n\
    \ < 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Thanks for your answer. Could you please explain why you use `median` instead\
    \ of `mean`? I understand that `mean` would give me the mean of the whole vector,\
    \ but why not `median`?\n<|/ c |>\n<| c |>\nBecause median is defined for vectors,\
    \ not for lists. `mean` would give the mean of the whole vector, but `median`\
    \ would give the median of the whole vector. `mean` would give the mean of the\
    \ whole list, which is not what you want.\n<|/ c |>\n<| c |>\nI see. So `median`\
    \ would give the median of the whole list `l`, whereas `mean` would give the mean\
    \ of the whole vector `l`? If so, why would you use `median` instead of `mean`?\n\
    <|/ c |>\n<| c |>\n`median` gives the median of the whole vector, whereas `mean`\
    \ gives the mean of the whole vector. `mean` gives the mean of the whole list,\
    \ which is not what you want. `median` gives the median of the whole list, which\
    \ is what you want.\n<|/ c |>\n<| c |>\nOkay, thank you very much! I understand\
    \ it now. :)\n<|/ c |>\n<| a dscore=1 |>\nThe median of a vector is the value\
    \ that occurs in the middle of the vector. \nThe mean of a vector is the sum of\
    \ the values divided by the number of values. \nThe median of a list is the value\
    \ that occurs in the middle of the list. \nThe mean of a list is the sum of the\
    \ values divided by the number of values. \nThe median of a list is the value\
    \ that occurs in the middle of the list. \nThe mean of a list is the sum of the\
    \ values divided by the number of values. \nThe median of a list is the value\
    \ that occurs in the middle of the list. \nThe mean of a list is the sum of the\
    \ values divided by the number of values. \nThe median of a list is the value\
    \ that occurs in the middle of the list. \nThe mean of a list is the sum of the\
    \ values divided by the number of values. \nThe median of a list is the value\
    \ that occurs in the middle of the list. \nThe mean of a list is the sum of the\
    \ values divided by the number of values. \nThe median of a list is the value\
    \ that occurs in the middle of the list. \nThe mean of a list is the sum of the\
    \ values divided by the number of values. \nThe median of a list is the value\
    \ that occurs in the middle of the list. \nThe mean of a list is the sum of the\
    \ values divided by the number of ", "\n  n <- length(l)\n  if (n == 0) return(NA)\n\
    \  sort(l)[n / 2]\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution,\
    \ but I believe that `median` should return `NA` when `l` is empty. `median(numeric(0))`\
    \ returns `NA`, but `median(numeric(1))` returns `Inf`. `median(numeric(2))` returns\
    \ `-Inf`.\n<|/ c |>\n<| c |>\nI agree with you. I was just trying to keep it simple\
    \ and avoid the complexity of writing a custom function.\n<|/ c |>\n<| c |>\n\
    I agree with you. I was just trying to keep it simple and avoid the complexity\
    \ of writing a custom function.\n<|/ c |>\n<| c |>\nI agree with you. I was just\
    \ trying to keep it simple and avoid the complexity of writing a custom function.\n\
    <|/ c |>\n<| c |>\nI agree with you. I was just trying to keep it simple and avoid\
    \ the complexity of writing a custom function.\n<|/ c |>\n<| a tags=r,median,list\
    \ |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work if your list contains `NA`s.\n<|/ c |>\n<| c |>\nI\
    \ agree with you. I was just trying to keep it simple and avoid the complexity\
    \ of writing a custom function.\n<|/ c |>\n<| a |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n\
    </code>\n<|/ a tags=r,median,list dscore=2 |>\n<| c |>\nThis doesn't work if your\
    \ list contains `NA`s.\n<|/ c |>\n<| a |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n\
    </code>\n<|/ a dscore=2 tags=r,median,list |>\n<| c |>\nThis doesn't work if your\
    \ list contains `NA`s.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n\
    </code>\n<|/ a tags=r,median,list |>\n<| c |>\nThis doesn't work if your list\
    \ contains `NA`s.\n<|/ c |>\n<| a |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n\
    </code>\n<|/ a dscore=2 tags=r,median,", "\n  l <- sort(l)\n  length(l) %% 2 ==\
    \ 0 & length(l) > 1 & l[length(l)/2] < l[length(l)/2+1] &\n    median(l[c(TRUE,\
    \ FALSE)]) == l[length(l)/2]\n}\n</code>\n<|/ a tags=r,median |>\n<| c |>\nThis\
    \ doesn't work if there are two equal medians.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\nIt does, but only if you have two equal\
    \ medians. Try it with `median(c(1,2,2,3,4))`.\n<|/ c |>\n<| c |>\nYes, I see\
    \ that now. Thanks for pointing that out. I've updated the answer.\n<|/ c |>\n\
    <| c |>\nThanks for the answer! I wonder if there is a way to do this without\
    \ having to sort the list?\n<|/ c |>\n<| a tags=r,median |>\nHere's a solution\
    \ using data.table:\n<code>\nlibrary(data.table)\nmedians <- function(x) {\n \
    \ x <- data.table(x)\n  x[, median(as.numeric(as.character(x))), by = seq_len(.N)]\n\
    }\n\nmedians(c(1,2,2,3,4))", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2)\
    \ return(NA)\n  m <- floor((n + 1) / 2)\n  return(l[m])\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't answer the question of how to find the median of a list\
    \ of numbers. Your code only finds the median of a single number.\n<|/ c |>\n\
    <| c |>\nIt does answer the question of how to find the median of a list of numbers.\
    \ I added a link to the Wikipedia article on median which explains how it works.\n\
    <|/ c |>\n<| c |>\nThe median of a list of numbers is just the middle number.\
    \ Your code doesn't do that. It finds the median of a single number.\n<|/ c |>\n\
    <| c |>\nThe median of a list of numbers is just the middle number. Your code\
    \ doesn't do that. It finds the median of a single number.\n<|/ c |>\n<| c |>\n\
    The median of a list of numbers is just the middle number. Your code doesn't do\
    \ that. It finds the median of a single number.\n<|/ c |>\n<| a dscore=5 tags=median,r\
    \ |>\n<code>\nmedian(mylist)\n</code>\n<|/ a |>\n<| c |>\nThis doesn't answer\
    \ the question of how to find the median of a list of numbers. Your code only\
    \ finds the median of a single number.\n<|/ c |>\n<| c |>\nThis doesn't answer\
    \ the question of how to find the median of a list of numbers. Your code only\
    \ finds the median of a single number.\n<|/ c |>\n<| c |>\nThis doesn't answer\
    \ the question of how to find the median of a list of numbers. Your code only\
    \ finds the median of a single number.\n<|/ c |>\n<| c |>\nThis doesn't answer\
    \ the question of how to find the median of a list of numbers. Your code only\
    \ finds the median of a single number.\n<|/ c |>\n<| c |>\nThis doesn't answer\
    \ the question of how to find the median of a list of numbers. Your code only\
    \ finds the median of a single number.\n<|/ c |>\n<| a tags=median,r |>\n<code>\n\
    median(mylist)\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't answer the question\
    \ of how to find the median of a list of numbers. Your code only finds the median\
    \ of a single number.\n<|/ c |>\n<| c |>\nThis doesn't answer the question of\
    \ how to find the median of a list of numbers. Your code only finds the median\
    \ of a single number.\n<|/ c |>\n<| c |>\nThis doesn't answer the question ",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  m <- floor((n +\
    \ 1) / 2)\n  return(l[m])\n}\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n\
    \ < 2) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/ a tags=r,sorting |>\n<|\
    \ c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))` returns `3` instead\
    \ of `2.5`.\n<|/ c |>\n<| c |>\nIt does work, try it out. `median(c(1,2,3,4,5))`\
    \ returns `2.5`.\n<|/ c |>\n<| c |>\nI see what you mean. `median(c(1,2,3,4,5))`\
    \ returns `3` instead of `2.5`. Sorry for the confusion.\n<|/ c |>\n<| c |>\n\
    No problem. Thanks for your help.\n<|/ c |>\n<| a dscore=2 |>\nThe median of a\
    \ vector is defined as the middle value of a sorted vector. \n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=r,sorting |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))`\
    \ returns `3` instead of `2.5`.\n<|/ c |>\n<| c |>\nIt does work, try it out.\
    \ `median(c(1,2,3,4,5))` returns `2.5`.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ `median(c(1,2,3,4,5))` returns `3` instead of `2.5`. Sorry for the confusion.\n\
    <|/ c |>\n<| c |>\nNo problem. Thanks for your help.\n<|/ c |>\n<| a tags=r,sorting\
    \ |>\nThe median of a vector is defined as the middle value of a sorted vector.\
    \ \n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ seem to work. `median(c(1,2,3,4,5))` returns `3` instead of `2.5`.\n<|/ c |>\n\
    <| c |>\nIt does work, try it out. `median(c(1,2,3,4,5))` returns `2.5`.\n<|/\
    \ c |>\n<| c |>\nI see what you mean. `median(c(1,2,3,4,5))` returns `3` instead\
    \ of `2.5`. Sorry for the confusion.\n<|/ c |>\n<| a tags=r,sorting |>\nThe median\
    \ of a vector is defined as the middle value of a sorted vector. \n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))` ",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n\
    }\n</code>\n<|/ a tags=r,median |>\n<| a dscore=4 |>\nThe median function from\
    \ the stats package is also a good option:\n<code>\nmedian(1:10)\n</code>\n<|/\
    \ a tags=r,median |>\n<| a tags=r,median |>\nThe median function from the stats\
    \ package is also a good option:\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=4\
    \ |>\n<| a dscore=4 |>\nThe median function from the stats package is also a good\
    \ option:\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r,median |>\n<| a dscore=4\
    \ |>\nThe median function from the stats package is also a good option:\n<code>\n\
    median(1:10)\n</code>\n<|/ a tags=r,median |>\n<| a |>\nThe median function from\
    \ the stats package is also a good option:\n<code>\nmedian(1:10)\n</code>\n<|/\
    \ a dscore=3 tags=r,median |>\n<| a tags=r,median |>\nThe median function from\
    \ the stats package is also a good option:\n<code>\nmedian(1:10)\n</code>\n<|/\
    \ a dscore=3 |>\n<| a tags=r,median |>\nThe median function from the stats package\
    \ is also a good option:\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a tags=r,median |>\nThe median function from the stats package is also a good\
    \ option:\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n\
    The median function from the stats package is also a good option:\n<code>\nmedian(1:10)\n\
    </code>\n<|/ a tags=r,median |>\n<| a dscore=3 |>\nThe median function from the\
    \ stats package is also a good option:\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r,median\
    \ |>\n<| a dscore=3 |>\nThe median function from the stats package is also a good\
    \ option:\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r,median |>\n<| a tags=r,median\
    \ |>\nThe median function from the stats package is also a good option:\n<code>\n\
    median(1:10)\n</code>\n<|/ a dscore=3 |>\n<| a tag", "\n  l <- sort(l)\n  return(l[length(l)/2])\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't seem to work when there are\
    \ NAs in the list. `median(c(NA,NA,NA,NA,NA,NA))` returns `NA`\n<|/ c |>\n<| c\
    \ |>\nI added a fix for NAs.\n<|/ c |>\n<| c |>\nI added a fix for NAs.\n<|/ c\
    \ |>\n<| c |>\nI added a fix for NAs.\n<|/ c |>\n<| c |>\nI added a fix for NAs.\n\
    <|/ c |>\n<| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=3 tags=r |>\n\
    <| c |>\nThis doesn't seem to work when there are NAs in the list. `median(c(NA,NA,NA,NA,NA,NA))`\
    \ returns `NA`\n<|/ c |>\n<| c |>\nI added a fix for NAs.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r ",
  "\n  l <- sort(l)\n  return(median(l))\n}\n", "\n  n <- length(l)\n  if (n == 0)\
    \ return(NA)\n  sort(l)[n / 2]\n}\n", "\n  l <- sort(l)\n  n <- length(l)\n  if\
    \ (n < 2) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| c |>\nThis doesn't work if you have a list with only 1 element. For example,\
    \ median(list(1))\n<|/ c |>\n<| c |>\nThis doesn't work if you have a list with\
    \ only 1 element. For example, median(list(1))\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a list with only 1 element. For example, median(list(1))\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a list with only 1 element. For\
    \ example, median(list(1))\n<|/ c |>\n<| c |>\nThis doesn't work if you have a\
    \ list with only 1 element. For example, median(list(1))\n<|/ c |>\n<| a tags=r,list,median\
    \ |>\n<code>\nmedian(as.numeric(as.character(unlist(yourlist))))\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis doesn't work if you have a list with only 1 element.\
    \ For example, median(list(1))\n<|/ c |>\n<| c |>\nThis doesn't work if you have\
    \ a list with only 1 element. For example, median(list(1))\n<|/ c |>\n<| c |>\n\
    This doesn't work if you have a list with only 1 element. For example, median(list(1))\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a list with only 1 element. For\
    \ example, median(list(1))\n<|/ c |>\n<| c |>\nThis doesn't work if you have a\
    \ list with only 1 element. For example, median(list(1))\n<|/ c |>\n<| a tags=r,list,median\
    \ |>\n<code>\nmedian(as.numeric(as.character(unlist(yourlist))))\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis doesn't work if you have a list with only 1 element.\
    \ For example, median(list(1))\n<|/ c |>\n<| c |>\nThis doesn't work if you have\
    \ a list with only 1 element. For example, median(list(1))\n<|/ c |>\n<| c |>\n\
    This doesn't work if you have a list with only 1 element. For example, median(list(1))\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a list with only 1 element. For\
    \ example, median(list(1))\n<|/ c |>\n<| c |>\nThis doesn't work", "\n  l <- sort(l)\n\
    \  return(median(l))\n}\n</code>\n<|/ a |>\n<| c |>\nI like your `median` function\
    \ but I think it would be more efficient to sort `l` before calling `median` rather\
    \ than sorting `l` after calling `median`.  Also, `median` doesn't always return\
    \ the correct answer.  For example, `median(c(1,2,3))` returns `1` but `median(c(1,2,4,5))`\
    \ returns `3`.\n<|/ c |>\n<| c |>\nYes, you're right. I was thinking about `median`\
    \ as a more general function than `median` specifically for vectors. I guess it\
    \ would be more efficient to sort `l` before calling `median` rather than sorting\
    \ `l` after calling `median`. I will edit my answer.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post - you can always comment on your own posts,\
    \ and once you have sufficient [reputation](http://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](http://stackoverflow.com/help/privileges/comment).\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question.  It doesn't require\
    \ a package.  It doesn't require a loop.  It doesn't require a for loop.  It doesn't\
    \ require a while loop.  It doesn't require a for loop.  It doesn't require a\
    \ while loop.  It doesn't require a for loop.  It doesn't require a while loop.\
    \  It doesn't require a for loop.  It doesn't require a while loop.  It doesn't\
    \ require a for loop.  It doesn't require a while loop.  It doesn't require a\
    \ for loop.  It doesn't require a while loop.  It doesn't require a for loop.\
    \  It doesn't require a while loop.  It doesn't require a for loop.  It doesn't\
    \ require a while loop.  It doesn't require a for loop.  It doesn't require a\
    \ while loop.  It doesn't require a for loop.  It doesn't require a while loop.\
    \  It doesn't require a for loop.  It doesn't require a while loop.  It doesn't\
    \ require a for loop.  It doesn't require a while loop.  It doesn't require a\
    \ for loop.  It doesn't require a while loop.  It doesn't require a for loop.\
    \  It doesn't require a while loop.  It doesn't require a for loop.  It doesn't\
    \ require a while loop.  It doesn't require ", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 2) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nI like this solution, although I prefer `median(l)` over `median(sort(l))`\
    \ because `sort` has to do more work to find the median.\n<|/ c |>\n<| c |>\n\
    I agree, `median(l)` would be better. I've edited my answer to reflect this.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I prefer `median(l)` over `median(sort(l))`\
    \ because `sort` has to do more work to find the median.\n<|/ c |>\n<| c |>\n\
    I agree with you, `median(l)` would be better. I've edited my answer to reflect\
    \ this.\n<|/ c |>\n<| c |>\nI like your solution, but I prefer `median(l)` over\
    \ `median(sort(l))` because `sort` has to do more work to find the median.\n<|/\
    \ c |>\n<| a dscore=2 |>\nI like using median(sort(x)) because it is more efficient.\
    \ \n<code>\n> x <- c(1,2,3,4,5,6,7,8,9,10)\n> median(sort(x))\n[1] 5.5\n> median(x)\n\
    [1] 5.5\n</code>\n<|/ a tags=r,median,sorting |>\n<| c |>\nI like your solution,\
    \ but I prefer `median(l)` over `median(sort(l))` because `sort` has to do more\
    \ work to find the median.\n<|/ c |>\n<| c |>\nI like your solution, but I prefer\
    \ `median(l)` over `median(sort(l))` because `sort` has to do more work to find\
    \ the median.\n<|/ c |>\n<| c |>\nI like your solution, but I prefer `median(l)`\
    \ over `median(sort(l))` because `sort` has to do more work to find the median.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median,sorting\
    \ |>\n<| c |>\nI like your solution, but I prefer `median(l)` over `median(sort(l))`\
    \ because `sort` has to do more work to find the median.\n<|/ c |>\n<| a dscore",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n  m <- floor((n +\
    \ 1) / 2)\n  return(l[m])\n}\n</code>\n<|/ a tags=median,r |>\n<| c |>\nThis doesn't\
    \ work for me. `median(1:10)` returns `NA`\n<|/ c |>\n<| c |>\nIt works for me\
    \ (R 3.2.2). Maybe you have a different version of R?\n<|/ c |>\n<| c |>\nYes,\
    \ I do. `R version 3.2.1 (2015-06-18)`\n<|/ c |>\n<| c |>\nI added a version that\
    \ works with R 3.2.1\n<|/ c |>\n<| c |>\nI added a version that works with R 3.2.1\n\
    <|/ c |>\n<| a tags=median,r |>\n<code>\nmedian(1:10)\n</code>\nreturns NA\n<code>\n\
    median(1:10)\n[1] NA\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for\
    \ me. `median(1:10)` returns `NA`\n<|/ c |>\n<| c |>\nIt works for me (R 3.2.2).\
    \ Maybe you have a different version of R?\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with R 3.2.1\n<|/ c |>\n<| c |>\nIt works for me (R 3.2.1)\n<|/ c\
    \ |>\n<| c |>\nIt works for me (R 3.2.1)\n<|/ c |>\n<| a |>\n<code>\nmedian(1:10)\n\
    </code>\nreturns NA\n<code>\nmedian(1:10)\n[1] NA\n</code>\n<|/ a dscore=5 tags=median,r\
    \ |>\n<| c |>\nThis doesn't work for me. `median(1:10)` returns `NA`\n<|/ c |>\n\
    <| c |>\nIt works for me (R 3.2.2). Maybe you have a different version of R?\n\
    <|/ c |>\n<| c |>\nI added a version that works with R 3.2.1\n<|/ c |>\n<| c |>\n\
    It works for me (R 3.2.1)\n<|/ c |>\n<| c |>\nIt works for me (R 3.2.1)\n<|/ c\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian(1:10)\n</code>\nreturns NA\n<code>\n\
    median(1:10)\n[1] NA\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n\
    \  return(l[n / 2])\n}\n", "\n  l <- sort(l)\n  length(l) / 2 # median\n}\n",
  "\n  l <- sort(l)\n  length(l) / 2 # median\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    This doesn't answer the question of how to find the median of a list of numbers.\
    \ You just give an example of a median function.\n<|/ c |>\n<| c |>\nThe median\
    \ of a list of numbers is just the middle number of the list. `median(1:10)` returns\
    \ `5`.\n<|/ c |>\n<| c |>\nThe median of a list of numbers is just the middle\
    \ number of the list. `median(1:10)` returns `5`.\n<|/ c |>\n<| c |>\nThe median\
    \ of a list of numbers is just the middle number of the list. `median(1:10)` returns\
    \ `5`.\n<|/ c |>\n<| c |>\nThe median of a list of numbers is just the middle\
    \ number of the list. `median(1:10)` returns `5`.\n<|/ c |>\n<| a |>\nThe median\
    \ of a list of numbers is just the middle number of the list. median(1:10) returns\
    \ 5.\n<|/ a tags=r dscore=5 |>\n<| c |>\nThe median of a list of numbers is just\
    \ the middle number of the list. `median(1:10)` returns `5`.\n<|/ c |>\n<| c |>\n\
    The median of a list of numbers is just the middle number of the list. `median(1:10)`\
    \ returns `5`.\n<|/ c |>\n<| c |>\nThe median of a list of numbers is just the\
    \ middle number of the list. `median(1:10)` returns `5`.\n<|/ c |>\n<| c |>\n\
    The median of a list of numbers is just the middle number of the list. `median(1:10)`\
    \ returns `5`.\n<|/ c |>\n<| c |>\nThe median of a list of numbers is just the\
    \ middle number of the list. `median(1:10)` returns `5`.\n<|/ c |>\n<| a tags=r\
    \ |>\nThe median of a list of numbers is just the middle number of the list. median(1:10)\
    \ returns 5.\n<|/ a dscore=5 |>\n<| c |>\nThe median of a list of numbers is just\
    \ the middle number of the list. `median(1:10)` returns `5`.\n<|/ c |>\n<| c |>\n\
    The median of a list of numbers is just the middle number of the list. `median(1:10)`\
    \ returns `5`.\n<|/ c |>\n<| a tags=r |>\nThe median of a list of numbers is just\
    \ the middle number of the list. median(1:10) ", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n == 1) return(l[1])\n  return(l[n/2])\n}\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| a tags=r,list,median |>\nI came up with a solution using sapply and median:\n\
    <code>\nmedians <- sapply(mylist, median)\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nmedians <- sapply(mylist, median)\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| a |>\n<code>\nmedians <- sapply(mylist, median)\n</code>\n<|/ a tags=r,list,median\
    \ dscore=2 |>\n<| a tags=r,list,median |>\n<code>\nmedians <- sapply(mylist, median)\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedians <- sapply(mylist,\
    \ median)\n</code>\n<|/ a tags=r,list,median |>\n<| a dscore=1 |>\n<code>\nmedians\
    \ <- sapply(mylist, median)\n</code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median\
    \ |>\n<code>\nmedians <- sapply(mylist, median)\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nmedians <- sapply(mylist, median)\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| a tags=r,list,median |>\n<code>\nmedians <- sapply(mylist, median)\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nmedians <- sapply(mylist, median)\n\
    </code>\n<|/ a dscore=1 tags=r,list,median |>\n<| a dscore=1 |>\n<code>\nmedians\
    \ <- sapply(mylist, median)\n</code>\n<|/ a tags=r,list,median |>\n<| a dscore=1\
    \ |>\n<code>\nmedians <- sapply(mylist, median)\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| a tags=r,list,median |>\n<code>\nmedians <- sapply(mylist, median)\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nmedians <- sapply(mylist, median)\n\
    </code>\n<|/ a dscore=1 tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\n\
    medians <- sapply(mylist, median)\n</code>\n<|/ a d", "\n  l <- sort(l)\n  return(l[length(l)/2])\n\
    }\n", "\n  l <- sort(l)\n  return(median(l))\n}\n", "\n  l <- sort(l)\n  length(l)\
    \ %/% 2\n}\n", "\n  l <- sort(l)\n  length(l) %% 2 == 0L ? median(l[1L]) : median(l[1L\
    \ + 1L])\n}\n</code>\n<|/ a tags=r,median |>\n<| a dscore=1 |>\nI came up with\
    \ a simple solution that is very fast and does not require any packages. \n<code>\n\
    median.list <- function(x) {\n  n <- length(x)\n  if(n <= 1) return(x)\n  if(n\
    \ %% 2 == 0) return(x[n / 2])\n  return(x[n / 2 + 1])\n}\n</code>\n<|/ a tags=r,median\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian.list <- function(x) {\n  n <- length(x)\n\
    \  if(n <= 1) return(x)\n  if(n %% 2 == 0) return(x[n / 2])\n  return(x[n / 2\
    \ + 1])\n}\n</code>\n<|/ a tags=r,median |>\n<| a tags=r,median |>\n<code>\nmedian.list\
    \ <- function(x) {\n  n <- length(x)\n  if(n <= 1) return(x)\n  if(n %% 2 == 0)\
    \ return(x[n / 2])\n  return(x[n / 2 + 1])\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nmedian.list <- function(x) {\n  n <- length(x)\n  if(n\
    \ <= 1) return(x)\n  if(n %% 2 == 0) return(x[n / 2])\n  return(x[n / 2 + 1])\n\
    }\n</code>\n<|/ a tags=r,median |>\n<| c |>\nPlease add some explanation to your\
    \ answer. Code-only answers are discouraged on Stack Overflow.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\nmedian.list <- function(x) {\n  n <- length(x)\n  if(n\
    \ <= 1) return(x)\n  if(n %% 2 == 0) return(x[n / 2])\n  return(x[n / 2 + 1])\n\
    }\n</code>\n<|/ a tags=r,median |>\n<| c |>\nPlease add some explanation to your\
    \ answer. Code-only answers are discouraged on Stack Overflow.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\nmedian.list <- function(x) {\n  n <- length(x)\n  if(n\
    \ <= 1) return(x)\n  if(n %% 2 == 0) return(x[n / 2])\n  return(x[n / 2 + 1])\n\
    }\n</code>\n<|/ a tags=r,", "\n  l <- sort(l)\n  length(l)/2\n}\n</code>\n<|/\
    \ a tags=r |>\n<| c |>\nThis doesn't seem to work. `median(list(c(1,2,3,4,5)))`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nIt works fine for me. `median(list(c(1,2,3,4,5)))`\
    \ returns `2`.\n<|/ c |>\n<| c |>\nYes, it works. But it also returns `3` when\
    \ `l` is `list(c(1,2,3,4,5))`. Try it with `median(list(c(1,2,3,4,5,6)))`.\n<|/\
    \ c |>\n<| c |>\nYes, it returns `3` when `l` is `list(c(1,2,3,4,5,6))`. Try it\
    \ with `median(list(c(1,2,3,4,5,6,7)))`.\n<|/ c |>\n<| c |>\nYes, it returns `3`\
    \ when `l` is `list(c(1,2,3,4,5,6,7))`. Try it with `median(list(c(1,2,3,4,5,6,7,8)))`.\n\
    <|/ c |>\n<| a dscore=5 |>\nThe median of a vector is the value that occurs the\
    \ most frequently in the vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\nThe median\
    \ of a list is the value that occurs the most frequently in the list. \n<code>\n\
    median(list(1:10))\n[1] 5\n</code>\n<|/ a tags=r |>\n<| c |>\n`median(list(c(1,2,3,4,5)))`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| c |>\n`median(list(c(1,2,3,4,5,6)))`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| c |>\n`median(list(c(1,2,3,4,5,6,7)))`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| c |>\n`median(list(c(1,2,3,4,5,6,7,8)))`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| c |>\n`median(list(c(1,2,3,4,5,6,7,8,9)))`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| a dscore=5 |>\nThe median of a vector\
    \ is the value that occurs the most frequently in the vector. \n<code>\nmedian(1:10)\n\
    [1] 5\n</code>\nThe median of a list is the value that occurs the most ", "\n\
    \  l <- sort(l)\n  return(median(l))\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    I like your solution, however it fails for `median(list(c(NA,NA,NA)))` which returns\
    \ `NA` instead of `Inf`.\n<|/ c |>\n<| c |>\nI added a fix for that case\n<|/\
    \ c |>\n<| c |>\nI like your solution, however it fails for `median(list(c(NA,NA,NA)))`\
    \ which returns `NA` instead of `Inf`.\n<|/ c |>\n<| c |>\nI added a fix for that\
    \ case\n<|/ c |>\n<| a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/\
    \ a dscore=4 |>\n<| c |>\nI like your solution, however it fails for `median(list(c(NA,NA,NA)))`\
    \ which returns `NA` instead of `Inf`.\n<|/ c |>\n<| c |>\nI added a fix for that\
    \ case\n<|/ c |>\n<| a dscore=4 |>\nThe median of a vector is defined as the value\
    \ that occurs the most frequently in the vector. \n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r,median |>\n<| c |>\nI like your solution, however it fails for `median(list(c(NA,NA,NA)))`\
    \ which returns `NA` instead of `Inf`.\n<|/ c |>\n<| c |>\nI added a fix for that\
    \ case\n<|/ c |>\n<| a dscore=4 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median\
    \ |>\n<| c |>\nI like your solution, however it fails for `median(list(c(NA,NA,NA)))`\
    \ which returns `NA` instead of `Inf`.\n<|/ c |>\n<| c |>\nI added a fix for that\
    \ case\n<|/ c |>\n<| a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median\
    \ |>\n<| c |>\nI like your solution, however it fails for `median(list(c(NA,NA,NA)))`\
    \ which returns `NA` instead of `Inf`.\n<|/ c |>\n<| c |>\nI added a fix for that\
    \ case\n<|/ c |>\n<| a tags=r,median |>\n", "\n  n <- length(l)\n  if (n < 1)\
    \ return(NA)\n  m <- floor(n/2)\n  return(l[m])\n}\n</code>\n<|/ a tags=r |>\n\
    <| c |>\nThis doesn't answer the question. OP asked for median of *all* elements\
    \ in the list, not just the median.\n<|/ c |>\n<| c |>\nThe median of *all* elements\
    \ in the list is the median, which is what this does. If you want the median of\
    \ *each* element in the list, then you can just use `median(l)`.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't answer the question. OP asked for median of *all* elements\
    \ in the list, not just the median.\n<|/ c |>\n<| c |>\nThe median of *all* elements\
    \ in the list is the median, which is what this does. If you want the median of\
    \ *each* element in the list, then you can just use `median(l)`.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't answer the question. OP asked for median of *all* elements\
    \ in the list, not just the median.\n<|/ c |>\n<| a dscore=5 |>\nThe median of\
    \ all the elements in the list can be found using the following code:\n<code>\n\
    median(l)\n</code>\n<|/ a tags=r |>\n<| a dscore=5 |>\nThe median of all the elements\
    \ in the list can be found using the following code:\n<code>\nmedian(l)\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\nThe median of all the elements in the list can\
    \ be found using the following code:\n<code>\nmedian(l)\n</code>\n<|/ a dscore=5\
    \ |>\n<| a dscore=5 |>\nThe median of all the elements in the list can be found\
    \ using the following code:\n<code>\nmedian(l)\n</code>\n<|/ a tags=r |>\n<| a\
    \ |>\nThe median of all the elements in the list can be found using the following\
    \ code:\n<code>\nmedian(l)\n</code>\n<|/ a tags=r dscore=5 |>\n<| a tags=r |>\n\
    The median of all the elements in the list can be found using the following code:\n\
    <code>\nmedian(l)\n</code>\n<|/ a dscore=5 |>\n<| a dscore=5 |>\nThe median of\
    \ all the elements in the list can be found using the following code:\n<code>\n\
    median(l)\n</code>\n<|/ a tags=r |>\n<| a dscore=5 |>\nThe median of all the elements\
    \ in the list can be found using the following code:\n<code>\nmedian(", "\n  l\
    \ <- sort(l)\n  return(median(l))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI believe\
    \ this should be the accepted answer. `median` already does what OP wants, no\
    \ need to reinvent the wheel.\n<|/ c |>\n<| a dscore=1 |>\nI wrote a package that\
    \ does this and more. Check it out at https://github.com/jennybc/median\n<|/ a\
    \ tags=median,r |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1 tags=median,r\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r\
    \ |>\n<| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r dscore=0\
    \ |>\n<| c |>\nPlease add some explanation to your answer.\n<|/ c |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ how and/or why it solves the problem would improve the answer's long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r\
    \ |>\n<| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=0 tags=median,r\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=0 tags=median,r\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))", "\n  l <- sort(l)\n  length(l)/2\n\
    }\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n  m <- floor(n/2)\n\
    \  return(l[m])\n}\n</code>\n<|/ a tags=r,median |>\n<| c |>\nI like your median\
    \ function.  I wonder if there is a way to make it more efficient by not sorting\
    \ the list twice.  I wonder if there is a way to avoid the if-statement by using\
    \ a different approach.\n<|/ c |>\n<| c |>\nI added a version that doesn't sort\
    \ the list twice. I'm not sure how to avoid the if-statement without sorting the\
    \ list twice.\n<|/ c |>\n<| c |>\nI added a version that doesn't sort the list\
    \ twice. I'm not sure how to avoid the if-statement without sorting the list twice.\n\
    <|/ c |>\n<| a tags=r,median |>\nHere's a solution using data.table:\n<code>\n\
    library(data.table)\nmedian.dt <- function(x) {\n  x <- data.table(x)\n  x[, median(as.numeric(as.character(x))),\
    \ by = seq_len(nrow(x))]\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,median |>\n\
    A simple solution that doesn't require any packages:\n<code>\nmedian.simple <-\
    \ function(x) {\n  n <- length(x)\n  if(n < 1) return(NA)\n  m <- floor(n/2)\n\
    \  return(x[m])\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,median |>\nHere's\
    \ a solution using dplyr and purrr packages:\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n\
    \nmedian.dplyr <- function(x) {\n  x %>% \n    split(seq_along(x)) %>% \n    map(~median(.x))\
    \ %>% \n    reduce(`+`)\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nHere's\
    \ a solution using base R:\n<code>\nmedian.base <- function(x) {\n  n <- length(x)\n\
    \  if(n < 1) return(NA)\n  m <- floor(n/2)\n  return(x[m])\n}\n</code>\n<|/ a\
    \ tags=r,median |>\n<| a dscore=1 |>\nHere's a solution using dplyr and purrr\
    \ packages:\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n\nmedian.dplyr <- function(x)\
    \ {\n  x %>% \n    split(seq_along(x)) %>% \n    map(~median", "\n  l <- sort(l)\n\
    \  n <- length(l)\n  if (n == 1) return(l[1])\n  return((n - 1) * (l[n] + l[n\
    \ / 2]) / 2)\n}\n", "\n  l <- sort(l)\n  length(l) / 2 # median\n}\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nThe median of [3, 1, 2, 4, 5] should be 3, not 4.\n\
    <|/ c |>\n<| c |>\n, thanks for pointing that out. I've updated the answer.\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis should be the accepted answer. `median` already sorts the input\
    \ vector and returns the median.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. `median` already sorts the input vector and returns the median.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer. `median` already sorts the\
    \ input vector and returns the median.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. `median`\
    \ already sorts the input vector and returns the median.\n<|/ c |>\n<| a tags=r\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should\
    \ be the accepted answer. `median` already sorts the input vector and returns\
    \ the median.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=4 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=4 |>\n<|\
    \ a dscore=4 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\n\
    <code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| a |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=4 tags=r |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a dscore=4 |>\n<| a tags=r dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a |>\n<| a ", "\n  l <- sort(l)\n  return(median(l))\n}\n", "\n  l <- sort(l)\n\
    \  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n}\n", "\n  l <-\
    \ sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n/2])\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your solution, but I prefer to use `median`\
    \ from the `stats` package instead of writing my own.\n<|/ c |>\n<| c |>\nI agree.\
    \ I was just trying to show how it could be done without writing a function.\n\
    <|/ c |>\n<| c |>\nI agree that `median` from the `stats` package is better than\
    \ writing my own, but I didn't want to assume that OP was already using that package.\
    \ Also, `median` from the `stats` package is more robust than my `median` function\
    \ because it handles negative numbers correctly.\n<|/ c |>\n<| c |>\nI agree that\
    \ `median` from the `stats` package is better, but I didn't want to assume that\
    \ OP was already using that package. Also, `median` from the `stats` package is\
    \ more robust than my `median` function because it handles negative numbers correctly.\n\
    <|/ c |>\n<| c |>\nI agree that `median` from the `stats` package is better, but\
    \ I didn't want to assume that OP was already using that package. Also, `median`\
    \ from the `stats` package is more robust than my `median` function because it\
    \ handles negative numbers correctly.\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution\
    \ using dplyr and purrr packages.\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n",
  "\n  n <- length(l)\n  if (n == 0) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/\
    \ a tags=r |>\n<| c |>\nThis doesn't seem to work if the list is of length 1.\
    \ For example median([1]) returns NA.\n<|/ c |>\n<| c |>\n: Yes, I noticed that\
    \ and fixed it now. Thanks.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `median(list(c(1,2,3)))`\
    \ returns `1`\n<|/ c |>\n<| c |>\n: It works for me on R 2.15.2 on Windows. What\
    \ version are you using?\n<|/ c |>\n<| c |>\n: I tested it on R 2.15.2 on Windows\
    \ and it works. What version are you using?\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    median(1:10)\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't seem to work if\
    \ the list is of length 1. For example median([1]) returns NA.\n<|/ c |>\n<| c\
    \ |>\n: It works for me on R 2.15.2 on Windows. What version are you using?\n\
    <|/ c |>\n<| c |>\n: I tested it on R 2.15.2 on Windows and it works. What version\
    \ are you using?\n<|/ c |>\n<| c |>\n: I tested it on R 2.15.2 on Windows and\
    \ it works. What version are you using?\n<|/ c |>\n<| c |>\n: I tested it on R\
    \ 2.15.2 on Windows and it works. What version are you using?\n<|/ c |>\n<| a\
    \ |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r dscore=5 |>\n<| c |>\nThis doesn't\
    \ seem to work if the list is of length 1. For example median([1]) returns NA.\n\
    <|/ c |>\n<| c |>\n: It works for me on R 2.15.2 on Windows. What version are\
    \ you using?\n<|/ c |>\n<| c |>\n: I tested it on R 2.15.2 on Windows and it works.\
    \ What version are you using?\n<|/ c |>\n<| c |>\n: I tested it on R 2.15.2 on\
    \ Windows and it works. What version are you using?\n<|/ c |>\n<| c |>\n: I tested\
    \ it on ", "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n\
    </code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't work if there are multiple values\
    \ that are equidistant from the median.\n<|/ c |>\n<| c |>\nYes, it does. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\nI did. `median(c(1,2,3,4,5,6,7,8,9,10))` returns\
    \ `5`, not `5`.\n<|/ c |>\n<| c |>\nYes, it does. Try it yourself. `median(c(1,2,3,4,5,6,7,8,9,10))`\
    \ returns `5`, not `5`.\n<|/ c |>\n<| c |>\nYes, it does. Try it yourself. `median(c(1,2,3,4,5,6,7,8,9,10))`\
    \ returns `5`, not `5`.\n<|/ c |>\n<| a dscore=5 |>\nA simple and fast solution\
    \ using data.table:\n<code>\nmedian(as.data.table(a))\n</code>\n<|/ a tags=r |>\n\
    <| c |>\nThis should be the accepted answer. `data.table` has many useful functions\
    \ for working with lists.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ `data.table` has many useful functions for working with lists.\n<|/ c |>\n<|\
    \ c |>\nThis should be the accepted answer. `data.table` has many useful functions\
    \ for working with lists.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ `data.table` has many useful functions for working with lists.\n<|/ c |>\n<|\
    \ c |>\nThis should be the accepted answer. `data.table` has many useful functions\
    \ for working with lists.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(as.numeric(a))\n\
    </code>\n<|/ a tags=r |>\n<| c |>\nThis should be the accepted answer. `as.numeric`\
    \ will coerce your list to a vector, which is more efficient than `as.data.table`.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. `as.numeric` will coerce\
    \ your list to a vector, which is more efficient than `as.data.table`.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. `as.numeric` will coerce ",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n == 1) return(l[1])\n  i <- floor(n/2)\n\
    \  return(l[(i+1):n])\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nI like the idea of\
    \ using median to find the median, but I don't think it works in all cases. For\
    \ example, `median(c(1,2,3,4,5))` returns `3` instead of `2.5`.\n<|/ c |>\n<|\
    \ c |>\nI agree with you. My solution was meant to be a general solution to find\
    \ the median of any list. Your solution works well for numeric lists, but not\
    \ for character lists.\n<|/ c |>\n<| c |>\nI like the idea of using median to\
    \ find the median, but I don't think it works in all cases. For example, median(c(1,2,3,4,5))\
    \ returns 3 instead of 2.5. \u2013 user2554330\n<|/ c |>\n<| c |>\nI agree with\
    \ you. My solution was meant to be a general solution to find the median of any\
    \ list. Your solution works well for numeric lists, but not for character lists.\n\
    <|/ c |>\n<| c |>\nI like the idea of using median to find the median, but I don't\
    \ think it works in all cases. For example, median(c(1,2,3,4,5)) returns 3 instead\
    \ of 2.5. \u2013 user2554330\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=r |>\n<| c |>\nI like the idea of using median to find the\
    \ median, but I don't think it works in all cases. For example, median(c(1,2,3,4,5))\
    \ returns 3 instead of 2.5. \u2013 user2554330\n<|/ c |>\n<| c |>\nI agree with\
    \ you. My solution was meant to be a general solution to find the median of any\
    \ list. Your solution works well for numeric lists, but not for character lists.\n\
    <|/ c |>\n<| c |>\nI like the idea of using median to find the median, but I don't\
    \ think it works in all cases. For example, median(c(1,2,3,4,5)) returns 3 instead\
    \ of 2.5. \u2013 user2554330\n<|/ c |>\n<| c |>\nI agree with you. My solution\
    \ was meant to be a general solution to find the median of any list. Your solution\
    \ works well for numeric lists, but not for character lists.\n<|/ c |>\n<| c |>\n\
    I like the idea of using median to find the median, but I don't think it works\
    \ in all cases. For example, median(c(", "\n  l <- sort(l)\n  length(l) %% 2 ==\
    \ 0 & length(l) > 1 & !is.na(l) & !is.nan(l) & !is.infinite(l)\n  median(l)\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution. Very elegant. Thanks.\n\
    <|/ c |>\n<| c |>\nI like this solution as well, but I find it a little bit too\
    \ complicated for my liking. I'm going to post my own solution which I find more\
    \ straightforward.\n<|/ c |>\n<| c |>\nI like your solution as well, but I find\
    \ it a little bit too complicated for my liking. I'm going to post my own solution\
    \ which I find more straightforward.\n<|/ c |>\n<| c |>\nI like your solution\
    \ as well, but I find it a little bit too complicated for my liking. I'm going\
    \ to post my own solution which I find more straightforward.\n<|/ c |>\n<| c |>\n\
    I like your solution as well, but I find it a little bit too complicated for my\
    \ liking. I'm going to post my own solution which I find more straightforward.\n\
    <|/ c |>\n<| a dscore=5 |>\nHere's a solution using dplyr and purrr packages:\n\
    <code>\nlibrary(dplyr)\nlibrary(purrr)\n", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 2) return(NA)\n  return(l[n/2])\n}\n</code>\n<|/ a tags=r,statistics\
    \ |>\n<| c |>\nThe median of a vector is defined as the value at the middle of\
    \ the sorted vector. `median(1:10)` returns `5`.\n<|/ c |>\n<| c |>\nYes, I know.\
    \ But the median of a vector is defined as the value at the middle of the sorted\
    \ vector. `median(1:10)` returns `5`.\n<|/ c |>\n<| c |>\nThe median of a vector\
    \ is defined as the value at the middle of the sorted vector. `median(1:10)` returns\
    \ `5`.\n<|/ c |>\n<| c |>\nThe median of a vector is defined as the value at the\
    \ middle of the sorted vector. `median(1:10)` returns `5`.\n<|/ c |>\n<| c |>\n\
    The median of a vector is defined as the value at the middle of the sorted vector.\
    \ `median(1:10)` returns `5`.\n<|/ c |>\n<| a tags=r,statistics |>\n<code>\nmedian(1:10)\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThe median of a vector is defined as the\
    \ value at the middle of the sorted vector. `median(1:10)` returns `5`.\n<|/ c\
    \ |>\n<| a |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=5 tags=r,statistics\
    \ |>\n<| c |>\nThe median of a vector is defined as the value at the middle of\
    \ the sorted vector. `median(1:10)` returns `5`.\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>\nmedian(1:10)\n</code>\n<|/ a tags=r,statistics |>\n<| a dscore=5 |>\n\
    <code>\nmedian(1:10)\n</code>\n<|/ a tags=r,statistics |>\n<| a dscore=5 |>\n\
    <code>\nmedian(1:10)\n</code>\n<|/ a tags=r,statistics |>\n<| a dscore=5 |>\n\
    <code>\nmedian(1:10)\n</code>\n<|/ a tags=r,statistics |>\n<| a tags=r,statistics\
    \ |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=5 |>\n<| a tags=r,statistics\
    \ |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=5 |>\n<| a tags=r,statistics\
    \ |>\n<code>\nmedian", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n\
    \  m <- floor(n/2)\n  return(l[m])\n}\n</code>\n<|/ a tags=median,r |>\n<| a tags=median,r\
    \ |>\nThe median is defined as the middle value in a sorted list. \n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. `median`\
    \ returns the middle value in a sorted list. `median` also works on vectors.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. `median` returns the middle\
    \ value in a sorted list. `median` also works on vectors.\n<|/ c |>\n<| a dscore=5\
    \ |>\nThe median is the middle value in a sorted list. \n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=median,r |>\n<| a dscore=5 |>\nThe median is the middle value\
    \ in a sorted list. \n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r |>\n\
    <| a dscore=5 |>\nThe median is the middle value in a sorted list. \n<code>\n\
    median(sort(x))\n</code>\n<|/ a tags=median,r |>\n<| a dscore=5 |>\nThe median\
    \ is the middle value in a sorted list. \n<code>\nmedian(sort(x))\n</code>\n<|/\
    \ a tags=median,r |>\n<| a dscore=5 |>\nThe median is the middle value in a sorted\
    \ list. \n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r |>\n<| a dscore=5\
    \ |>\nThe median is the middle value in a sorted list. \n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=median,r |>\n<| a tags=median,r |>\nThe median is the middle\
    \ value in a sorted list. \n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5 |>\n\
    <| a tags=median,r |>\nThe median is the middle value in a sorted list. \n<code>\n\
    median(sort(x))\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\nThe median is the\
    \ middle value in a sorted list. \n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r\
    \ |>\n<| a dscore=4 |>\nThe median is the middle value in a sorted list. \n<code>\n\
    median(sort(x))\n</code>\n<|/ a tags=", "\n  l <- sort(l)\n  length(l) / 2 # median\n\
    }\n</code>\n<|/ a tags=r,list,median |>\n<| a dscore=2 |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a dscore=1 tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\n\
    median(as.numeric(names(sort(unlist(your_list))))\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n</code>\n\
    <|/ a dscore=1 tags=r,list,median |>\n<| a |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a tags=r,list,median dscore=1 |>\n<| a tags=r,list,median |>\n<code>\n\
    median(as.numeric(names(sort(unlist(your_list))))\n</code>\n<|/ a ", "\n  sort(l)[length(l)%%2\
    \ == 0][length(l)%%2 == 1]\n}\n</code>\n<|/ a tags=r,list,median |>\n<| a dscore=2\
    \ |>\n<code>\nmedian(as.numeric(names(sort(unlist(mylist))))) \n</code>\n<|/ a\
    \ tags=r,list,median |>\n<| a |>\n<code>\nmedian(as.numeric(names(sort(unlist(mylist)))))\
    \ \n</code>\n<|/ a tags=r,list,median dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    median(as.numeric(names(sort(unlist(mylist))))) \n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| a |>\n<code>\nmedian(as.numeric(names(sort(unlist(mylist))))) \n</code>\n\
    <|/ a tags=r,list,median dscore=2 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(mylist)))))\
    \ \n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric(names(sort(unlist(mylist)))))\
    \ \n</code>\n<|/ a tags=r,list,median |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric(names(sort(unlist(mylist)))))\
    \ \n</code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\n\
    median(as.numeric(names(sort(unlist(mylist))))) \n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(mylist)))))\
    \ \n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric(names(sort(unlist(mylist)))))\
    \ \n</code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\n\
    median(as.numeric(names(sort(unlist(mylist))))) \n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(mylist)))))\
    \ \n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(mylist)))))\
    \ \n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric",
  "\n  l <- sort(l)\n  return(median(l))\n}\n</code>\n<|/ a tags=r,list |>\n<| c |>\n\
    This doesn't seem to work for me. `median(list(c(1,2,3,4,5)))` returns `3` instead\
    \ of `2.5`\n<|/ c |>\n<| c |>\nI tested this on R 3.2.2 on Windows and it works\
    \ as expected. `median(list(c(1,2,3,4,5)))` returns `2.5`.\n<|/ c |>\n<| c |>\n\
    I tested this on R 3.2.2 on Mac and it works as expected. `median(list(c(1,2,3,4,5)))`\
    \ returns `2.5`.\n<|/ c |>\n<| c |>\nI tested this on R 3.2.2 on Ubuntu and it\
    \ works as expected. `median(list(c(1,2,3,4,5)))` returns `2.5`.\n<|/ c |>\n<|\
    \ c |>\nI tested this on R 3.2.2 on Fedora and it works as expected. `median(list(c(1,2,3,4,5)))`\
    \ returns `2.5`.\n<|/ c |>\n<| a dscore=5 |>\nThe median function from the stats\
    \ package is very handy for finding the median of a vector:\n<code>\nmedian(mylist)\n\
    </code>\n<|/ a tags=r,list |>\n<| c |>\nThis should be the accepted answer as\
    \ it is the most straightforward and simplest solution. No need to install any\
    \ packages.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need to\
    \ install any packages.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ No need to install any packages.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. No need to install any packages.\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer. No need to install any packages.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n</code>\n<|/ a tags=r,list |>\n\
    <| c |>\nThis should be the accepted answer. No need to install any packages.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. No need to install any\
    \ packages.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need to\
    \ install any packages.\n<|/ c |>\n<| c |>\n", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 1) return(NA)\n  m <- floor(n/2)\n  return(l[m])\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| c |>\nI like this solution, but I believe it can be improved by\
    \ using `median` instead of `mean`.  `median` will return the median of the entire\
    \ vector, whereas `mean` will return the mean of the entire vector.  If you use\
    \ `median` instead of `mean`, then you can just use `median(l)` instead of `mean(l)`.\n\
    <|/ c |>\n<| c |>\nGood point. I was thinking about this when I wrote the answer,\
    \ but decided against it because I thought it would be too confusing to someone\
    \ who didn't know what median was doing. I'll add that to the answer.\n<|/ c |>\n\
    <| a |>\nHere's a solution using dplyr and purrr packages:\n<code>\nlibrary(dplyr)\n\
    library(purrr)\n", "\n  l <- sort(l)\n  length(l) %% 2 == 0 & length(l) > 1 &\
    \ l[length(l)/2] < l[length(l)/2+1] &\n    median(l[seq(1, length(l), by=2)])\
    \ == l[length(l)/2]\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution,\
    \ but I wonder if there is a way to make it more efficient. My solution takes\
    \ about 3 seconds to run on my laptop and yours takes about 2.5 seconds. I wonder\
    \ if there is a way to make it more efficient.\n<|/ c |>\n<| c |>\nI wonder if\
    \ there is a way to make it more efficient. My solution takes about 3 seconds\
    \ to run on my laptop and yours takes about 2.5 seconds. I wonder if there is\
    \ a way to make it more efficient.\n<|/ c |>\n<| c |>\nI wonder if there is a\
    \ way to make it more efficient. My solution takes about 3 seconds to run on my\
    \ laptop and yours takes about 2.5 seconds. I wonder if there is a way to make\
    \ it more efficient.\n<|/ c |>\n<| c |>\nI wonder if there is a way to make it\
    \ more efficient. My solution takes about 3 seconds to run on my laptop and yours\
    \ takes about 2.5 seconds. I wonder if there is a way to make it more efficient.\n\
    <|/ c |>\n<| c |>\nI wonder if there is a way to make it more efficient. My solution\
    \ takes about 3 seconds to run on my laptop and yours takes about 2.5 seconds.\
    \ I wonder if there is a way to make it more efficient.\n<|/ c |>\n<| a dscore=5\
    \ |>\nHere's a solution using data.table:\n<code>\nlibrary(data.table)\ndt <-\
    \ data.table(a = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,10",
  "\n  l <- sort(l)\n  return(l[length(l)/2])\n}\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ this solution, but I wonder if it will perform better than the `median` function\
    \ from the `PerformanceAnalytics` package. `median` uses `sort`, which has O(n\
    \ log n) complexity. Your solution uses `sort`, which has O(n) complexity. Do\
    \ you know if there is a way to improve the performance of your solution?\n<|/\
    \ c |>\n<| c |>\nI haven't tested it but I would expect it to be faster than `median`\
    \ since it uses `sort` only once.\n<|/ c |>\n<| c |>\nI tested it and it seems\
    \ that `median` uses `sort` only once, but `median2` uses `sort` twice. `median2`\
    \ also uses `sort` twice, but `median3` uses `sort` three times. So it seems that\
    \ `median2` is faster than `median3` because it uses `sort` three times.\n<|/\
    \ c |>\n<| c |>\nYes, I agree. `median2` is faster than `median3` because it uses\
    \ `sort` three times. But `median3` is faster than `median` because it uses `sort`\
    \ only once.\n<|/ c |>\n<| c |>\nI tested it again and `median2` is faster than\
    \ `median3` because it uses `sort` three times. But `median3` is faster than `median`\
    \ because it uses `sort` only once.\n<|/ c |>\n<| a tags=r,performance,median\
    \ |>\nHere's a solution using data.table:\n<code>\nlibrary(data.table)\ndt <-\
    \ data.table(\n  x = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,10",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n == 1) return(l[1])\n  return(l[ceiling(n\
    \ / 2)])\n}\n</code>\n<|/ a tags=r,median |>\n<| a tags=r,median |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me\
    \ on R 3.2.2 on Mac OS X 10.9.5.  It returns `NA`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me on R 3.2.2 on Windows 7.  It returns `NA`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for me on R 3.2.2 on Windows 7.  It returns `NA`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for me on R 3.2.2 on Windows 7.  It returns `NA`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me on R 3.2.2 on Windows 7.  It returns\
    \ `NA`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median\
    \ |>\n<| c |>\nThis doesn't work for me on R 3.2.2 on Windows 7.  It returns `NA`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me on R 3.2.2 on Windows 7.  It returns\
    \ `NA`.\n<|/ c |>\n<| c |>\nThis doesn't work for me on R 3.2.2 on Windows 7.\
    \  It returns `NA`.\n<|/ c |>\n<| c |>\nThis doesn't work for me on R 3.2.2 on\
    \ Windows 7.  It returns `NA`.\n<|/ c |>\n<| c |>\nThis doesn't work for me on\
    \ R 3.2.2 on Windows 7.  It returns `NA`.\n<|/ c |>\n<| a tags=r,median |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me\
    \ on R 3.2.2 on Windows 7.  It returns `NA`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me on R 3.2.2 on Windows 7.  It returns `NA`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for me on R 3.2.2 on Windows 7.  It returns `NA`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for me on R 3.2.", "\n  l <- sort(l)\n  length(l) %/%\
    \ 2\n}\n</code>\n<|/ a tags=r,list,median |>\n<| a dscore=0 |>\n<code>\nmedian<-function(x){\n\
    \  if(length(x)==0){\n    return(NA)\n  }\n  if(length(x)==1){\n    return(x[1])\n\
    \  }\n  if(length(x)==2){\n    return(x[2])\n  }\n  if(length(x)==3){\n    return(x[2])\n\
    \  }\n  if(length(x)==4){\n    return(x[2])\n  }\n  if(length(x)==5){\n    return(x[2])\n\
    \  }\n  if(length(x)==6){\n    return(x[2])\n  }\n  if(length(x)==7){\n    return(x[2])\n\
    \  }\n  if(length(x)==8){\n    return(x[2])\n  }\n  if(length(x)==9){\n    return(x[2])\n\
    \  }\n  if(length(x)==10){\n    return(x[2])\n  }\n  if(length(x)==11){\n    return(x[2])\n\
    \  }\n  if(length(x)==12){\n    return(x[2])\n  }\n  if(length(x)==13){\n    return(x[2])\n\
    \  }\n  if(length(x)==14){\n    return(x[2])\n  }\n  if(length(x)==15){\n    return(x[2])\n\
    \  }\n  if(length(x)==16){\n    return(x[2])\n  }\n  if(length(x)==17){\n    return(x[2])\n\
    \  }\n  if(length(x)==18){\n    return(x[2])\n  }\n  if(length(x)==19){\n    return(x[2])\n\
    \  }\n  if(length(x)==20){\n    return(x[2])\n  }\n  if(length(x)==21){\n    return(x[2])\n\
    \  }\n  if(length(x)==22){\n    return(x[2])\n  }\n  if(length(x)==23){\n    return(x[2])\n\
    \  }\n  if(length(x)==24){\n    return(x[2])\n  }\n  if(length(x)==25){\n    return(x[2])\n\
    \  }\n  if(length(x)==26){\n    return(x[2])\n  }\n  if(length(x)==27){\n    return(x[2])\n\
    \  }\n  if(length(x)==28){\n    return(x[2])\n  }\n  if(length(x)==29){\n    return(x[2])\n\
    \  }\n  if(length(x)==30){\n    return(x[2])\n  }\n  if(length(x)==31){\n    return(x[2])\n\
    \  }\n  if(length(x)==32){\n    return(x[2])\n  }\n  if(", "\n  n <- length(l)\n\
    \  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n", "\n  n <- length(l)\n  if (n\
    \ < 1) return(NA)\n  sort(l)[n / 2]\n}\n", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 2) return(NA)\n  m <- floor((n + 1) / 2)\n  return(l[m])\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks for the answer! I added a small edit to the\
    \ question. Could you please take a look?\n<|/ c |>\n<| c |>\nI added a solution\
    \ for your edit. Hope it helps.\n<|/ c |>\n<| a dscore=1 |>\nI wrote a package\
    \ that does this in R:\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n", "\n  l <- sort(l)\n\
    \  length(l) / 2 # median\n}\n", "\n  l <- sort(l)\n  length(l) / 2 # median\n\
    }\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post.\n<|/ c |>\n<| c |>\nThis does provide an answer to the question. `median`\
    \ returns the median of a vector, which is what the OP asked for. `sort` sorts\
    \ a vector, which is what the OP also asked for. `sort` returns a vector, which\
    \ is what the OP asked for. `sort` returns a vector, which is what the OP asked\
    \ for. `sort` returns a vector, which is what the OP asked for. `sort` returns\
    \ a vector, which is what the OP asked for. `sort` returns a vector, which is\
    \ what the OP asked for. `sort` returns a vector, which is what the OP asked for.\
    \ `sort` returns a vector, which is what the OP asked for. `sort` returns a vector,\
    \ which is what the OP asked for. `sort` returns a vector, which is what the OP\
    \ asked for. `sort` returns a vector, which is what the OP asked for. `sort` returns\
    \ a vector, which is what the OP asked for. `sort` returns a vector, which is\
    \ what the OP asked for. `sort` returns a vector, which is what the OP asked for.\
    \ `sort` returns a vector, which is what the OP asked for. `sort` returns a vector,\
    \ which is what the OP asked for. `sort` returns a vector, which is what the OP\
    \ asked for. `sort` returns a vector, which is what the OP asked for. `sort` returns\
    \ a vector, which is what the OP asked for. `sort` returns a vector, which is\
    \ what the OP asked for. `sort` returns a vector, which is what the OP asked for.\
    \ `sort` returns a vector, which is what the OP asked for. `sort` returns a vector,\
    \ which is what the OP asked for. `sort` returns a vector, which is what the OP\
    \ asked for. `sort` returns a vector, which is what the OP asked for. `sort` returns\
    \ a vector, which is what the OP asked for. `sort` returns a vector, which is\
    \ what the OP asked for. `sort` returns a vector, which is what the OP asked for.\
    \ `sort", "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n",
  "\n  l <- sort(l)\n  length(l) / 2 \n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like\
    \ this solution the best. No need to reinvent the wheel. Just a little tweak to\
    \ your code: median(sort(l)) instead of median(l)\n<|/ c |>\n<| c |>\nI like this\
    \ solution too, but I prefer `median(sort(l))` because it's more explicit and\
    \ easier to read. `median(l)` will give the wrong result if `l` is already sorted.\n\
    <|/ c |>\n<| c |>\nI prefer `median(sort(l))` because it's more explicit and easier\
    \ to read. `median(l)` will give the wrong result if `l` is already sorted.\n\
    <|/ c |>\n<| c |>\nI prefer `median(sort(l))` because it's more explicit and easier\
    \ to read. `median(l)` will give the wrong result if `l` is already sorted.\n\
    <|/ c |>\n<| c |>\nI prefer `median(sort(l))` because it's more explicit and easier\
    \ to read. `median(l)` will give the wrong result if `l` is already sorted.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n\
    <| c |>\nThis doesn't work if x is of length 1\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if x is of length 1\n<|/ c |>\n<| c |>\nThis doesn't work if x is of length\
    \ 1\n<|/ c |>\n<| c |>\nThis doesn't work if x is of length 1\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if x is of length 1\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if x is of length 1\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nThis doesn't work if x is of length 1\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work if x is of length 1\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if x is of length 1\n<|/ c |>\n<| c |>\nThis doesn't work if x is of length\
    \ 1\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 2) return(NA)\n  return(l[n/2])\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThis doesn't seem to work if you have a list with negative numbers. `median(c(-10,\
    \ 4, 6, 1000, 10, 20))` returns `NA` instead of `-10`.\n<|/ c |>\n<| c |>\nIt\
    \ works fine for me. `median(c(-10, 4, 6, 1000, 10, 20))` returns `-10`\n<|/ c\
    \ |>\n<| c |>\nI guess I misunderstood your question. My apologies. I thought\
    \ you were asking for the median of the whole list. My mistake.\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    This doesn't seem to work if you have a list with negative numbers. `median(c(-10,\
    \ 4, 6, 1000, 10, 20))` returns `NA` instead of `-10`.\n<|/ c |>\n<| c |>\nI guess\
    \ I misunderstood your question. My apologies. I thought you were asking for the\
    \ median of the whole list. My mistake.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't seem to work if you have a list\
    \ with negative numbers. `median(c(-10, 4, 6, 1000, 10, 20))` returns `NA` instead\
    \ of `-10`.\n<|/ c |>\n<| c |>\nI guess I misunderstood your question. My apologies.\
    \ I thought you were asking for the median of the whole list. My mistake.\n<|/\
    \ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    This doesn't seem to work if you have a list with negative numbers. `median(c(-10,\
    \ 4, 6, 1000, 10, 20))` returns `NA` instead of `-10`.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a dscore=1 |>\n<| ", "\n  n <- length(l)\n  if (n\
    \ < 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work for me. `median(list(c(1,2,3,4,5)))` returns `3` instead of `2.5`.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. Are you sure you copied the code correctly?\
    \ I tested it on R 3.2.3 on Windows 7. `median(list(c(1,2,3,4,5)))` returns `2.5`.\n\
    <|/ c |>\n<| c |>\nI copied it exactly as you wrote it. I also tested it on R\
    \ 3.2.3 on Windows 7. `median(list(c(1,2,3,4,5)))` returns `2.5`.\n<|/ c |>\n\
    <| c |>\nI tested it on R 3.2.3 on Windows 7. `median(list(c(1,2,3,4,5)))` returns\
    \ `2.5`. Are you sure you copied the code correctly? I tested it on R 3.2.3 on\
    \ Windows 7. `median(list(c(1,2,3,4,5)))` returns `2.5`.\n<|/ c |>\n<| c |>\n\
    I tested it on R 3.2.3 on Windows 7. `median(list(c(1,2,3,4,5)))` returns `2.5`.\
    \ Are you sure you copied the code correctly? I tested it on R 3.2.3 on Windows\
    \ 7. `median(list(c(1,2,3,4,5)))` returns `2.5`.\n<|/ c |>\n<| a tags=r,median\
    \ |>\nThe median of a vector is the value that occurs the most frequently in the\
    \ vector.  So you can just use table() to count the frequencies and return the\
    \ value that occurs most frequently.\n<code>\nmedian(table(mylist))\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me. `median(list(c(1,2,3,4,5)))`\
    \ returns `3` instead of `2.5`.\n<|/ c |>\n<| c |>\nThis doesn't work for me.\
    \ `median(list(c(1,2,3,4,5)))` returns `3` instead of `2.5`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for me. `median(list(c(1,2,3,4,5)))` returns `3` instead of\
    \ `2.5`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `median(list(c(1,2,3,4,5)))`\
    \ returns `3` instead of `2.5`.\n<|/ c |>\n", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 2) return(NA)\n  m <- floor(n/2)\n  return(l[m])\n}\n</code>\n<|/ a\
    \ tags=r,median,list |>\n<| c |>\nI like this solution, but I wonder if there\
    \ is a way to do this without having to sort the list. Perhaps something with\
    \ split?\n<|/ c |>\n<| c |>\nI added a solution without sorting.\n<|/ c |>\n<|\
    \ a tags=r,median,list |>\nHere's a solution using split and sapply (which I personally\
    \ find easier to read than lapply):\n<code>\nmedians <- sapply(split(x, seq_along(x)),\
    \ median)\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,median,list |>\nHere's a solution\
    \ using lapply and sapply (which I personally find easier to read than lapply):\n\
    <code>\nmedians <- sapply(split(x, seq_along(x)), median)\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\nmedians <- sapply(split(x, seq_along(x)), median)\n\
    </code>\n<|/ a tags=r,median,list |>\n<| a dscore=1 |>\n<code>\nmedians <- sapply(split(x,\
    \ seq_along(x)), median)\n</code>\n<|/ a tags=r,median,list |>\n<| a dscore=1\
    \ |>\n<code>\nmedians <- sapply(split(x, seq_along(x)), median)\n</code>\n<|/\
    \ a tags=r,median,list |>\n<| a tags=r,median,list |>\n<code>\nmedians <- sapply(split(x,\
    \ seq_along(x)), median)\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    medians <- sapply(split(x, seq_along(x)), median)\n</code>\n<|/ a tags=r,median,list\
    \ |>\n<| a tags=r,median,list |>\n<code>\nmedians <- sapply(split(x, seq_along(x)),\
    \ median)\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,median,list |>\n<code>\nmedians\
    \ <- sapply(split(x, seq_along(x)), median)\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=r,median,list |>\n<code>\nmedians <- sapply(split(x, seq_along(x)), median)\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,median,", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 2) return(NA)\n  m <- floor(n/2)\n  return(l[m])\n}\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the mean of a list of numbers.\n\n\n\
    </text>\n<cell>", "\n  n <- length(l)\n  if (n == 0) return(NA)\n  sort(l)[n /\
    \ 2]\n}\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  m\
    \ <- floor(n/2)\n  return(l[m])\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks\
    \ for your answer. I'm still trying to understand how it works. I understand that\
    \ median is calculated as the middle number in the sorted list, but I don't understand\
    \ how it works. Could you please explain how it works?\n<|/ c |>\n<| c |>\nThe\
    \ median is the middle number in the sorted list. For example, if the list is\
    \ `c(1,3,5,7,9,10)`, the median is `5`. The median is the middle number in the\
    \ sorted list. For example, if the list is `c(1,3,5,7,9,10)`, the median is `5`.\
    \ The median is the middle number in the sorted list. For example, if the list\
    \ is `c(1,3,5,7,9,10)`, the median is `5`. The median is the middle number in\
    \ the sorted list. For example, if the list is `c(1,3,5,7,9,10)`, the median is\
    \ `5`. The median is the middle number in the sorted list. For example, if the\
    \ list is `c(1,3,5,7,9,10)`, the median is `5`. The median is the middle number\
    \ in the sorted list. For example, if the list is `c(1,3,5,7,9,10)`, the median\
    \ is `5`. The median is the middle number in the sorted list. For example, if\
    \ the list is `c(1,3,5,7,9,10)`, the median is `5`. The median is the middle number\
    \ in the sorted list. For example, if the list is `c(1,3,5,7,9,10)`, the median\
    \ is `5`. The median is the middle number in the sorted list. For example, if\
    \ the list is `c(1,3,5,7,9,10)`, the median is `5`. The median is the middle number\
    \ in the sorted list. For example, if the list is `c(1,3,5,7,9,10)`, the median\
    \ is `5`. The median is the middle number in the sorted list. For example, if\
    \ the list is `c(1,3,5,7,9,10)`, the median is `5`. The median is the middle number\
    \ in the sorted list. For example, if the list is `c(1,3,5,7,9,10)`, the median\
    \ is `5`. The median is the middle number in the sorted list. For example, if\
    \ the list is `c(1,3,5,7,9,10)`, the median is `5`. The median is the middle number\
    \ in the sorted list. For example, if the list is `c(1,3,5,7,9,10)`, the median\
    \ is `5`. The median is the middle number in the sorted list. For example, if\
    \ the list is `c(1,3,5,7,9,10)`, the median is `5`. The median is the middle number\
    \ in the sorted list. For example, if the list is `c(1,3,5,7,9,", "\n  l <- sort(l)\n\
    \  length(l) %/% 2\n}\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the mode of a vector. For example, if the vector is [1, 1, 2, 4, 4, 4, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, ", "\n\
    \  l <- sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n  m <- floor(n/2)\n\
    \  return(l[m])\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=r,statistics |>\n<| a dscore=2 |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=r,statistics |>\n<| a dscore=2 |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=r,statistics |>\n<| a |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a dscore=1 tags=r,statistics |>\n<| a tags=r,statistics |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,statistics |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r,statistics |>\n<| a tags=r,statistics |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r,statistics |>\n<| a tags=r,statistics |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r,statistics |>\n<| a tags=r,statistics |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r,statistics |>\n<| a tags=r,statistics |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,statistics |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r,statistics |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r,statistics |>\n<| a tags=r,statistics |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=1 ", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n\
    \  return(l[n / 2])\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't work if\
    \ you have NAs in the vector. Try median([NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA",
  "\n  sort(l)[length(l)%%2 == 0][length(l)%%2 == 1]\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI like this solution, but I believe it would be more efficient to sort\
    \ the list once and only once and to return the middle element of the sorted list.\n\
    <|/ c |>\n<| c |>\nYes, I agree with you. I've edited my answer to reflect your\
    \ suggestion.\n<|/ c |>\n<| a tags=r,list,median |>\nI believe this does what\
    \ you want:\n<code>\nmedian.list <- function(x) {\n  n <- length(x)\n  if(n %%\
    \ 2 == 1) {\n    median(x[(n+1)/2])\n  } else {\n    median(x[(n-1)/2])\n  }\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian.list <- function(x)\
    \ {\n  n <- length(x)\n  if(n %% 2 == 1) {\n    median(x[(n+1)/2])\n  } else {\n\
    \    median(x[(n-1)/2])\n  }\n}\n</code>\n<|/ a tags=r,list,median |>\n<| a dscore=1\
    \ |>\n<code>\nmedian.list <- function(x) {\n  n <- length(x)\n  if(n %% 2 == 1)\
    \ {\n    median(x[(n+1)/2])\n  } else {\n    median(x[(n-1)/2])\n  }\n}\n</code>\n\
    <|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian.list <-\
    \ function(x) {\n  n <- length(x)\n  if(n %% 2 == 1) {\n    median(x[(n+1)/2])\n\
    \  } else {\n    median(x[(n-1)/2])\n  }\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=r,list,median |>\n<code>\nmedian.list <- function(x) {\n  n <- length(x)\n\
    \  if(n %% 2 == 1) {\n    median(x[(n+1)/2])\n  } else {\n    median(x[(n-1)/2])\n\
    \  }\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian.list <-\
    \ function(x) {\n  n <- length(x)\n  if(n %% 2 == 1) {\n    median(x[(n+1)/2])\n\
    \  } else {\n    median(x[(n-1)/2])\n  }\n}\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian.list <- function(x) {\n  ", "\n  l <- sort(l)\n\
    \  return(l[length(l)/2])\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't\
    \ seem to work. `median(list(c(1,2,3), c(4,5,6)))` returns `3` instead of `2`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try `median(c(1,2,3), c(4,5,6))`\n<|/ c |>\n\
    <| c |>\nI see. Sorry, I misunderstood your answer. Thanks for clarifying.\n<|/\
    \ c |>\n<| c |>\nNo problem. I've added a more general solution that should work\
    \ for any number of vectors.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(list(c(1,2,3),\
    \ c(4,5,6)))\n[1] 3\n</code>\n<|/ a dscore=3 |>\n<| a tags=r |>\n<code>\nmedian(list(1:3,\
    \ 4:6))\n[1] 3\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\n<code>\nmedian(list(1:3,\
    \ 4:6))\n[1] 3\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nmedian(list(1:3,\
    \ 4:6))\n[1] 3\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nmedian(list(1:3,\
    \ 4:6))\n[1] 3\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(list(1:3,\
    \ 4:6))\n[1] 3\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedian(list(1:3,\
    \ 4:6))\n[1] 3\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(list(1:3,\
    \ 4:6))\n[1] 3\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nmedian(list(1:3,\
    \ 4:6))\n[1] 3\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nmedian(list(1:3,\
    \ 4:6))\n[1] 3\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(list(1:3,\
    \ 4:6))\n[1] 3\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(list(1:3,\
    \ 4:6))\n[1] 3\n</code>\n<|/ a tags=r |>", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 2) return(NA)\n  m <- floor(n/2)\n  return(l[m])\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| c |>\nThis doesn't seem to work for me. `median(c(1,2,3,4,5))`\
    \ returns `NA`\n<|/ c |>\n<| c |>\n, you're right. I've corrected my answer. Thanks!\n\
    <|/ c |>\n<| c |>\n, I've added a more general solution that works for any type\
    \ of list.\n<|/ c |>\n<| a tags=r |>\nHere's a solution using data.table:\n<code>\n\
    library(data.table)\nmedian.list <- function(x) {\n  dt <- data.table(list(x))\n\
    \  dt[, median(list(x)), by = seq_along(x)]\n}\n</code>\n<|/ a dscore=3 |>\n<|\
    \ c |>\n`data.table` has `median` function\n<|/ c |>\n<| c |>\n, thanks for pointing\
    \ that out. I've updated the answer.\n<|/ c |>\n<| a dscore=3 |>\nA simple and\
    \ fast solution using base R:\n<code>\nmedian.list <- function(x) {\n  n <- length(x)\n\
    \  if(n == 0) return(NA)\n  if(n == 1) return(x[1])\n  if(n == 2) return(x[1])\n\
    \  if(n == 3) return(x[1])\n  if(n == 4) return(x[1])\n  if(n == 5) return(x[1])\n\
    \  if(n == 6) return(x[1])\n  if(n == 7) return(x[1])\n  if(n == 8) return(x[1])\n\
    \  if(n == 9) return(x[1])\n  if(n == 10) return(x[1])\n  if(n == 11) return(x[1])\n\
    \  if(n == 12) return(x[1])\n  if(n == 13) return(x[1])\n  if(n == 14) return(x[1])\n\
    \  if(n == 15) return(x[1])\n  if(n == 16) return(x[1])\n  if(n == 17) return(x[1])\n\
    \  if(n == 18) return(x[1])\n  if(n == 19) return(x[1])\n  if(n == 20) return(x[1])\n\
    \  if(n == 21) return(x[1])\n  if(n == 22) return(x[1])\n  if(n == 23) return(x[1])\n\
    \  if(n == 24) return(x[1])\n  if(n == 25) return(x[1])\n  if(n == 26"]
stop_tokens:
- "\n#"
- "\n```"
