name: HumanEval_121_solution
language: r
prompt: "# Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n# Examples\n# solution([5, 8, 7, 1]) ==> 12\n# solution([3,\
  \ 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321]) ==>0\nsolution <- function(lst)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- solution\n    if(!identical(candidate(c(5,\
  \ 8, 7, 1)), 12)){quit('no', 1)}\n    if(!identical(candidate(c(3, 3, 3, 3, 3)),\
  \ 9)){quit('no', 1)}\n    if(!identical(candidate(c(30, 13, 24, 321)), 0)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(5, 9)), 5)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
  \ 4, 8)), 0)){quit('no', 1)}\n    if(!identical(candidate(c(30, 13, 23, 32)), 23)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(3, 13, 2, 9)), 3)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n\
    </cell>\n<text>\nProblem 7: Write a function that returns a list of all the numbers\
    \ from 1 to n that are divisible by 3.\nExamples\nsolution(5) ==> [1,2,3,4,5]\n\
    solution(10) ==> [1,2,3,4,5,6,7,8,9,10]\n\n</text>\n<cell>\nsolution <- function(n)\
    \ {\n  lst = seq(1, n, 1)\n  lst[seq(1, length(lst), 2)] <- lst[seq(1, length(lst),\
    \ 2)] %% 3\n  lst\n}\n</cell>\n<cell>\nsolution(10)\n</cell>\n<text>\nProblem\
    \ 8: Write a function that returns a list of all the numbers from 1 to n that\
    \ are divisible by 5.\nExamples\nsolution(5) ==> [1,2,3,4,5]\nsolution(10) ==>\
    \ [1,2,3,4,5,6,7,8,9,10]\n\n</text>\n<cell>\nsolution <- function(n) {\n  lst\
    \ = seq(1, n, 1)\n  lst[seq(1, length(lst), 2)] <- lst[seq(1, length(lst), 2)]\
    \ %% 5\n  lst\n}\n</cell>\n<cell>\nsolution(10)\n</cell>\n<text>\nProblem 9: Write\
    \ a function that returns a list of all the numbers from 1 to n that are divisible\
    \ by 3 and 5.\nExamples\nsolution(5) ==> [1,2,3,4,5]\nsolution(10) ==> [1,2,3,4,5,6,7,8,9,10]\n\
    \n</text>\n<cell>\nsolution <- function(n) {\n  lst = seq(1, n, 1)\n  lst[seq(1,\
    \ length(lst), 2)] <- lst[seq(1, length(lst), 2)] %% 3 | lst[seq(1, length(lst),\
    \ 2)] %% 5\n  lst\n}\n</cell>\n<cell>\nsolution(10)\n</cell>\n<text>\nProblem\
    \ 10: Write a function that returns a list of all the numbers from 1 to n that\
    \ are divisible by 3 or 5.\nExamples\nsolution(5) ==> [1,2,3,4,5]\nsolution(10)\
    \ ==> [1,2,3,4,5,6,7,8,9,10]\n\n</text>\n<cell>\nsolution <- function(n) {\n \
    \ lst = seq(1, n, 1)\n  lst[seq(1, length(lst), 2)] <- lst[seq(1, length(lst),\
    \ 2)] %% 3 | lst[seq(1, length(lst), 2)] %% 5\n  lst\n}\n</cell>\n<cell>\nsolution(10)\n\
    </cell>\n<text>\nProblem 11: ", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>\nsolution(lst)\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ a list of all numbers from 1 to n that are divisible by k.\n\n\n</text>\n<cell>",
  "\n  sum(lst[seq_along(lst)%%2 == 1])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n\
    <text>\nProblem 7\nThe Fibonacci sequence is defined by the recurrence relation:\n\
    \n$Fn = F{n-1} + F_{n-2}$\n\nwhere $F_1 = 1$ and $F_2 = 1$. By starting with $F_0\
    \ = 0$ and $F_1 = 1$ and $F_2 = 1$, we can generate the entire sequence by setting\
    \ the respective initial conditions.\n\nFind the $F_n$ for which $F_n = F{n-1}\
    \ + F_{n-2}$, where $0 \\leq n \\leq 30$.\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns a list consisting of the first n prime numbers.\
    \ \nThe function should return all prime numbers less than or equal to n.\nThe\
    \ function should return all prime numbers greater than or equal to n.\nExamples\n\
    solution(10) ==> [2, 3, 5, 7, 11, 13, 17, 19]\nsolution(20) ==> [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97]\nsolution(100) ==> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nsolution(1000) ==> [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\nsolution(10000) ==> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nsolution(10000) ==> [2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97]\nsolution(100000000) ==> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nsolution(100000000)\
    \ ==> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97]\nsolution(1000000000000) ==> [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nsolution(1000000000000)\
    \ ==> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97]\nsolution(100000000000000) ==> [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\
    solution(100000000000000) ==> [2, 3, 5, 7, 11, ", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that returns a list of all numbers between 1 and n, inclusive.\nThe\
    \ function should return a list of integers.\nThe list should be returned in the\
    \ order they appear in the original list.\nExamples\nsolution(10) ==> [1,2,3,4,5,6,7,8,9,10]\n\
    solution(9) ==> [1,2,3,4,5,6,7,8,9]\nsolution(5) ==> [1,2,3,4,5]\nsolution(0)\
    \ ==> []\nsolution(100) ==> [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]\n\
    \n\n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</code>\n<|/ a\
    \ tags=r,list,sum |>\n<| a |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==0])))\n\
    </code>\n<|/ a tags=r,list,sum dscore=2 |>\n<| a |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a tags=r,list,sum dscore=2 |>\n<| a tags=r,list,sum\
    \ |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==0])))\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==0])))\n\
    </code>\n<|/ a tags=r,list,sum |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,sum |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x[x%%2==0])))\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r,list,sum |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==0])))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a tags=r,list,sum |>\n<| a dscore=1 |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x[x%%2==0])))\n</code>\n<|/ a tags=r,list,sum\
    \ |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==0])))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,sum |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x[x%%2==0])))\n</code>\n", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</code>\n<|/ a tags=r,sum,list\
    \ |>\n<| a tags=r,sum,list |>\nHere's a solution using purrr::reduce\n<code>\n\
    library(purrr)\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</code>\n<|/ a |>\n\
    <| a tags=r |>\n<code>\nsum(lst[seq(1, length(lst), 2)])\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nsum(lst[seq(1, length(lst), 2)])\n</code>\n<|/\
    \ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq(1, length(lst), 2)])\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq(1, length(lst), 2)])\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq(1, length(lst),\
    \ 2)])\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq(1, length(lst),\
    \ 2)])\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq(1, length(lst),\
    \ 2)])\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq(1, length(lst),\
    \ 2)])\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq(1, length(lst),\
    \ 2)])\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq(1, length(lst),\
    \ 2)])\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq(1, length(lst),\
    \ 2)])\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq(1, length(lst),\
    \ 2)])\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq(1, length(lst),\
    \ 2)])\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq(1, length(lst),\
    \ 2)])\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq(1, length(lst),\
    \ 2)])\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq(1, length(lst),\
    \ 2)])\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nProblem\
    \ 7: Sum of all odd digits in a number\n\n</text>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a tags=r,function,list\
    \ |>\n<code>\nsumOdd <- function(x) {\n  sum(unlist(lapply(x, function(y) y[seq(1,\
    \ length(y), 2)]))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,function,list |>\n\
    <code>\nsumOdd <- function(x){\n  sum(unlist(lapply(x, function(y) y[seq(1, length(y),\
    \ 2)]))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nsumOdd <- function(x){\n\
    \  sum(unlist(lapply(x, function(y) y[seq(1, length(y), 2)]))\n}\n</code>\n<|/\
    \ a tags=r,function,list |>\n<| a |>\n<code>\nsumOdd <- function(x){\n  sum(unlist(lapply(x,\
    \ function(y) y[seq(1, length(y), 2)]))\n}\n</code>\n<|/ a tags=r,function,list\
    \ dscore=1 |>\n<| a tags=r,function,list |>\n<code>\nsumOdd <- function(x){\n\
    \  sum(unlist(lapply(x, function(y) y[seq(1, length(y), 2)]))\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsumOdd <- function(x){\n  sum(unlist(lapply(x,\
    \ function(y) y[seq(1, length(y), 2)]))\n}\n</code>\n<|/ a tags=r,function,list\
    \ |>\n<| a dscore=1 |>\n<code>\nsumOdd <- function(x){\n  sum(unlist(lapply(x,\
    \ function(y) y[seq(1, length(y), 2)]))\n}\n</code>\n<|/ a tags=r,function,list\
    \ |>\n<| a tags=r,function,list |>\n<code>\nsumOdd <- function(x){\n  sum(unlist(lapply(x,\
    \ function(y) y[seq(1, length(y), 2)]))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nsumOdd <- function(x){\n  sum(unlist(lapply(x, function(y) y[seq(1,\
    \ length(y), 2)]))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a dscore=1 |>\n\
    <code>\nsumOdd <- function(x){\n  sum(unlist(lapply(x, function(y) y[seq(1, length(y),\
    \ 2)]))\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</code>\n<|/ a tags=r,sum,list\
    \ |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==0])))\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a tags=r,sum,list |>\n<| a dscore=2 |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x[x%%2==0])))\n</code>\n<|/ a tags=r,sum,list\
    \ |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==0])))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a tags=r,sum,list |>\n<| a dscore=1 |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x[x%%2==0])))\n</code>\n<|/ a tags=r,sum,list\
    \ |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==0])))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a tags=r,sum,list |>\n<| a dscore=1 |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x[x%%2==0])))\n</code>\n<|/ a tags=r,sum,list\
    \ |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==0])))\n\
    </code>\n<|/ a tags=r,sum,list |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,sum,list |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x[x%%2==0])))\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n</code>\n<|/ a tags=r,sum,list |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x){x[seq(1,length(x),2)]})))\n\
    </code>\n<|/ a tags=r,sum,list |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x){x[seq(1,length(x),2)]})))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x){x[seq(1,length(x),2)]})))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x){x[seq(1,length(x),2)]})))\n\
    </code>\n<|/ a tags=r,sum,list |>\n<| a dscore=0 |>\n<code>\nsum(unlist(lapply(lst,function(x){x[seq(1,length(x),2)]})))\n\
    </code>\n<|/ a tags=r,sum,list |>\n<| a dscore=0 |>\n<code>\nsum(unlist(lapply(lst,function(x){x[seq(1,length(x),2)]})))\n\
    </code>\n<|/ a tags=r,sum,list |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x){x[seq(1,length(x),2)]})))\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| c |>\nThis answer was flagged\
    \ as low-quality because of its length and content. Consider adding some explanation\
    \ as to why this answer works.\n<|/ c |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x){x[seq(1,length(x),2)]})))\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum(unlist(lapply(lst,function(x){x[seq(1,length(x),2)]})))\n\
    </code>\n<|/ a tags=r,sum,list |>\n<| c |>\nPlease add some explanation to your\
    \ answer such that others can learn from it\n<|/ c |>\n<| a tags=r,sum,list |>\n\
    <code>\nsum(unlist(lapply(lst,function(x)", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nProblem 8\nGiven a string,\
    \ return a string where for every character in the original there are three characters\n\
    in front of it and the character itself is behind it. The original string should\
    \ not contain leading or trailing spaces.\n\n'babble' -> 'ba**le'\n\n</text>\n\
    <cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)])))\
    \ \n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)]))) \n</code>\n<|/ a tags=r,sum,list |>\n<| a |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)]))) \n</code>\n<|/ a tags=r,sum,list\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)])))\
    \ \n</code>\n<|/ a tags=r,sum,list |>\n<| a |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)]))) \n</code>\n<|/ a dscore=1 tags=r,sum,list |>\n<| a\
    \ dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)])))\
    \ \n</code>\n<|/ a tags=r,sum,list |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)]))) \n</code>\n<|/ a tags=r,sum,list |>\n<| a dscore=1\
    \ |>\n<code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)]))) \n</code>\n\
    <|/ a tags=r,sum,list |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)]))) \n</code>\n<|/ a dscore=1 |>\n<| a tags=r,sum,list\
    \ |>\n<code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)]))) \n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)]))) \n</code>\n<|/ a tags=r,sum,list |>\n<| a dscore=1\
    \ |>\n<code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)]))) \n</code>\n\
    <|/ a tags=r,", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</code>\n<|/ a tags=r,sum,list\
    \ |>\n<| a dscore=1 |>\nA solution using purrr::map and purrr::reduce\n<code>\n\
    library(purrr)\n"]
stop_tokens:
- "\n#"
- "\n```"
