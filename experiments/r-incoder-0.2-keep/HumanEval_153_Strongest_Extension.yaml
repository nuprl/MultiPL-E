name: HumanEval_153_Strongest_Extension
language: r
prompt: "# You will be given the name of a class (a string) and a list of extensions.\n\
  # The extensions are to be used to load additional classes to the class. The\n#\
  \ strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  # letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n# in the extension's name, the strength is given by the fraction CAP - SM. \n\
  # You should find the strongest extension and return a string in this \n# format:\
  \ ClassName.StrongestExtensionName.\n# If there are two or more extensions with\
  \ the same strength, you should\n# choose the one that comes first in the list.\n\
  # For example, if you are given \"Slices\" as the class and a list of the\n# extensions:\
  \ ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes'\
  \ since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n#\
  \ Example:\n# for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
  Strongest_Extension <- function(class_name, extensions) {"
tests: "test_humaneval <- function() {\ncandidate <- Strongest_Extension\n    if(!identical(candidate('Watashi',\
  \ c('tEN', 'niNE', 'eIGHt8OKe')), 'Watashi.eIGHt8OKe')){quit('no', 1)}\n    if(!identical(candidate('Boku123',\
  \ c('nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg')), 'Boku123.YEs.WeCaNe')){quit('no',\
  \ 1)}\n    if(!identical(candidate('__YESIMHERE', c('t', 'eMptY', 'nothing', 'zeR00',\
  \ 'NuLl__', '123NoooneB321')), '__YESIMHERE.NuLl__')){quit('no', 1)}\n    if(!identical(candidate('K',\
  \ c('Ta', 'TAR', 't234An', 'cosSo')), 'K.TAR')){quit('no', 1)}\n    if(!identical(candidate('__HAHA',\
  \ c('Tab', '123', '781345', '-_-')), '__HAHA.123')){quit('no', 1)}\n    if(!identical(candidate('YameRore',\
  \ c('HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-')), 'YameRore.okIWILL123')){quit('no',\
  \ 1)}\n    if(!identical(candidate('finNNalLLly', c('Die', 'NowW', 'Wow', 'WoW')),\
  \ 'finNNalLLly.WoW')){quit('no', 1)}\n    if(!identical(candidate('_', c('Bb', '91245')),\
  \ '_.Bb')){quit('no', 1)}\n    if(!identical(candidate('Sp', c('671235', 'Bb')),\
  \ 'Sp.671235')){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  \n  # Your code here\n  \n}\n", "\n  \n  # Initialize a list to\
    \ store the extensions' strengths.\n  extensions_strength <- list()\n  \n  # Iterate\
    \ through the extensions and find the strongest one.\n  for(i in 1:length(extensions))\
    \ {\n    \n    # Get the extension's name.\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - i)\n    \n    # Get the extension's strength.\n    extension_strength\
    \ <- toupper(substr(extension_name, 1, nchar(extension_name) - i)) \n    \n  \
    \  # Add the extension's strength to the list.\n    extensions_strength[[i]] <-\
    \ extension_strength\n  }\n  \n  # Sort the extensions strength according to the\
    \ strength values.\n  extensions_strength <- sort(extensions_strength, decreasing\
    \ = TRUE)\n  \n  # Return the strongest extension.\n  return(paste(substr(class_name,\
    \ 1, nchar(class_name) - 1), extensions_strength[[1]]))\n}\n", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n", "\n  extension_strength <- sapply(extensions, function(x) {\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(substr(x, 2, nchar(x)))\n    x\
    \ <- toupper(substr(x, 1, 1))\n    x <- tolower(", "\n  extension_strength <-\
    \ 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - i - 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name) - i - 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- tolower(extension_name)\n \
    \   extension_name <- toupper(extension_name)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    \n    extension_strength <- extension_strength + \n      length(extension_name)\
    \ - length(toupper(extension_name))\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i - 1)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i - 1)\n    extension_name <- substr(extension_name, 1, nchar(extension_name))\n\
    \    extension_name <- tolower(extension_name)\n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    \n    extension_strength\
    \ <- extension_strength + \n      length(extension_name) - length(toupper(extension_name))\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i - 1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name) - i - 1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name))\n    extension_name\
    \ <- tolower(extension_name)\n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    \n    extension_strength\
    \ <- extension_strength + \n      length(extension_name) - length(toupper(extension_name))\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i - 1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name) - i - 1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name))\n    extension_name\
    \ <- tolower(", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, i, i)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 2, nchar(extension_name))\n\
    \    extension_name <- toupper(extension_name)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- tolower(extension_name)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i)\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name) - i)\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name) - i)\n    extension_strength\
    \ <- extension_strength + \n      length(toupper(extension_name)) - length(tolower(extension_name))\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  if(extension_strength < 0)\
    \ return(class_name)\n  \n  extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - \n    length(extensions) + 1)\n  \n  return(paste(class_name, extension_name,\
    \ sep = '.'))\n}\n", "\n  \n  # Your code here\n  \n}\n", "\n  extensions_count\
    \ <- length(extensions)\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count + 1\n  extension", "\n  \n  extension_strength <- 0\n  \n\
    \  for(i in 1:length(extensions)) {\n    \n    extension_name <- substr(class_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    \n    extension_strength\
    \ <- extension_strength + \n      length(extension_name) - length(tolower(extension_name))\n\
    \    \n  }\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  if(extension_strength > 0) {\n    \n    extension_name <- substr(class_name,\
    \ 1, length(class_name))\n    extension_name <- substr(extension_name, 1, length(extension_name))\n\
    \    \n    return(paste0(class_name, \".\", extension_name))\n    \n  } else {\n\
    \    \n    return(class_name)\n    \n  }\n  \n}\n", "\n  extension_strength <-\
    \ 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_strength <- extension_strength + toupper(extension_name)\
    \ - tolower(extension_name)\n  }\n  \n  if(extension_strength > 0) {\n    extension_strength\
    \ <- extension_strength - 1\n  }\n  \n  return(paste(class_name, extensions[which.max(extension_strength)],\
    \ sep = '.'))\n}\n", "\n  extensions_count <- length(extensions)\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extension",
  "\n  extension_strength <- 0\n  extension_name <- \"\"\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- paste(extension_name, extensions[i], sep = \".\")\n\
    \    extension_strength <- extension_strength + toupper(class_name[i]) - toupper(extension_name[i])\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    if(extension_strength > 0) break\n    extension_strength <- extension_strength\
    \ - toupper(class_name[i]) - toupper(extension_name[i])\n  }\n  \n  return(paste(class_name,\
    \ extension_name, sep = \".\"))\n}\n", "\n  extension_strength <- 0\n  \n  for\
    \ (i in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, i)\n\
    \    extension_name <- substr(extension_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    ", "\n  extensions_count\
    \ <- length(extensions)\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extension", "\n  \n  # Your code here\n  \n}\n</cell>\n\
    <cell>", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n\
    \    extension_name <- substr(class_name, i, i)\n    extension_strength <- extension_strength\
    \ + toupper(extension_name) - tolower(extension_name)\n  }\n  \n  if(extension_strength\
    \ > 0) {\n    return(paste0(class_name, '.', extensions[which.max(extension_strength)]))\n\
    \  } else {\n    return(class_name)\n  }\n}\n", "\n  \n  # Initialize a list to\
    \ store the strongest extension\n  strongest_extension <- list()\n  \n  # Loop\
    \ through the list of extensions\n  for(i in 1:length(extensions)) {\n    \n \
    \   # Initialize a counter to keep track of the number of uppercase letters\n\
    \    # in the extension\n    counter <- 0\n    \n    # Loop through the letters\
    \ in the extension\n    for(j in 1:length(extensions[[i]])) {\n      \n      #\
    \ Increment the counter by 1\n      counter <- counter + 1\n      \n      # If\
    \ the letter is uppercase\n      if(toupper(extensions[[i]][[j]]) == extensions[[i]][[j]])\
    \ {\n        \n        # Update the counter\n        counter <- counter - 1\n\
    \      }\n    }\n    \n    # If the counter is less than zero, append the extension\
    \ to the list\n    if(counter < 0) {\n      strongest_extension <- c(strongest_extension,\
    \ extensions[[i]])\n    }\n  }\n  \n  # Return the strongest extension\n  return(paste(class_name,\
    \ strongest_extension[which.max(strongest_extension)], sep = '.'))\n}\n", "\n\
    \  \n  extension_list <- sort(extensions, decreasing = TRUE)\n  \n  strength <-\
    \ 0\n  \n  for(i in 1:length(extension_list)) {\n    \n    extension_name <- substr(extension_list[i],\
    \ 1, nchar(extension_list[i])-1)\n    \n    extension_name <- tolower(extension_name)\n\
    \    \n    extension_name <- gsub(\"[^A-Z]\", \"\", extension_name)\n    \n  \
    \  extension_name <- gsub(\"^\", \"\", extension_name)\n    \n    extension_name\
    \ <- gsub(\"$\", \"\", extension_name)\n    \n    extension_name <- gsub(\"_\"\
    , \"\", extension_name)\n    \n    extension_name <- gsub(\"\\\\\", \"\", extension_name)\n\
    \    \n    extension_name <- gsub(\"\\\\\", \"\", extension_name)\n    \n    extension_name\
    \ <- gsub(\"\\\\\", \"\", extension_name)\n    \n    extension_name <- gsub(\"\
    \\\\\", \"\", extension_name)\n    \n    extension_name <- gsub(\"\\\\\", \"\"\
    , extension_name)\n    \n    extension_name <- gsub(\"\\\\\", \"\", extension_name)\n\
    \    \n    extension_name <- gsub(\"\\\\\", \"\", extension_name)\n    \n    extension_name\
    \ <- gsub(\"\\\\\", \"\", extension_name)\n    \n    extension_name <- gsub(\"\
    \\\\\", \"\", extension_name)\n    \n    extension_name <- gsub(\"\\\\\", \"\"\
    , extension_name)\n    \n    extension_name <- gsub(\"\\\\\", \"\", extension_name)\n\
    \    \n    extension_name <- gsub(\"\\\\\", \"\", extension_name)\n    \n    extension_name\
    \ <- gsub(\"\\\\\", \"\", extension_name)\n    \n    extension_name <- gsub(\"\
    \\\\\", \"\", extension_name)\n    \n    extension_name <- gsub(\"\\\\\", \"\"\
    , extension_name)\n    \n    extension_name <- gsub(\"\\\\\", \"\", extension_name)\n\
    \    \n    extension_name <- gsub(\"\\\\\", \"\", extension_name)\n    \n    extension_name\
    \ <- gsub(\"\\\\\", \"\", extension_name)\n    \n    extension_name <- gsub(\"\
    \\\\\", \"\", extension_name)\n    \n    extension_name <- gsub(\"\\\\\", \"\"\
    , extension_name)\n    \n    extension_name <- gsub(\"\\\\\", \"\", extension_name)\n\
    \    \n    extension_name <- gsub(\"\\\\\", \"\", extension_name)\n    \n    extension_name\
    \ <- gsub(\"\\\\\", \"\", extension_name)\n    \n    extension_name <- gsub(\"",
  "\n  \n  # Write your code here\n  \n}\n</cell>\n<text>\nNow that you have written\
    \ the function, you can test it by running the following cell:\n\n\n</text>\n\
    <cell>", "\n  extension_strength <- sapply(extensions, function(x) \n    sum(toupper(substr(x,\
    \ 1, 1)) %in% toupper(substr(class_name, 1, 1))) - \n    sum(tolower(substr(x,\
    \ 1, 1)) %in% tolower(substr(class_name, 1, 1))))\n  names(extension_strength)\
    \ <- extensions\n  names(extension_strength) <- names(extension_strength)[which.max(extension_strength)]\n\
    \  paste(class_name, names(extension_strength), sep = \".\")\n}\n</cell>\n<cell>",
  "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name\
    \ <- substr(class_name, 1, nchar(class_name) - i - 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name) - i)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- toupper(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- tolower(extension_name)\n\
    \    \n    extension_strength <- extension_strength + \n      ifelse(extension_name\
    \ == extensions[i], 1, -1)\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  if(extension_strength\
    \ > 0) return(paste0(class_name, extensions[which.max(extension_strength)]))\n\
    \  \n  return(class_name)\n}\n", "\n  \n  # Initialize a list to store the strongest\
    \ extension\n  strongest_extension <- list()\n  \n  # Initialize a counter to\
    \ keep track of the number of uppercase letters\n  cap_counter <- 0\n  \n  # Initialize\
    \ a counter to keep track of the number of lowercase letters\n  sm_counter <-\
    \ 0\n  \n  # Loop through the list of extensions\n  for(i in 1:length(extensions))\
    \ {\n    \n    # Get the extension\n    extension <- extensions[i]\n    \n   \
    \ # Get the number of uppercase letters\n    cap_counter <- cap_counter + length(toupper(extension))\n\
    \    \n    # Get the number of lowercase letters\n    sm_counter <- sm_counter\
    \ + length(tolower(extension))\n    \n    # If the number of uppercase letters\
    \ is greater than the number of lowercase letters\n    if(cap_counter > sm_counter)\
    \ {\n      \n      # Append the extension to the strongest extension\n      strongest_extension\
    \ <- c(strongest_extension, extension)\n      \n      # Reset the counters\n \
    \     cap_counter <- 0\n      sm_counter <- 0\n      \n      # Break the loop\n\
    \      break\n    }\n  }\n  \n  # Return the strongest extension\n  return(paste(class_name,\
    \ strongest_extension, sep = '.'))\n}\n", "\n  extension_strength <- 0\n  \n \
    \ for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1,\
    \ i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n\
    \    extension_strength <- extension_strength + toupper(substr(class_name, i,\
    \ i)) - toupper(substr(extensions[i], i, i))\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  if(extension_strength < 0) return(paste(substr(class_name,\
    \ 1, 1), substr(class_name, 1, 1), sep = '.'))\n  \n  if(extension_strength >\
    \ 0) return(paste(substr(class_name, 1, 1), substr(class_name, 1, 1), substr(extensions[which.min(extension_strength)],\
    \ 1, 1), sep = '.'))\n}\n", "\n  extensions <- sort(extensions, decreasing = TRUE)\n\
    \  strength <- 0\n  for(i in 1:length(extensions)) {\n    cap <- str_count(class_name,\
    \ substr(extensions[i], 1, 1))\n    sm <- str_count(class_name, substr(extensions[i],\
    \ 2, 2))\n    strength <- strength + (cap - sm)\n  }\n  return(paste0(class_name,\
    \ '.', extensions[strength]))\n}\n", "\n  extension_strength <- 0\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - nchar(extensions[i]) - 1)\n    extension_strength <- extension_strength +\
    \ toupper(extension_name) - tolower(extension_name)\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  for(i in 1:length(extensions)) {\n    if(extension_strength > 0) break\n\
    \    extension_name <- substr(class_name, 1, nchar(class_name) - nchar(extensions[i])\
    \ - 1)\n    extension_strength <- extension_strength + toupper(extension_name)\
    \ - tolower(extension_name)\n  }\n  \n  return(paste(class_name, extensions[which.max(extension_strength)],\
    \ sep = '.'))\n}\n", "\n  \n  # Write your code here\n  \n}\n", "\n  \n  # Write\
    \ your code here.\n  \n}\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ a string and returns the number of uppercase letters in it.\n\n\n</text>\n<cell>",
  "\n  \n  # Write your code here\n  \n}\n", "\n  \n  # Write your code here\n  \n\
    }\n</cell>\n<text>\nTest your code\nRun the cell below to test your code.\n\n\n\
    </text>\n<cell>", "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>", "\n  \n\
    \  # Initialize a list to store the strongest extension\n  strongest_extension\
    \ <- list()\n  \n  # Loop through the list of extensions\n  for(i in 1:length(extensions))\
    \ {\n    \n    # Initialize a vector to store the letters in the extension\n \
    \   letters <- c()\n    \n    # Loop through the letters in the extension\n  \
    \  for(j in 1:length(extensions[[i]])) {\n      \n      # If the letter is uppercase\n\
    \      if(toupper(extensions[[i]][[j]]) == extensions[[i]][[j]]) {\n        \n\
    \        # Add the letter to the vector\n        letters <- c(letters, toupper(extensions[[i]][[j]]))\n\
    \      }\n      \n      # If the letter is lowercase\n      else if(tolower(extensions[[i]][[j]])\
    \ == extensions[[i]][[j]]) {\n        \n        # Add the letter to the vector\n\
    \        letters <- c(letters, tolower(extensions[[i]][[j]]))\n      }\n    }\n\
    \    \n    # If the vector has more than one letter\n    if(length(letters) >\
    \ 1) {\n      \n      # Sort the letters in ascending order\n      letters <-\
    \ sort(letters)\n      \n      # Get the index of the first letter\n      first_letter\
    \ <- which(letters == letters[1])\n      \n      # Get the index of the last letter\n\
    \      last_letter <- which(letters == letters[length(letters)])\n      \n   \
    \   # Get the difference between the two indices\n      difference <- last_letter\
    \ - first_letter\n      \n      # Get the strength of the extension\n      strength\
    \ <- length(letters) - difference\n      \n      # If the strength of the extension\
    \ is greater than 0\n      if(strength > 0) {\n        \n        # Add the extension\
    \ to the strongest extension\n        strongest_extension <- c(strongest_extension,\
    \ paste(class_name, letters[first_letter], letters[last_letter], sep = '.'))\n\
    \      }\n    }\n  }\n  \n  # Return the strongest extension\n  return(strongest_extension[which.max(strongest_extension)])\n\
    }\n</cell>\n<cell>", "\n  \n  # Initialize a list to store the extensions' strengths.\n\
    \  strengths <- list()\n  \n  # Loop through the extensions and add them to the\
    \ list.\n  for(i in 1:length(extensions)) {\n    \n    # Get the extension's name\
    \ as a string.\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i)\n    \n    # Get the extension's strength.\n    extension_strength <- toupper(substr(extension_name,\
    \ 1, nchar(extension_name) - i))\n    \n    # Add the extension's strength to\
    \ the list.\n    strengths[[i]] <- extension_strength\n  }\n  \n  # Sort the list\
    \ by the strengths.\n  strengths <- sort(strengths, decreasing = TRUE)\n  \n \
    \ # Return the strongest extension.\n  return(paste(substr(class_name, 1, nchar(class_name)\
    \ - strengths[1]), \n                strengths[1]))\n}\n</cell>\n<cell>", "\n\
    \  \n  extension_list <- sort(extensions, decreasing = TRUE)\n  \n  strongest_extension\
    \ <- paste(class_name, extension_list[[1]], sep = '.')\n  \n  for (i in 2:length(extension_list))\
    \ {\n    if (extension_list[[i]] == extension_list[[i-1]]) {\n      strongest_extension\
    \ <- paste(strongest_extension, extension_list[[i]], sep = '.')\n    } else {\n\
    \      break\n    }\n  }\n  \n  return(strongest_extension)\n}\n", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n", "\n  \n  # Initialize a list to store the\
    \ strongest extension\n  strongest_extension <- list()\n  \n  # Initialize a counter\
    \ to keep track of how many letters are in the extension\n  letter_counter <-\
    \ 0\n  \n  # Initialize a counter to keep track of how many letters are in the\
    \ class name\n  class_name_counter <- 0\n  \n  # Loop through the extensions and\
    \ find the strongest one\n  for (i in 1:length(extensions)) {\n    \n    # If\
    \ the letter at the current position in the class name is the same as the letter\
    \ at the current position in the extension\n    if (substr(class_name, letter_counter,\
    \ 1) %in% substr(extensions[i], letter_counter, 1)) {\n      \n      # Increment\
    \ the counter to keep track of how many letters are in the class name\n      class_name_counter\
    \ <- class_name_counter + 1\n      \n      # If the letter at the current position\
    \ in the class name is the same as the letter at the current position in the extension\n\
    \      if (substr(class_name, letter_counter, 1) %in% substr(extensions[i], letter_counter,\
    \ 1)) {\n        \n        # Increment the counter to keep track of how many letters\
    \ are in the extension\n        letter_counter <- letter_counter + 1\n       \
    \ \n        # Append the extension to the strongest extension\n        strongest_extension\
    \ <- c(strongest_extension, extensions[i])\n      }\n    }\n  }\n  \n  # Return\
    \ the strongest extension\n  return(strongest_extension)\n}\n", "\n  \n  extension_list\
    \ <- sort(extensions, decreasing = TRUE)\n  \n  if(length(extension_list) == 1)\
    \ {\n    return(paste0(class_name, extension_list[1]))\n  } else {\n    \n   \
    \ strength <- -1\n    \n    for(i in 1:length(extension_list)) {\n      \n   \
    \   if(strength < 0) break\n      \n      if(substr(extension_list[i], 1, 1) >\
    \ substr(extension_list[i], 2, 1)) {\n        strength <- strength - 1\n     \
    \ } else {\n        strength <- strength + 1\n      }\n    }\n    \n    return(paste0(class_name,\
    \ extension_list[strength]))\n  }\n}\n", "\n  extension_strength <- 0\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i - 1)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name))\n\
    \    extension_name <- toupper(extension_name)\n    extension_name <- tolower(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- substr(extension_name, 1, nchar(extension_name))\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name))\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name))\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- substr(extension_name, 1, nchar(extension_name))\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name))\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name))\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- substr(extension_name, 1, nchar(extension_name))\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name))\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name))\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- substr(extension_name, 1, nchar(extension_name))\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name))\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name))\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- substr(extension_name, 1, nchar(extension_name))\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name))\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name))\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- substr(extension_name, 1, nchar(extension_name))\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name))\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name))\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- substr(extension_name, 1, nchar(extension_name))\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name))\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name))\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- substr(extension_name, 1, ",
  "\n  \n  # Initialize a list to store the strongest extension\n  strongest_extension\
    \ <- list()\n  \n  # Initialize a counter to keep track of the number of uppercase\
    \ letters\n  cap_counter <- 0\n  \n  # Initialize a counter to keep track of the\
    \ number of lowercase letters\n  sm_counter <- 0\n  \n  # Loop through the list\
    \ of extensions\n  for(i in 1:length(extensions)) {\n    \n    # Get the extension\n\
    \    extension <- extensions[i]\n    \n    # Get the number of uppercase letters\n\
    \    cap_counter <- cap_counter + length(extension)\n    \n    # Get the number\
    \ of lowercase letters\n    sm_counter <- sm_counter + length(tolower(extension))\n\
    \    \n    # If the number of uppercase letters is greater than the number of\
    \ lowercase letters\n    if(cap_counter > sm_counter) {\n      \n      # Append\
    \ the extension to the strongest extension\n      strongest_extension <- c(strongest_extension,\
    \ extension)\n      \n      # Break the loop\n      break\n    }\n  }\n  \n  #\
    \ Return the strongest extension\n  return(paste(class_name, strongest_extension,\
    \ sep = '.'))\n}\n", "\n  \n  extension_list <- sort(extensions, decreasing =\
    \ TRUE)\n  \n  if(length(extension_list) == 1) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 2) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 3) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 4) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 5) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 6) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 7) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 8) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 9) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 10) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 11) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 12) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 13) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 14) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 15) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 16) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 17) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 18) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 19) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 20) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) == 21) {\n    return(paste0(class_name,\
    \ extension", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n", "\n  extension_strength <- 0\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, i, i+1)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- tolower(extension_name)\n\
    \    extension_strength <- extension_strength + \n      length(extension_name)\
    \ - length(toupper(extension_name))\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, i, i+1)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- tolower(extension_name)\n\
    \    \n    if(extension_strength > extension_strength[i]) {\n      extension_name\
    \ <- extension_name\n      extension_strength <- extension_strength[i]\n    }\n\
    \  }\n  \n  return(paste(class_name, extension_name, sep = \".\"))\n}\n", "\n\
    \  \n  extension_list <- strsplit(extensions, split = '')\n  \n  extension_strength\
    \ <- sapply(extension_list, function(x) {\n    \n    x <- toupper(x)\n    x <-\
    \ tolower(x)\n    \n    x <- strsplit(x, split = '')\n    \n    x <- sapply(x,\
    \ function(y) {\n      \n      y <- toupper(y)\n      y <- tolower(y)\n      \n\
    \      y <- strsplit(y, split = '')\n      \n      y <- sapply(y, function(z)\
    \ {\n        \n        z <<- toupper(z)\n        z <<- tolower(z)\n        \n\
    \        z <<- strsplit(z, split = '')\n        \n        z <<- sapply(z, function(w)\
    \ {\n          \n          w <<- toupper(w)\n          w <<- tolower(w)\n    \
    \      \n          w <<- strsplit(w, split = '')\n          \n          w <<-\
    \ sapply(w, function(x) {\n            \n            x <<- toupper(x)\n      \
    \      x <<- tolower(x)\n            \n            x <<- strsplit(x, split = '')\n\
    \            \n            x <<- sapply(x, function(y) {\n              \n   \
    \           y <<- toupper(y)\n              y <<- tolower(y)\n              \n\
    \              y <<- strsplit(y, split = '')\n              \n              y\
    \ <<- sapply(y, function(z) {\n                \n                z <<- toupper(z)\n\
    \                z <<- tolower(z)\n                \n                z <<- strsplit(z,\
    \ split = '')\n                \n                z <<- sapply(z, function(w) {\n\
    \                  \n                  w <<- toupper(w)\n                  w <<-\
    \ tolower(w)\n                  \n                  w <<- strsplit(w, split =\
    \ '')\n                  \n                  w <<- sapply(w, function(x) {\n \
    \                   \n                    x <<- toupper(x)\n                 \
    \   x <<- tolower(x)\n                    \n                    x <<- strsplit(x,\
    \ split = '')\n                    \n                    x <<- sapply(x, function(y)\
    \ {\n                      \n                      y <<- toupper(y)\n        \
    \              y <<- tolower(y)\n                      \n                    \
    \  y <<- strsplit(y, split = '')\n                      \n                   \
    \   y <<- sapply(y, function(z) {\n                        \n                \
    \        z <<- toupper(z)\n                        z <<- tolower(z)\n        \
    \                \n                        z <<- strsplit(z, split = '')\n   \
    \                     \n                        z <<- sapply(z, function(w) {\n\
    \                          \n                          w <<", "\n  extensions_count\
    \ <- length(extensions)\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extensions_count <- extensions_count - 1\n  extensions_count\
    \ <- extensions_count - 1\n  extension", "\n  extension_strength <- 0\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i)\n    extension_strength <- extension_strength + toupper(extension_name)\
    \ %in% extensions\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i)\n    extension_strength <- extension_strength + tolower(extension_name)\
    \ %in% extensions\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i)\n    extension_strength <- extension_strength + toupper(extension_name)\
    \ %in% extensions\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i)\n    extension_strength <- extension_strength + tolower(extension_name)\
    \ %in% extensions\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i)\n    extension_strength <- extension_strength + toupper(extension_name)\
    \ %in% extensions\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i)\n    extension_strength <- extension_strength + tolower(extension_name)\
    \ %in% extensions\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i)\n    extension_strength <- ", "\n  \n  extension_list <- sort(extensions,\
    \ decreasing = TRUE)\n  \n  if(length(extension_list) == 0) {\n    return(class_name)\n\
    \  }\n  \n  if(length(extension_list) == 1) {\n    return(paste0(class_name, extension_list[1]))\n\
    \  }\n  \n  if(length(extension_list) == 2) {\n    return(paste0(class_name, extension_list[1],\
    \ extension_list[2]))\n  }\n  \n  if(length(extension_list) == 3) {\n    return(paste0(class_name,\
    \ extension_list[1], extension_list[2], extension_list[3]))\n  }\n  \n  if(length(extension_list)\
    \ == 4) {\n    return(paste0(class_name, extension_list[1], extension_list[2],\
    \ extension_list[3], extension_list[4]))\n  }\n  \n  if(length(extension_list)\
    \ == 5) {\n    return(paste0(class_name, extension_list[1], extension_list[2],\
    \ extension_list[3], extension_list[4], extension_list[5]))\n  }\n  \n  if(length(extension_list)\
    \ == 6) {\n    return(paste0(class_name, extension_list[1], extension_list[2],\
    \ extension_list[3], extension_list[4], extension_list[5], extension_list[6]))\n\
    \  }\n  \n  if(length(extension_list) == 7) {\n    return(paste0(class_name, extension_list[1],\
    \ extension_list[2], extension_list[3], extension_list[4], extension_list[5],\
    \ extension_list[6], extension_list[7]))\n  }\n  \n  if(length(extension_list)\
    \ == 8) {\n    return(paste0(class_name, extension_list[1], extension_list[2],\
    \ extension_list[3], extension_list[4], extension_list[5], extension_list[6],\
    \ extension_list[7], extension_list[8]))\n  }\n  \n  if(length(extension_list)\
    \ == 9) {\n    return(paste0(class_name, extension_list[1], extension_list[2],\
    \ extension_list[3], extension_list[4], extension_list[5], extension_list[6],\
    \ extension_list[7], extension_list[8], extension_list[9]))\n  }\n  \n  if(length(extension_list)\
    \ == 10) {\n    return(paste0(class_name, extension_list[1], extension_list[2],\
    \ extension_list[3], extension_list[4], extension_list[5], extension_list[6],\
    \ extension_list[7], extension_list[8], extension_list[9], extension_list[10]))\n\
    \  }\n  \n  if(length(extension_list) == 11) {\n    return(paste0(class_name,\
    \ extension_list[1], extension_list[2], extension_list[3], extension_list[4],\
    \ extension_list[5], extension_list[6], extension_list[7], extension_list[8],\
    \ extension_list[9], extension_list[10], extension_list[11]))\n  }\n  \n  if(length(extension_list)\
    \ == 12) {\n    return(paste0(", "\n  extension_strength <- 0\n  \n  for (i in\
    \ 1:length(extensions)) {\n    extension_name <- substr(class_name, i, i)\n  \
    \  extension_name <- substr(extension_name, 1, 1)\n    extension_name <- tolower(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- toupper(extension_name)\n\
    \    \n    extension_strength <- extension_strength + \n      length(extension_name)\
    \ - length(toupper(extension_name))\n  }\n  \n  extension_strength <- extension_strength\
    \ / length(extensions)\n  \n  extension_name <- substr(class_name, 1, i)\n  extension_name\
    \ <- substr(extension_name, 1, 1)\n  extension_name <- tolower(extension_name)\n\
    \  extension_name <- substr(extension_name, 1, 1)\n  extension_name <- toupper(extension_name)\n\
    \  \n  extension_strength <- extension_strength + \n    length(extension_name)\
    \ - length(toupper(extension_name))\n  \n  extension_strength <- extension_strength\
    \ / length(extensions)\n  \n  extension_name <- substr(class_name, i, i)\n  extension_name\
    \ <- substr(extension_name, 1, 1)\n  extension_name <- tolower(extension_name)\n\
    \  extension_name <- substr(extension_name, 1, 1)\n  extension_name <- toupper(extension_name)\n\
    \  \n  extension_strength <- extension_strength + \n    length(extension_name)\
    \ - length(toupper(extension_name))\n  \n  extension_strength <- extension_strength\
    \ / length(extensions)\n  \n  extension_name <- substr(class_name, i, i)\n  extension_name\
    \ <- substr(extension_name, 1, 1)\n  extension_name <- tolower(extension_name)\n\
    \  extension_name <- substr(extension_name, 1, 1)\n  extension_name <- toupper(extension_name)\n\
    \  \n  extension_strength <- extension_strength + \n    length(extension_name)\
    \ - length(toupper(extension_name))\n  \n  extension_strength <- extension_strength\
    \ / length(extensions)\n  \n  extension_name <- substr(class_name, i, i)\n  extension_name\
    \ <- substr(extension_name, 1, 1)\n  extension_name <- tolower(extension_name)\n\
    \  extension_name <- substr(extension_name, 1, 1)\n  extension_name <- toupper(extension_name)\n\
    \  \n  extension_strength <- extension_strength + \n    length(extension_name)\
    \ - length(toupper(extension_name))\n  \n  extension_strength <- extension_strength\
    \ / length(extensions)\n  \n  extension_name <- substr(class_name, i, i)\n  extension_name\
    \ <- ", "\n  \n  # Initialize a list to store the strongest extension\n  strongest_extension\
    \ <- list()\n  \n  # Initialize a counter to keep track of the number of uppercase\
    \ letters\n  upper_case_count <- 0\n  \n  # Initialize a counter to keep track\
    \ of the number of lowercase letters\n  lower_case_count <- 0\n  \n  # Initialize\
    \ a counter to keep track of the number of digits\n  digit_count <- 0\n  \n  #\
    \ Initialize a counter to keep track of the number of special characters\n  special_char_count\
    \ <- 0\n  \n  # Initialize a counter to keep track of the number of words\n  word_count\
    \ <- 0\n  \n  # Initialize a counter to keep track of the number of sentences\n\
    \  sentence_count <- 0\n  \n  # Initialize a counter to keep track of the number\
    \ of characters\n  char_count <- 0\n  \n  # Initialize a counter to keep track\
    \ of the number of punctuations\n  punctuation_count <- 0\n  \n  # Initialize\
    \ a counter to keep track of the number of sentences\n  sentence_count <- 0\n\
    \  \n  # Initialize a counter to keep track of the number of words\n  word_count\
    \ <- 0\n  \n  # Initialize a counter to keep track of the number of characters\n\
    \  char_count <- 0\n  \n  # Initialize a counter to keep track of the number of\
    \ punctuations\n  punctuation_count <- 0\n  \n  # Initialize a counter to keep\
    \ track of the number of sentences\n  sentence_count <- 0\n  \n  # Initialize\
    \ a counter to keep track of the number of words\n  word_count <- 0\n  \n  # Initialize\
    \ a counter to keep track of the number of characters\n  char_count <- 0\n  \n\
    \  # Initialize a counter to keep track of the number of punctuations\n  punctuation_count\
    \ <- 0\n  \n  # Initialize a counter to keep track of the number of sentences\n\
    \  sentence_count <- 0\n  \n  # Initialize a counter to keep track of the number\
    \ of words\n  word_count <- 0\n  \n  # Initialize a counter to keep track of the\
    \ number of characters\n  char_count <- 0\n  \n  # Initialize a counter to keep\
    \ track of the number of punctuations\n  punctuation_count <- 0\n  \n  # Initialize\
    \ a counter to keep track of the number of sentences\n  sentence_count <- 0\n\
    \  \n  # Initialize a counter to keep track of the number of words\n  word_count\
    \ <- 0\n  \n  # Initialize a counter to keep track of the number of characters\n\
    \  char_count <- 0\n  \n  # Initialize a counter to keep track of the number of\
    \ punctuations\n  punctuation_count <- 0\n  \n  # Initialize a counter to keep\
    \ track of the number of sentences\n  sentence_", "\n  extension_strength <- 0\n\
    \  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name",
  "\n  extension_list <- sort(extensions, decreasing = TRUE)\n  strength <- 0\n  for(i\
    \ in 1:length(extension_list)) {\n    extension_name <- substr(extension_list[i],\
    \ 1, 1)\n    extension_name <- substr(extension_name, 2, nchar(extension_name))\n\
    \    strength <- strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  if(strength > 0) {\n    paste0(class_name, '.', extension_list[which.max(strength)])\n\
    \  } else {\n    paste0(class_name, '.', extension_list[1])\n  }\n}\n", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_strength <- extension_strength\
    \ + toupper(substr(class_name, i, i)) - toupper(substr(extensions[i], i, i))\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    if(extension_strength > 0) return(paste0(class_name, \".\", extensions[i]))\n\
    \  }\n  \n  return(class_name)\n}\n", "\n  \n  extension_strength <- 0\n  \n \
    \ for(i in 1:length(extensions)) {\n    \n    extension_name <- substr(class_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    \n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \    \n  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    \n    extension_name <- substr(class_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, i)\n    \n    if(extension_strength > extension_strength[i])\
    \ {\n      \n      return(paste(class_name, extension_name, sep = '.'))\n    \
    \  \n    }\n    \n  }\n  \n}\n", "\n  \n  extension_list <- sort(extensions, decreasing\
    \ = TRUE)\n  \n  strongest_extension <- paste(class_name, extension_list[[1]],\
    \ sep = \"\")\n  \n  for (i in 2:length(extension_list)) {\n    if (extension_list[[i]]\
    \ == extension_list[[i-1]]) {\n      strongest_extension <- paste(strongest_extension,\
    \ extension_list[[i]], sep = \"\")\n    } else {\n      break\n    }\n  }\n  \n\
    \  return(strongest_extension)\n}\n", "\n  extension_strength <- 0\n  extension_name\
    \ <- ''\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- paste(extension_name,\
    \ extensions[i], sep = '.')\n    extension_strength <- extension_strength + toupper(substr(extension_name,\
    \ 1, 1)) -\n      toupper(substr(extension_name, 2, 1))\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  if(extension_strength > 0) return(paste(class_name, extension_name, sep\
    \ = '.'))\n  \n  if(extension_strength < 0) return(paste(class_name, extension_name[length(extension_name)],\
    \ sep = '.'))\n}\n", "\n  \n  # Initialize a list to store the strongest extension\n\
    \  strongest_extension <- list()\n  \n  # Initialize a counter to keep track of\
    \ the number of uppercase letters\n  cap_counter <- 0\n  \n  # Initialize a counter\
    \ to keep track of the number of lowercase letters\n  sm_counter <- 0\n  \n  #\
    \ Loop through the list of extensions\n  for(i in 1:length(extensions)) {\n  \
    \  \n    # Get the extension\n    ext <- extensions[i]\n    \n    # Get the number\
    \ of uppercase letters\n    cap <- str_count(ext, \"[A-Z]\")\n    \n    # Get\
    \ the number of lowercase letters\n    sm <- str_count(ext, \"[a-z]\")\n    \n\
    \    # Get the strength\n    strength <- cap - sm\n    \n    # If the strength\
    \ is greater than the previous strongest extension, \n    # then update the strongest\
    \ extension\n    if(strength > strongest_extension[length(strongest_extension)])\
    \ {\n      strongest_extension[length(strongest_extension)] <- strength\n    }\n\
    \    \n    # Increment the counter\n    cap_counter <- cap_counter + cap\n   \
    \ sm_counter <- sm_counter + sm\n  }\n  \n  # Return the strongest extension\n\
    \  return(paste(class_name, strongest_extension[length(strongest_extension)],\
    \ sep = \".\"))\n}\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, i, i+1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- toupper(extension_name)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- tolower(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- tolower(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- tolower(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- tolower(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- tolower(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- tolower(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- tolower(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- tolower(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- tolower(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- tolower(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- tolower(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, ", "\n  extension_strength <- 0\n\
    \  \n  for(i in 1:length(extensions)) {\n    extension_strength <- extension_strength\
    \ + toupper(substr(class_name, i, i)) - toupper(substr(extensions[i], i, i))\n\
    \  }\n  \n  if(extension_strength > 0) {\n    return(paste(class_name, extensions[which.max(extension_strength)],\
    \ sep = '.'))\n  } else {\n    return(paste(class_name, extensions[which.min(extension_strength)],\
    \ sep = '.'))\n  }\n}\n", "\n  extensions <- sort(extensions, decreasing = T)\n\
    \  strength <- 0\n  for(i in 1:length(extensions)) {\n    cap <- length(toupper(substr(class_name,\
    \ i, i)))\n    sm <- length(tolower(substr(class_name, i, i)))\n    strength <-\
    \ strength + (cap - sm)\n  }\n  return(paste(class_name, extensions[which.max(strength)],\
    \ sep = '.'))\n}\n</code>\n<|/ a tags=r,string,regex |>\n<| c |>\nThanks so much!\
    \ I appreciate your help and your time!\n<|/ c |>\n<| c |>\nNo problem! Glad I\
    \ could help.\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution using stringr and\
    \ dplyr. \n<code>\nlibrary(stringr)\nlibrary(dplyr)\n", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - nchar(extensions[i]) - 1)\n    extension_strength <-\
    \ extension_strength + toupper(extension_name) - tolower(extension_name)\n  }\n\
    \  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    if(extension_strength > 0) break\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - nchar(extensions[i]) - 1)\n    extension_strength <-\
    \ extension_strength + toupper(extension_name) - tolower(extension_name)\n  }\n\
    \  \n  return(paste(class_name, extensions[which.max(extension_strength)], sep\
    \ = '.'))\n}\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, i, i+1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_strength <- extension_strength + toupper(extension_name)\
    \ - tolower(extension_name)\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, i, i+1)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_strength <-\
    \ extension_strength + toupper(extension_name) - tolower(extension_name)\n  }\n\
    \  \n  if(extension_strength > 0) return(paste(class_name, extensions[which.max(extension_strength)],\
    \ sep = '.'))\n  \n  return(class_name)\n}\n", "\n  \n  # Initialize a list to\
    \ store the strongest extension\n  strongest_extension <- list()\n  \n  # Initialize\
    \ a counter to keep track of the number of uppercase letters\n  cap <- 0\n  \n\
    \  # Initialize a counter to keep track of the number of lowercase letters\n \
    \ sm <- 0\n  \n  # Loop through the extensions and count the number of uppercase\
    \ letters\n  for(i in 1:length(extensions)) {\n    \n    # Get the current extension\n\
    \    ext <- extensions[i]\n    \n    # Get the number of uppercase letters in\
    \ the current extension\n    cap <- cap + length(gregexpr(\"[A-Z]\", ext)[[1]])\n\
    \    \n    # Get the number of lowercase letters in the current extension\n  \
    \  sm <- sm + length(gregexpr(\"[a-z]\", ext)[[1]])\n  }\n  \n  # Get the fraction\
    \ of uppercase letters in the extension's name\n  cap_fraction <- cap / length(extensions)\n\
    \  \n  # Get the fraction of lowercase letters in the extension's name\n  sm_fraction\
    \ <- sm / length(extensions)\n  \n  # Get the strength of the extension\n  strength\
    \ <- cap_fraction - sm_fraction\n  \n  # If the strength is negative, return NA\n\
    \  if(strength < 0) return(NA)\n  \n  # If the strength is positive, return the\
    \ extension's name\n  if(strength > 0) return(paste(class_name, extensions[which.max(strength)],\
    \ sep = \".\"))\n}\n", "\n  \n  # Initialize a list to store the strongest extension\n\
    \  strongest_extension <- list()\n  \n  # Initialize a counter to keep track of\
    \ the number of uppercase letters\n  cap_counter <- 0\n  \n  # Initialize a counter\
    \ to keep track of the number of lowercase letters\n  sm_counter <- 0\n  \n  #\
    \ Loop through the list of extensions\n  for(i in 1:length(extensions)) {\n  \
    \  \n    # Extract the extension\n    ext <- substr(extensions[i], 1, nchar(extensions[i])-1)\n\
    \    \n    # Extract the number of uppercase letters\n    cap <- nchar(ext)\n\
    \    \n    # Extract the number of lowercase letters\n    sm <- nchar(tolower(ext))\n\
    \    \n    # Update the counters\n    cap_counter <- cap_counter + cap\n    sm_counter\
    \ <- sm_counter + sm\n    \n    # If the extension's strength is -1, then set\
    \ the strongest extension\n    # to the extension\n    if(cap - sm == -1) {\n\
    \      strongest_extension <- c(strongest_extension, extensions[i])\n    }\n \
    \ }\n  \n  # Return the strongest extension\n  return(paste0(class_name, '.',\
    \ strongest_extension[which.max(strongest_extension)]))\n}\n</cell>\n<cell>",
  "\n  extension_strength <- 0\n  \n  for (i in 1:length(extensions)) {\n    extension_name\
    \ <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name, 1,\
    \ i)\n    extension_strength <- extension_strength + toupper(extension_name) -\
    \ tolower(extension_name)\n  }\n  \n  extension_strength <- extension_strength\
    \ / length(extensions)\n  \n  return(paste(class_name, extensions[which.max(extension_strength)],\
    \ sep = '.'))\n}\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) %in% extensions\n  }\n  \n \
    \ if(extension_strength == 0) return(class_name)\n  \n  extension_strength <-\
    \ extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) %in% extensions\n  }\n  \n \
    \ if(extension_strength == 0) return(class_name)\n  \n  extension_strength <-\
    \ extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i)\n    extension_strength\
    \ <- extension_strength + tolower(extension_name) %in% extensions\n  }\n  \n \
    \ if(extension_strength == 0) return(class_name)\n  \n  extension_strength <-\
    \ extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) %in% extensions\n  }\n  \n \
    \ if(extension_strength == 0) return(class_name)\n  \n  extension_strength <-\
    \ extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i)\n    extension_strength\
    \ <- extension_strength + tolower(extension_name) %in% extensions\n  }\n  \n \
    \ if(extension_strength == 0) return(class_name)\n  \n  extension_strength <-\
    \ extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) %in% extensions\n  }\n  \n \
    \ if(extension_strength == 0) return(class_name)\n  \n  extension_strength <-\
    \ extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i)\n    extension_strength\
    \ <", "\n  extension_list <- sort(extensions, decreasing = TRUE)\n  strength <-\
    \ 0\n  \n  for(i in 1:length(extension_list)) {\n    extension_name <- substr(extension_list[i],\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- toupper(extension_name)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    \n    extension_name <- tolower(extension_name)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    \n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    \n    extension_name\
    \ <- tolower(extension_name)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    \n    extension_name <- toupper(extension_name)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    \n    extension_name <- tolower(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    \n    extension_name\
    \ <- toupper(extension_name)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    \n    extension_name <- tolower(extension_name)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    \n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    \n    extension_name\
    \ <- tolower(extension_name)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    \n    extension_name <- toupper(extension_name)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    \n    extension_name <- tolower(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    \n    extension_name\
    \ <- toupper(extension_name)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    \n    extension_name <- tolower(extension_name)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    \n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    \n    extension_name\
    \ <- tolower(extension_name)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    \n    extension_name <- toupper(extension_name)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    \n    extension_name <- tolower(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    \n    extension_name\
    \ <- toupper(extension_name)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    \n    extension_name <- tolower(extension_name)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    \n    extension_name <- toupper", "\n \
    \ \n  # Initialize a list to store the strongest extension\n  strongest_extension\
    \ <- list()\n  \n  # Loop through the extensions and find the strongest one\n\
    \  for (i in 1:length(extensions)) {\n    \n    # Initialize a counter to keep\
    \ track of the number of uppercase letters\n    upper_case_count <- 0\n    \n\
    \    # Initialize a counter to keep track of the number of lowercase letters\n\
    \    lower_case_count <- 0\n    \n    # Initialize a counter to keep track of\
    \ the number of digits\n    digit_count <- 0\n    \n    # Initialize a counter\
    \ to keep track of the number of special characters\n    special_char_count <-\
    \ 0\n    \n    # Initialize a counter to keep track of the number of punctuations\n\
    \    punctuation_count <- 0\n    \n    # Initialize a counter to keep track of\
    \ the number of words\n    word_count <- 0\n    \n    # Initialize a counter to\
    \ keep track of the number of sentences\n    sentence_count <- 0\n    \n    #\
    \ Initialize a counter to keep track of the number of syllables\n    syllable_count\
    \ <- 0\n    \n    # Initialize a counter to keep track of the number of words\n\
    \    word_count <- 0\n    \n    # Initialize a counter to keep track of the number\
    \ of sentences\n    sentence_count <- 0\n    \n    # Initialize a counter to keep\
    \ track of the number of syllables\n    syllable_count <- 0\n    \n    # Initialize\
    \ a counter to keep track of the number of words\n    word_count <- 0\n    \n\
    \    # Initialize a counter to keep track of the number of sentences\n    sentence_count\
    \ <- 0\n    \n    # Initialize a counter to keep track of the number of syllables\n\
    \    syllable_count <- 0\n    \n    # Initialize a counter to keep track of the\
    \ number of words\n    word_count <- 0\n    \n    # Initialize a counter to keep\
    \ track of the number of sentences\n    sentence_count <- 0\n    \n    # Initialize\
    \ a counter to keep track of the number of syllables\n    syllable_count <- 0\n\
    \    \n    # Initialize a counter to keep track of the number of words\n    word_count\
    \ <- 0\n    \n    # Initialize a counter to keep track of the number of sentences\n\
    \    sentence_count <- 0\n    \n    # Initialize a counter to keep track of the\
    \ number of syllables\n    syllable_count <- 0\n    \n    # Initialize a counter\
    \ to keep track of the number of words\n    word_count <- 0\n    \n    # Initialize\
    \ a counter to keep track of the number of sentences\n    sentence_count <- 0\n\
    \    \n    # Initialize a counter to keep track of the number of syllables\n \
    \   syllable_count <- 0\n    \n    # Initialize a counter to keep track", "\n\
    \  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name\
    \ <- substr(class_name, 1, nchar(class_name) - i - 1)\n    extension_strength\
    \ <- extension_strength + (toupper(extension_name) %in% extensions[i])\n  }\n\
    \  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i - 1)\n\
    \    extension_strength <- extension_strength + (toupper(extension_name) %in%\
    \ extensions[i])\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i - 1)\n    extension_strength <- extension_strength + (toupper(extension_name)\
    \ %in% extensions[i])\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i - 1)\n    extension_strength <- extension_strength + (toupper(extension_name)\
    \ %in% extensions[i])\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i - 1)\n    extension_strength <- extension_strength + (toupper(extension_name)\
    \ %in% extensions[i])\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i - 1)\n    extension_strength <- extension_strength + (toupper(extension_name)\
    \ %in% extensions[i])\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(", "\n  \n  # Initialize\
    \ a list to store the strongest extension\n  strongest_extension <- list()\n \
    \ \n  # Initialize a counter to keep track of the number of lowercase letters\n\
    \  # in the extension's name\n  counter <- 0\n  \n  # Initialize a counter to\
    \ keep track of the number of uppercase letters\n  # in the extension's name\n\
    \  counter_upper <- 0\n  \n  # Initialize a counter to keep track of the number\
    \ of lowercase letters\n  # in the extension's name\n  counter_lower <- 0\n  \n\
    \  # Initialize a counter to keep track of the number of uppercase letters\n \
    \ # in the extension's name\n  counter_counter_upper <- 0\n  \n  # Initialize\
    \ a counter to keep track of the number of lowercase letters\n  # in the extension's\
    \ name\n  counter_counter_lower <- 0\n  \n  # Initialize a counter to keep track\
    \ of the number of uppercase letters\n  # in the extension's name\n  counter_counter_counter_upper\
    \ <- 0\n  \n  # Initialize a counter to keep track of the number of lowercase\
    \ letters\n  # in the extension's name\n  counter_counter_counter_lower <- 0\n\
    \  \n  # Initialize a counter to keep track of the number of uppercase letters\n\
    \  # in the extension's name\n  counter_counter_counter_counter_upper <- 0\n \
    \ \n  # Initialize a counter to keep track of the number of lowercase letters\n\
    \  # in the extension's name\n  counter_counter_counter_counter_lower <- 0\n \
    \ \n  # Initialize a counter to keep track of the number of uppercase letters\n\
    \  # in the extension's name\n  counter_counter_counter_counter_counter_upper\
    \ <- 0\n  \n  # Initialize a counter to keep track of the number of lowercase\
    \ letters\n  # in the extension's name\n  counter_counter_counter_counter_counter_lower\
    \ <- 0\n  \n  # Initialize a counter to keep track of the number of uppercase\
    \ letters\n  # in the extension's name\n  counter_counter_counter_counter_counter_counter_upper\
    \ <- 0\n  \n  # Initialize a counter to keep track of the number of lowercase\
    \ letters\n  # in the extension's name\n  counter_counter_counter_counter_counter_counter_counter_lower\
    \ <- 0\n  \n  # Initialize a counter to keep track of the number of uppercase\
    \ letters\n  # in the extension's name\n  counter_counter_counter_counter_counter_counter_counter_counter_upper\
    \ <- 0\n  \n  # Initialize a counter to keep track of the number of lowercase\
    \ letters\n  # in the extension's name\n  counter_counter_counter_counter_counter_counter_counter_counter_counter_lower\
    \ <- 0\n  \n  # Initialize a counter to keep track of the number of uppercase\
    \ letters\n  # in the extension's name\n  counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_upper\
    \ <- 0\n  \n  # ", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n", "\n  \n  # Your code here\n  \n}\n</cell>\n\
    <cell>", "\n  \n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    \n    extension_name <- substr(class_name, 1, nchar(class_name) - i)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name) - i)\n\
    \    \n    extension_strength <- extension_strength + \n      ifelse(toupper(extension_name)\
    \ == toupper(extensions[i]), \n             1, -1)\n    \n  }\n  \n  return(paste(class_name,\
    \ extensions[which.max(extension_strength)], sep = '.'))\n}\n", "\n  \n  # Write\
    \ your code here\n  \n}\n</cell>\n<text>\nQuestion 3\nWrite a function that returns\
    \ the number of elements in a list.\nThe function should take one argument, a\
    \ list of elements, and return an integer that represents the number of elements\
    \ in the list.\nThe function should return 0 if the list is empty.\nThe function\
    \ should raise an error if the list contains non-numeric elements.\nExample:\n\
    For Num_Elements(c('a', 'b', 'c')) == 3\nFor Num_Elements(c('a', 'b', 'c', 'd'))\
    \ == 4\nFor Num_Elements(c('a', 'b', 'c', 'd', 'e')) == 5\nFor Num_Elements(c('a',\
    \ 'b', 'c', 'd', 'e', 'f')) == 6\nFor Num_Elements(c('a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g')) == 7\nFor Num_Elements(c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'))\
    \ == 8\nFor Num_Elements(c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')) == 9\n\
    For Num_Elements(c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')) == 10\n\
    For Num_Elements(c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')) ==\
    \ 11\nFor Num_Elements(c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l')) == 12\nFor Num_Elements(c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm')) == 13\nFor Num_Elements(c('a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n')) == 14\nFor Num_Elements(c('a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o')) == 15\nFor\
    \ Num_Elements(c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p')) == 16\nFor Num_Elements(c('a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q')) == 17\nFor Num_Elements(c('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r')) == 18\nFor Num_Elements(c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's')) == 19\nFor Num_Elements(c('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o", "\n  \n\
    \  # Initialize a list to store the strongest extension\n  strongest_extension\
    \ <- list()\n  \n  # Initialize a counter to keep track of the number of uppercase\
    \ letters\n  cap_counter <- 0\n  \n  # Initialize a counter to keep track of the\
    \ number of lowercase letters\n  sm_counter <- 0\n  \n  # Iterate through the\
    \ list of extensions\n  for(i in 1:length(extensions)) {\n    \n    # Get the\
    \ current extension\n    current_extension <- extensions[i]\n    \n    # Get the\
    \ number of uppercase letters in the current extension\n    cap_counter <- cap_counter\
    \ + length(toupper(current_extension))\n    \n    # Get the number of lowercase\
    \ letters in the current extension\n    sm_counter <- sm_counter + length(tolower(current_extension))\n\
    \  }\n  \n  # Get the fraction of the number of uppercase letters in the class\
    \ name\n  # and the number of uppercase letters in the current extension\n  strongest_extension_strength\
    \ <- cap_counter - sm_counter\n  \n  # Get the class name without the extension\n\
    \  class_name_without_extension <- substr(class_name, 1, nchar(class_name) - length(extensions))\n\
    \  \n  # Get the strongest extension\n  strongest_extension[[1]] <- paste(class_name_without_extension,\
    \ strongest_extension_strength, sep = '.')\n  \n  # Return the strongest extension\n\
    \  return(strongest_extension[[1]])\n}\n</cell>\n<cell>", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i - 1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name) - i - 1)\n\
    \    extension_strength <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i - 1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name) - i - 1)\n\
    \    if(extension_strength > extension_strength[extension_strength == extension_name])\
    \ return(paste(class_name, extension_name, sep = \"\"))\n  }\n  \n  return(class_name)\n\
    }\n", "\n  \n  extensions_list <- sort(extensions, decreasing = TRUE)\n  \n  extension_name\
    \ <- paste(class_name, extensions_list[length(extensions_list)], sep = '.')\n\
    \  \n  return(extension_name)\n}\n", "\n  \n  # Initialize a list to store the\
    \ strongest extension\n  strongest_extension <- list()\n  \n  # Initialize a counter\
    \ to keep track of the number of uppercase letters\n  cap_counter <- 0\n  \n \
    \ # Initialize a counter to keep track of the number of lowercase letters\n  sm_counter\
    \ <- 0\n  \n  # Loop through the list of extensions\n  for(i in 1:length(extensions))\
    \ {\n    \n    # Get the extension\n    extension <- extensions[i]\n    \n   \
    \ # Get the number of uppercase letters\n    cap_counter <- cap_counter + length(toupper(extension))\n\
    \    \n    # Get the number of lowercase letters\n    sm_counter <- sm_counter\
    \ + length(tolower(extension))\n  }\n  \n  # Get the strongest extension\n  if(length(strongest_extension)\
    \ == 0) {\n    strongest_extension <- paste(class_name, extensions[which.max(cap_counter\
    \ - sm_counter)])\n  } else {\n    \n    # Get the index of the strongest extension\n\
    \    index_of_strongest_extension <- which.max(cap_counter - sm_counter)\n   \
    \ \n    # Get the strongest extension\n    strongest_extension <- paste(class_name,\
    \ extensions[index_of_strongest_extension])\n  }\n  \n  # Return the strongest\
    \ extension\n  return(strongest_extension)\n}\n", "\n  extension_strength <- 0\n\
    \  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name)-i)\n    extension_strength <- extension_strength + (nchar(extension_name)\
    \ - nchar(tolower(extension_name)))\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)-i)\n\
    \    extension_strength <- extension_strength + (nchar(extension_name) - nchar(tolower(extension_name)))\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name)-i)\n    extension_strength\
    \ <- extension_strength + (nchar(extension_name) - nchar(tolower(extension_name)))\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name)-i)\n    extension_strength\
    \ <- extension_strength + (nchar(extension_name) - nchar(tolower(extension_name)))\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name)-i)\n    extension_strength\
    \ <- extension_strength + (nchar(extension_name) - nchar(tolower(extension_name)))\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name)-i)\n    extension_strength\
    \ <- extension_strength + (nchar(extension_name) - nchar(tolower(extension_name)))\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n\
    \    extension_strength <- extension_strength + toupper(substring(class_name,\
    \ i, i)) - toupper(substring(class_name, i, i + 1))\n  }\n  \n  if(extension_strength\
    \ == 0) {\n    return(class_name)\n  } else {\n    extension_strength <- extension_strength\
    \ / length(extensions)\n    extension_strength <- floor(extension_strength)\n\
    \    \n    for(i in 1:length(extensions)) {\n      if(extension_strength == i)\
    \ {\n        return(paste(class_name, extensions[i], sep = \"\"))\n      }\n \
    \   }\n  }\n}\n", "\n  \n  extension_list <- sort(extensions, decreasing = T)\n\
    \  \n  strongest_extension <- paste(class_name, extension_list[[1]], sep = \"\"\
    )\n  \n  for (i in 2:length(extension_list)) {\n    \n    if (extension_list[[i]]\
    \ == extension_list[[i-1]]) {\n      \n      strongest_extension <- paste(strongest_extension,\
    \ extension_list[[i]], sep = \"\")\n      \n    } else {\n      \n      break\n\
    \    }\n  }\n  \n  return(strongest_extension)\n}\n", "\n  extension_strength\
    \ <- sapply(extensions, function(x) length(gregexpr(x, class_name))/length(x))\n\
    \  extension_strength[which.max(extension_strength)] \n}\n", "\n  \n  extension_strength\
    \ <- sapply(extensions, function(x) {\n    x <- tolower(x)\n    x <- gsub(\"[A-Z]\"\
    , \"\", x)\n    x <- gsub(\"[a-z]\", \"\", x)\n    x <- as.numeric(x)\n    x\n\
    \  })\n  \n  extension_strength <- sort(extension_strength, decreasing = T)\n\
    \  \n  if(length(extension_strength) == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength[1]\n  \n  return(paste(class_name, extension_strength,\
    \ sep = \".\"))\n}\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i - 1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name) - i - 1)\n\
    \    extension_strength <- extension_strength + (toupper(extension_name) - toupper(substr(extension_name,\
    \ 1, 1)))\n  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i - 1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name) - i - 1)\n\
    \    if(extension_strength > extension_strength[i]) {\n      extension_strength\
    \ <- extension_strength[i]\n      class_name <- extension_name\n    }\n  }\n \
    \ \n  return(class_name)\n}\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n", "\n  extension_strength <- 0\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name",
  "\n  \n  # Your code here\n  \n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes a string and returns a string where all characters are capitalized.\n\n\
    \n</text>\n<cell>", "\n  extensions_list <- sort(extensions, decreasing = TRUE)\n\
    \  strength <- 0\n  for(i in 1:length(extensions_list)) {\n    extension_name\
    \ <- substr(class_name, 1, nchar(class_name) - i)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name) - i)\n    strength <- strength + toupper(extension_name)\
    \ - tolower(extension_name)\n  }\n  if(strength > 0) {\n    extension_name <-\
    \ substr(class_name, 1, nchar(class_name) - strength)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name) - strength)\n  }\n  return(paste(class_name, extension_name,\
    \ sep = '.'))\n}\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength > 0) {\n    extension_name <- substr(class_name,\
    \ 1, length(class_name))\n    extension_name <- substr(extension_name, 1, length(extension_name))\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- paste(class_name,\
    \ extension_name, sep = '.')\n    extension_name <- paste(extension_name, extension_strength,\
    \ sep = '.')\n    extension_name <- paste(extension_name, extensions, sep = '.')\n\
    \    extension_name <- paste(extension_name, collapse = '.')\n  } else {\n   \
    \ extension_name <- paste(class_name, extensions, sep = '.')\n  }\n  \n  return(extension_name)\n\
    }\n</cell>\n<cell>", "\n  extension_list <- sort(extensions, decreasing = TRUE)\n\
    \  strength <- 0\n  \n  for(i in 1:length(extension_list)) {\n    extension_name\
    \ <- substr(extension_list[i], 1, 1)\n    extension_letter <- substr(extension_list[i],\
    \ 2, 1)\n    extension_number <- substr(extension_list[i], 3, 1)\n    \n    strength\
    \ <- strength + as.integer(extension_letter - extension_number)\n  }\n  \n  return(paste(class_name,\
    \ extension_list[strength], sep = \"\"))\n}\n", "\n  extension_strength <- 0\n\
    \  \n  for (i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ i, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 2, nchar(extension_name))\n    extension_name <- tolower(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- toupper(extension_name)\n \
    \   extension_strength <- extension_strength + \n      length(extension_name)\
    \ - length(toupper(extension_name))\n  }\n  \n  extension_strength <- extension_strength\
    \ / length(extensions)\n  \n  extension_strength <- ifelse(extension_strength\
    \ == 0, \n    '', paste(class_name, '.', extensions[which.min(extension_strength)]))\n\
    \  \n  return(extension_strength)\n}\n", "\n  \n  # Initialize a list to store\
    \ the strongest extension\n  strongest_extension <- list()\n  \n  # Loop through\
    \ the extensions\n  for(i in 1:length(extensions)) {\n    \n    # Get the extension's\
    \ name\n    extension_name <- substr(extensions[i], 1, nchar(extensions[i]) -\
    \ 2)\n    \n    # Get the extension's strength\n    extension_strength <- toupper(substr(extensions[i],\
    \ nchar(extensions[i]) - 1, nchar(extensions[i])))\n    \n    # If the extension's\
    \ strength is -1, then we know that the extension \n    # is the strongest extension\n\
    \    if(extension_strength == -1) {\n      \n      # Append the extension's name\
    \ to the strongest extension\n      strongest_extension <- c(strongest_extension,\
    \ extension_name)\n      \n      # Break the loop\n      break\n    }\n    \n\
    \    # If the extension's strength is 0, then we know that the extension \n  \
    \  # is weaker than the strongest extension\n    if(extension_strength == 0) {\n\
    \      \n      # Append the extension's name to the strongest extension\n    \
    \  strongest_extension <- c(strongest_extension, extension_name)\n      \n   \
    \   # Break the loop\n      break\n    }\n    \n    # If the extension's strength\
    \ is 1, then we know that the extension \n    # is stronger than the strongest\
    \ extension\n    if(extension_strength == 1) {\n      \n      # Append the extension's\
    \ name to the strongest extension\n      strongest_extension <- c(strongest_extension,\
    \ extension_name)\n      \n      # Break the loop\n      break\n    }\n  }\n \
    \ \n  # Return the strongest extension\n  return(strongest_extension)\n}\n", "\n\
    \  \n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n    \n\
    \    extension_name <- substr(class_name, 1, nchar(class_name) - i - 1)\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name) - i)\n    \n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) {\n    \n    return(class_name)\n  }\n\
    \  \n  if(extension_strength == 1) {\n    \n    return(paste0(class_name, '.',\
    \ extensions[1]))\n  }\n  \n  if(extension_strength == 2) {\n    \n    return(paste0(class_name,\
    \ '.', extensions[1], '.', extensions[2]))\n  }\n  \n  if(extension_strength ==\
    \ 3) {\n    \n    return(paste0(class_name, '.', extensions[1], '.', extensions[2],\
    \ '.', extensions[3]))\n  }\n  \n  if(extension_strength == 4) {\n    \n    return(paste0(class_name,\
    \ '.', extensions[1], '.', extensions[2], '.', extensions[3], '.', extensions[4]))\n\
    \  }\n  \n  if(extension_strength == 5) {\n    \n    return(paste0(class_name,\
    \ '.', extensions[1], '.', extensions[2], '.', extensions[3], '.', extensions[4],\
    \ '.', extensions[5]))\n  }\n  \n  if(extension_strength == 6) {\n    \n    return(paste0(class_name,\
    \ '.', extensions[1], '.', extensions[2], '.', extensions[3], '.', extensions[4],\
    \ '.', extensions[5], '.', extensions[6]))\n  }\n  \n  if(extension_strength ==\
    \ 7) {\n    \n    return(paste0(class_name, '.', extensions[1], '.', extensions[2],\
    \ '.', extensions[3], '.', extensions[4], '.', extensions[5], '.', extensions[6],\
    \ '.', extensions[7]))\n  }\n  \n  if(extension_strength == 8) {\n    \n    return(paste0(class_name,\
    \ '.', extensions[1], '.', extensions[2], '.', extensions[3], '.', extensions[4],\
    \ '.', extensions[5], '.', extensions[6], '.', extensions[7], '.', extensions[8]))\n\
    \  }\n  \n  if(extension_strength == 9) {\n    \n    return(paste0(class_name,\
    \ '.', extensions[1], '.', extensions[2], '.', extensions[3], '.', extensions[4],\
    \ '.', ", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n\
    \    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n", "\n  \n  # Initialize a list to store the\
    \ extensions' strengths\n  strengths <- list()\n  \n  # Loop through the list\
    \ of extensions\n  for (i in 1:length(extensions)) {\n    \n    # Initialize a\
    \ vector to store the extensions' names\n    extension_names <- c()\n    \n  \
    \  # Loop through the list of extensions' names\n    for (j in 1:length(extensions[[i]]))\
    \ {\n      \n      # If the extension's name begins with the class name\n    \
    \  if (substr(extensions[[i]][[j]], 1, nchar(class_name)) == class_name) {\n \
    \       \n        # Append the extension's name to the vector\n        extension_names\
    \ <- c(extension_names, extensions[[i]][[j]])\n      }\n    }\n    \n    # Append\
    \ the extension's strength to the list\n    strengths[[i]] <- length(extension_names)\n\
    \  }\n  \n  # Return the strongest extension\n  return(extensions[which.max(strengths)])\n\
    }\n", "\n  extension_strength <- 0\n  extension_name <- \"\"\n  \n  for (i in\
    \ 1:length(extensions)) {\n    extension_name <- paste(extension_name, extensions[i],\
    \ sep = \"\")\n    extension_strength <- extension_strength + toupper(class_name[i])\
    \ - toupper(extension_name[i])\n  }\n  \n  if(extension_strength == 0) {\n   \
    \ return(class_name)\n  } else {\n    extension_strength <- extension_strength\
    \ / length(extensions)\n    extension_name <- paste(class_name, extension_name,\
    \ sep = \"\")\n    \n    for(i in 1:length(extensions)) {\n      if(extension_strength\
    \ > 0) {\n        extension_name <- paste(extension_name, extensions[i], sep =\
    \ \"\")\n      }\n    }\n    return(extension_name)\n  }\n}\n", "\n  extension_strength\
    \ <- 0\n  \n  for (i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - nchar(extensions[i]) + 1)\n    extension_strength <-\
    \ extension_strength + toupper(extension_name) %in% toupper(extensions[i])\n \
    \ }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  if(extension_strength > 0)\
    \ return(paste(class_name, extensions[which.max(extension_strength)], sep = '.'))\n\
    \  \n  return(class_name)\n}\n", "\n  \n  # Write your code here\n  \n}\n", "\n\
    \  \n  # Initialize a list to store the strongest extension\n  strongest_extension\
    \ <- list()\n  \n  # Loop through the extensions and find the strongest one\n\
    \  for(i in 1:length(extensions)) {\n    \n    # Initialize a counter to keep\
    \ track of the number of uppercase letters\n    upper_case_count <- 0\n    \n\
    \    # Initialize a counter to keep track of the number of lowercase letters\n\
    \    lower_case_count <- 0\n    \n    # Initialize a counter to keep track of\
    \ the number of digits\n    digit_count <- 0\n    \n    # Initialize a counter\
    \ to keep track of the number of special characters\n    special_char_count <-\
    \ 0\n    \n    # Initialize a counter to keep track of the number of spaces\n\
    \    space_count <- 0\n    \n    # Initialize a counter to keep track of the number\
    \ of special characters\n    special_char_count <- 0\n    \n    # Initialize a\
    \ counter to keep track of the number of periods\n    period_count <- 0\n    \n\
    \    # Initialize a counter to keep track of the number of commas\n    comma_count\
    \ <- 0\n    \n    # Initialize a counter to keep track of the number of brackets\n\
    \    bracket_count <- 0\n    \n    # Initialize a counter to keep track of the\
    \ number of brackets\n    bracket_count <- 0\n    \n    # Initialize a counter\
    \ to keep track of the number of brackets\n    bracket_count <- 0\n    \n    #\
    \ Initialize a counter to keep track of the number of brackets\n    bracket_count\
    \ <- 0\n    \n    # Initialize a counter to keep track of the number of brackets\n\
    \    bracket_count <- 0\n    \n    # Initialize a counter to keep track of the\
    \ number of brackets\n    bracket_count <- 0\n    \n    # Initialize a counter\
    \ to keep track of the number of brackets\n    bracket_count <- 0\n    \n    #\
    \ Initialize a counter to keep track of the number of brackets\n    bracket_count\
    \ <- 0\n    \n    # Initialize a counter to keep track of the number of brackets\n\
    \    bracket_count <- 0\n    \n    # Initialize a counter to keep track of the\
    \ number of brackets\n    bracket_count <- 0\n    \n    # Initialize a counter\
    \ to keep track of the number of brackets\n    bracket_count <- 0\n    \n    #\
    \ Initialize a counter to keep track of the number of brackets\n    bracket_count\
    \ <- 0\n    \n    # Initialize a counter to keep track of the number of brackets\n\
    \    bracket_count <- 0\n    \n    # Initialize a counter to keep track of the\
    \ number of brackets\n    bra", "\n  extension_strength <- 0\n  extension_name\
    \ <- ''\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- paste(extension_name,\
    \ extensions[i], sep = '.')\n    extension_strength <- extension_strength + toupper(substr(extension_name,\
    \ 1, 1)) -\n      toupper(substr(extension_name, 2, 1))\n  }\n  \n  if(extension_strength\
    \ == 0) {\n    return(class_name)\n  } else {\n    extension_strength <- extension_strength\
    \ / length(extensions)\n    extension_name <- paste(class_name, '.', extension_name,\
    \ sep = '.')\n    \n    for(i in 1:length(extensions)) {\n      extension_name\
    \ <- paste(extension_name, extensions[i], sep = '.')\n      extension_strength\
    \ <- extension_strength + toupper(substr(extension_name, 1, 1)) -\n        toupper(substr(extension_name,\
    \ 2, 1))\n    }\n    \n    extension_name <- paste(extension_name, '.', extension_strength,\
    \ sep = '.')\n    return(extension_name)\n  }\n}\n", "\n  \n  # Initialize a list\
    \ to store the strongest extension\n  strongest_extension <- list()\n  \n  # Initialize\
    \ a counter to keep track of the number of uppercase letters\n  cap <- 0\n  \n\
    \  # Initialize a counter to keep track of the number of lowercase letters\n \
    \ sm <- 0\n  \n  # Loop through the extensions and count the uppercase letters\n\
    \  for (i in 1:length(extensions)) {\n    \n    # Get the current extension\n\
    \    ext <- extensions[i]\n    \n    # Get the number of uppercase letters\n \
    \   cap <- cap + length(ext)\n    \n    # Get the number of lowercase letters\n\
    \    sm <- sm + length(tolower(ext))\n  }\n  \n  # Get the fraction of uppercase\
    \ letters\n  cap_fraction <- cap/length(extensions)\n  \n  # Get the fraction\
    \ of lowercase letters\n  sm_fraction <- sm/length(extensions)\n  \n  # If the\
    \ fraction of uppercase letters is greater than the fraction of lowercase letters\n\
    \  # then we return the strongest extension\n  if (cap_fraction > sm_fraction)\
    \ {\n    \n    # Get the number of uppercase letters\n    cap <- cap - sm\n  \
    \  \n    # Get the number of lowercase letters\n    sm <- sm - cap\n    \n   \
    \ # Get the extension\n    strongest_extension <- paste(class_name, extensions[cap],\
    \ sep = '.')\n  }\n  \n  # If the fraction of lowercase letters is greater than\
    \ the fraction of uppercase letters\n  # then we return the strongest extension\n\
    \  else if (sm_fraction > cap_fraction) {\n    \n    # Get the number of uppercase\
    \ letters\n    sm <- sm - cap\n    \n    # Get the number of lowercase letters\n\
    \    cap <- cap - sm\n    \n    # Get the extension\n    strongest_extension <-\
    \ paste(class_name, extensions[sm], sep = '.')\n  }\n  \n  # If the fraction of\
    \ uppercase letters is equal to the fraction of lowercase letters\n  # then we\
    \ return the strongest extension\n  else if (cap_fraction == sm_fraction) {\n\
    \    \n    # Get the extension\n    strongest_extension <- paste(class_name, extensions[cap],\
    \ sep = '.')\n  }\n  \n  # If the fraction of uppercase letters is less than the\
    \ fraction of lowercase letters\n  # then we return the strongest extension\n\
    \  else if (cap_fraction < sm_fraction) {\n    \n    # Get the extension\n   \
    \ strongest_extension <- paste(class_name, extensions[sm], sep = '.')\n  }\n \
    \ \n  # If the fraction of uppercase letters is less than the fraction of ", "\n\
    \  extension_list <- sort(extensions, decreasing = TRUE)\n  extension_name <-\
    \ names(extension_list)[1]\n  extension_strength <- extension_list[[1]]\n  for\
    \ (i in 2:length(extension_list)) {\n    extension_strength <- extension_strength\
    \ - extension_list[[i]]\n  }\n  paste0(class_name, extension_name)\n}\n", "\n\
    \  \n  # Initialize a list to store the strongest extension\n  strongest_extension\
    \ <- list()\n  \n  # Initialize a counter to keep track of the number of uppercase\
    \ letters\n  # in the extension's name\n  cap_counter <- 0\n  \n  # Initialize\
    \ a counter to keep track of the number of lowercase letters\n  # in the extension's\
    \ name\n  sm_counter <- 0\n  \n  # Iterate through the list of extensions\n  for(i\
    \ in 1:length(extensions)) {\n    \n    # Extract the extension's name from the\
    \ list\n    extension_name <- substr(extensions[i], 1, nchar(extensions[i])-1)\n\
    \    \n    # Extract the extension's strength from the list\n    extension_strength\
    \ <- substr(extensions[i], nchar(extensions[i])+1, nchar(extensions[i]))\n   \
    \ \n    # Extract the number of uppercase letters in the extension's name\n  \
    \  cap_counter <- cap_counter + length(extension_name)\n    \n    # Extract the\
    \ number of lowercase letters in the extension's name\n    sm_counter <- sm_counter\
    \ + length(extension_name)\n    \n    # If the extension's strength is -1, then\
    \ we found the strongest extension\n    if(extension_strength == \"-1\") {\n \
    \     \n      # Append the extension's name to the strongest extension\n     \
    \ strongest_extension <- c(strongest_extension, extension_name)\n      \n    \
    \  # If the number of uppercase letters in the extension's name is\n      # greater\
    \ than the number of lowercase letters in the extension's name,\n      # then\
    \ we found the strongest extension\n      if(cap_counter > sm_counter) {\n   \
    \     \n        # Append the extension's name to the strongest extension\n   \
    \     strongest_extension <- c(strongest_extension, extension_name)\n      }\n\
    \    }\n  }\n  \n  # Return the strongest extension\n  return(paste(class_name,\
    \ strongest_extension))\n}\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n", "\n  extension_strength <- 0\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - nchar(extensions[i]) - 1)\n    extension_strength <- extension_strength +\
    \ toupper(extension_name) %in% toupper(extensions[i])\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  for(i in 1:length(extensions)) {\n    if(extension_strength > 0) break\n\
    \    extension_name <- substr(class_name, 1, nchar(class_name) - nchar(extensions[i])\
    \ - 1)\n    extension_strength <- extension_strength + toupper(extension_name)\
    \ %in% toupper(extensions[i])\n  }\n  \n  return(paste(substr(class_name, 1, nchar(class_name)\
    \ - nchar(extensions[which.max(extension_strength)]) - 1), extensions[which.max(extension_strength)]))\n\
    }\n", "\n  \n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n\
    \    \n    extension_name <- substr(class_name, 1, nchar(class_name) - i)\n  \
    \  extension_name <- substr(extension_name, 1, nchar(extension_name) - i)\n  \
    \  \n    extension_strength <- extension_strength + toupper(extension_name) -\
    \ tolower(extension_name)\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    \n    extension_name <- substr(class_name, 1,\
    \ nchar(class_name) - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    \n    if(extension_strength > extension_strength[i]) {\n      \n \
    \     extension_name <- extension_name\n      extension_strength <- extension_strength[i]\n\
    \    }\n  }\n  \n  return(paste(class_name, extension_name, sep = '.'))\n}\n",
  "\n  extensions_count <- length(extensions)\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extension", "\n  \n  extension_list\
    \ <- strsplit(extensions, split = '')\n  \n  extension_strength <- sapply(extension_list,\
    \ function(x) {\n    \n    x <- toupper(x)\n    \n    x <- gsub('[A-Z]', '', x)\n\
    \    \n    x <- gsub('[a-z]', '', x)\n    \n    x <- as.numeric(x)\n    \n   \
    \ x <- x - 1\n    \n    x\n  })\n  \n  extension_strength <- sort(extension_strength)\n\
    \  \n  extension_strength <- extension_strength[length(extension_strength)]\n\
    \  \n  extension_strength <- paste(class_name, extension_strength, sep = '.')\n\
    \  \n  return(extension_strength)\n}\n", "\n  extension_list <- sort(extensions,\
    \ decreasing = T)\n  strength <- 0\n  for(i in 1:length(extension_list)) {\n \
    \   extension_name <- substr(extension_list[i], 1, nchar(extension_list[i])-1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name)-1)\n  \
    \  extension_name <- substr(extension_name, 1, nchar(extension_name)-1)\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name)-1)\n    extension_name <-\
    \ substr(extension_name, 1, nchar(extension_name)-1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name)-1)\n    extension_name <- substr(extension_name, 1,\
    \ nchar(extension_name)-1)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)-1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name)-1)\n  \
    \  extension_name <- substr(extension_name, 1, nchar(extension_name)-1)\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name)-1)\n    extension_name <-\
    \ substr(extension_name, 1, nchar(extension_name)-1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name)-1)\n    extension_name <- substr(extension_name, 1,\
    \ nchar(extension_name)-1)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)-1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name)-1)\n  \
    \  extension_name <- substr(extension_name, 1, nchar(extension_name)-1)\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name)-1)\n    extension_name <-\
    \ substr(extension_name, 1, nchar(extension_name)-1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name)-1)\n    extension_name <- substr(extension_name, 1,\
    \ nchar(extension_name)-1)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)-1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name)-1)\n  \
    \  extension_name <- substr(extension_name, 1, nchar(extension_name)-1)\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name)-1)\n    extension_name <-\
    \ substr(extension_name, 1, nchar(extension_name)-1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name)-1)\n    extension_name <- substr(extension_name, 1,\
    \ nchar(extension_name)-1)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)-1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name)-1)\n  \
    \  extension_name <- substr(extension_name, 1, nchar(extension_name)-1)\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name)-1)\n", "\n  \n  # Initialize\
    \ a list to store the strongest extension\n  strongest_extension <- list()\n \
    \ \n  # Loop through the extensions\n  for (i in 1:length(extensions)) {\n   \
    \ \n    # Get the extension's name\n    extension_name <- substr(class_name, 1,\
    \ i)\n    \n    # Get the extension's strength\n    extension_strength <- substr(class_name,\
    \ i + 1, length(class_name))\n    \n    # If the extension's strength is -1, then\
    \ append the extension's name to the strongest extension\n    if (extension_strength\
    \ == -1) {\n      strongest_extension <- c(strongest_extension, extension_name)\n\
    \    }\n  }\n  \n  # Return the strongest extension\n  return(strongest_extension)\n\
    }\n", "\n  \n  # Initialize a list to store the strongest extension\n  strongest_extension\
    \ <- list()\n  \n  # Initialize a counter to keep track of the number of lowercase\
    \ letters\n  # in the extension's name\n  counter <- 0\n  \n  # Loop through the\
    \ list of extensions\n  for(i in 1:length(extensions)) {\n    \n    # Get the\
    \ number of lowercase letters in the extension's name\n    counter <- counter\
    \ + length(tolower(extensions[i]))\n    \n    # If the number of lowercase letters\
    \ in the extension's name is greater\n    # than the strongest extension's strength,\
    \ append the extension to the\n    # strongest extension\n    if(counter > strongest_extension[length(strongest_extension)-1])\
    \ {\n      strongest_extension[length(strongest_extension)] <- extensions[i]\n\
    \    }\n  }\n  \n  # Return the strongest extension\n  return(paste(class_name,\
    \ strongest_extension[length(strongest_extension)], sep = '.'))\n}\n", "\n  \n\
    \  # Write your code here.\n  \n  extension_list <- sort(extensions, decreasing\
    \ = TRUE)\n  \n  if(length(extension_list) == 1) {\n    return(paste0(class_name,\
    \ extension_list[1]))\n  }\n  \n  if(length(extension_list) > 1) {\n    \n   \
    \ extension_list <- extension_list[which(extension_list$strength == min(extension_list$strength))]\n\
    \    \n    return(paste0(class_name, extension_list[1]))\n  }\n  \n  return(paste0(class_name,\
    \ extension_list[1]))\n}\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_strength\
    \ <- extension_strength - toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_strength\
    \ <- extension_strength - toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    ", "\n  \n  # Initialize\
    \ a list to store the strongest extension\n  strongest_extension <- list()\n \
    \ \n  # Initialize a counter to keep track of the number of lowercase letters\n\
    \  # in the extension's name\n  counter <- 0\n  \n  # Loop through the list of\
    \ extensions\n  for(i in 1:length(extensions)) {\n    \n    # Get the extension's\
    \ name\n    extension_name <- extensions[i]\n    \n    # Get the number of uppercase\
    \ letters in the extension's name\n    counter <- counter + length(toupper(extension_name))\n\
    \    \n    # If the number of uppercase letters is greater than or equal to the\n\
    \    # number of lowercase letters in the extension's name, then the\n    # extension's\
    \ name is the strongest extension\n    if(counter >= length(extension_name)) {\n\
    \      strongest_extension <- extension_name\n      break\n    }\n  }\n  \n  #\
    \ Return the strongest extension\n  return(strongest_extension)\n}\n", "\n  \n\
    \  # Initialize a list to store the strongest extension\n  strongest_extension\
    \ <- list()\n  \n  # Initialize a counter to keep track of the number of lowercase\
    \ letters\n  # in the extension's name\n  counter <- 0\n  \n  # Loop through the\
    \ list of extensions and find the strongest one\n  for(i in 1:length(extensions))\
    \ {\n    \n    # Get the number of lowercase letters in the extension's name\n\
    \    counter <- counter + nchar(tolower(extensions[i]))\n    \n    # If the number\
    \ of lowercase letters in the extension's name is \n    # greater than or equal\
    \ to the number of uppercase letters in the \n    # extension's name, then we\
    \ found a strongest extension\n    if(counter >= nchar(toupper(extensions[i])))\
    \ {\n      \n      # Append the extension's name to the strongest_extension\n\
    \      strongest_extension <- c(strongest_extension, extensions[i])\n    }\n \
    \ }\n  \n  # Return the strongest extension\n  return(paste(class_name, strongest_extension,\
    \ sep = '.'))\n}\n", "\n  \n  # Write your code here\n  \n}\n", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ i, i)\n    extension_strength <- extension_strength + \n      length(unlist(strsplit(extension_name,\
    \ '_')))\n  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, i, i)\n    extension_strength <-\
    \ extension_strength - \n      length(unlist(strsplit(extension_name, '_')))\n\
    \  }\n  \n  if(extension_strength > 0) return(paste(class_name, extensions[which.max(extension_strength)],\
    \ sep = '.'))\n  \n  return(class_name)\n}\n", "\n  \n  # Write your code here\n\
    \  \n}\n</cell>\n<text>\nProblem 3\nWrite a function that takes as input a vector\
    \ of integers and returns its sum.\nThe vector is assumed to be non-empty.\nThe\
    \ function should return NA if the vector is empty.\nThe function should return\
    \ NA if the vector contains only NA values.\nThe function should return NA if\
    \ the vector contains only NA or NA values.\nThe function should return NA if\
    \ the vector contains only NA or NA or NA values.\nThe function should return\
    \ NA if the vector contains only NA or NA or NA or NA values.\nThe function should\
    \ return NA if the vector contains only NA or NA or NA or NA or NA values.\nThe\
    \ function should return NA if the vector contains only NA or NA or NA or NA or\
    \ NA or NA values.\nThe function should return NA if the vector contains only\
    \ NA or NA or NA or NA or NA or NA or NA values.\nThe function should return NA\
    \ if the vector contains only NA or NA or NA or NA or NA or NA or NA or NA values.\n\
    The function should return NA if the vector contains only NA or NA or NA or NA\
    \ or NA or NA or NA or NA or NA values.\nThe function should return NA if the\
    \ vector contains only NA or NA or NA or NA or NA or NA or NA or NA or NA or NA\
    \ values.\nThe function should return NA if the vector contains only NA or NA\
    \ or NA or NA or NA or NA or NA or NA or NA or NA or NA values.\nThe function\
    \ should return NA if the vector contains only NA or NA or NA or NA or NA or NA\
    \ or NA or NA or NA or NA or NA or NA values.\nThe function should return NA if\
    \ the vector contains only NA or NA or NA or NA or NA or NA or NA or NA or NA\
    \ or NA or NA or NA or NA values.\nThe function should return NA if the vector\
    \ contains only NA or NA or NA or NA or NA or NA or NA or NA or NA or NA or N",
  "\n  extensions_list <- sort(extensions, decreasing = TRUE)\n  strength <- 0\n \
    \ \n  for(i in 1:length(extensions_list)) {\n    extension_name <- substr(extensions_list[i],\
    \ 1, 1)\n    extension_name <- substr(extension_name, 2, nchar(extension_name))\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    \n    extension_name\
    \ <- tolower(extension_name)\n    \n    extension_name <- gsub(\" \", \"\", extension_name)\n\
    \    \n    extension_name <- gsub(\"[^A-Za-z]\", \"\", extension_name)\n    \n\
    \    extension_name <- gsub(\"^\", \"\", extension_name)\n    \n    extension_name\
    \ <- gsub(\"$\", \"\", extension_name)\n    \n    extension_name <- gsub(\"\\\\\
    s\", \"\", extension_name)\n    \n    extension_name <- gsub(\"^\", \"\", extension_name)\n\
    \    \n    extension_name <- gsub(\"$\", \"\", extension_name)\n    \n    extension_name\
    \ <- gsub(\"\\\\s\", \"\", extension_name)\n    \n    extension_name <- gsub(\"\
    ^\", \"\", extension_name)\n    \n    extension_name <- gsub(\"$\", \"\", extension_name)\n\
    \    \n    extension_name <- gsub(\"\\\\s\", \"\", extension_name)\n    \n   \
    \ extension_name <- gsub(\"^\", \"\", extension_name)\n    \n    extension_name\
    \ <- gsub(\"$\", \"\", extension_name)\n    \n    extension_name <- gsub(\"\\\\\
    s\", \"\", extension_name)\n    \n    extension_name <- gsub(\"^\", \"\", extension_name)\n\
    \    \n    extension_name <- gsub(\"$\", \"\", extension_name)\n    \n    extension_name\
    \ <- gsub(\"\\\\s\", \"\", extension_name)\n    \n    extension_name <- gsub(\"\
    ^\", \"\", extension_name)\n    \n    extension_name <- gsub(\"$\", \"\", extension_name)\n\
    \    \n    extension_name <- gsub(\"\\\\s\", \"\", extension_name)\n    \n   \
    \ extension_name <- gsub(\"^\", \"\", extension_name)\n    \n    extension_name\
    \ <- gsub(\"$\", \"\", extension_name)\n    \n    extension_name <- gsub(\"\\\\\
    s\", \"\", extension_name)\n    \n    extension_name <- gsub(\"^\", \"\", extension_name)\n\
    \    \n    extension_name <- gsub(\"$\", \"\", extension_name)\n    \n    extension_name\
    \ <- gsub(\"\\\\s\", \"\", extension_name)\n    \n    extension_name <- gsub(\"\
    ^\", \"\", ", "\n  \n  extension_list <- sort(extensions, decreasing = T)\n  \n\
    \  extension_name <- names(extension_list)\n  \n  extension_strength <- sapply(extension_name,\
    \ function(x) {\n    \n    x <- tolower(x)\n    \n    x <- strsplit(x, split =\
    \ \"\")[[1]]\n    \n    x <- unlist(strsplit(x, split = \"\")[[1]])\n    \n  \
    \  x <- nchar(x)\n    \n    x <- sum(x)\n    \n    x <- x/nchar(x)\n    \n   \
    \ x\n  })\n  \n  extension_strength <- extension_strength[extension_strength !=\
    \ 0]\n  \n  extension_strength <- extension_strength[which.max(extension_strength)]\n\
    \  \n  paste0(class_name, \".\", extension_name)\n}\n", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i)\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name) - i)\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name))\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength > 0) {\n    extension_strength <- extension_strength\
    \ - 1\n  }\n  \n  paste(class_name, extensions[which.max(extension_strength)])\n\
    }\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n \
    \   extension_strength <- extension_strength + toupper(substr(class_name, i, i))\
    \ - toupper(substr(extensions[i], i, i))\n  }\n  \n  if(extension_strength ==\
    \ 0) {\n    return(class_name)\n  }\n  \n  if(extension_strength > 0) {\n    extension_strength\
    \ <- extension_strength - 1\n  }\n  \n  return(paste(class_name, extensions[extension_strength],\
    \ sep = '.'))\n}\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, i, i)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_strength <- extension_strength + toupper(extension_name)\
    \ - tolower(extension_name)\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, i, i)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_strength <-\
    \ extension_strength + toupper(extension_name) - tolower(extension_name)\n  }\n\
    \  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, i, i)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_strength <- extension_strength + toupper(extension_name)\
    \ - tolower(extension_name)\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, i, i)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_strength <-\
    \ extension_strength + toupper(extension_name) - tolower(extension_name)\n  }\n\
    \  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, i, i)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_strength <- extension_strength + toupper(extension_name)\
    \ - tolower(extension_name)\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, i, i)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_strength <-\
    \ extension_strength + toupper(extension_name) - tolower(extension_name)\n  }\n\
    \  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension", "\n  \n  # Write your code here.\n  \n}\n", "\n  \n  # Your code\
    \ here\n  \n}\n</cell>\n<cell>", "\n  extension_strength <- 0\n  extension_name\
    \ <- ''\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- paste(extension_name,\
    \ extensions[i], sep = '.')\n    extension_strength <- extension_strength + toupper(substring(class_name,\
    \ i, i)) -\n      toupper(substring(extension_name, i, i))\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  for(i in 1:length(extensions)) {\n    extension_name <- paste(extension_name,\
    \ extensions[i], sep = '.')\n    extension_strength <- extension_strength + tolower(substring(class_name,\
    \ i, i)) -\n      tolower(substring(extension_name, i, i))\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  for(i in 1:length(extensions)) {\n    extension_name <- paste(extension_name,\
    \ extensions[i], sep = '.')\n    extension_strength <- extension_strength + toupper(substring(class_name,\
    \ i, i)) -\n      toupper(substring(extension_name, i, i))\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  for(i in 1:length(extensions)) {\n    extension_name <- paste(extension_name,\
    \ extensions[i], sep = '.')\n    extension_strength <- extension_strength + tolower(substring(class_name,\
    \ i, i)) -\n      tolower(substring(extension_name, i, i))\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  for(i in 1:length(extensions)) {\n    extension_name <- paste(extension_name,\
    \ extensions[i], sep = '.')\n    extension_strength <- extension_strength + toupper(substring(class_name,\
    \ i, i)) -\n      toupper(substring(extension_name, i, i))\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  for(i in 1:length(extensions)) {\n    extension_name <- paste(extension_name,\
    \ extensions[i], sep = '.')\n    extension_strength <- extension_strength + tolower(substring(class_name,\
    \ i, i)) -\n      tolower(substring(extension_name, i, i))\n", "\n  \n  # Write\
    \ your code here\n  \n}\n", "\n  \n  # Your code here\n  \n}\n</cell>\n<text>\n\
    Solution\nRun the code cell below to test your solution.\n\n\n</text>\n<cell>",
  "\n  \n  extension_strength <- 0\n  \n  for (i in 1:length(extensions)) {\n    \n\
    \    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    \n    extension_strength <- extension_strength + \n      length(toupper(extension_name))\
    \ - length(toupper(substr(class_name, i, i)))\n    \n  }\n  \n  return(paste(substr(class_name,\
    \ 1, 1), extensions[which.max(extension_strength)], sep = '.'))\n}\n", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - i - 1)\n    extension_strength <- extension_strength\
    \ + (toupper(extension_name) %in% extensions[i])\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  return(paste(substr(class_name, 1, nchar(class_name) - 1), extensions[which.max(extension_strength)],\
    \ sep = '.'))\n}\n", "\n  extension_strength <- sapply(extensions, FUN = function(x)\
    \ {\n    x <- tolower(x)\n    x <- gsub(\"[A-Z]\", \"\", x)\n    x <- gsub(\"\
    [a-z]\", \"\", x)\n    x <- as.numeric(x)\n    x <- sum(x)\n    x\n  })\n  \n\
    \  extension_strength <- sort(extension_strength, decreasing = TRUE)\n  \n  if(length(extension_strength)\
    \ == 0) {\n    return(class_name)\n  }\n  \n  if(length(extension_strength) ==\
    \ 1) {\n    return(paste0(class_name, extension_strength[1]))\n  }\n  \n  if(length(extension_strength)\
    \ > 1) {\n    extension_strength <- extension_strength[seq(1, length(extension_strength),\
    \ 2)]\n    extension_strength <- paste0(class_name, extension_strength)\n  }\n\
    \  \n  return(extension_strength)\n}\n", "\n  extension_strength <- 0\n  \n  for\
    \ (i in 1:length(extensions)) {\n    extension_name <- substr(class_name, i, i)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- toupper(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- tolower(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- toupper(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- tolower(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- toupper(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- tolower(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- toupper(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- tolower(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- toupper(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- tolower(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- toupper(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- tolower(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- toupper(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- tolower(extension_name)", "\n\
    \  extensions_count <- length(extensions)\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extension", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - i - 1)\n    extension_strength <- extension_strength\
    \ + \n      length(grep(extension_name, extensions)) / length(extensions)\n  }\n\
    \  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength - 0.5\n  \n  for(i in 1:length(extensions)) {\n    extension_name\
    \ <- substr(class_name, 1, nchar(class_name) - i - 1)\n    extension_strength\
    \ <- extension_strength + \n      length(grep(extension_name, extensions)) / length(extensions)\n\
    \  }\n  \n  if(extension_strength > 0) return(paste(class_name, extensions[which.max(extension_strength)],\
    \ sep = '.'))\n  \n  return(class_name)\n}\n", "\n  extension_strength <- 0\n\
    \  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_strength <- extension_strength + toupper(extension_name)\
    \ - tolower(extension_name)\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    \n    if(extension_strength > extensions[i]) {\n      return(paste0(class_name,\
    \ extensions[i]))\n    }\n  }\n}\n", "\n  extension_strength <- 0\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, i, i)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- toupper(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- tolower(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- toupper(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- tolower(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- toupper(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- tolower(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- toupper(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- tolower(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- toupper(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- tolower(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- toupper(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- tolower(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- toupper(extension_name)\n \
    \   extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n    extension_name <- tolower(extension", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - nchar(extensions[i]) + 1)\n    extension_strength <-\
    \ extension_strength + toupper(extension_name) %in% toupper(extensions[i])\n \
    \ }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - nchar(extensions[i])\
    \ + 1)\n    extension_strength <- extension_strength + toupper(extension_name)\
    \ %in% toupper(extensions[i])\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - nchar(extensions[i]) + 1)\n    extension_strength <- extension_strength +\
    \ toupper(extension_name) %in% toupper(extensions[i])\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - nchar(extensions[i]) + 1)\n    extension_strength <-\
    \ extension_strength + toupper(extension_name) %in% toupper(extensions[i])\n \
    \ }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - nchar(extensions[i])\
    \ + 1)\n    extension_strength <- extension_strength + toupper(extension_name)\
    \ %in% toupper(extensions[i])\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - nchar(extensions[i]) + 1)\n    extension_strength <- extension_strength +\
    \ toupper(extension_name) %in% toupper(extensions[i])\n  }\n  \n  if(extension",
  "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name\
    \ <- substr(class_name, i, i)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_strength <- extension_strength + toupper(extension_name) -\
    \ tolower(extension_name)\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, i, i)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_strength <-\
    \ extension_strength + toupper(extension_name) - tolower(extension_name)\n  }\n\
    \  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, i, i)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_strength <- extension_strength + toupper(extension_name)\
    \ - tolower(extension_name)\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, i, i)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_strength <-\
    \ extension_strength + toupper(extension_name) - tolower(extension_name)\n  }\n\
    \  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, i, i)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_strength <- extension_strength + toupper(extension_name)\
    \ - tolower(extension_name)\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, i, i)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_strength <-\
    \ extension_strength + toupper(extension_name) - tolower(extension_name)\n  }\n\
    \  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i - 1)\n\
    \    extension_strength <- extension_strength + toupper(extension_name) %in% extensions[i]\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i - 1)\n\
    \    extension_strength <- extension_strength + tolower(extension_name) %in% extensions[i]\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i - 1)\n\
    \    extension_strength <- extension_strength + extension_name %in% extensions[i]\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i - 1)\n\
    \    extension_strength <- extension_strength + extension_name %in% extensions[i]\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i - 1)\n\
    \    extension_strength <- extension_strength + extension_name %in% extensions[i]\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i - 1)\n\
    \    extension_strength <- extension_strength + extension_name %in% extensions[i]\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i - 1)\n\
    \    extension_", "\n  extension_list <- sort(extensions, decreasing = TRUE)\n\
    \  strength <- 0\n  for(i in 1:length(extension_list)) {\n    extension_name <-\
    \ substr(extension_list[i], 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- toupper(extension_name)\n    extension_name <-\
    \ tolower(extension_name)\n    extension_name <- substr(extension_name, 1, 1)\n\
    \    strength <- strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  if(strength > 0) {\n    return(paste(class_name, extension_list[strength],\
    \ sep = '.'))\n  } else {\n    return(paste(class_name, extension_list[1], sep\
    \ = '.'))\n  }\n}\n", "\n  \n  extension_list <- sort(extensions, decreasing =\
    \ TRUE)\n  \n  extension_name <- paste(class_name, extension_list[[1]], sep =\
    \ \"\")\n  \n  extension_strength <- -1\n  \n  for(i in 2:length(extensions))\
    \ {\n    \n    extension_name <- paste(extension_name, extension_list[[i]], sep\
    \ = \"\")\n    \n    extension_strength <- extension_strength * length(tolower(extension_name))\
    \ / (length(tolower(extension_name)) + 1)\n    \n  }\n  \n  return(paste(class_name,\
    \ extension_name, sep = \"\"))\n}\n", "\n  extension_strength <- 0\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, i)\n\
    \    extension_name <- substr(extension_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- toupper(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- tolower(extension_name)\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)", "\n  \n  extension_strength <- 0\n  \n  for\
    \ (i in 1:length(extensions)) {\n    \n    extension_name <- substr(class_name,\
    \ i, i)\n    \n    extension_strength <- extension_strength + toupper(extension_name)\
    \ - tolower(extension_name)\n    \n  }\n  \n  extension_strength <- extension_strength\
    \ / length(extensions)\n  \n  return(paste(class_name, extensions[which.max(extension_strength)],\
    \ sep = '.'))\n}\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_strength <- extension_strength + toupper(substr(class_name,\
    \ i, i)) - toupper(substr(extensions[i], i, i))\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  for(i in 1:length(extensions)) {\n    if(extension_strength > 0) break\n\
    \    extension_strength <- extension_strength - toupper(substr(class_name, i,\
    \ i)) - toupper(substr(extensions[i], i, i))\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  return(paste(substr(class_name, 1, i), extensions[which.max(extension_strength)],\
    \ sep = '.'))\n}\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength > 0) {\n    extension_name <- substr(class_name,\
    \ 1, length(class_name))\n    extension_name <- substr(extension_name, 1, length(extension_name))\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- paste(extension_name,\
    \ extension_strength, sep = \"\")\n    extension_name <- paste(extension_name,\
    \ extensions, sep = \"\")\n    extension_name <- paste(extension_name, sep = \"\
    \")\n    extension_name <- paste(extension_name, sep = \"\")\n    extension_name\
    \ <- paste(extension_name, sep = \"\")\n    extension_name <- paste(extension_name,\
    \ sep = \"\")\n    extension_name <- paste(extension_name, sep = \"\")\n    extension_name\
    \ <- paste(extension_name, sep = \"\")\n    extension_name <- paste(extension_name,\
    \ sep = \"\")\n    extension_name <- paste(extension_name, sep = \"\")\n    extension_name\
    \ <- paste(extension_name, sep = \"\")\n    extension_name <- paste(extension_name,\
    \ sep = \"\")\n    extension_name <- paste(extension_name, sep = \"\")\n    extension_name\
    \ <- paste(extension_name, sep = \"\")\n    extension_name <- paste(extension_name,\
    \ sep = \"\")\n    extension_name <- paste(extension_name, sep = \"\")\n    extension_name\
    \ <- paste(extension_name, sep = \"\")\n    extension_name <- paste(extension_name,\
    \ sep = \"\")\n    extension_name <- paste(extension_name, sep = \"\")\n    extension_name\
    \ <- paste(extension_name, sep = \"\")\n    extension_name <- paste(extension_name,\
    \ sep = \"\")\n    extension_name <- paste(extension_name, sep = \"\")\n    extension_name\
    \ <- paste(extension_name, sep = \"\")\n    extension_name <- paste(extension_name,\
    \ sep = \"\")\n    extension_name <- paste(extension_name, sep = \"\")\n    extension_name\
    \ <- paste(extension_name, sep = \"\")\n    extension_name <- paste(extension_name,\
    \ sep = \"\")\n    extension_name <- paste(extension_name, sep = \"\")\n    extension_name\
    \ <- paste(extension_name, sep = \"\")\n    extension_name <- paste(extension",
  "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name\
    \ <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name, 1,\
    \ i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    ", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name",
  "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name\
    \ <- substr(class_name, i, i)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, nchar(extension_name))\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name))\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- substr(extension_name, 1, nchar(extension_name))\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- substr(extension_name, 1, nchar(extension_name))\n\
    \    extension_name <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- substr(extension_name, 1, 1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name))\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- substr(extension_name, 1, 1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name))\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- substr(extension_name, 1, 1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name))\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- substr(extension_name, 1, 1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name))\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- substr(extension_name, 1, 1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name))\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- substr(extension_name, 1, 1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name))\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- substr(extension_name, 1, 1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name))\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- substr(extension", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_name\
    \ <- substr(extension_name, 1, i)", "\n  extension_strength <- 0\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - nchar(extensions[i]) - 1)\n    extension_strength <- extension_strength +\
    \ toupper(extension_name) - toupper(extensions[i])\n  }\n  \n  if(extension_strength\
    \ > 0) {\n    return(paste(class_name, '.', extensions[which.max(extension_strength)]))\n\
    \  } else {\n    return(class_name)\n  }\n}\n</cell>\n<cell>", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - nchar(extensions[i]) - 1)\n    extension_strength <-\
    \ extension_strength + toupper(extension_name) %in% extensions[i]\n  }\n  \n \
    \ if(extension_strength == 0) return(class_name)\n  \n  extension_strength <-\
    \ extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    if(extension_strength > 0) break\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - nchar(extensions[i]) - 1)\n    extension_strength <-\
    \ extension_strength + toupper(extension_name) %in% extensions[i]\n  }\n  \n \
    \ return(paste(class_name, extensions[which.max(extension_strength)], sep = '.'))\n\
    }\n", "\n  \n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n\
    \    \n    extension_name <- substr(class_name, i, i+1)\n    \n    extension_strength\
    \ <- extension_strength + \n      length(gregexpr(paste0(extension_name, collapse\
    \ = '|'), class_name)[[1]])\n    \n  }\n  \n  return(paste(substr(class_name,\
    \ 1, 1), extensions[which.max(extension_strength)], sep = '.'))\n}\n", "\n  extension_strength\
    \ <- 0\n  \n  for (i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, i)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  extension_strength <- extension_strength / length(extensions)\n  \n\
    \  extension_name <- names(which.max(extension_strength))\n  \n  return(paste0(class_name,\
    \ '.', extension_name))\n}\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, i, i)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 2, nchar(extension_name))\n\
    \    extension_name <- toupper(extension_name)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 2, nchar(extension_name))\n\
    \    extension_name <- tolower(extension_name)\n    extension_strength <- extension_strength\
    \ + \n      ifelse(extension_name == extensions[i], 1, 0)\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  extension_name <- substr(class_name, 1, nchar(class_name))\n  extension_name\
    \ <- substr(extension_name, 1, 1)\n  extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n  extension_name <- toupper(extension_name)\n  extension_name\
    \ <- substr(extension_name, 1, 1)\n  extension_name <- substr(extension_name,\
    \ 2, nchar(extension_name))\n  extension_name <- tolower(extension_name)\n  \n\
    \  return(paste(class_name, extension_name, sep = '.'))\n}\n", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - i - 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name) - i - 1)\n    extension_strength <- extension_strength\
    \ + (toupper(extension_name) - tolower(extension_name))\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - i - 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name) - i - 1)\n    extension_strength <- extension_strength\
    \ + (toupper(extension_name) - tolower(extension_name))\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - i - 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name) - i - 1)\n    extension_strength <- extension_strength\
    \ + (toupper(extension_name) - tolower(extension_name))\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - i - 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name) - i - 1)\n    extension_strength <- extension_strength\
    \ + (toupper(extension_name) - tolower(extension_name))\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - i - 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name) - i - 1)\n    extension_strength <- extension_strength\
    \ + (toupper(extension_name) - tolower(extension_name))\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_",
  "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_strength\
    \ <- extension_strength + toupper(substring(class_name, i, i)) - toupper(substring(extensions[i],\
    \ i, i))\n  }\n  \n  if(extension_strength > 0) {\n    return(paste0(class_name,\
    \ '.', extensions[which.max(extension_strength)]))\n  } else {\n    return(class_name)\n\
    \  }\n}\n", "\n  \n  # Write your code here\n  \n}\n</cell>\n<cell>", "\n  \n\
    \  # Write your code here\n  \n}\n</cell>\n<text>\nSolution\nRun the cell below\
    \ to test your function.\n\n\n</text>\n<cell>", "\n  extension_strength <- 0\n\
    \  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name",
  "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name\
    \ <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name, 1,\
    \ i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, i)\n    ", "\n  \n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    \n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - nchar(extensions[i]) + 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extensions[i]) - 1)\n    \n    extension_strength <- extension_strength\
    \ + toupper(extension_name) - tolower(extension_name)\n    \n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  return(paste0(class_name, \".\", names(which.max(extension_strength))))\n\
    }\n", "\n  \n  # Write your code here\n  \n}\n", "\n  \n  # Initialize a list\
    \ to store the strongest extension\n  strongest_extension <- list()\n  \n  # Initialize\
    \ a counter to keep track of the number of uppercase letters\n  counter <- 0\n\
    \  \n  # Initialize a counter to keep track of the number of lowercase letters\n\
    \  counter2 <- 0\n  \n  # Initialize a counter to keep track of the number of\
    \ digits\n  counter3 <- 0\n  \n  # Initialize a counter to keep track of the number\
    \ of special characters\n  counter4 <- 0\n  \n  # Initialize a counter to keep\
    \ track of the number of special characters\n  counter5 <- 0\n  \n  # Initialize\
    \ a counter to keep track of the number of special characters\n  counter6 <- 0\n\
    \  \n  # Initialize a counter to keep track of the number of special characters\n\
    \  counter7 <- 0\n  \n  # Initialize a counter to keep track of the number of\
    \ special characters\n  counter8 <- 0\n  \n  # Initialize a counter to keep track\
    \ of the number of special characters\n  counter9 <- 0\n  \n  # Initialize a counter\
    \ to keep track of the number of special characters\n  counter10 <- 0\n  \n  #\
    \ Initialize a counter to keep track of the number of special characters\n  counter11\
    \ <- 0\n  \n  # Initialize a counter to keep track of the number of special characters\n\
    \  counter12 <- 0\n  \n  # Initialize a counter to keep track of the number of\
    \ special characters\n  counter13 <- 0\n  \n  # Initialize a counter to keep track\
    \ of the number of special characters\n  counter14 <- 0\n  \n  # Initialize a\
    \ counter to keep track of the number of special characters\n  counter15 <- 0\n\
    \  \n  # Initialize a counter to keep track of the number of special characters\n\
    \  counter16 <- 0\n  \n  # Initialize a counter to keep track of the number of\
    \ special characters\n  counter17 <- 0\n  \n  # Initialize a counter to keep track\
    \ of the number of special characters\n  counter18 <- 0\n  \n  # Initialize a\
    \ counter to keep track of the number of special characters\n  counter19 <- 0\n\
    \  \n  # Initialize a counter to keep track of the number of special characters\n\
    \  counter20 <- 0\n  \n  # Initialize a counter to keep track of the number of\
    \ special characters\n  counter21 <- 0\n  \n  # Initialize a counter to keep track\
    \ of the number of special characters\n  counter22 <- 0\n  \n  # Initialize a\
    \ counter to keep track of the number of special characters\n  counter23 <- 0\n\
    \  \n  # Initialize a counter to keep track of the number of special characters\n\
    \  counter24", "\n  \n  # Initialize a list to store the strongest extension\n\
    \  strongest_extension <- list()\n  \n  # Initialize a counter to keep track of\
    \ the number of lowercase letters\n  counter <- 0\n  \n  # Iterate over the list\
    \ of extensions\n  for(i in 1:length(extensions)) {\n    \n    # Get the number\
    \ of lowercase letters in the extension\n    counter <- counter + tolower(substring(extensions[i],\
    \ 1, 1))\n    \n    # If the number of lowercase letters is greater than the counter,\
    \ then\n    # append the extension to the strongest extension\n    if(counter\
    \ > length(extensions[i])) {\n      strongest_extension <- c(strongest_extension,\
    \ extensions[i])\n    }\n  }\n  \n  # Return the strongest extension\n  return(paste(class_name,\
    \ strongest_extension, sep = '.'))\n}\n", "\n  extension_strength <- 0\n  \n \
    \ for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name, i,\
    \ i)\n    extension_strength <- extension_strength + toupper(extension_name) %in%\
    \ extensions\n  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n\
    \  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, i, i)\n\
    \    extension_strength <- extension_strength + tolower(extension_name) %in% extensions\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, i, i)\n    extension_strength <-\
    \ extension_strength + toupper(extension_name) %in% extensions\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ i, i)\n    extension_strength <- extension_strength + tolower(extension_name)\
    \ %in% extensions\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, i, i)\n\
    \    extension_strength <- extension_strength + toupper(extension_name) %in% extensions\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, i, i)\n    extension_strength <-\
    \ extension_strength + tolower(extension_name) %in% extensions\n  }\n  \n  if(extension_strength\
    \ == 0) return(class_name)\n  \n  extension_strength <- extension_strength / length(extensions)\n\
    \  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ i, i)\n    extension_strength <- extension_strength + toupper(extension_name)\
    \ %in% extensions\n  }\n  \n  if(extension_strength == 0) return(", "\n  \n  #\
    \ Write your code here.\n  \n}\n", "\n  extension_strength <- 0\n  extension_name\
    \ <- ''\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- paste(extension_name,\
    \ extensions[i], sep = '.')\n    extension_strength <- extension_strength + toupper(class_name[i])\
    \ - toupper(extension_name[i])\n  }\n  \n  if(extension_strength > 0) {\n    extension_name\
    \ <- paste(extension_name, extensions[which.max(extension_strength)], sep = '.')\n\
    \  }\n  \n  return(paste(class_name, '.', extension_name, sep = ' '))\n}\n", "\n\
    \  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name\
    \ <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name, 1,\
    \ i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n", "\n  extension_strength <- 0\n  extension_name\
    \ <- ''\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- paste(extension_name,\
    \ extensions[i], sep = '.')\n    extension_strength <- extension_strength + toupper(substr(extension_name,\
    \ 1, 1)) -\n      toupper(substr(extension_name, 2, 1))\n  }\n  \n  if(extension_strength\
    \ > 0) {\n    return(paste(class_name, '.', extension_name, sep = \"\"))\n  }\
    \ else {\n    return(paste(class_name, '.', extension_name[length(extension_name)],\
    \ sep = \"\"))\n  }\n}\n", "\n  \n  # Your code here\n  \n}\n", "\n  \n  # Initialize\
    \ a list to store the strongest extension\n  strongest_extension <- list()\n \
    \ \n  # Initialize a counter to store the strength of the extension\n  strongest_extension_strength\
    \ <- 0\n  \n  # Initialize a counter to store the number of uppercase letters\n\
    \  upper_case_letters <- 0\n  \n  # Initialize a counter to store the number of\
    \ lowercase letters\n  lower_case_letters <- 0\n  \n  # Initialize a counter to\
    \ store the number of digits\n  digits <- 0\n  \n  # Initialize a counter to store\
    \ the number of special characters\n  special_characters <- 0\n  \n  # Initialize\
    \ a counter to store the number of words\n  words <- 0\n  \n  # Initialize a counter\
    \ to store the number of sentences\n  sentences <- 0\n  \n  # Initialize a counter\
    \ to store the number of letters\n  letters <- 0\n  \n  # Initialize a counter\
    \ to store the number of punctuations\n  punctuations <- 0\n  \n  # Initialize\
    \ a counter to store the number of sentences\n  sentences <- 0\n  \n  # Initialize\
    \ a counter to store the number of letters\n  letters <- 0\n  \n  # Initialize\
    \ a counter to store the number of punctuations\n  punctuations <- 0\n  \n  #\
    \ Initialize a counter to store the number of words\n  words <- 0\n  \n  # Initialize\
    \ a counter to store the number of sentences\n  sentences <- 0\n  \n  # Initialize\
    \ a counter to store the number of letters\n  letters <- 0\n  \n  # Initialize\
    \ a counter to store the number of punctuations\n  punctuations <- 0\n  \n  #\
    \ Initialize a counter to store the number of words\n  words <- 0\n  \n  # Initialize\
    \ a counter to store the number of sentences\n  sentences <- 0\n  \n  # Initialize\
    \ a counter to store the number of letters\n  letters <- 0\n  \n  # Initialize\
    \ a counter to store the number of punctuations\n  punctuations <- 0\n  \n  #\
    \ Initialize a counter to store the number of words\n  words <- 0\n  \n  # Initialize\
    \ a counter to store the number of sentences\n  sentences <- 0\n  \n  # Initialize\
    \ a counter to store the number of letters\n  letters <- 0\n  \n  # Initialize\
    \ a counter to store the number of punctuations\n  punctuations <- 0\n  \n  #\
    \ Initialize a counter to store the number of words\n  words <- 0\n  \n  # Initialize\
    \ a counter to store the number of sentences\n  sentences <- 0\n  \n  # Initialize\
    \ a counter to store the number of letters\n  letters <- 0\n  \n  # Initialize\
    \ a counter to store the number of punctuations\n  punctuations <- ", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)\
    \ - i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name",
  "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name\
    \ <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name, 1,\
    \ i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n", "\n  \n  # Initialize a list to store the strongest\
    \ extension\n  strongest_extension <- list()\n  \n  # Initialize a counter to\
    \ keep track of the number of uppercase letters\n  upper_case_count <- 0\n  \n\
    \  # Initialize a counter to keep track of the number of lowercase letters\n \
    \ lower_case_count <- 0\n  \n  # Initialize a counter to keep track of the number\
    \ of digits\n  digit_count <- 0\n  \n  # Initialize a counter to keep track of\
    \ the number of special characters\n  special_char_count <- 0\n  \n  # Initialize\
    \ a counter to keep track of the number of words\n  word_count <- 0\n  \n  # Initialize\
    \ a counter to keep track of the number of lines\n  line_count <- 0\n  \n  # Initialize\
    \ a counter to keep track of the number of characters\n  char_count <- 0\n  \n\
    \  # Initialize a counter to keep track of the number of lines\n  line_count <-\
    \ 0\n  \n  # Initialize a counter to keep track of the number of characters\n\
    \  char_count <- 0\n  \n  # Initialize a counter to keep track of the number of\
    \ words\n  word_count <- 0\n  \n  # Initialize a counter to keep track of the\
    \ number of lines\n  line_count <- 0\n  \n  # Initialize a counter to keep track\
    \ of the number of characters\n  char_count <- 0\n  \n  # Initialize a counter\
    \ to keep track of the number of words\n  word_count <- 0\n  \n  # Initialize\
    \ a counter to keep track of the number of lines\n  line_count <- 0\n  \n  # Initialize\
    \ a counter to keep track of the number of characters\n  char_count <- 0\n  \n\
    \  # Initialize a counter to keep track of the number of words\n  word_count <-\
    \ 0\n  \n  # Initialize a counter to keep track of the number of lines\n  line_count\
    \ <- 0\n  \n  # Initialize a counter to keep track of the number of characters\n\
    \  char_count <- 0\n  \n  # Initialize a counter to keep track of the number of\
    \ words\n  word_count <- 0\n  \n  # Initialize a counter to keep track of the\
    \ number of lines\n  line_count <- 0\n  \n  # Initialize a counter to keep track\
    \ of the number of characters\n  char_count <- 0\n  \n  # Initialize a counter\
    \ to keep track of the number of words\n  word_count <- 0\n  \n  # Initialize\
    \ a counter to keep track of the number of lines\n  line_count <- 0\n  \n  # Initialize\
    \ a counter to keep track of the number of characters\n  char_count <- 0\n  \n\
    \  # Initialize a counter to keep track of the number of words\n  word_count <-\
    \ 0\n  \n  # Initialize a counter", "\n  extensions_count <- length(extensions)\n\
    \  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extensions_count <- extensions_count - 1\n  extensions_count <- extensions_count\
    \ - 1\n  extension", "\n  \n  # Write your code here\n  \n}\n</cell>\n<cell>",
  "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name\
    \ <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name, 1,\
    \ i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name, 1,\
    \ 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name <-\
    \ substr(extension_name, 1, 1)\n", "\n  extension_strength <- 0\n  \n  for(i in\
    \ 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i - 1)\n    extension_strength <- extension_strength + toupper(extension_name)\
    \ %in% extensions[i]\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i - 1)\n    extension_strength <- extension_strength + tolower(extension_name)\
    \ %in% extensions[i]\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i - 1)\n    extension_strength <- extension_strength + extension_name %in%\
    \ extensions[i]\n  }\n  \n  if(extension_strength == 0) return(class_name)\n \
    \ \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i - 1)\n    extension_strength <- extension_strength + extension_name %in%\
    \ extensions[i]\n  }\n  \n  if(extension_strength == 0) return(class_name)\n \
    \ \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i - 1)\n    extension_strength <- extension_strength + extension_name %in%\
    \ extensions[i]\n  }\n  \n  if(extension_strength == 0) return(class_name)\n \
    \ \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i - 1)\n    extension_strength <- extension_strength + extension_name %in%\
    \ extensions[i]\n  }\n  \n  if(extension_strength == 0) return(class_name)\n \
    \ \n  extension_strength <- extension_strength / length(extensions)\n  \n  for(i\
    \ in 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, nchar(class_name)\
    \ - i - 1)\n    extension_", "\n  \n  # Write your code here\n  \n}\n", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name)-i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)-i)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name)-i)\n  \
    \  extension_name <- substr(extension_name, 1, nchar(extension_name)-i)\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name)-i)\n    extension_name <-\
    \ substr(extension_name, 1, nchar(extension_name)-i)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name)-i)\n    extension_name <- substr(extension_name, 1,\
    \ nchar(extension_name)-i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)-i)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name)-i)\n  \
    \  extension_name <- substr(extension_name, 1, nchar(extension_name)-i)\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name)-i)\n    extension_name <-\
    \ substr(extension_name, 1, nchar(extension_name)-i)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name)-i)\n    extension_name <- substr(extension_name, 1,\
    \ nchar(extension_name)-i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)-i)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name)-i)\n  \
    \  extension_name <- substr(extension_name, 1, nchar(extension_name)-i)\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name)-i)\n    extension_name <-\
    \ substr(extension_name, 1, nchar(extension_name)-i)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name)-i)\n    extension_name <- substr(extension_name, 1,\
    \ nchar(extension_name)-i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)-i)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name)-i)\n  \
    \  extension_name <- substr(extension_name, 1, nchar(extension_name)-i)\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name)-i)\n    extension_name <-\
    \ substr(extension_name, 1, nchar(extension_name)-i)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name)-i)\n    extension_name <- substr(extension_name, 1,\
    \ nchar(extension_name)-i)\n    extension_name <- substr(extension_name, 1, nchar(extension_name)-i)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension", "\n  \n  #\
    \ Initialize a list to store the strongest extension\n  strongest_extension <-\
    \ list()\n  \n  # Loop through the list of extensions\n  for(i in 1:length(extensions))\
    \ {\n    \n    # Get the extension's name\n    extension_name <- substr(extensions[i],\
    \ 1, nchar(extensions[i]) - 2)\n    \n    # Get the extension's strength\n   \
    \ extension_strength <- substr(extensions[i], nchar(extensions[i]) - 2, nchar(extensions[i]))\n\
    \    \n    # If the extension's strength is -1, then append the extension's name\
    \ to the strongest extension\n    if(extension_strength == -1) {\n      strongest_extension\
    \ <- c(strongest_extension, extension_name)\n    }\n    \n    # If the extension's\
    \ strength is 0, then append the extension's name to the strongest extension\n\
    \    if(extension_strength == 0) {\n      strongest_extension <- c(strongest_extension,\
    \ extension_name)\n    }\n    \n    # If the extension's strength is 1, then append\
    \ the extension's name to the strongest extension\n    if(extension_strength ==\
    \ 1) {\n      strongest_extension <- c(strongest_extension, extension_name)\n\
    \    }\n    \n    # If the extension's strength is 2, then append the extension's\
    \ name to the strongest extension\n    if(extension_strength == 2) {\n      strongest_extension\
    \ <- c(strongest_extension, extension_name)\n    }\n    \n    # If the extension's\
    \ strength is 3, then append the extension's name to the strongest extension\n\
    \    if(extension_strength == 3) {\n      strongest_extension <- c(strongest_extension,\
    \ extension_name)\n    }\n    \n    # If the extension's strength is 4, then append\
    \ the extension's name to the strongest extension\n    if(extension_strength ==\
    \ 4) {\n      strongest_extension <- c(strongest_extension, extension_name)\n\
    \    }\n    \n    # If the extension's strength is 5, then append the extension's\
    \ name to the strongest extension\n    if(extension_strength == 5) {\n      strongest_extension\
    \ <- c(strongest_extension, extension_name)\n    }\n    \n    # If the extension's\
    \ strength is 6, then append the extension's name to the strongest extension\n\
    \    if(extension_strength == 6) {\n      strongest_extension <- c(strongest_extension,\
    \ extension_name)\n    }\n    \n    # If the extension's strength is 7, then append\
    \ the extension's name to the strongest extension\n    if(extension_strength ==\
    \ 7) {\n      strongest_extension <- c(strongest_extension, extension_name)\n\
    \    }\n    \n    # If the extension's ", "\n  extension_list <- sort(extensions,\
    \ decreasing = TRUE)\n  strength <- 0\n  for(i in 1:length(extension_list)) {\n\
    \    extension_name <- substr(extension_list[i], 1, nchar(extension_list[i])-1)\n\
    \    extension_name <- tolower(extension_name)\n    strength <- strength + toupper(extension_name)\
    \ %in% substr(class_name, 1, nchar(class_name)-1)\n  }\n  if(strength == 0) return(class_name)\n\
    \  else return(paste(substr(class_name, 1, nchar(class_name)-1), extension_list[strength],\
    \ sep = \"\"))\n}\n</cell>\n<cell>", "\n  \n  extension_list <- sort(extensions,\
    \ decreasing = TRUE)\n  \n  strength <- 0\n  \n  for(i in 1:length(extension_list))\
    \ {\n    \n    extension_name <- substr(class_name, start = 1, stop = i)\n   \
    \ \n    extension_name <- substr(extension_name, start = 1, stop = i)\n    \n\
    \    extension_name <- substr(extension_name, start = 1, stop = i)\n    \n   \
    \ extension_name <- substr(extension_name, start = 1, stop = i)\n    \n    extension_name\
    \ <- substr(extension_name, start = 1, stop = i)\n    \n    extension_name <-\
    \ substr(extension_name, start = 1, stop = i)\n    \n    extension_name <- substr(extension_name,\
    \ start = 1, stop = i)\n    \n    extension_name <- substr(extension_name, start\
    \ = 1, stop = i)\n    \n    extension_name <- substr(extension_name, start = 1,\
    \ stop = i)\n    \n    extension_name <- substr(extension_name, start = 1, stop\
    \ = i)\n    \n    extension_name <- substr(extension_name, start = 1, stop = i)\n\
    \    \n    extension_name <- substr(extension_name, start = 1, stop = i)\n   \
    \ \n    extension_name <- substr(extension_name, start = 1, stop = i)\n    \n\
    \    extension_name <- substr(extension_name, start = 1, stop = i)\n    \n   \
    \ extension_name <- substr(extension_name, start = 1, stop = i)\n    \n    extension_name\
    \ <- substr(extension_name, start = 1, stop = i)\n    \n    extension_name <-\
    \ substr(extension_name, start = 1, stop = i)\n    \n    extension_name <- substr(extension_name,\
    \ start = 1, stop = i)\n    \n    extension_name <- substr(extension_name, start\
    \ = 1, stop = i)\n    \n    extension_name <- substr(extension_name, start = 1,\
    \ stop = i)\n    \n    extension_name <- substr(extension_name, start = 1, stop\
    \ = i)\n    \n    extension_name <- substr(extension_name, start = 1, stop = i)\n\
    \    \n    extension_name <- substr(extension_name, start = 1, stop = i)\n   \
    \ \n    extension_name <- substr(extension_name, start = 1, stop = i)\n    \n\
    \    extension_name <- substr(extension_name, start = 1, stop = i)\n    \n   \
    \ extension_name <- substr(extension_name, start = 1, stop = i)\n    \n    extension_name\
    \ <- substr(extension_name, start = 1, stop = i)\n    \n    extension_name <-\
    \ substr(extension_name, start = 1, stop = i)\n    \n    extension_name <- substr(extension_name,\
    \ start = 1, stop = i)\n    \n    extension_name <- substr(extension_name, start\
    \ = 1, stop = i)\n    \n    extension_name <- substr(extension_name, start = 1,\
    \ stop = i)\n    \n    extension_name <- substr(extension_name, ", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ i, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- tolower(extension_name)\n    extension_strength <- extension_strength + \n\
    \      length(grep(extension_name, extensions)) / length(extensions)\n  }\n  \n\
    \  if(extension_strength == 0) return(class_name)\n  \n  extension_strength <-\
    \ extension_strength - 0.5\n  \n  extension_name <- substr(class_name, 1, i)\n\
    \  extension_name <- substr(extension_name, 1, 1)\n  extension_name <- tolower(extension_name)\n\
    \  \n  return(paste(class_name, extension_name, sep = '.'))\n}\n", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ i, i+1)\n    extension_strength <- extension_strength + \n      length(gregexpr(paste0(extension_name,\
    \ collapse = '|'), class_name)[[1]])\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength / length(extensions)\n  \n  if(extension_strength\
    \ > 0) return(paste0(class_name, '.', extensions[which.max(extension_strength)]))\n\
    \  \n  return(class_name)\n}\n", "\n  \n  # Initialize a list to store the strongest\
    \ extension\n  strongest_extension <- list()\n  \n  # Loop through the list of\
    \ extensions\n  for(i in 1:length(extensions)) {\n    \n    # Initialize a counter\
    \ to keep track of how many letters we've seen\n    letter_counter <- 0\n    \n\
    \    # Loop through the letters in the extension\n    for(j in 1:length(extensions[[i]]))\
    \ {\n      \n      # Increment the counter\n      letter_counter <- letter_counter\
    \ + 1\n      \n      # If the letter we've seen is equal to the letter we're looking\
    \ for\n      if(letters[extensions[[i]][j]] == letters[i]) {\n        \n     \
    \   # Add the extension to the strongest extension\n        strongest_extension[[i]]\
    \ <- extensions[[i]]\n        break\n      }\n    }\n  }\n  \n  # Return the strongest\
    \ extension\n  return(strongest_extension[[1]])\n}\n", "\n  extension_strength\
    \ <- 0\n  \n  for(i in 1:length(extensions)) {\n    extension_name <- substr(class_name,\
    \ 1, nchar(class_name) - i - 1)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name) - i)\n    extension_name <- substr(extension_name,\
    \ 1, nchar(extension_name))\n    extension_name <- tolower(extension_name)\n \
    \   extension_strength <- extension_strength + \n      length(grep(extension_name,\
    \ extensions)) / length(extensions)\n  }\n  \n  if(extension_strength == 0) return(class_name)\n\
    \  \n  extension_strength <- extension_strength * -1\n  \n  extension_strength\
    \ <- sort(extension_strength)\n  \n  return(paste(substr(class_name, 1, nchar(class_name)\
    \ - length(extension_strength)),\n              extension_strength, \n       \
    \       substr(class_name, nchar(class_name) + length(extension_strength)))\n\
    \  )\n}\n", "\n  \n  # Write your code here\n  \n}\n", "\n  \n  # Initialize a\
    \ list to store the strongest extension\n  strongest_extension <- list()\n  \n\
    \  # Initialize a counter to keep track of how many extensions have a \n  # strength\
    \ greater than zero\n  counter <- 0\n  \n  # Loop through the extensions and check\
    \ if they are greater than zero\n  for(i in 1:length(extensions)) {\n    \n  \
    \  # Get the extension's name\n    extension_name <- substr(class_name, i, i+1)\n\
    \    \n    # Get the extension's strength\n    extension_strength <- substr(class_name,\
    \ i+1, 1)\n    \n    # Check if this extension is greater than zero\n    if(extension_strength\
    \ > 0) {\n      \n      # Increment the counter\n      counter <- counter + 1\n\
    \      \n      # Append the extension to the strongest extension\n      strongest_extension\
    \ <- c(strongest_extension, extension_name)\n      \n    }\n  }\n  \n  # Return\
    \ the strongest extension\n  return(strongest_extension[which.max(strongest_extension)])\n\
    }\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n \
    \   extension_name <- substr(class_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, i)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n", "\n  \n  # Write your code here\n  \n}\n\
    </cell>\n<text>\nNow let's test your function with the example you provided:\n\
    \n\n</text>\n<cell>", "\n  \n  # Initialize a list to store the strongest extension\n\
    \  strongest_extension <- list()\n  \n  # Initialize a counter to keep track of\
    \ the number of uppercase letters\n  cap_counter <- 0\n  \n  # Initialize a counter\
    \ to keep track of the number of lowercase letters\n  sm_counter <- 0\n  \n  #\
    \ Iterate through the extensions\n  for(i in 1:length(extensions)) {\n    \n \
    \   # Extract the extension name\n    extension_name <- substr(extensions[i],\
    \ 1, nchar(extensions[i]) - 2)\n    \n    # Extract the extension strength\n \
    \   extension_strength <- substr(extensions[i], nchar(extensions[i]) - 2, nchar(extensions[i]))\n\
    \    \n    # Increment the counter\n    cap_counter <- cap_counter + 1\n    sm_counter\
    \ <- sm_counter + 1\n    \n    # If the extension strength is -1, it is the strongest\
    \ extension\n    if(extension_strength == \"-1\") {\n      \n      # Add the extension\
    \ to the list\n      strongest_extension <- c(strongest_extension, extension_name)\n\
    \      \n      # If the number of uppercase letters is the same as the number\
    \ of lowercase letters, \n      # then we found the strongest extension\n    \
    \  if(cap_counter == sm_counter) {\n        break\n      }\n    }\n  }\n  \n \
    \ # Return the strongest extension\n  return(paste(class_name, strongest_extension,\
    \ sep = \".\"))\n}\n", "\n  extensions_count <- length(extensions)\n  extensions_count\
    \ <- ifelse(extensions_count == 0, -1, extensions_count)\n  extensions_count <-\
    \ ifelse(extensions_count > 1, extensions_count, -1)\n  extensions_count <- ifelse(extensions_count\
    \ == -1, 0, extensions_count)\n  extensions_count <- ifelse(extensions_count <\
    \ 0, 0, extensions_count)\n  extensions_count <- ifelse(extensions_count > 0,\
    \ extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ == 1, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ > 1, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ == 2, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ > 2, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ == 3, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ > 3, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ == 4, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ > 4, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ == 5, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ > 5, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ == 6, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ > 6, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ == 7, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ > 7, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ == 8, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ > 8, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ == 9, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ > 9, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ == 10, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ > 10, extensions_count, extensions_count)\n  extensions_count <- ifelse(extensions_count\
    \ == 11, extensions_count, extensions_count)\n  extensions_count ", "\n  \n  #\
    \ Initialize a list to store the extensions' strengths.\n  extensions_strengths\
    \ <- list()\n  \n  # Loop through the extensions and find the strongest one.\n\
    \  for(i in 1:length(extensions)) {\n    \n    # Get the extension's name.\n \
    \   extension_name <- substr(class_name, 1, i)\n    \n    # Get the extension's\
    \ strength.\n    extension_strength <- toupper(substr(class_name, i + 1, i)) -\n\
    \      toupper(substr(extension_name, 1, i))\n    \n    # Add the extension's\
    \ strength to the list.\n    extensions_strengths[[i]] <- extension_strength\n\
    \  }\n  \n  # Return the strongest extension.\n  names(which.max(extensions_strengths))\n\
    }\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n \
    \   extension_name <- substr(class_name, 1, nchar(class_name) - i - 1)\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name) - i)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i - 1)\n\
    \    extension_name <- substr(extension_name, 1, nchar(extension_name) - i)\n\
    \    if(extension_strength > extension_strength[extension_strength == extension_name])\
    \ return(paste(class_name, extension_name, sep = \".\"))\n  }\n  \n  return(class_name)\n\
    }\n", "\n  extension_strength <- 0\n  \n  for(i in 1:length(extensions)) {\n \
    \   extension_name <- substr(class_name, 1, nchar(class_name) - i)\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name) - i)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength == 0) return(class_name)\n  \n  extension_strength\
    \ <- extension_strength / length(extensions)\n  \n  for(i in 1:length(extensions))\
    \ {\n    extension_name <- substr(class_name, 1, nchar(class_name) - i)\n    extension_name\
    \ <- substr(extension_name, 1, nchar(extension_name) - i)\n    extension_strength\
    \ <- extension_strength + toupper(extension_name) - tolower(extension_name)\n\
    \  }\n  \n  if(extension_strength > 0) return(paste(class_name, extensions[which.max(extension_strength)]))\n\
    \  \n  return(class_name)\n}\n", "\n  extension_strength <- 0\n  \n  for(i in\
    \ 1:length(extensions)) {\n    extension_name <- substr(class_name, 1, i)\n  \
    \  extension_name <- substr(extension_name, 1, i)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n    extension_name\
    \ <- substr(extension_name, 1, 1)\n    extension_name <- substr(extension_name,\
    \ 1, 1)\n    extension_name <- substr(extension_name, 1, 1)\n"]
stop_tokens:
- "\n#"
- "\n```"
