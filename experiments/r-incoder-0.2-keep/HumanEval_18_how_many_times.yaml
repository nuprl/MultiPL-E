name: HumanEval_18_how_many_times
language: r
prompt: "# Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
  \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\nhow_many_times <- function(string,\
  \ substring) {"
tests: "test_humaneval <- function() {\ncandidate <- how_many_times\n    if(!identical(candidate('',\
  \ 'x'), 0)){quit('no', 1)}\n    if(!identical(candidate('xyxyxyx', 'x'), 4)){quit('no',\
  \ 1)}\n    if(!identical(candidate('cacacacac', 'cac'), 4)){quit('no', 1)}\n   \
  \ if(!identical(candidate('john doe', 'john'), 1)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  n <- nchar(substring)\n  str_count <- str_count(string, substring)\n\
    \  str_count <- str_count - str_count(string, substring(string, 1, n))\n  str_count\
    \ <- str_count - str_count(string, substring(string, n + 1, nchar(string)))\n\
    \  str_count\n}\n", "\n  return(sum(gregexpr(substring, string, fixed = TRUE)$length))\n\
    }\n", "\n  str_count <- str_count(string, substring)\n  str_count <- str_count\
    \ - str_count(substring, string) + str_count(string, substring)\n  return(str_count)\n\
    }\n", "\n  n <- nchar(string)\n  m <- nchar(substring)\n  \n  if(m > n) stop(\"\
    Substring must be longer than the string\")\n  \n  n <- nchar(substring)\n  \n\
    \  if(n == 0) return(0)\n  \n  if(m > n) stop(\"Substring must be longer than\
    \ the string\")\n  \n  n <- nchar(substring)\n  \n  if(m == 0) return(0)\n  \n\
    \  if(m > n) stop(\"Substring must be longer than the string\")\n  \n  n <- nchar(substring)\n\
    \  \n  if(m == 0) return(0)\n  \n  if(m > n) stop(\"Substring must be longer than\
    \ the string\")\n  \n  n <- nchar(substring)\n  \n  if(m == 0) return(0)\n  \n\
    \  if(m > n) stop(\"Substring must be longer than the string\")\n  \n  n <- nchar(substring)\n\
    \  \n  if(m == 0) return(0)\n  \n  if(m > n) stop(\"Substring must be longer than\
    \ the string\")\n  \n  n <- nchar(substring)\n  \n  if(m == 0) return(0)\n  \n\
    \  if(m > n) stop(\"Substring must be longer than the string\")\n  \n  n <- nchar(substring)\n\
    \  \n  if(m == 0) return(0)\n  \n  if(m > n) stop(\"Substring must be longer than\
    \ the string\")\n  \n  n <- nchar(substring)\n  \n  if(m == 0) return(0)\n  \n\
    \  if(m > n) stop(\"Substring must be longer than the string\")\n  \n  n <- nchar(substring)\n\
    \  \n  if(m == 0) return(0)\n  \n  if(m > n) stop(\"Substring must be longer than\
    \ the string\")\n  \n  n <- nchar(substring)\n  \n  if(m == 0) return(0)\n  \n\
    \  if(m > n) stop(\"Substring must be longer than the string\")\n  \n  n <- nchar(substring)\n\
    \  \n  if(m == 0) return(0)\n  \n  if(m > n) stop(\"Substring must be longer than\
    \ the string\")\n  \n  n <- nchar(substring)\n  \n  if(m == 0) return(0)\n  \n\
    \  if(m > n) stop(\"Substring must be longer than the string\")\n  \n  n <- nchar(substring",
  "\n  sum(gregexpr(substring, string, perl = TRUE)$lengths)\n}\n", "\n  str_count\
    \ <- str_count(string, substring)\n  str_count <- str_count + str_count(substring,\
    \ string) - str_count(string, substring)\n  str_count\n}\n", "\n  return(sum(gregexpr(substring,\
    \ string, fixed = TRUE)$length))\n}\n", "\n  n <- nchar(substring)\n  sum(gregexpr(substring,\
    \ string, perl = TRUE)$length) - n\n}\n", "\n  nchar(gsub(substring, \"\", string))\n\
    }\n", "\n  n <- nchar(substring)\n  sum(gregexpr(substring, string, fixed = TRUE)$lengths)\n\
    }\n", "\n  n <- nchar(string)\n  n1 <- nchar(substring)\n  \n  if(n1 == 0) {\n\
    \    return(0)\n  }\n  \n  if(n == n1) {\n    return(1)\n  }\n  \n  if(n1 > n)\
    \ {\n    return(0)\n  }\n  \n  i <- 0\n  \n  while(i < n) {\n    \n    if(string[i]\
    \ == substring[i]) {\n      i <- i + 1\n      \n      if(i == n1) {\n        return(i)\n\
    \      }\n      \n      if(string[i] == substring[i + 1]) {\n        i <- i +\
    \ 2\n      }\n      \n      if(i == n1) {\n        return(i)\n      }\n      \n\
    \      if(string[i] == substring[i + 2]) {\n        i <- i + 3\n      }\n    \
    \  \n      if(i == n1) {\n        return(i)\n      }\n      \n      if(string[i]\
    \ == substring[i + 3]) {\n        i <- i + 4\n      }\n      \n      if(i == n1)\
    \ {\n        return(i)\n      }\n      \n      if(string[i] == substring[i + 4])\
    \ {\n        i <- i + 5\n      }\n      \n      if(i == n1) {\n        return(i)\n\
    \      }\n      \n      if(string[i] == substring[i + 5]) {\n        i <- i +\
    \ 6\n      }\n      \n      if(i == n1) {\n        return(i)\n      }\n      \n\
    \      if(string[i] == substring[i + 6]) {\n        i <- i + 7\n      }\n    \
    \  \n      if(i == n1) {\n        return(i)\n      }\n      \n      if(string[i]\
    \ == substring[i + 7]) {\n        i <- i + 8\n      }\n      \n      if(i == n1)\
    \ {\n        return(i)\n      }\n      \n      if(string[i] == substring[i + 8])\
    \ {\n        i <- i + 9\n      }\n      \n      if(i == n1) {\n        return(i)\n\
    \      }\n      \n      if(string[i] == substring[i + 9]) {\n        i <- i +\
    \ 10\n      }\n      \n      if(i == n1) {\n        return(i)\n      }\n     \
    \ \n      if(string[i] == substring[i + 10]) {\n        i <- i + 11\n      }\n\
    \      \n      if(i == n1) {\n        return(i)\n      }\n      \n      if(string[i]\
    \ == substring[i + 11]) {\n        i <- i + 12\n      }\n      \n      if(i ==\
    \ n1) {\n        return(i)\n      }\n      \n      if(string[i] == substring[i\
    \ + 12]) {\n        i <- i + 13\n      }\n      \n      if(i == n1) {\n      \
    \  return(i)\n      }\n      \n      if(string[i] == substring[i + 13]) {\n  \
    \      i <- i + 14\n      }", "\n  return(sum(gregexpr(substring, string, fixed\
    \ = TRUE)$length))\n}\n", "\n  return(sum(gregexpr(substring, string, fixed =\
    \ TRUE)$length))\n}\n", "\n  n <- nchar(substring)\n  sum(gregexpr(substring,\
    \ string, fixed = TRUE)$lengths) - n\n}\n", "\n  return(sum(gregexpr(substring,\
    \ string, fixed = TRUE)$length))\n}\n", "\n  return(length(gregexpr(substring,\
    \ string, fixed = TRUE)) - 1)\n}\n", "\n  sum(gregexpr(substring, string, fixed\
    \ = TRUE))\n}\n", "\n  return(sum(gregexpr(substring, string, fixed = TRUE)$length))\n\
    }\n", "\n  n <- nchar(substring)\n  sum(gregexpr(substring, string, fixed = TRUE)$lengths)\n\
    }\n", "\n  return(length(gregexpr(substring, string, fixed = TRUE)) - 1)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
