name: HumanEval_108_count_nums
language: r
prompt: "# Write a function count_nums which takes an array of integers and returns\n\
  # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
  \ then its first signed digit will be negative:\n# e.g. -123 has signed digits -1,\
  \ 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) == 1\n#\
  \ >>> count_nums([1, 1, 2]) == 3\ncount_nums <- function(arr) {"
tests: "test_humaneval <- function() {\ncandidate <- count_nums\n    if(!identical(candidate(c()),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate(c(-1, -2, 0)), 0)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(1, 1, 2, -2, 3, 4, 5)), 6)){quit('no', 1)}\n\
  \    if(!identical(candidate(c(1, 6, 9, -6, 0, 1, 5)), 5)){quit('no', 1)}\n    if(!identical(candidate(c(1,\
  \ 100, 98, -7, 1, -1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(12, 23,\
  \ 34, -45, -56, 0)), 5)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 1)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(1)), 1)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  sum(sapply(arr, function(x) {\n    sum(as.integer(sign(x) * as.integer(digits(x)))\
    \ > 0)\n  }))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) sum(x %/%\
    \ 10 > 0)))\n}\n", "\n  n <- length(arr)\n  sum(sapply(arr, function(x) {\n  \
    \  sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n",
  "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n</cell>\n<cell>",
  "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(strsplit(as.character(x), \"-\")[[1]])) > 0))\n}\n\
    </cell>\n<cell>\ncount_nums(arr)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes an array of integers and returns the number of elements which has\
    \ a sum of digits > 0.\n\n\n</text>\n<cell>", "\n  sum(sapply(arr, function(x)\
    \ x > 0))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n<cell>",
  "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n</cell>\n<cell>",
  "\n  sum(sapply(arr, function(x) {\n    sum(x > 0)\n  }))\n}\n</cell>\n<cell>\n\
    count_nums(arr)\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) x > 0))\n\
    }\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) {\n    sum(x %/% 10 > 0)\n\
    \  }))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n<cell>", "\n\
    \  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n</cell>\n<cell>\n\
    count_nums([-1, 1, -10, -100, -1000, -1000000000])\n</cell>\n<cell>\ncount_nums(c(1,\
    \ -1, -10, -100, -1000, -1000000000, 1))\n</cell>\n<cell>\ncount_nums(c(1, -1,\
    \ -10, -100, -1000, -1000000000, -1))\n</cell>\n<cell>\ncount_nums(c(1, -1, -10,\
    \ -100, -1000, -1000000000, -10))\n</cell>\n<cell>\ncount_nums(c(1, -1, -10, -100,\
    \ -1000, -1000000000, -100))\n</cell>\n<cell>\ncount_nums(c(1, -1, -10, -100,\
    \ -1000, -1000000000, -100000000))\n</cell>\n<cell>\ncount_nums(c(1, -1, -10,\
    \ -100, -1000, -1000000000, -1000000000))\n</cell>\n<cell>\ncount_nums(c(1, -1,\
    \ -10, -100, -1000, -1000000000, -10000000000))\n</cell>\n<cell>\ncount_nums(c(1,\
    \ -1, -10, -100, -1000, -1000000000, -100000000000))\n</cell>\n<cell>\ncount_nums(c(1,\
    \ -1, -10, -100, -1000, -1000000000, -1000000000000))\n</cell>\n<cell>\ncount_nums(c(1,\
    \ -1, -10, -100, -1000, -1000000000, -10000000000000))\n</cell>\n<cell>\ncount_nums(c(1,\
    \ -1, -10, -100, -1000, -1000000000, -1000000000000000))\n</cell>\n<cell>\ncount_nums(c(1,\
    \ -1, -10, -100, -1000, -1000000000, -10000000000000000))\n</cell>\n<cell>\ncount_nums(c(1,\
    \ -1, -10, -100, -1000, -1000000000, -100000000000000000))\n</cell>\n<cell>\n\
    count_nums(c(1, -1, -10, -100, -1000, -1000000000, -1000000000000000000))\n</cell>\n\
    <cell>\ncount_nums(c(1, -1, -10, -100, -1000, -1000000000, -10000000000000000000))\n\
    </cell>\n<cell>\ncount_nums(c(1, -1, -10, -100, -1000, -1000000000, -100000000000000000000))\n\
    </cell>\n<cell>\ncount_nums(c(1, -1, -10, -100, -1000, -1000000000, -1000000000000000000000))\n\
    </cell>\n<cell>", "\n  n <- length(arr)\n  sum(sapply(arr, function(x) x > 0))\n\
    }\n", "\n  sum(sapply(arr, function(x) {\n    sum(x > 0)\n  }))\n}\n</cell>\n\
    <cell>", "\n  sum(sapply(arr, function(x) {\n    sum(x > 0)\n  }))\n}\n", "\n\
    \  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ {\n    sum(x %/% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) x >\
    \ 0))\n}\n</cell>\n<cell>\ncount_nums(arr)\n</cell>\n<text>\nNow let's try it\
    \ out on some larger arrays:\n\n\n</text>\n<cell>\narr <- c(123, -456, -7, -9,\
    \ -10, -12, -13, -14)\ncount_nums(arr)\n</cell>\n<cell>\narr <- c(123, -456, -7,\
    \ -9, -10, -12, -13, -14, -15, -16, -17, \n         -18, 19, -20, 21, 22, 23,\
    \ 24, 25, 26, -27, -28, -29, -30, -31, \n         -32, -33, -34, -35, -36, -37,\
    \ -38, -39, -40, -41, -42, -43, \n         -44, -45)\ncount_nums(arr)\n</cell>\n\
    <text>\nNow let's try it out on some larger arrays:\n\n\n</text>\n<cell>\narr\
    \ <- c(123, -456, -7, -9, -10, -12, -13, -14, -15, -16, -17, \n         -18, 19,\
    \ -20, 21, 22, 23, 24, 25, 26, -27, -28, -29, -30, -31, \n         -32, -33, -34,\
    \ -35, -36, -37, -38, -39, -40, -41, -42, -43, \n         -44, -45, -46)\ncount_nums(arr)\n\
    </cell>\n<text>\nNow let's try it out on some larger arrays:\n\n\n</text>\n<cell>\n\
    arr <- c(123, -456, -7, -9, -10, -12, -13, -14, -15, -16, -17, \n         -18,\
    \ 19, -20, 21, 22, 23, 24, 25, 26, -27, -28, -29, -30, -31, \n         -32, -33,\
    \ -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, \n         -44, -45, -46,\
    \ -47, -48, -49, -50)\ncount_nums(arr)\n</cell>\n<text>\nNow let's try it out\
    \ on some larger arrays:\n\n\n</text>\n<cell>\narr <- c(123, -456, -7, -9, -10,\
    \ -12, -13, -14, -15, -16, -17, \n         -18, 19, -20, 21, 22, 23, 24, 25, 26,\
    \ -27, -28, -29, -30, -31, \n         -32, -33, -34, -35, -36, -37, -38, -39,\
    \ -40, -41, -42, -43, \n         -44, -", "\n  sum(sapply(arr, function(x) {\n\
    \    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) {\n    sum(x\
    \ > 0)\n  }))\n}\n", "\n  n <- length(arr)\n  sum <- 0\n  for(i in 1:n) {\n  \
    \  sum <- sum + arr[i]\n    if(sum > 0) {\n      break\n    }\n  }\n  return(sum)\n\
    }\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(arr\
    \ > 0)\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(x %% 10 == 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ {\n    sum(x %/% 10 > 0)\n  }))\n}\n", "\n  sum(arr > 0)\n}\n</cell>\n<cell>",
  "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ x > 0))\n}\n", "\n  sum(sapply(arr, function(x) sum(as.integer(x)>0)))\n}\n\
    </cell>\n<cell>", "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n \
    \ }))\n}\n</cell>\n<cell>\ncount_nums([-1, 1, -2, 3, -4, -5, -6, -7, -8, -9])\n\
    </cell>\n<cell>", "\n  sum(sapply(arr, function(x) {\n    sum(x %/% 10 > 0)\n\
    \  }))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) {\n    sum(x %%\
    \ 10 > 0)\n  }))\n}\n</cell>\n<cell>", "\n  sum(arr %/% 10 > 0)\n}\n</cell>\n\
    <cell>", "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n",
  "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n", "\n  sum(sapply(arr, function(x) {\n    sum(x %%\
    \ 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(as.integer(sign(x) * as.integer(x)))\n  }))\n}\n", "\n\
    \  sum(sapply(arr, function(x) sum(as.integer(substr(x, 1, 1))) > 0))\n}\n</cell>\n\
    <cell>\ncount_nums(arr)\n</cell>\n<text>\nNow let's try it out on some larger\
    \ arrays:\n\n\n</text>\n<cell>", "\n  n <- length(arr)\n  sum(sapply(arr, function(x)\
    \ {\n    sum(x %/% 10 > 0)\n  }))\n}\n", "\n  n <- length(arr)\n  sapply(arr,\
    \ function(x) {\n    if (x > 0) sum(as.integer(sign(x)) * seq_along(x)) else 0\n\
    \  })\n}\n</cell>\n<cell>\ncount_nums([-2, -4, -6, -10, -12, -14, -16, -18, -21])\n\
    </cell>\n<cell>\ncount_nums([-2, -4, -6, -10, -12, -14, -16, -18, -21, -24])\n\
    </cell>\n<cell>\ncount_nums([-2, -4, -6, -10, -12, -14, -16, -18, -21, -24, -26])\n\
    </cell>\n<cell>\ncount_nums([-2, -4, -6, -10, -12, -14, -16, -18, -21, -24, -26,\
    \ -28])\n</cell>\n<cell>\ncount_nums([-2, -4, -6, -10, -12, -14, -16, -18, -21,\
    \ -24, -26, -28, -32])\n</cell>\n<cell>\ncount_nums([-2, -4, -6, -10, -12, -14,\
    \ -16, -18, -21, -24, -26, -28, -32, -34])\n</cell>\n<cell>\ncount_nums([-2, -4,\
    \ -6, -10, -12, -14, -16, -18, -21, -24, -26, -28, -32, -34, -36])\n</cell>\n\
    <cell>\ncount_nums([-2, -4, -6, -10, -12, -14, -16, -18, -21, -24, -26, -28, -32,\
    \ -34, -36, -38])\n</cell>\n<cell>\ncount_nums([-2, -4, -6, -10, -12, -14, -16,\
    \ -18, -21, -24, -26, -28, -32, -34, -36, -38, -42])\n</cell>\n<cell>\ncount_nums([-2,\
    \ -4, -6, -10, -12, -14, -16, -18, -21, -24, -26, -28, -32, -34, -36, -38, -42,\
    \ -44])\n</cell>\n<cell>\ncount_nums([-2, -4, -6, -10, -12, -14, -16, -18, -21,\
    \ -24, -26, -28, -32, -34, -36, -38, -42, -44, -46])\n</cell>\n<cell>\ncount_nums([-2,\
    \ -4, -6, -10, -12, -14, -16, -18, ", "\n  sum(sapply(arr, function(x) sum(as.integer(x)\
    \ > 0)))\n}\n", "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 == 0) # check\
    \ if x is positive\n  }))\n}\n", "\n  sum(sapply(arr, function(x) {\n    sum(x\
    \ > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) {\n    sum(x > 0)\n  }))\n\
    }\n", "\n  sum(sapply(arr, function(x) sum(as.integer(x) > 0))) > 0\n}\n", "\n\
    \  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ {\n    sum(x %/% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) {\n\
    \    sum(x %/% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) sum(as.integer(sign(x)))\
    \ > 0))\n}\n</cell>\n<cell>\ncount_nums(arr)\n</cell>\n<text>\nExercise: Write\
    \ a function that takes an array of integers and returns the number of elements\
    \ which has a sum of digits < 0.\nIf a number is negative, then its first signed\
    \ digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([])\
    \ == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>>\
    \ count_nums([-1, -1, 1, -2, 2, -3, 3, -4]) == 4\n>>> count_nums([-1, -1, 1, -2,\
    \ 2, -3, 3, -4, -5]) == 5\n>>> count_nums([-1, -1, 1, -2, 2, -3, 3, -4, -5, -6,\
    \ -7, -8, -9]) == 6\n>>> count_nums([-1, -1, 1, -2, 2, -3, 3, -4, -5, -6, -7,\
    \ -8, -9, -10, -11]) == 7\n>>> count_nums([-1, -1, 1, -2, 2, -3, 3, -4, -5, -6,\
    \ -7, -8, -9, -10, -11, -12, -13]) == 8\n>>> count_nums([-1, -1, 1, -2, 2, -3,\
    \ 3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]) == 9\n>>> count_nums([-1,\
    \ -1, 1, -2, 2, -3, 3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16,\
    \ -17]) == 10\n>>> count_nums([-1, -1, 1, -2, 2, -3, 3, -4, -5, -6, -7, -8, -9,\
    \ -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25,\
    \ -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41,\
    \ -42, -43, -44, -45]) == 11\n>>> count_nums([-1, -1, 1, -2, 2, -3, 3, -4, -5,\
    \ -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21,\
    \ -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37,\
    \ -38, -39, -40, -41, -42, -43, -44, -45]) == 12\n>>> count_nums([-1, -1, 1, -2,\
    \ 2, -", "\n  sum(sapply(arr, function(x) {\n    sum(x > 0)\n  }))\n}\n", "\n\
    \  n <- length(arr)\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(arr\
    \ > 0)\n}\n", "\n  n <- length(arr)\n  sum(sapply(arr, function(x) x > 0))\n}\n",
  "\n  sum(sapply(arr, function(x) sum(as.integer(x) > 0)))\n}\n</cell>\n<cell>\n\
    count_nums(arr)\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) x > 0))\n\
    }\n</cell>\n<cell>", "\n  n <- length(arr)\n  sum(arr > 0)\n}\n", "\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) {\n\
    \    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n\
    }\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) sum(as.integer(strsplit(as.character(x),\
    \ \"\")[[1]])) > 0))\n}\n</cell>\n<cell>\ncount_nums(arr)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an array of integers and returns the number of\
    \ elements which has a sum of digits < 0.\nIf a number is negative, then its first\
    \ signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n\
    >>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1,\
    \ 1, 2]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 1\n>>> count_nums([1, 2, -3]) == 2\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1, 2, -3]) ==\
    \ 5\n>>> count_nums([1, 2, -3]) == 6\n>>> count_nums([1, 2, -3]) == 7\n>>> count_nums([1,\
    \ 2, -3]) == 8\n>>> count_nums([1, 2, -3]) == 9\n>>> count_nums([1, 2, -3]) ==\
    \ 10\n>>> count_nums([1, 2, -3]) == 11\n>>> count_nums([1, 2, -3]) == 12\n>>>\
    \ count_nums([1, 2, -3]) == 13\n>>> count_nums([1, 2, -3]) == 14\n>>> count_nums([1,\
    \ 2, -3]) == 15\n>>> count_nums([1, 2, -3]) == 16\n>>> count_nums([1, 2, -3])\
    \ == 17\n>>> count_nums([1, 2, -3]) == 18\n>>> count_nums([1, 2, -3]) == 19\n\
    >>> count_nums([1, 2, -3]) == 20\n>>> count_nums([1, 2, -3]) == 21\n>>> count_nums([1,\
    \ 2, -3]) == 22\n>>> count_nums([1, 2, -3]) == 23\n>>> count_nums([1, 2, -3])\
    \ == 24\n>>> count_nums([1, 2, -3]) == 25\n>>> count_nums([1, 2, -3]) == 26\n\
    >>> count_nums([1, 2, -3]) == 27\n>>> count_nums([1, 2, -3]) == 28\n>>> count_nums([1,\
    \ 2, -3]) == 29\n>>> count_nums([1, 2, -3]) == 30\n>>> count_nums([1, 2, -3])\
    \ == 31\n>>> count_nums([1, 2, -3]) == 32\n>>> count_nums([1, 2, -3]) == 33\n\
    >>> count_nums([1, 2, -3]) == 34\n>>> count_nums([1, 2, -3]) == 35\n>>> count_nums([1,\
    \ 2, -3]) == 36\n>>> count_nums([1, 2, -3]) == 37\n>>> count_nums([1, 2, -3]",
  "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n", "\n  n <- length(arr)\n  sum(sapply(arr, function(x)\
    \ x > 0))\n}\n</cell>\n<cell>", "\n  n <- length(arr)\n  sum(arr %/% 10 > 0)\n\
    }\n", "\n  n <- length(arr)\n  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n\
    <cell>\ncount_nums(arr)\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) {\n\
    \    sum(x %% 10 == 0) # check if x is negative\n  }))\n}\n", "\n  n <- length(arr)\n\
    \  sum(sapply(arr, function(x) {\n    sum(x %/% 10 > 0)\n  }))\n}\n</cell>\n<cell>",
  "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(sign(x) * x))))\n}\n", "\n  sum(arr > 0)\n}\n", "\n\
    \  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n<cell>\ncount_nums(arr)\n\
    </cell>\n<text>\nExercise: Write a function that takes an array of integers and\
    \ returns the number of elements which has a sum of digits > 0.\n\n\n</text>\n\
    <cell>", "\n  sum(sapply(arr, function(x) {\n    sum(x %/% 10 > 0)\n  }))\n}\n\
    </cell>\n<cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  n <- length(arr)\n\
    \  sum(sapply(arr, function(x) {\n    sum(x %/% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ sum(x > 0)))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) {\n    sum(x\
    \ %/% 10 > 0)\n  }))\n}\n</cell>\n<cell>\ncount_nums([-123, -10, -9, -7, -6, -5,\
    \ -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n", "\n  n <- length(arr)\n  sum(arr %/% 10 > 0)\n}\n\
    </cell>\n<cell>\ncount_nums([-2, -1, -10, -100, -1000, -10000])\n</cell>\n<cell>\n\
    count_nums(c(-2, -1, -10, -100, -1000, -10000))\n</cell>\n<cell>\ncount_nums(c(-2,\
    \ -1, -10, -100, -1000, -10000, -1))\n</cell>\n<cell>\ncount_nums(c(-2, -1, -10,\
    \ -100, -1000, -10000, -1, 1))\n</cell>\n<cell>\ncount_nums(c(-2, -1, -10, -100,\
    \ -1000, -10000, -1, 1, 2, 3, 4))\n</cell>\n<cell>\ncount_nums(c(-2, -1, -10,\
    \ -100, -1000, -10000, -1, 1, 2, 3, 4))\n</cell>\n<cell>\ncount_nums(c(-2, -1,\
    \ -10, -100, -1000, -10000, -1, 1, 2, 3, 4, 5))\n</cell>\n<cell>\ncount_nums(c(-2,\
    \ -1, -10, -100, -1000, -10000, -1, 1, 2, 3, 4, 5))\n</cell>\n<cell>\ncount_nums(c(-2,\
    \ -1, -10, -100, -1000, -10000, -1, 1, 2, 3, 4, 5))\n</cell>\n<cell>\ncount_nums(c(-2,\
    \ -1, -10, -100, -1000, -10000, -1, 1, 2, 3, 4, 5))\n</cell>\n<cell>\ncount_nums(c(-2,\
    \ -1, -10, -100, -1000, -10000, -1, 1, 2, 3, 4, 5))\n</cell>\n<cell>\ncount_nums(c(-2,\
    \ -1, -10, -100, -1000, -10000, -1, 1, 2, 3, 4, 5))\n</cell>\n<cell>\ncount_nums(c(-2,\
    \ -1, -10, -100, -1000, -10000, -1, 1, 2, 3, 4, 5))\n</cell>\n<cell>\ncount_nums(c(-2,\
    \ -1, -10, -100, -1000, -10000, -1, 1, 2, 3, 4, 5))\n</cell>\n<cell>\ncount_nums(c(-2,\
    \ -1, -10, -100, -1000, -10000, -1, 1, 2, 3, 4, 5))\n</cell>\n<cell>\ncount_nums(c(-2,\
    \ -1, -10, -100, -1000, -10000, -1, 1, 2, 3, 4, 5))\n</cell>\n<cell>\ncount_nums(c(-2,\
    \ -1, -10, -100, -1000, -10000, -1, 1, 2, 3, 4, 5))\n</cell>\n<cell>\ncount_nums(c(-",
  "\n  sum(sapply(arr, function(x) {\n    sum(x %/% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(x %% 10 == 0) # check if x is positive\n  }))\n}\n",
  "\n  sum(sapply(arr, function(x) sum(as.integer(x) > 0)))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(as.integer(substr(x, 1, 1))) > 0 ||\n    sum(as.integer(substr(x,\
    \ 2, 1))) > 0 ||\n    sum(as.integer(substr(x, 3, 1))) > 0\n  }))\n}\n", "\n \
    \ n <- length(arr)\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n\
    }\n</cell>\n<cell>\ncount_nums([-2, -5, -7, -9, -10, -12, -15, -17, -21])\n</cell>\n\
    <cell>\ncount_nums([-2, -5, -7, -9, -10, -12, -15, -17, -21, -24])\n</cell>\n\
    <cell>\ncount_nums([-2, -5, -7, -9, -10, -12, -15, -17, -21, -24, -26])\n</cell>\n\
    <cell>\ncount_nums([-2, -5, -7, -9, -10, -12, -15, -17, -21, -24, -26, -28])\n\
    </cell>\n<cell>\ncount_nums([-2, -5, -7, -9, -10, -12, -15, -17, -21, -24, -26,\
    \ -28, -32])\n</cell>\n<cell>\ncount_nums([-2, -5, -7, -9, -10, -12, -15, -17,\
    \ -21, -24, -26, -28, -32, -36])\n</cell>\n<cell>\ncount_nums([-2, -5, -7, -9,\
    \ -10, -12, -15, -17, -21, -24, -26, -28, -32, -36, -38])\n</cell>\n<cell>\ncount_nums([-2,\
    \ -5, -7, -9, -10, -12, -15, -17, -21, -24, -26, -28, -32, -36, -38, -42])\n</cell>\n\
    <cell>\ncount_nums([-2, -5, -7, -9, -10, -12, -15, -17, -21, -24, -26, -28, -32,\
    \ -36, -38, -42, -44])\n</cell>\n<cell>\ncount_nums([-2, -5, -7, -9, -10, -12,\
    \ -15, -17, -21, -24, -26, -28, -32, -36, -38, -42, -44, -46])\n</cell>\n<cell>\n\
    count_nums([-2, -5, -7, -9, -10, -12, -15, -17, -21, -24, -26, -28, -32, -36,\
    \ -38, -42, -44, -46, -48])\n</cell>\n<cell>\ncount_nums([-2, -5, -7, -9, -10,\
    \ -12, -15, -17, -21, -24, -26, -", "\n  n <- length(arr)\n  sum(arr > 0)\n}\n",
  "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n</cell>\n<cell>",
  "\n  sum(sapply(arr, function(x) {\n    sum(x %/% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) sum(x > 0)))\n}\n", "\n  n <- length(arr)\n  sum(sapply(arr, function(x)\
    \ x > 0))\n}\n", "\n  sum(sapply(arr, function(x) sum(as.integer(x) > 0)) > 0)\n\
    }\n", "\n  sum(sapply(arr, function(x) {\n    sum(x > 0)\n  }))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(x > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ {\n    sum(x > 0)\n  }))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x)\
    \ x > 0))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n\
    </cell>\n<cell>", "\n  sum(sapply(arr, function(x) {\n    sum(x > 0)\n  }))\n\
    }\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(x %/% 10 > 0)\n  }))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(x > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ sum(as.integer(strsplit(x, \"\")[[1]])) > 0))\n}\n</cell>\n<cell>\ncount_nums(arr)\n\
    </cell>\n<text>\nExercise: Write a function that takes an array of integers and\
    \ returns the number of elements which has a sum of digits > 0.\n\n\n</text>\n\
    <cell>", "\n  sum(arr %/% 10 > 0)\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x)\
    \ sum(x > 0)))\n}\n", "\n  sum(sapply(arr, function(x) {\n    sum(x > 0)\n  }))\n\
    }\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) sum(as.integer(x) > 0)))\n\
    }\n", "\n  n <- length(arr)\n  sum(arr > 0)\n}\n", "\n  sum(sapply(arr, function(x)\
    \ {\n    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) {\n \
    \   sum(x %/% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) sum(as.integer(x)\
    \ > 0)))\n}\n", "\n  sum(sapply(arr, function(x) {\n    sum(x > 0)\n  }))\n}\n",
  "\n  sum(sapply(arr, function(x) sum(as.integer(sign(x) * x))))\n}\n</cell>\n<cell>",
  "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n</cell>\n<cell>",
  "\n  n <- length(arr)\n  sum(arr %in% c(0,-1)) + 1\n}\n", "\n  sum(sapply(arr, function(x)\
    \ {\n    sum(as.integer(substr(x, 1, 1))) > 0 &\n      sum(as.integer(substr(x,\
    \ 2, 1))) > 0 &\n      sum(as.integer(substr(x, 3, 1))) > 0\n  }))\n}\n", "\n\
    \  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n</cell>\n<cell>\n\
    count_nums([-2, -1, -10, -100, -1000, -1000000000])\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(x > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ {\n    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) sum(as.integer(x)\
    \ > 0) < 0))\n}\n</cell>\n<cell>", "\n  n <- length(arr)\n  sum <- 0\n  for(i\
    \ in seq_len(n)) {\n    sum <- sum + arr[i]\n    if(sum > 0) {\n      break\n\
    \    }\n  }\n  return(sum)\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n\
    </cell>\n<cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n<cell>\n\
    count_nums(arr)\n</cell>\n<text>\nExercise: Write a function that takes an array\
    \ of integers and returns the number of elements which has a sum of digits < 0.\n\
    If any number is negative, then its first signed digit will be negative:\ne.g.\
    \ -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 1\n>>> count_nums([1, 2, -3]) == 2\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 4\n>>> count_nums([1, 2, -3]) == 5\n>>> count_nums([1, 2, -3]) ==\
    \ 6\n>>> count_nums([1, 2, -3]) == 7\n>>> count_nums([1, 2, -3]) == 8\n>>> count_nums([1,\
    \ 2, -3]) == 9\n>>> count_nums([1, 2, -3]) == 10\n>>> count_nums([1, 2, -3]) ==\
    \ 11\n>>> count_nums([1, 2, -3]) == 12\n>>> count_nums([1, 2, -3]) == 13\n>>>\
    \ count_nums([1, 2, -3]) == 14\n>>> count_nums([1, 2, -3]) == 15\n>>> count_nums([1,\
    \ 2, -3]) == 16\n>>> count_nums([1, 2, -3]) == 17\n>>> count_nums([1, 2, -3])\
    \ == 18\n>>> count_nums([1, 2, -3]) == 19\n>>> count_nums([1, 2, -3]) == 20\n\
    >>> count_nums([1, 2, -3]) == 21\n>>> count_nums([1, 2, -3]) == 22\n>>> count_nums([1,\
    \ 2, -3]) == 23\n>>> count_nums([1, 2, -3]) == 24\n>>> count_nums([1, 2, -3])\
    \ == 25\n>>> count_nums([1, 2, -3]) == 26\n>>> count_nums([1, 2, -3]) == 27\n\
    >>> count_nums([1, 2, -3]) == 28\n>>> count_nums([1, 2, -3]) == 29\n>>> count_nums([1,\
    \ 2, -3]) == 30\n>>> count_nums([1, 2, -3]) == 31\n>>> count_nums([1, 2, -3])\
    \ == 32\n>>> count_nums([1, 2, -3]) == 33\n>>> count_nums([1, 2, -3]) == 34\n\
    >>> count_nums([1, 2, -3]) == 35\n>>> count_nums([1, 2, -3]) == 36\n>>> count_nums([1,\
    \ 2, -3]) == 37\n>>> count_nums([1, 2, -3]) == 38\n>>> count_nums([1, 2, -3])\
    \ == 39\n>>> count_nums([1, 2, -3]) == 40\n>>> count_nums([1, 2, -3]) == 41\n\
    >>> ", "\n  n <- length(arr)\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n\
    \  sum(sapply(arr, function(x) {\n    sum(x > 0)\n  }))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n", "\n  sum(sapply(arr, function(x) sum(x %/% 10 > 0)))\n\
    }\n</cell>\n<cell>\ncount_nums(arr)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes an array of integers and returns the number of integers that\nare\
    \ divisible by 3 or 5.\n\n\n</text>\n<cell>", "\n  n <- length(arr)\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n", "\n  sum(sapply(arr, function(x) {\n    sum(x > 0)\n\
    \  }))\n}\n</cell>\n<cell>\ncount_nums(arr)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the number of elements\
    \ which has a sum of digits > 0.\nIf any number is negative, then its first signed\
    \ digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([-123,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([-123, 11, -1,\
    \ 1, 2, 3]) == 4\n>>> count_nums([-123, 11, -1, 1, 2, -3]) == 4\n>>> count_nums([-123,\
    \ 11, -1, 1, 2, -3, -4]) == 4\n>>> count_nums([-123, 11, -1, 1, 2, -3, -4, -5])\
    \ == 4\n>>> count_nums([-123, 11, -1, 1, 2, -3, -4, -5, -6, -7, -8]) == 4\n>>>\
    \ count_nums([-123, 11, -1, 1, 2, -3, -4, -5, -6, -7, -8, -9]) == 4\n>>> count_nums([-123,\
    \ 11, -1, 1, 2, -3, -4, -5, -6, -7, -8, -9, -10, -11]) == 4\n>>> count_nums([-123,\
    \ 11, -1, 1, 2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]) == 4\n>>> count_nums([-123,\
    \ 11, -1, 1, 2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]) == 4\n>>>\
    \ count_nums([-123, 11, -1, 1, 2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13,\
    \ -14, -15, -16]) == 4\n>>> count_nums([-123, 11, -1, 1, 2, -3, -4, -5, -6, -7,\
    \ -8, -9, -10, -11, -12, -13, -14, -15, -16, -17]) == 4\n>>> count_nums([-123,\
    \ 11, -1, 1, 2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16,\
    \ -17, -18]) == 4\n>>> count_nums([-123, 11, -1, 1, 2, -3, -4, -5, -6, -7, -8,\
    \ -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]) == 4\n>>> count_nums([-123,\
    \ 11, -1, 1, 2, -3, -4, -5, -", "\n  sum(sapply(arr, function(x) {\n    sum(x\
    \ > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n\
    \  }))\n}\n</cell>\n<cell>\ncount_nums(c(-123, -12, -10, -9, -8, -7, -6, -5, -4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9))\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(x > 0)\n  }))\n}\n", "\n  n <- length(arr)\n  if(n ==\
    \ 0) {\n    return(0)\n  }\n  if(n == 1) {\n    return(1)\n  }\n  if(n == 2) {\n\
    \    return(arr[1])\n  }\n  if(n == 3) {\n    return(arr[1] + arr[2])\n  }\n \
    \ if(n == 4) {\n    return(arr[1] + arr[2] + arr[3])\n  }\n  if(n == 5) {\n  \
    \  return(arr[1] + arr[2] + arr[3] + arr[4])\n  }\n  if(n == 6) {\n    return(arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5])\n  }\n  if(n == 7) {\n    return(arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6])\n  }\n  if(n == 8) {\n    return(arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7])\n  }\n  if(n == 9) {\n\
    \    return(arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8])\n\
    \  }\n  if(n == 10) {\n    return(arr[1] + arr[2] + arr[3] + arr[4] + arr[5] +\
    \ arr[6] + arr[7] + arr[8] + arr[9])\n  }\n  if(n == 11) {\n    return(arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[10])\n\
    \  }\n  if(n == 12) {\n    return(arr[1] + arr[2] + arr[3] + arr[4] + arr[5] +\
    \ arr[6] + arr[7] + arr[8] + arr[9] + arr[10] + arr[11])\n  }\n  if(n == 13) {\n\
    \    return(arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[10] + arr[11] + arr[12])\n  }\n  if(n == 14) {\n    return(arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[10]\
    \ + arr[11] + arr[12] + arr[13])\n  }\n  if(n == 15) {\n    return(arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[10] + arr[11]\
    \ + arr[12] + arr[13] + arr[14])\n  }\n  if(n == 16) {\n    return(arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + ", "\n  sum(sapply(arr, function(x)\
    \ sum(as.integer(x) > 0)))\n}\n", "\n  sum(sapply(arr, function(x) {\n    sum(x\
    \ %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n\
    <cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n\
    \  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ {\n    sum(x > 0)\n  }))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x)\
    \ sum(as.integer(x)>0)))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n",
  "\n  n <- length(arr)\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ {\n    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) {\n \
    \   sum(x %% 10 > 0)\n  }))\n}\n", "\n  n <- length(arr)\n  if(n < 1) return(0)\n\
    \  sum <- 0\n  for(i in seq_along(arr)) {\n    sum <- sum + arr[i]\n    if(sum\
    \ > 0) break\n  }\n  return(sum)\n}\n", "\n  sum(sapply(arr, function(x) sum(as.integer(as.character(x)))\
    \ > 0))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) sum(x > 0)))\n\
    }\n</cell>\n<cell>\ncount_nums([-2, -5, -7, -9, -10, -12, -14, -16, -17, -19,\
    \ -20, -21])\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) {\n    sum(x\
    \ %/% 10 > 0)\n  }))\n}\n</cell>\n<cell>\ncount_nums(arr)\n</cell>\n<text>\nExercise\n\
    Write a function that takes an array of integers and returns the number of elements\
    \ which has a sum of digits > 0.\n\n\n</text>\n<cell>", "\n  sum(sapply(arr, function(x)\
    \ {\n    sum(as.integer(sign(x) * as.integer(digits(x))))\n  }))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(x %/% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ {\n    sum(x %/% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) {\n\
    \    sum(x %% 10 > 0)\n  }))\n}\n</cell>\n<cell>\ncount_nums([-2, -1, 1, 2, -3,\
    \ 4, -5, -6, -7, -8, -9, -10])\n</cell>\n<cell>", "\n  sum(arr > 0)\n}\n", "\n\
    \  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(x %/% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ sum(as.integer(strsplit(as.character(x), \"-\")[[1]])) > 0))\n}\n", "\n  n <-\
    \ length(arr)\n  if(n == 0) return(0)\n  if(n == 1) return(1)\n  if(n == 2) return(sum(arr))\n\
    \  if(n == 3) return(sum(arr) + arr[2])\n  if(n == 4) return(sum(arr) + arr[2]\
    \ + arr[3])\n  if(n == 5) return(sum(arr) + arr[2] + arr[3] + arr[4])\n  if(n\
    \ == 6) return(sum(arr) + arr[2] + arr[3] + arr[4] + arr[5])\n  if(n == 7) return(sum(arr)\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6])\n  if(n == 8) return(sum(arr)\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7])\n  if(n == 9) return(sum(arr)\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8])\n  if(n == 10)\
    \ return(sum(arr) + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9])\n  if(n == 11) return(sum(arr) + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[10])\n  if(n == 12) return(sum(arr)\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[10]\
    \ + arr[11])\n  if(n == 13) return(sum(arr) + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[10] + arr[11] + arr[12])\n  if(n ==\
    \ 14) return(sum(arr) + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] +\
    \ arr[8] + arr[9] + arr[10] + arr[11] + arr[12] + arr[13])\n  if(n == 15) return(sum(arr)\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[10]\
    \ + arr[11] + arr[12] + arr[13] + arr[14])\n  if(n == 16) return(sum(arr) + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[10] + arr[11]\
    \ + arr[12] + arr[13] + arr[14] + arr[15])\n  if(n == 17) return(", "\n  sum(arr\
    \ > 0)\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n\
    \  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) sum(x > 0)))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n",
  "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(arr\
    \ %in% c(0,-Inf))\n}\n</cell>\n<cell>", "\n  n <- length(arr)\n  sapply(arr, function(x)\
    \ sum(x > 0))\n}\n</cell>\n<cell>\ncount_nums(arr)\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ {\n    sum(x %/% 10 > 0)\n  }))\n}\n</cell>\n<cell>\ncount_nums(arr)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of elements which has a sum of digits > 0.\nIf a number is negative,\
    \ then its first signed digit will be negative:\ne.g. -123 has signed digits -1,\
    \ 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>>\
    \ count_nums([1, 1, 2]) == 3\n>>> count_nums([1, 2, -3]) == 1\n>>> count_nums([1,\
    \ 2, -3]) == 2\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 4\n>>> count_nums([1, 2, -3]) == 5\n>>> count_nums([1, 2, -3]) == 6\n>>> count_nums([1,\
    \ 2, -3]) == 7\n>>> count_nums([1, 2, -3]) == 8\n>>> count_nums([1, 2, -3]) ==\
    \ 9\n>>> count_nums([1, 2, -3]) == 10\n>>> count_nums([1, 2, -3]) == 11\n>>> count_nums([1,\
    \ 2, -3]) == 12\n>>> count_nums([1, 2, -3]) == 13\n>>> count_nums([1, 2, -3])\
    \ == 14\n>>> count_nums([1, 2, -3]) == 15\n>>> count_nums([1, 2, -3]) == 16\n\
    >>> count_nums([1, 2, -3]) == 17\n>>> count_nums([1, 2, -3]) == 18\n>>> count_nums([1,\
    \ 2, -3]) == 19\n>>> count_nums([1, 2, -3]) == 20\n>>> count_nums([1, 2, -3])\
    \ == 21\n>>> count_nums([1, 2, -3]) == 22\n>>> count_nums([1, 2, -3]) == 23\n\
    >>> count_nums([1, 2, -3]) == 24\n>>> count_nums([1, 2, -3]) == 25\n>>> count_nums([1,\
    \ 2, -3]) == 26\n>>> count_nums([1, 2, -3]) == 27\n>>> count_nums([1, 2, -3])\
    \ == 28\n>>> count_nums([1, 2, -3]) == 29\n>>> count_nums([1, 2, -3]) == 30\n\
    >>> count_nums([1, 2, -3]) == 31\n>>> count_nums([1, 2, -3]) == 32\n>>> count_nums([1,\
    \ 2, -3]) == 33\n>>> count_nums([1, 2, -3]) == 34\n>>> count_nums([1, 2, -3])\
    \ == 35\n>>> count_nums([1, 2, -3]) == 36\n>>> count_nums([1, 2, -3]) == 37\n\
    >>> count_nums([1, 2, -3]) == 38\n>>> count_nums([1, 2, -3]) == 39\n>>> count_nums([1,\
    \ 2, -3]) == 40", "\n  sum(sapply(arr, function(x) {\n    sum(x > 0)\n  }))\n\
    }\n", "\n  sum(sapply(arr, function(x) {\n    sum(x > 0)\n  }))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n", "\n  sum(sapply(arr, function(x) sum(as.integer(x)\
    \ > 0)))\n}\n</cell>\n<cell>", "\n  n <- length(arr)\n  sum(sapply(arr, function(x)\
    \ x > 0))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ x > 0))\n}\n", "\n  sum(sapply(arr, function(x) sum(as.integer(sign(x))) > 0))\n\
    }\n", "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n</cell>\n\
    <cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  n <- length(arr)\n\
    \  sum(arr %/% 10 > 0)\n}\n", "\n  sum(sapply(arr, function(x) sum(x > 0)))\n\
    }\n", "\n  sum(sapply(arr, function(x) sum(x > 0))) > 0\n}\n</cell>\n<cell>\n\
    count_nums(arr)\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) {\n    sum(x\
    \ > 0)\n  }))\n}\n", "\n  n <- length(arr)\n  sum(sapply(arr, function(x) x >\
    \ 0))\n}\n", "\n  n <- length(arr)\n  sum(sapply(arr, function(x) x > 0))\n}\n\
    </cell>\n<cell>", "\n  sum(arr > 0)\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(x %% 10 == 0) & x > 0 & x < 10\n  }))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(x)>0)))\n}\n", "\n  sum(sapply(arr, function(x) {\n\
    \    sum(x %% 10 > 0)\n  }))\n}\n", "\n  n <- length(arr)\n  sum(arr > 0)\n}\n",
  "\n  sum(sapply(arr, function(x) sum(as.integer(x) > 0)))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ sum(as.integer(x) > 0)))\n}\n", "\n  sum(sapply(arr, function(x) {\n    sum(x\
    \ > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) sum(as.integer(x)>0)))\n\
    }\n</cell>\n<cell>\ncount_nums(arr)\n</cell>\n<text>\nExercise: Write a function\
    \ that takes an array of integers and returns the\nnumber of elements which has\
    \ a sum of digits > 0.\nIf a number is negative, then its first signed digit will\
    \ be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([-123,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([-1, 11, -11])\
    \ == 1\n>>> count_nums([-123, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n\
    >>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([-123, 11, -11]) == 1\n>>>\
    \ count_nums([1, 1, 2]) == 3\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([-123,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([-1, 11, -11])\
    \ == 1\n>>> count_nums([-123, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n\
    >>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([-123, 11, -11]) == 1\n>>>\
    \ count_nums([1, 1, 2]) == 3\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([-123,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([-1, 11, -11])\
    \ == 1\n>>> count_nums([-123, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n\
    >>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([-123, 11, -11]) == 1\n>>>\
    \ count_nums([1, 1, 2]) == 3\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([-123,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([-1, 11, -11])\
    \ == 1\n>>> count_nums([-123, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n\
    >>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([-123, 11, -11]) == 1\n>>>\
    \ count_nums([1, 1, 2]) == 3\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([-123,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([-1, 11, -11])\
    \ == 1\n>>> count_nums([-123, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n\
    >>> count_num"]
stop_tokens:
- "\n#"
- "\n```"
