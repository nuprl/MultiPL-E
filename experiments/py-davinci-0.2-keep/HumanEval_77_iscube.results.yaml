name: HumanEval_77_iscube
language: python
results:
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps3jxr1b8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmps3jxr1b8.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmps3jxr1b8.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i**3 for i in range(abs(a)+1)]\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0_n7ezsw.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp0_n7ezsw.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp0_n7ezsw.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp84332tso.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp84332tso.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp84332tso.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplwwk1n6s.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplwwk1n6s.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmplwwk1n6s.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i ** 3 for i in range(a + 1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpahbppffc.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpahbppffc.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpahbppffc.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(abs(a) ** (1 / 3)) ** 3 == abs(a))\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3wtwakod.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3wtwakod.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp3wtwakod.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or abs(a) == round(abs(a) ** (1 / 3)) ** 3\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or abs(a) == round(abs(a) ** (1 / 3)) ** 3\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu2nwdg74.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpu2nwdg74.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpu2nwdg74.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1jbuqvtb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1jbuqvtb.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1jbuqvtb.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or a == 8 or a == 27 or a ==\
    \ 64 or a == 125 or a == 216 or a == 343 or a == 512 or a == 729 or a == 1000\
    \ or a == 1331 or a == 1728 or a == 2197 or a == 2744 or a == 3375 or a == 4096\
    \ or a == 4913 or a == 5832 or a == 6859 or a == 8000 or a == 9261 or a == 10648\
    \ or a == 12167 or a == 13824 or a == 15625 or a == 17576 or a == 19683 or a ==\
    \ 21952 or a == 24389 or a == 27000 or a == 29791 or a == 32768 or a == 35937\
    \ or a == 39304 or a == 42875 or a == 46656 or a == 50653 or a == 54872 or a ==\
    \ 59319 or a == 64000 or a == 68921 or a == 74088 or a == 79507 or a == 85184\
    \ or a == 91125 or a == 97336 or a == 103823 or a == 110592 or a == 117649 or\
    \ a == 125000 or a == 132651 or a == 140608 or a == 148877 or a == 157464 or a\
    \ == 166375 or a == 175616 or a == 185193 or a == 195112 or a == 205379 or a ==\
    \ 216000 or a == 226981 or a == 238328 or a == 250047 or a == 262144 or a == 274625\
    \ or a == 287496 or a == 300763 or a == 314432 or a == 328509 or a == 343000 or\
    \ a == 357911 or a == 373248 or a == 389017 or a == 405224 or a == 421875 or a\
    \ == 438976 or a == 456533 or a == 474552 or a == 493039 or a == 512000 or a ==\
    \ 531441 or a == 551368 or a == 571787 or a == 592704 or a == 614125 or a == 636056\
    \ or a == 658503 or a == 681472 or a == 704969 or a == 729000 or a == 753571 or\
    \ a == 778688 or a == 804357 or a == 830584 or a == 857\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2n6grtuo.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp2n6grtuo.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp2n6grtuo.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and int(a ** (1 /\
    \ 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphsx0jmct.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphsx0jmct.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmphsx0jmct.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptt9inwoe.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmptt9inwoe.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmptt9inwoe.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk80bxorj.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk80bxorj.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpk80bxorj.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1 / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpja2d9rcm.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpja2d9rcm.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpja2d9rcm.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and a ** (1 / 3) %\
    \ 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplfvo_n3f.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplfvo_n3f.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmplfvo_n3f.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6kr51rzc.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6kr51rzc.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp6kr51rzc.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1/3) % 1 == 0\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgyfmif15.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpgyfmif15.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpgyfmif15.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i**3 for i in range(abs(a)+1)]\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwb5p5vf_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwb5p5vf_.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwb5p5vf_.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and a ** (1 / 3) %\
    \ 1 == 0) or (a < 0 and abs(a) ** (1 / 3) % 1 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph65wv1_w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmph65wv1_w.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmph65wv1_w.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpauzx8jch.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpauzx8jch.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpauzx8jch.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy3lf21u7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpy3lf21u7.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpy3lf21u7.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjiyfoasi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpjiyfoasi.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpjiyfoasi.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnru8qxku.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnru8qxku.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpnru8qxku.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and a ** (1 / 3) % 1 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah5vpg7s.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpah5vpg7s.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpah5vpg7s.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw46662hq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpw46662hq.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpw46662hq.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return True\n\
    \    if a == 1:\n        return True\n    for i in range(1, a):\n        if i\
    \ ** 3 == a:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(abs(a) ** (1 / 3)) ** 3 == abs(a))\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpipdy9qqn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpipdy9qqn.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpipdy9qqn.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i ** 3 for i in range(abs(a) + 1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirjx7fpb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpirjx7fpb.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpirjx7fpb.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    return a == 0 or round(a ** (1 /\
    \ 3)) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1 / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg6i_d59w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg6i_d59w.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpg6i_d59w.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp20r_quoy.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp20r_quoy.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp20r_quoy.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a > 0 and int(a ** (1 / 3)) ** 3 ==\
    \ a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb64l1x7f.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpb64l1x7f.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpb64l1x7f.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8kn31tql.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8kn31tql.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8kn31tql.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i ** 3 for i in range(abs(a) + 1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb5e684wy.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpb5e684wy.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpb5e684wy.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and a ** (1/3) % 1\
    \ == 0) or (a < 0 and (-a) ** (1/3) % 1 == 0)\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnw8667r9.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnw8667r9.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpnw8667r9.py\", line 20, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1 / 3) == int(a ** (1 / 3))\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpry6a3aya.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpry6a3aya.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpry6a3aya.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1/3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxnlytba6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxnlytba6.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpxnlytba6.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpba5p2o9_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpba5p2o9_.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpba5p2o9_.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp9t0pyp5.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpp9t0pyp5.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpp9t0pyp5.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxgxugj2f.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxgxugj2f.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpxgxugj2f.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and a == round(a **\
    \ (1 / 3)))\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp27ppouql.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp27ppouql.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp27ppouql.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i**3 for i in range(abs(a)+1)]\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcjmf69z5.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpcjmf69z5.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcjmf69z5.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and a**(1/3) == int(a**(1/3)))\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprvkkvb7_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmprvkkvb7_.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmprvkkvb7_.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfz0cth57.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfz0cth57.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpfz0cth57.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwebo75x9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwebo75x9.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwebo75x9.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    return a == 0 or int(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbpovil17.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbpovil17.py\", line 30,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbpovil17.py\", line 23, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i**3 for i in range(abs(a)+1)]\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphsuis75l.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmphsuis75l.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmphsuis75l.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and int(round(a ** (1.0 / 3))) ** 3 == a\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwf7acb34.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwf7acb34.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwf7acb34.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a > 0 and a ** (1 / 3) % 1 == 0)\n\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplzxv6p3j.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplzxv6p3j.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmplzxv6p3j.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n        a = -a\n\
    \    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return True\n\
    \    return False\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a > 0 and int(a ** (1 / 3)) ** 3 ==\
    \ a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprb2s97cn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprb2s97cn.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmprb2s97cn.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpegnbbzdf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpegnbbzdf.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpegnbbzdf.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzoy4d1am.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzoy4d1am.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzoy4d1am.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    return a == 0 or int(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpucxmbrpp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpucxmbrpp.py\", line 30,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpucxmbrpp.py\", line 23, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i ** 3 for i in range(abs(a) + 1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx3jwwcuc.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpx3jwwcuc.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpx3jwwcuc.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu47qpdbh.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpu47qpdbh.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpu47qpdbh.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or a == 8 or a == 27 or a ==\
    \ 64 or a == 125 or a == 216 or a == 343 or a == 512 or a == 729 or a == 1000\
    \ or a == 1331 or a == 1728 or a == 2197 or a == 2744 or a == 3375 or a == 4096\
    \ or a == 4913 or a == 5832 or a == 6859 or a == 8000 or a == 9261 or a == 10648\
    \ or a == 12167 or a == 13824 or a == 15625 or a == 17576 or a == 19683 or a ==\
    \ 21952 or a == 24389 or a == 27000 or a == 29791 or a == 32768 or a == 35937\
    \ or a == 39304 or a == 42875 or a == 46656 or a == 50653 or a == 54872 or a ==\
    \ 59319 or a == 64000 or a == 68921 or a == 74088 or a == 79507 or a == 85184\
    \ or a == 91125 or a == 97336 or a == 103823 or a == 110592 or a == 117649 or\
    \ a == 125000 or a == 132651 or a == 140608 or a == 148877 or a == 157464 or a\
    \ == 166375 or a == 175616 or a == 185193 or a == 195112 or a == 205379 or a ==\
    \ 216000 or a == 226981 or a == 238328 or a == 250047 or a == 262144 or a == 274625\
    \ or a == 287496 or a == 300763 or a == 314432 or a == 328509 or a == 343000 or\
    \ a == 357911 or a == 373248 or a == 389017 or a == 405224 or a == 421875 or a\
    \ == 438976 or a == 456533 or a == 474552 or a == 493039 or a == 512000 or a ==\
    \ 531441 or a == 551368 or a == 571787 or a == 592704 or a == 614125 or a == 636056\
    \ or a == 658503 or a == 681472 or a == 704969 or a == 729000 or a == 753571 or\
    \ a == 778688 or a == 804357 or a == 830584 or a == 857\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps85b947h.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmps85b947h.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmps85b947h.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0ka2bgs.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmph0ka2bgs.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmph0ka2bgs.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and int(a ** (1 /\
    \ 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfoepma7k.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfoepma7k.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpfoepma7k.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo8vr0ggr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpo8vr0ggr.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpo8vr0ggr.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and (a ** (1 / 3)).is_integer()\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8lnqgb97.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8lnqgb97.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8lnqgb97.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i**3 for i in range(a+1)]\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6gctuo_h.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6gctuo_h.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp6gctuo_h.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or abs(a) == round(abs(a) ** (1 / 3)) ** 3\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [x ** 3 for x in range(a + 1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnh4ebij5.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpnh4ebij5.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpnh4ebij5.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjamy4z3v.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpjamy4z3v.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpjamy4z3v.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9viz9ygj.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9viz9ygj.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9viz9ygj.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkhn_bm_3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkhn_bm_3.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpkhn_bm_3.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n        a = -a\n\
    \    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return True\n\
    \    return False\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i**3 for i in range(abs(a) + 1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfyyjpn30.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfyyjpn30.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpfyyjpn30.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    return a == 0 or int(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw5eiojfo.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpw5eiojfo.py\", line 30,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpw5eiojfo.py\", line 23, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and int(a ** (1 /\
    \ 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiih81r2v.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpiih81r2v.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpiih81r2v.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp07jl6o28.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp07jl6o28.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp07jl6o28.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg2xorisz.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg2xorisz.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpg2xorisz.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i**3 for i in range(abs(a)+1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcit9mrp5.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcit9mrp5.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcit9mrp5.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjs7_gos.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqjs7_gos.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpqjs7_gos.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3))) ** 3 == a)\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbs40u63g.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpbs40u63g.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbs40u63g.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(abs(a) ** (1 / 3)) ** 3 == abs(a))\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb2cnwtz3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpb2cnwtz3.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpb2cnwtz3.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and a == int(a **\
    \ (1 / 3)) ** 3) or (a < 0 and a == int(a ** (1 / 3)) ** 3)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9t3l5bzd.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9t3l5bzd.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9t3l5bzd.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n        a = -a\n\
    \    for i in range(1, a + 1):\n        if i ** 3 == a:\n            return True\n\
    \    return False\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkrjaxkvd.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpkrjaxkvd.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpkrjaxkvd.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a > 0 and int(a ** (1/3)) ** 3 == a\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbn33np6g.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbn33np6g.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbn33np6g.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_yowme2l.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_yowme2l.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_yowme2l.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt3x1pb_o.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpt3x1pb_o.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpt3x1pb_o.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and int(a ** (1 / 3)) ** 3 == a\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuv3epp4n.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpuv3epp4n.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpuv3epp4n.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and a ** (1 / 3) %\
    \ 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpex_s90mr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpex_s90mr.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpex_s90mr.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or abs(a) == round(abs(a) ** (1 / 3))\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjirozwk_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpjirozwk_.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpjirozwk_.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzroigxwl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzroigxwl.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzroigxwl.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps34myi02.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmps34myi02.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmps34myi02.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7mclo0at.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7mclo0at.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7mclo0at.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb6dlu51f.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpb6dlu51f.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpb6dlu51f.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1 / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzykuhsz6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzykuhsz6.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzykuhsz6.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    return int(a ** (1/3)) ** 3 == a\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp97qewy84.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp97qewy84.py\", line 30,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp97qewy84.py\", line 23, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu8gy2b3n.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpu8gy2b3n.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpu8gy2b3n.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4o4iokh3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4o4iokh3.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4o4iokh3.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i ** 3 for i in range(a + 1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzx0tn1h0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzx0tn1h0.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzx0tn1h0.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a**(1/3) == int(a**(1/3))\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbrqtydfg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpbrqtydfg.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbrqtydfg.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and (a ** (1 / 3)).is_integer()\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv04362jy.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpv04362jy.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpv04362jy.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwuwnim9p.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwuwnim9p.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwuwnim9p.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i ** 3 for i in range(abs(a) + 1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd5o213o2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpd5o213o2.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpd5o213o2.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpojuo1r1p.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpojuo1r1p.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpojuo1r1p.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and pow(a, 1/3) % 1 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpav1x3d1i.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpav1x3d1i.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpav1x3d1i.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a**(1/3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzm716qz_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzm716qz_.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzm716qz_.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return True\n\
    \    for i in range(1, a + 1):\n        if i * i * i == a:\n            return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbb_txjna.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbb_txjna.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbb_txjna.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or abs(a) == round(abs(a) ** (1 / 3)) ** 3\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and a ** (1 / 3) %\
    \ 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqpszk1yz.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqpszk1yz.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpqpszk1yz.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and int(a ** (1 /\
    \ 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbzzz8cuv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbzzz8cuv.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbzzz8cuv.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5wlmh07d.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5wlmh07d.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp5wlmh07d.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(abs(a) ** (1 / 3)) ** 3 == abs(a))\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzynx2b99.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzynx2b99.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzynx2b99.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and (a ** (1 / 3)).is_integer()\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkjw555jt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkjw555jt.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpkjw555jt.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    return a == 0 or a == int(a ** (1\
    \ / 3)) ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n   \
    \ assert candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyv41c2vv.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpyv41c2vv.py\", line 30,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpyv41c2vv.py\", line 23, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4u6odce2.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp4u6odce2.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4u6odce2.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt8bagtws.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpt8bagtws.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpt8bagtws.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1/3) % 1 == 0\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj4o976ee.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpj4o976ee.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpj4o976ee.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and a ** (1 / 3) %\
    \ 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzxr88as4.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzxr88as4.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzxr88as4.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a**(1/3) % 1 == 0\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0m50i45p.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp0m50i45p.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp0m50i45p.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n        a = -a\n\
    \    if a == 1:\n        return True\n    if a % 2 == 0:\n        return False\n\
    \    for i in range(1, a):\n        if i * i * i == a:\n            return True\n\
    \    return False\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8vydwfpm.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp8vydwfpm.py\", line 39,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8vydwfpm.py\", line 32, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a > 0 and a ** (1 / 3) % 1 == 0)\n\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppa71ce3w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmppa71ce3w.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmppa71ce3w.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdjjmd01d.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpdjjmd01d.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpdjjmd01d.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and a**(1/3) % 1 == 0)\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdh73c5nu.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpdh73c5nu.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpdh73c5nu.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i**3 for i in range(abs(a)+1)]\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr_23_ww6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpr_23_ww6.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpr_23_ww6.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp75e6_xlr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp75e6_xlr.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp75e6_xlr.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and int(a ** (1 / 3)) ** 3 == a\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8xssgs4d.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8xssgs4d.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8xssgs4d.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i ** 3 for i in range(abs(a) + 1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmtgg3ac5.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmtgg3ac5.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpmtgg3ac5.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpixn68bqv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpixn68bqv.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpixn68bqv.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and a ** (1 / 3) %\
    \ 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpivue0e1g.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpivue0e1g.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpivue0e1g.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and a**(1/3) % 1 ==\
    \ 0) or (a < 0 and -a**(1/3) % 1 == 0)\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp917i8k61.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp917i8k61.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp917i8k61.py\", line 20, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a == int(a ** (1 / 3)) ** 3\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2rwrdlvr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp2rwrdlvr.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp2rwrdlvr.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(abs(a) ** (1 / 3)) ** 3 == abs(a))\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3jx1gm4n.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3jx1gm4n.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp3jx1gm4n.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpawoe1_vl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpawoe1_vl.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpawoe1_vl.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a > 0 and int(a ** (1 / 3)) ** 3 ==\
    \ a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe6tul3yg.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpe6tul3yg.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpe6tul3yg.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2p0alhrl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp2p0alhrl.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp2p0alhrl.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr3cedwkp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpr3cedwkp.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpr3cedwkp.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrab6b76.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfrab6b76.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpfrab6b76.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and round(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0l6v1nyz.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp0l6v1nyz.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp0l6v1nyz.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or int(abs(a) ** (1 / 3)) ** 3 == abs(a)\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp39j751yc.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp39j751yc.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp39j751yc.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n        return\
    \ iscube(-a)\n    else:\n        return int(a ** (1/3)) ** 3 == a\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8nqbwg8_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp8nqbwg8_.py\", line 33,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8nqbwg8_.py\", line 26, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and int(a ** (1 / 3)) ** 3 == a\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuog9g9da.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpuog9g9da.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpuog9g9da.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_qu4ogoq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_qu4ogoq.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_qu4ogoq.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and a**(1/3) % 1 ==\
    \ 0) or (a < 0 and -a**(1/3) % 1 == 0)\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3z4h6h5u.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3z4h6h5u.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp3z4h6h5u.py\", line 20, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and a ** (1 / 3) % 1 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwt8dihsg.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwt8dihsg.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwt8dihsg.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzafzbour.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzafzbour.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzafzbour.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwv08u81b.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwv08u81b.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwv08u81b.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a > 0 and a == round(a ** (1 / 3)) ** 3 or a == 0\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpme3j1buo.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpme3j1buo.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpme3j1buo.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a > 0 and a == a ** (1 / 3)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj1zx6_1f.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpj1zx6_1f.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpj1zx6_1f.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and (a == 0 or a ** (1 / 3) % 1 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb__5u9jr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpb__5u9jr.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpb__5u9jr.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsb4pv2y4.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsb4pv2y4.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpsb4pv2y4.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or (a > 0 and a ** (1 / 3) %\
    \ 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbelsht7z.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbelsht7z.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbelsht7z.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9yekzphy.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9yekzphy.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9yekzphy.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return True\n\
    \    if a == 1:\n        return True\n    for i in range(2, a):\n        if i\
    \ ** 3 == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n        a = -a\n\
    \    for i in range(1, a+1):\n        if i**3 == a:\n            return True\n\
    \    return False\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1 / 3))) ** 3 == a)\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpanx65roz.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpanx65roz.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpanx65roz.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i**3 for i in range(abs(a)+1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu000nsvs.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpu000nsvs.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpu000nsvs.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i ** 3 for i in range(abs(a) + 1)]\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk03ugb5w.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpk03ugb5w.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpk03ugb5w.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp2477pv1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpp2477pv1.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpp2477pv1.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqtkkbarg.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqtkkbarg.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpqtkkbarg.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [x ** 3 for x in range(abs(a) + 1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5val4hbx.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp5val4hbx.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp5val4hbx.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    return a == 0 or int(a ** (1/3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx__pdcyd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpx__pdcyd.py\", line 30,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpx__pdcyd.py\", line 23, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfbymgrkk.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfbymgrkk.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpfbymgrkk.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3a2bhlk6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3a2bhlk6.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp3a2bhlk6.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1 / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb8eemqq_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpb8eemqq_.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpb8eemqq_.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i ** 3 for i in range(a + 1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpghyl35kf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpghyl35kf.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpghyl35kf.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or a == -1 or a == 8 or a == 27 or a ==\
    \ -8 or a == -27 or a == 64 or a == -64 or a == 125 or a == -125 or a == 216 or\
    \ a == -216 or a == 343 or a == -343 or a == 512 or a == -512 or a == 729 or a\
    \ == -729 or a == 1000 or a == -1000 or a == 1331 or a == -1331 or a == 1728 or\
    \ a == -1728 or a == 2197 or a == -2197 or a == 2744 or a == -2744 or a == 3375\
    \ or a == -3375 or a == 4096 or a == -4096 or a == 4913 or a == -4913 or a ==\
    \ 5832 or a == -5832 or a == 6859 or a == -6859 or a == 8000 or a == -8000 or\
    \ a == 9261 or a == -9261 or a == 10648 or a == -10648 or a == 12167 or a == -12167\
    \ or a == 13824 or a == -13824 or a == 15625 or a == -15625 or a == 17576 or a\
    \ == -17576 or a == 19683 or a == -19683 or a == 21952 or a == -21952 or a ==\
    \ 24389 or a == -24389 or a == 27000 or a == -27000 or a == 29791 or a == -29791\
    \ or a == 32768 or a == -32768 or a == 35937 or a == -35937 or a == 39304 or a\
    \ == -39304 or a == 42875 or a == -42875 or a == 46656 or a == -46656 or a ==\
    \ 50653 or a == -50653 or a == 54872 or a == -54872 or a == 59319 or a == -59319\
    \ or a == 64000 or a == -64000 or a == 68921 or a == -68921 or a == 74088 or a\
    \ == -74088 or a == 79507 or a == -79507 or a == 85184 or a == -85184 or a ==\
    \ 91125 or a == -91125 or a == 97336 or a == -97336 or a == 103823 or a == -103823\
    \ or a\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj8hf66ec.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpj8hf66ec.py\", line 26,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpj8hf66ec.py\", line 17, in\
    \ check\n    assert candidate(2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a == round(a ** (1 / 3)) ** 3\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp59wa6_a7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp59wa6_a7.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp59wa6_a7.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplijho43w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplijho43w.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmplijho43w.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a == round(a ** (1 / 3)) ** 3\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9eg_py_v.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9eg_py_v.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9eg_py_v.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or abs(a) ** (1 / 3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8d71_lc.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpv8d71_lc.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpv8d71_lc.py\", line 21, in\
    \ check\n    assert candidate(64) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1/3) % 1 == 0\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpigpcle35.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpigpcle35.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpigpcle35.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a == round(a ** (1 / 3)) ** 3\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzri5goim.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzri5goim.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzri5goim.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzlz8hxb8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzlz8hxb8.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzlz8hxb8.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n        a = -a\n\
    \    for i in range(1, a + 1):\n        if i * i * i == a:\n            return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1 / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph__vz_79.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmph__vz_79.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmph__vz_79.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a**(1/3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_see4jdg.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_see4jdg.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_see4jdg.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_sozvmtu.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp_sozvmtu.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_sozvmtu.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and int(a ** (1 / 3)) ** 3 == a\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_lpjs3dd.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_lpjs3dd.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_lpjs3dd.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeiwxcfn_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpeiwxcfn_.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpeiwxcfn_.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbfbg05ld.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpbfbg05ld.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbfbg05ld.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr29alxcv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpr29alxcv.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpr29alxcv.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i ** 3 for i in range(a + 1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3kfe8q__.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3kfe8q__.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp3kfe8q__.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb91dt1ys.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpb91dt1ys.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpb91dt1ys.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and round(a ** (1 / 3)) ** 3 == a)\n\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiximf_eh.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpiximf_eh.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpiximf_eh.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return True\n\
    \    if a == 1:\n        return True\n    if a == 2:\n        return False\n \
    \   if a == 3:\n        return False\n    if a == 4:\n        return True\n  \
    \  if a == 5:\n        return False\n    if a == 6:\n        return False\n  \
    \  if a == 7:\n        return False\n    if a == 8:\n        return True\n   \
    \ if a == 9:\n        return True\n    if a == 10:\n        return False\n   \
    \ if a == 11:\n        return False\n    if a == 12:\n        return False\n \
    \   if a == 13:\n        return False\n    if a == 14:\n        return False\n\
    \    if a == 15:\n        return False\n    if a == 16:\n        return True\n\
    \    if a == 17:\n        return False\n    if a == 18:\n        return False\n\
    \    if a == 19:\n        return False\n    if a == 20:\n        return False\n\
    \    if a == 21:\n        return False\n    if a == 22:\n        return False\n\
    \    if a == 23:\n        return False\n    if a == 24:\n        return False\n\
    \    if a == 25:\n        return True\n    if a == 26:\n        return False\n\
    \    if a == 27:\n        return True\n    if a == 28:\n        return False\n\
    \    if a == 29:\n        return False\n    if a == 30:\n        return False\n\
    \    if a == 31:\n        return False\n    if a == 32:\n        return True\n\
    \    if a == 33:\n        return False\n    if a == 34:\n        return False\n\
    \    if a == 35:\n        return False\n    if a == 36:\n        return False\n\
    \    if a == 37:\n        return False\n    if a == 38:\n        return False\n\
    \    if a == 39:\n        return False\n    if a == 40:\n        return False\n\
    \    if a == 41:\n        return False\n    if a == 42:\n        return False\n\
    \    if a == 43:\n        return False\n    if a == 44:\n        return False\n\
    \    if a\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpgr0osadp.py\", line 106\n    if a\n       ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i ** 3 for i in range(a + 1)]\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp3w10k0c.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpp3w10k0c.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpp3w10k0c.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7kg12ubu.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7kg12ubu.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7kg12ubu.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnwxkmkm2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpnwxkmkm2.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpnwxkmkm2.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprjr8ghp_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprjr8ghp_.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmprjr8ghp_.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a > 0 and a == int(a ** (1/3))) or\
    \ (a < 0 and a == int(a ** (1/3)))\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0fjgro8f.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp0fjgro8f.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp0fjgro8f.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp0fjgro8f.py\", line\
    \ 14, in iscube\n    return a == 0 or a == 1 or (a > 0 and a == int(a ** (1/3)))\
    \ or (a < 0 and a == int(a ** (1/3)))\nTypeError: can't convert complex to int\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i**3 for i in range(abs(a)+1)]\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzause3lf.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpzause3lf.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzause3lf.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv88_rxsb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpv88_rxsb.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpv88_rxsb.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a in [i**3 for i in range(a+1)]\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbe8kiebw.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpbe8kiebw.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbe8kiebw.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpafe34xty.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpafe34xty.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpafe34xty.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo984w6ic.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpo984w6ic.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpo984w6ic.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or (a > 0 and int(round(a ** (1. / 3))) ** 3 == a)\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp57xxazxx.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp57xxazxx.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp57xxazxx.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a == round(a ** (1 / 3)) ** 3\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4pc4j_fk.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4pc4j_fk.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4pc4j_fk.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_datnbap.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_datnbap.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_datnbap.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a >= 0 and a ** (1 / 3) % 1 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph4wnvrry.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmph4wnvrry.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmph4wnvrry.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \"\"\"\n    return a == 0 or a == 1 or (a < 0 and a % 2 == 0) or (a > 0 and\
    \ a % 2 == 1)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n  \
    \  assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu6vruixg.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpu6vruixg.py\", line 28,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpu6vruixg.py\", line 20, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
