name: HumanEval_76_is_simple_power
language: python
results:
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwgppz6s.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgwgppz6s.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpgwgppz6s.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpgwgppz6s.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n)) if x > 0 else False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl4oy21e1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpl4oy21e1.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpl4oy21e1.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpl4oy21e1.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n)) if x > 0 else\
    \ False\nNameError: name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6y824d09.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp6y824d09.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp6y824d09.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp6y824d09.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoyyywl78.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpoyyywl78.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpoyyywl78.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpoyyywl78.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphuih_dma.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphuih_dma.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmphuih_dma.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmphuih_dma.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprbmohhgs.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmprbmohhgs.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmprbmohhgs.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmprbmohhgs.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnw_ecjgp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpnw_ecjgp.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpnw_ecjgp.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpnw_ecjgp.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmke5cvz2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpmke5cvz2.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpmke5cvz2.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpmke5cvz2.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0e5ww44u.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0e5ww44u.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp0e5ww44u.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp0e5ww44u.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa8bwzll0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpa8bwzll0.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpa8bwzll0.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpa8bwzll0.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplfg26qdp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmplfg26qdp.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmplfg26qdp.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmplfg26qdp.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydr05u4r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpydr05u4r.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpydr05u4r.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpydr05u4r.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe241ev1x.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpe241ev1x.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpe241ev1x.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpe241ev1x.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpln1s95ov.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpln1s95ov.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpln1s95ov.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpln1s95ov.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp2mzcfco.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpp2mzcfco.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpp2mzcfco.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpp2mzcfco.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpterym85t.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpterym85t.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpterym85t.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpterym85t.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7jk1ye8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpu7jk1ye8.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpu7jk1ye8.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpu7jk1ye8.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp693nvz69.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp693nvz69.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp693nvz69.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp693nvz69.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmy_puc1r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpmy_puc1r.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpmy_puc1r.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpmy_puc1r.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnc0anzzh.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpnc0anzzh.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpnc0anzzh.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpnc0anzzh.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp998hn98h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp998hn98h.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp998hn98h.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp998hn98h.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj81gfbvz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpj81gfbvz.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpj81gfbvz.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpj81gfbvz.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptee0lm3h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptee0lm3h.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmptee0lm3h.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmptee0lm3h.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy3lzt_us.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpy3lzt_us.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpy3lzt_us.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpy3lzt_us.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo19_waiy.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpo19_waiy.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpo19_waiy.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpo19_waiy.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwb1qs9kv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwb1qs9kv.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpwb1qs9kv.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpwb1qs9kv.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lb5n3xn.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9lb5n3xn.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp9lb5n3xn.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp9lb5n3xn.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit0bnlqt.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpit0bnlqt.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpit0bnlqt.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpit0bnlqt.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmwa0u3dv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpmwa0u3dv.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpmwa0u3dv.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpmwa0u3dv.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprjbhogu8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmprjbhogu8.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmprjbhogu8.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmprjbhogu8.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprv843p59.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmprv843p59.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmprv843p59.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmprv843p59.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdq8ba8d7.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdq8ba8d7.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpdq8ba8d7.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpdq8ba8d7.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7wpe5zlx.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp7wpe5zlx.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp7wpe5zlx.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp7wpe5zlx.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5e19xaeb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5e19xaeb.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp5e19xaeb.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp5e19xaeb.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz48vbqm.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpzz48vbqm.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpzz48vbqm.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpzz48vbqm.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp71kwwbk_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp71kwwbk_.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp71kwwbk_.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp71kwwbk_.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxy9ac240.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxy9ac240.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpxy9ac240.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpxy9ac240.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe5k97fbm.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpe5k97fbm.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpe5k97fbm.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpe5k97fbm.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpapqj7z1s.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpapqj7z1s.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpapqj7z1s.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpapqj7z1s.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgq1fc15r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgq1fc15r.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpgq1fc15r.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpgq1fc15r.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfs6by3ga.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfs6by3ga.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpfs6by3ga.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpfs6by3ga.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwsriz0b3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwsriz0b3.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpwsriz0b3.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpwsriz0b3.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyb1x9bhw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpyb1x9bhw.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpyb1x9bhw.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpyb1x9bhw.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n\
    \        return True\n    if x == n:\n        return True\n    if x % n != 0:\n\
    \        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbjnjyiy2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbjnjyiy2.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpbjnjyiy2.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpbjnjyiy2.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfaz9bbz4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfaz9bbz4.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpfaz9bbz4.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpfaz9bbz4.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe0wueln5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpe0wueln5.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpe0wueln5.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpe0wueln5.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp944xad__.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp944xad__.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp944xad__.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp944xad__.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb40dnffe.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpb40dnffe.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpb40dnffe.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpb40dnffe.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6xd3i47j.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp6xd3i47j.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp6xd3i47j.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp6xd3i47j.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_9qykqvp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_9qykqvp.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp_9qykqvp.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp_9qykqvp.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf3ugy4jx.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpf3ugy4jx.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpf3ugy4jx.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpf3ugy4jx.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_yagsy_r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_yagsy_r.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp_yagsy_r.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp_yagsy_r.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdn3hp08j.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdn3hp08j.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpdn3hp08j.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpdn3hp08j.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu0ksxabd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpu0ksxabd.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpu0ksxabd.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpu0ksxabd.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl05y_s34.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpl05y_s34.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpl05y_s34.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpl05y_s34.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n)) if x > 0 else False\n\n\ndef check(candidate):\n  \
    \  assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0azjlqm3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0azjlqm3.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp0azjlqm3.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp0azjlqm3.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n)) if x >\
    \ 0 else False\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n)) if x > 0 else False\n\n\ndef check(candidate):\n  \
    \  assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpof1ovgy8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpof1ovgy8.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpof1ovgy8.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpof1ovgy8.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n)) if x >\
    \ 0 else False\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8jqdpr8t.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8jqdpr8t.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp8jqdpr8t.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp8jqdpr8t.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb89h25vn.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpb89h25vn.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpb89h25vn.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpb89h25vn.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu0nubr37.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpu0nubr37.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpu0nubr37.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpu0nubr37.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9apfnvg2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9apfnvg2.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp9apfnvg2.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp9apfnvg2.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n\
    \        return True\n    if x == 0:\n        return False\n    if n == 1:\n \
    \       return False\n    if n == 0:\n        return False\n    if x % n != 0:\n\
    \        return False\n    return is_simple_power(x/n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb_k83otr.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpb_k83otr.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpb_k83otr.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpb_k83otr.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxqmb88es.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxqmb88es.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpxqmb88es.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpxqmb88es.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvuqngiil.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpvuqngiil.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpvuqngiil.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpvuqngiil.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp09siz97w.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp09siz97w.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp09siz97w.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp09siz97w.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjnzelppo.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjnzelppo.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpjnzelppo.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpjnzelppo.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1whcunuo.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1whcunuo.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp1whcunuo.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp1whcunuo.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb07yuja6.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpb07yuja6.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpb07yuja6.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpb07yuja6.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8lm438td.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8lm438td.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp8lm438td.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp8lm438td.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppkxchrki.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmppkxchrki.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmppkxchrki.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmppkxchrki.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu21i_h96.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpu21i_h96.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpu21i_h96.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpu21i_h96.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9sv8ac7c.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9sv8ac7c.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp9sv8ac7c.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp9sv8ac7c.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6s0k82ey.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp6s0k82ey.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp6s0k82ey.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp6s0k82ey.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp52bgy2a4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp52bgy2a4.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp52bgy2a4.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp52bgy2a4.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxb3vzz69.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxb3vzz69.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpxb3vzz69.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpxb3vzz69.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6n6rfcc6.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp6n6rfcc6.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp6n6rfcc6.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp6n6rfcc6.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7zqjbxo.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpu7zqjbxo.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpu7zqjbxo.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpu7zqjbxo.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9pnxml7d.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9pnxml7d.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp9pnxml7d.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp9pnxml7d.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n)) if x > 0 else False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf5cb8odg.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpf5cb8odg.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpf5cb8odg.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpf5cb8odg.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n)) if x > 0 else\
    \ False\nNameError: name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpot0130_q.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpot0130_q.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpot0130_q.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpot0130_q.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmqghaelh.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpmqghaelh.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpmqghaelh.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpmqghaelh.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8bg5h3j2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8bg5h3j2.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp8bg5h3j2.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp8bg5h3j2.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3624va_y.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3624va_y.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp3624va_y.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp3624va_y.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnieaty4s.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpnieaty4s.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpnieaty4s.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpnieaty4s.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe9w7fbs9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpe9w7fbs9.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpe9w7fbs9.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpe9w7fbs9.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnhxnv64g.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpnhxnv64g.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpnhxnv64g.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpnhxnv64g.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwldota4j.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwldota4j.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpwldota4j.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpwldota4j.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp20gyzo7w.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp20gyzo7w.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp20gyzo7w.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp20gyzo7w.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5p6o_509.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5p6o_509.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp5p6o_509.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp5p6o_509.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptnooyluu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptnooyluu.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmptnooyluu.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmptnooyluu.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_g0gnpe.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg_g0gnpe.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpg_g0gnpe.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpg_g0gnpe.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt94ugwpd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpt94ugwpd.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpt94ugwpd.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpt94ugwpd.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ej2agwr.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3ej2agwr.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp3ej2agwr.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp3ej2agwr.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2o6c9zl.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmph2o6c9zl.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmph2o6c9zl.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmph2o6c9zl.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n\
    \        return True\n    if x < 1 or n < 1:\n        return False\n    while\
    \ x % n == 0:\n        x = x / n\n    return x == 1\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3aysdus6.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3aysdus6.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp3aysdus6.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp3aysdus6.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj293l3re.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpj293l3re.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpj293l3re.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpj293l3re.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxitf75cp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxitf75cp.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpxitf75cp.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpxitf75cp.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3i_1waom.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3i_1waom.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp3i_1waom.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp3i_1waom.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n)) if x > 0 else False\n\n\ndef check(candidate):\n  \
    \  assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpascspr11.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpascspr11.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpascspr11.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpascspr11.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n)) if x >\
    \ 0 else False\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpasjqxem6.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpasjqxem6.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpasjqxem6.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpasjqxem6.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1gdftrkk.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1gdftrkk.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp1gdftrkk.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp1gdftrkk.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq8b02yig.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpq8b02yig.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpq8b02yig.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpq8b02yig.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp23pcnc8_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp23pcnc8_.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp23pcnc8_.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp23pcnc8_.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpid_csmhg.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpid_csmhg.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpid_csmhg.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpid_csmhg.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpja7849x3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpja7849x3.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpja7849x3.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpja7849x3.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzszraze9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpzszraze9.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpzszraze9.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpzszraze9.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxko3ak73.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxko3ak73.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpxko3ak73.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpxko3ak73.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphmch6a6e.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphmch6a6e.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmphmch6a6e.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmphmch6a6e.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0epdj4vw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0epdj4vw.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp0epdj4vw.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp0epdj4vw.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmvz0a5sn.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpmvz0a5sn.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpmvz0a5sn.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpmvz0a5sn.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplisi8_7q.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmplisi8_7q.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmplisi8_7q.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmplisi8_7q.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3trxmhrz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3trxmhrz.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp3trxmhrz.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp3trxmhrz.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzbnluo5_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpzbnluo5_.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpzbnluo5_.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpzbnluo5_.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxg3wt8re.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxg3wt8re.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpxg3wt8re.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpxg3wt8re.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkmg43l8h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpkmg43l8h.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpkmg43l8h.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpkmg43l8h.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw9zv47xo.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpw9zv47xo.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpw9zv47xo.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpw9zv47xo.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnfito7_i.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpnfito7_i.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpnfito7_i.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpnfito7_i.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsw6top1t.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpsw6top1t.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpsw6top1t.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpsw6top1t.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfxgc7dgw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfxgc7dgw.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpfxgc7dgw.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpfxgc7dgw.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwp_78b52.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwp_78b52.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpwp_78b52.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpwp_78b52.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n\
    \        return True\n    elif x == n:\n        return True\n    elif x < n:\n\
    \        return False\n    else:\n        return is_simple_power(x/n, n)\n\n\n\
    def check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzfrvmqw4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpzfrvmqw4.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpzfrvmqw4.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpzfrvmqw4.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7bwhum08.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp7bwhum08.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp7bwhum08.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp7bwhum08.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n\
    \        return True\n    if x == n:\n        return True\n    if x % n == 0:\n\
    \        return is_simple_power(x / n, n)\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3f4e8vz5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3f4e8vz5.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp3f4e8vz5.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp3f4e8vz5.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuboi60fm.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpuboi60fm.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpuboi60fm.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpuboi60fm.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptrdx2rrh.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptrdx2rrh.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmptrdx2rrh.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmptrdx2rrh.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa_668jri.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpa_668jri.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpa_668jri.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpa_668jri.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprv62f8i6.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmprv62f8i6.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmprv62f8i6.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmprv62f8i6.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppdc4smey.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmppdc4smey.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmppdc4smey.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmppdc4smey.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt4k4fpv4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpt4k4fpv4.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpt4k4fpv4.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpt4k4fpv4.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwnixrwna.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwnixrwna.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpwnixrwna.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpwnixrwna.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1r5xgbfa.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1r5xgbfa.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp1r5xgbfa.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp1r5xgbfa.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6xmthk2d.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp6xmthk2d.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp6xmthk2d.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp6xmthk2d.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqpyiyj6i.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqpyiyj6i.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpqpyiyj6i.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpqpyiyj6i.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfdr6jfut.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfdr6jfut.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpfdr6jfut.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpfdr6jfut.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppj8jyqvo.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmppj8jyqvo.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmppj8jyqvo.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmppj8jyqvo.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgx1dbyff.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgx1dbyff.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpgx1dbyff.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpgx1dbyff.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwai_485m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwai_485m.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpwai_485m.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpwai_485m.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptxqr4qpe.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptxqr4qpe.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmptxqr4qpe.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmptxqr4qpe.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygmdjy26.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpygmdjy26.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpygmdjy26.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpygmdjy26.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbmph8jzv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbmph8jzv.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpbmph8jzv.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpbmph8jzv.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvrlgmvx1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpvrlgmvx1.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpvrlgmvx1.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpvrlgmvx1.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqfh7nz1i.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqfh7nz1i.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpqfh7nz1i.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpqfh7nz1i.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdou014ol.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdou014ol.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpdou014ol.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpdou014ol.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpltl3qqik.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpltl3qqik.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpltl3qqik.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpltl3qqik.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ymeck92.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1ymeck92.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp1ymeck92.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp1ymeck92.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gnc2cx4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp7gnc2cx4.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp7gnc2cx4.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp7gnc2cx4.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n\
    \        return True\n    if x == n:\n        return True\n    if x % n != 0:\n\
    \        return False\n    return is_simple_power(x/n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpym9ufab4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpym9ufab4.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpym9ufab4.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpym9ufab4.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ulk8xa2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_ulk8xa2.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp_ulk8xa2.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp_ulk8xa2.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcgxg6vck.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpcgxg6vck.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpcgxg6vck.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpcgxg6vck.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx9678x4k.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpx9678x4k.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpx9678x4k.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpx9678x4k.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n)) if x > 0 else False\n\n\ndef check(candidate):\n  \
    \  assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd1szlauo.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpd1szlauo.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpd1szlauo.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpd1szlauo.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n)) if x >\
    \ 0 else False\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp16yv3bf3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp16yv3bf3.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp16yv3bf3.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp16yv3bf3.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpel26mz71.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpel26mz71.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpel26mz71.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpel26mz71.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpida7mc8c.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpida7mc8c.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpida7mc8c.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpida7mc8c.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoe7v5t3_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpoe7v5t3_.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpoe7v5t3_.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpoe7v5t3_.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn_azqhe4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpn_azqhe4.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpn_azqhe4.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpn_azqhe4.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp9hrkmuf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpp9hrkmuf.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpp9hrkmuf.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpp9hrkmuf.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk0ibnyqs.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpk0ibnyqs.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpk0ibnyqs.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpk0ibnyqs.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc9dzv4w0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpc9dzv4w0.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpc9dzv4w0.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpc9dzv4w0.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2mgfq9fy.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2mgfq9fy.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp2mgfq9fy.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp2mgfq9fy.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzha11psn.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpzha11psn.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpzha11psn.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpzha11psn.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n)) if x > 0 else False\n\n\ndef check(candidate):\n  \
    \  assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ojkpfke.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0ojkpfke.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp0ojkpfke.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp0ojkpfke.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n)) if x >\
    \ 0 else False\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptw_dlfph.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptw_dlfph.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmptw_dlfph.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmptw_dlfph.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8c9092_w.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8c9092_w.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp8c9092_w.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp8c9092_w.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbcb0aoeu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbcb0aoeu.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpbcb0aoeu.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpbcb0aoeu.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfl3jxees.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfl3jxees.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpfl3jxees.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpfl3jxees.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpboebp5i2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpboebp5i2.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpboebp5i2.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpboebp5i2.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqr2eiqkk.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqr2eiqkk.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpqr2eiqkk.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpqr2eiqkk.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrr7ce_5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfrr7ce_5.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpfrr7ce_5.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpfrr7ce_5.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n\
    \        return True\n    elif x == n:\n        return True\n    elif x % n ==\
    \ 0:\n        return is_simple_power(x / n, n)\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2xinew89.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2xinew89.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp2xinew89.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp2xinew89.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaj6dg0ho.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpaj6dg0ho.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpaj6dg0ho.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpaj6dg0ho.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpktfvrjik.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpktfvrjik.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpktfvrjik.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpktfvrjik.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkjl6o23l.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpkjl6o23l.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpkjl6o23l.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpkjl6o23l.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphcdmnoxt.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphcdmnoxt.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmphcdmnoxt.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmphcdmnoxt.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnw6mhu5b.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpnw6mhu5b.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpnw6mhu5b.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpnw6mhu5b.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphx_0w5ta.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphx_0w5ta.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmphx_0w5ta.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmphx_0w5ta.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8mmowe42.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8mmowe42.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp8mmowe42.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp8mmowe42.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9oyhftuq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9oyhftuq.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp9oyhftuq.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp9oyhftuq.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg9ui2myt.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg9ui2myt.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpg9ui2myt.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpg9ui2myt.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl8heaziy.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpl8heaziy.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpl8heaziy.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpl8heaziy.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_kc2fnnf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_kc2fnnf.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp_kc2fnnf.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp_kc2fnnf.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaqn8pcr7.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpaqn8pcr7.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpaqn8pcr7.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpaqn8pcr7.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp63_szzbm.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp63_szzbm.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp63_szzbm.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp63_szzbm.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n\
    \        return True\n    if x == n:\n        return True\n    if x % n != 0:\n\
    \        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkd_7q18o.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpkd_7q18o.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpkd_7q18o.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpkd_7q18o.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmq1zinl1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpmq1zinl1.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpmq1zinl1.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpmq1zinl1.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptx8d8dav.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptx8d8dav.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmptx8d8dav.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmptx8d8dav.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n\
    \        return True\n    if x == n:\n        return True\n    if x % n != 0:\n\
    \        return False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5akvgqj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpa5akvgqj.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpa5akvgqj.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpa5akvgqj.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmkyb9wsd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpmkyb9wsd.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpmkyb9wsd.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpmkyb9wsd.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpta6q_u1z.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpta6q_u1z.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpta6q_u1z.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpta6q_u1z.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpul55u0z9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpul55u0z9.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpul55u0z9.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpul55u0z9.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n\
    \    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3,\
    \ 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4i26kbq7.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4i26kbq7.py\", line 29,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp4i26kbq7.py\", line\
    \ 17, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp4i26kbq7.py\"\
    , line 13, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
