name: HumanEval_6_parse_nested_parens
language: python
prompt: "from typing import List\n\ndef parse_nested_parens(paren_string: str) ->\
  \ List[int]:\n    \"\"\" Input to this function is a string represented multiple\
  \ groups for nested parentheses separated by spaces.\n    For each of the group,\
  \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
  \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
  \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
  \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
  \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
  \ntest_check()\n"
completions: ["    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for group in paren_groups:\n        max_nesting.append(max_nesting_level(group))\n\
    \    return max_nesting\n", "    max_depth = 0\n    current_depth = 0\n    max_depth_list\
    \ = []\n    for char in paren_string:\n        if char == '(':\n            current_depth\
    \ += 1\n            max_depth = max(max_depth, current_depth)\n        elif char\
    \ == ')':\n            current_depth -= 1\n        elif char == ' ':\n       \
    \     max_depth_list.append(max_depth)\n            max_depth = 0\n          \
    \  current_depth = 0\n    max_depth_list.append(max_depth)\n    return max_depth_list\n",
  "    paren_groups = paren_string.split()\n    return [max_nested_parens(group) for\
    \ group in paren_groups]\n", "    paren_groups = paren_string.split(' ')\n   \
    \ max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(find_max_nesting(paren_group))\n\
    \    return max_nesting\n", "    # TODO: Implement this function\n    pass\n",
  "    paren_groups = paren_string.split(' ')\n    max_nesting = []\n    for group\
    \ in paren_groups:\n        max_nesting.append(get_max_nesting(group))\n    return\
    \ max_nesting\n", "    paren_list = paren_string.split(' ')\n    return [max_nested_parens(paren)\
    \ for paren in paren_list]\n", "    # TODO: Implement this function\n    pass\n",
  "    result = []\n    for paren_group in paren_string.split():\n        max_depth\
    \ = 0\n        current_depth = 0\n        for char in paren_group:\n         \
    \   if char == '(':\n                current_depth += 1\n                max_depth\
    \ = max(max_depth, current_depth)\n            elif char == ')':\n           \
    \     current_depth -= 1\n        result.append(max_depth)\n    return result\n",
  "    paren_groups = paren_string.split(' ')\n    max_nesting = []\n    for paren_group\
    \ in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n", "    max_depth = 0\n    current_depth = 0\n    output\
    \ = []\n    for char in paren_string:\n        if char == '(':\n            current_depth\
    \ += 1\n            max_depth = max(max_depth, current_depth)\n        elif char\
    \ == ')':\n            current_depth -= 1\n        elif char == ' ':\n       \
    \     output.append(max_depth)\n            max_depth = 0\n            current_depth\
    \ = 0\n    output.append(max_depth)\n    return output", "    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for group in paren_groups:\n        max_nesting.append(max_nesting_parens(group))\n\
    \    return max_nesting\n", "    result = []\n    for paren_group in paren_string.split('\
    \ '):\n        max_depth = 0\n        depth = 0\n        for paren in paren_group:\n\
    \            if paren == '(':\n                depth += 1\n                max_depth\
    \ = max(max_depth, depth)\n            elif paren == ')':\n                depth\
    \ -= 1\n        result.append(max_depth)\n    return result\n", "    output =\
    \ []\n    for paren_group in paren_string.split(' '):\n        max_depth = 0\n\
    \        current_depth = 0\n        for char in paren_group:\n            if char\
    \ == '(':\n                current_depth += 1\n                max_depth = max(max_depth,\
    \ current_depth)\n            elif char == ')':\n                current_depth\
    \ -= 1\n        output.append(max_depth)\n    return output\n", "    result =\
    \ []\n    for paren_group in paren_string.split(' '):\n        max_depth = 0\n\
    \        depth = 0\n        for paren in paren_group:\n            if paren ==\
    \ '(':\n                depth += 1\n                max_depth = max(max_depth,\
    \ depth)\n            elif paren == ')':\n                depth -= 1\n       \
    \ result.append(max_depth)\n    return result\n", "    # Split the string into\
    \ groups of parentheses\n    paren_groups = paren_string.split(' ')\n    # Initialize\
    \ an empty list to store the maximum depth of nesting for each group\n    max_depth\
    \ = []\n    # Iterate through each group\n    for group in paren_groups:\n   \
    \     # Initialize a counter for the current depth of nesting\n        curr_depth\
    \ = 0\n        # Initialize a counter for the maximum depth of nesting\n     \
    \   max_depth_so_far = 0\n        # Iterate through each character in the group\n\
    \        for char in group:\n            # If the character is an opening parenthesis,\
    \ increment the current depth of nesting\n            if char == '(':\n      \
    \          curr_depth += 1\n            # If the character is a closing parenthesis,\
    \ decrement the current depth of nesting\n            elif char == ')':\n    \
    \            curr_depth -= 1\n            # Update the maximum depth of nesting\
    \ if the current depth of nesting is greater than the maximum depth of nesting\n\
    \            if curr_depth > max_depth_so_far:\n                max_depth_so_far\
    \ = curr_depth\n        # Append the maximum depth of nesting for the current\
    \ group to the list of maximum depths\n        max_depth.append(max_depth_so_far)\n\
    \    # Return the list of maximum depths\n    return max_depth\n", "    max_depth\
    \ = 0\n    current_depth = 0\n    depths = []\n    for char in paren_string:\n\
    \        if char == '(':\n            current_depth += 1\n            max_depth\
    \ = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth\
    \ -= 1\n        elif char == ' ':\n            depths.append(max_depth)\n    \
    \        max_depth = 0\n            current_depth = 0\n    depths.append(max_depth)\n\
    \    return depths\n", "    result = []\n    for paren_group in paren_string.split('\
    \ '):\n        max_depth = 0\n        current_depth = 0\n        for paren in\
    \ paren_group:\n            if paren == '(':\n                current_depth +=\
    \ 1\n                max_depth = max(max_depth, current_depth)\n            elif\
    \ paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n", "    groups = paren_string.split(' ')\n    return [max_nested_parens(group)\
    \ for group in groups]\n", "    result = []\n    for paren_group in paren_string.split():\n\
    \        max_depth = 0\n        current_depth = 0\n        for char in paren_group:\n\
    \            if char == '(':\n                current_depth += 1\n           \
    \     max_depth = max(max_depth, current_depth)\n            elif char == ')':\n\
    \                current_depth -= 1\n        result.append(max_depth)\n    return\
    \ result\n", "    def get_max_nesting(paren_string: str) -> int:\n        \"\"\
    \"\n        >>> get_max_nesting('(()())')\n        2\n        >>> get_max_nesting('((()))')\n\
    \        3\n        >>> get_max_nesting('()')\n        1\n        >>> get_max_nesting('((())()())')\n\
    \        3\n        \"\"\"\n        max_nesting = 0\n        nesting = 0\n   \
    \     for char in paren_string:\n            if char == '(':\n               \
    \ nesting += 1\n                max_nesting = max(max_nesting, nesting)\n    \
    \        elif char == ')':\n                nesting -= 1\n        return max_nesting\n\
    \n    return [get_max_nesting(paren_string) for paren_string in paren_string.split()]\n",
  "    paren_groups = paren_string.split()\n    return [max_nesting(group) for group\
    \ in paren_groups]\n", "    # TODO: Implement this function\n    return []\n",
  "    paren_groups = paren_string.split(' ')\n    return [_parse_nested_parens(group)\
    \ for group in paren_groups]\n", "    max_nesting = 0\n    current_nesting = 0\n\
    \    max_nesting_list = []\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_nesting += 1\n            max_nesting = max(max_nesting,\
    \ current_nesting)\n        elif char == ')':\n            current_nesting -=\
    \ 1\n        elif char == ' ':\n            max_nesting_list.append(max_nesting)\n\
    \            max_nesting = 0\n            current_nesting = 0\n    max_nesting_list.append(max_nesting)\n\
    \    return max_nesting_list\n", "    result = []\n    for paren_group in paren_string.split():\n\
    \        max_depth = 0\n        current_depth = 0\n        for paren in paren_group:\n\
    \            if paren == '(':\n                current_depth += 1\n          \
    \      max_depth = max(max_depth, current_depth)\n            elif paren == ')':\n\
    \                current_depth -= 1\n        result.append(max_depth)\n    return\
    \ result", "    result = []\n    for paren_group in paren_string.split():\n  \
    \      max_level = 0\n        level = 0\n        for paren in paren_group:\n \
    \           if paren == '(':\n                level += 1\n                max_level\
    \ = max(max_level, level)\n            elif paren == ')':\n                level\
    \ -= 1\n        result.append(max_level)\n    return result\n", "    paren_groups\
    \ = paren_string.split(' ')\n    return [max_nested_parens(paren_group) for paren_group\
    \ in paren_groups]\n", "    result = []\n    for paren_group in paren_string.split('\
    \ '):\n        max_level = 0\n        current_level = 0\n        for paren in\
    \ paren_group:\n            if paren == '(':\n                current_level +=\
    \ 1\n                max_level = max(max_level, current_level)\n            elif\
    \ paren == ')':\n                current_level -= 1\n        result.append(max_level)\n\
    \    return result\n", "    paren_groups = paren_string.split(' ')\n    max_nesting\
    \ = []\n    for paren_group in paren_groups:\n        max_nesting.append(parse_parens(paren_group))\n\
    \    return max_nesting\n", "    result = []\n    for group in paren_string.split():\n\
    \        max_depth = 0\n        current_depth = 0\n        for paren in group:\n\
    \            if paren == '(':\n                current_depth += 1\n          \
    \      max_depth = max(max_depth, current_depth)\n            elif paren == ')':\n\
    \                current_depth -= 1\n        result.append(max_depth)\n    return\
    \ result\n", "    max_depth = 0\n    curr_depth = 0\n    result = []\n    for\
    \ char in paren_string:\n        if char == '(':\n            curr_depth += 1\n\
    \            max_depth = max(max_depth, curr_depth)\n        elif char == ')':\n\
    \            curr_depth -= 1\n        elif char == ' ':\n            result.append(max_depth)\n\
    \            max_depth = 0\n            curr_depth = 0\n    result.append(max_depth)\n\
    \    return result", "    paren_groups = paren_string.split()\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n", "    paren_groups = paren_string.split()\n  \
    \  max_nesting = []\n    for group in paren_groups:\n        max_nesting.append(max_nesting_level(group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split(' ')\n    return\
    \ [max_nested_parens(paren_group) for paren_group in paren_groups]\n", "    paren_groups\
    \ = paren_string.split(' ')\n    return [max_nested_parens(group) for group in\
    \ paren_groups]\n", "    paren_groups = paren_string.split(' ')\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n", "    result = []\n    for paren_group in paren_string.split('\
    \ '):\n        max_level = 0\n        current_level = 0\n        for char in paren_group:\n\
    \            if char == '(':\n                current_level += 1\n           \
    \     max_level = max(max_level, current_level)\n            elif char == ')':\n\
    \                current_level -= 1\n        result.append(max_level)\n    return\
    \ result", "    paren_groups = paren_string.split()\n    max_nesting = []\n  \
    \  for paren_group in paren_groups:\n        max_nesting.append(find_max_nesting(paren_group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split()\n    max_nesting\
    \ = []\n    for group in paren_groups:\n        max_depth = 0\n        depth =\
    \ 0\n        for char in group:\n            if char == '(':\n               \
    \ depth += 1\n                max_depth = max(max_depth, depth)\n            elif\
    \ char == ')':\n                depth -= 1\n        max_nesting.append(max_depth)\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split()\n    max_nesting\
    \ = []\n    for group in paren_groups:\n        max_nesting.append(get_max_nesting(group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split(' ')\n    max_nesting\
    \ = []\n    for paren_group in paren_groups:\n        max_nesting.append(max_nesting_parens(paren_group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split(' ')\n    return\
    \ [max_nested_parens(group) for group in paren_groups]\n", "    max_nesting =\
    \ 0\n    current_nesting = 0\n    result = []\n    for char in paren_string:\n\
    \        if char == '(':\n            current_nesting += 1\n            max_nesting\
    \ = max(max_nesting, current_nesting)\n        elif char == ')':\n           \
    \ current_nesting -= 1\n        elif char == ' ':\n            result.append(max_nesting)\n\
    \            max_nesting = 0\n            current_nesting = 0\n    result.append(max_nesting)\n\
    \    return result\n", "    paren_groups = paren_string.split()\n    paren_levels\
    \ = []\n    for paren_group in paren_groups:\n        paren_levels.append(get_paren_level(paren_group))\n\
    \    return paren_levels\n", "    paren_groups = paren_string.split(' ')\n   \
    \ return [max_nested_parens(group) for group in paren_groups]\n", "    max_depth\
    \ = 0\n    current_depth = 0\n    max_depth_list = []\n    for char in paren_string:\n\
    \        if char == '(':\n            current_depth += 1\n            max_depth\
    \ = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth\
    \ -= 1\n        elif char == ' ':\n            max_depth_list.append(max_depth)\n\
    \            max_depth = 0\n            current_depth = 0\n    max_depth_list.append(max_depth)\n\
    \    return max_depth_list\n", "    paren_groups = paren_string.split()\n    max_nesting\
    \ = []\n    for paren_group in paren_groups:\n        max_nesting.append(max_nesting_level(paren_group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split(' ')\n    return\
    \ [get_max_nesting_level(group) for group in paren_groups]\n", "    groups = paren_string.split('\
    \ ')\n    return [max_nesting(group) for group in groups]\n", "    result = []\n\
    \    for paren_group in paren_string.split():\n        max_nesting = 0\n     \
    \   current_nesting = 0\n        for paren in paren_group:\n            if paren\
    \ == '(':\n                current_nesting += 1\n                max_nesting =\
    \ max(max_nesting, current_nesting)\n            elif paren == ')':\n        \
    \        current_nesting -= 1\n        result.append(max_nesting)\n    return\
    \ result\n", "    paren_groups = paren_string.split(' ')\n    return [max_nesting_level(paren_group)\
    \ for paren_group in paren_groups]\n", "    paren_groups = paren_string.split()\n\
    \    return [max_nested_parens(paren_group) for paren_group in paren_groups]\n",
  "    # TODO: Implement this function\n    pass\n", "    # TODO: Implement this function\n\
    \    pass\n", "    max_depth = 0\n    current_depth = 0\n    depths = []\n   \
    \ for char in paren_string:\n        if char == '(':\n            current_depth\
    \ += 1\n            max_depth = max(max_depth, current_depth)\n        elif char\
    \ == ')':\n            current_depth -= 1\n        elif char == ' ':\n       \
    \     depths.append(max_depth)\n            max_depth = 0\n            current_depth\
    \ = 0\n    depths.append(max_depth)\n    return depths\n", "    max_depth = 0\n\
    \    current_depth = 0\n    result = []\n    for char in paren_string:\n     \
    \   if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \        elif char == ' ':\n            result.append(max_depth)\n           \
    \ max_depth = 0\n            current_depth = 0\n    result.append(max_depth)\n\
    \    return result\n", "    max_nesting = 0\n    current_nesting = 0\n    result\
    \ = []\n    for char in paren_string:\n        if char == '(':\n            current_nesting\
    \ += 1\n            max_nesting = max(max_nesting, current_nesting)\n        elif\
    \ char == ')':\n            current_nesting -= 1\n        elif char == ' ':\n\
    \            result.append(max_nesting)\n            max_nesting = 0\n       \
    \     current_nesting = 0\n    result.append(max_nesting)\n    return result\n",
  "    paren_groups = paren_string.split()\n    max_depth = []\n    for group in paren_groups:\n\
    \        depth = 0\n        max_depth_in_group = 0\n        for char in group:\n\
    \            if char == '(':\n                depth += 1\n                max_depth_in_group\
    \ = max(max_depth_in_group, depth)\n            elif char == ')':\n          \
    \      depth -= 1\n        max_depth.append(max_depth_in_group)\n    return max_depth",
  "    result = []\n    for paren_group in paren_string.split(' '):\n        max_level\
    \ = 0\n        current_level = 0\n        for paren in paren_group:\n        \
    \    if paren == '(':\n                current_level += 1\n                max_level\
    \ = max(max_level, current_level)\n            elif paren == ')':\n          \
    \      current_level -= 1\n        result.append(max_level)\n    return result\n",
  "    paren_groups = paren_string.split(' ')\n    max_nesting = []\n    for paren_group\
    \ in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n", "    result = []\n    for paren_group in paren_string.split():\n\
    \        max_level = 0\n        current_level = 0\n        for paren in paren_group:\n\
    \            if paren == '(':\n                current_level += 1\n          \
    \      max_level = max(max_level, current_level)\n            elif paren == ')':\n\
    \                current_level -= 1\n        result.append(max_level)\n    return\
    \ result\n", "    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split()\n    max_nesting\
    \ = []\n    for paren_group in paren_groups:\n        max_nesting.append(max_nesting_level(paren_group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split()\n    max_nesting\
    \ = []\n    for group in paren_groups:\n        max_nesting.append(max_nesting_in_group(group))\n\
    \    return max_nesting\n", "    result = []\n    for paren_group in paren_string.split('\
    \ '):\n        max_depth = 0\n        current_depth = 0\n        for paren in\
    \ paren_group:\n            if paren == '(':\n                current_depth +=\
    \ 1\n                max_depth = max(max_depth, current_depth)\n            elif\
    \ paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n", "    paren_groups = paren_string.split(' ')\n    max_nesting\
    \ = []\n    for group in paren_groups:\n        max_nesting.append(get_max_nesting(group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split(' ')\n    return\
    \ [max_nesting_level(paren_group) for paren_group in paren_groups]\n", "    #\
    \ TODO: implement this function\n    pass\n", "    result = []\n    for paren_group\
    \ in paren_string.split(' '):\n        max_nesting = 0\n        current_nesting\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           current_nesting += 1\n                max_nesting = max(max_nesting,\
    \ current_nesting)\n            elif paren == ')':\n                current_nesting\
    \ -= 1\n        result.append(max_nesting)\n    return result\n", "    paren_groups\
    \ = paren_string.split()\n    max_nesting = []\n    for group in paren_groups:\n\
    \        max_nesting.append(get_max_nesting(group))\n    return max_nesting\n",
  "    paren_groups = paren_string.split(' ')\n    max_nested_levels = []\n    for\
    \ group in paren_groups:\n        max_nested_levels.append(get_max_nested_level(group))\n\
    \    return max_nested_levels\n", "    result = []\n    for paren_group in paren_string.split():\n\
    \        max_depth = 0\n        current_depth = 0\n        for char in paren_group:\n\
    \            if char == '(':\n                current_depth += 1\n           \
    \     max_depth = max(max_depth, current_depth)\n            elif char == ')':\n\
    \                current_depth -= 1\n        result.append(max_depth)\n    return\
    \ result", "    paren_groups = paren_string.split()\n    max_depth = []\n    for\
    \ group in paren_groups:\n        depth = 0\n        max_depth_in_group = 0\n\
    \        for char in group:\n            if char == '(':\n                depth\
    \ += 1\n                max_depth_in_group = max(max_depth_in_group, depth)\n\
    \            elif char == ')':\n                depth -= 1\n        max_depth.append(max_depth_in_group)\n\
    \    return max_depth\n", "    max_nesting = 0\n    current_nesting = 0\n    result\
    \ = []\n    for char in paren_string:\n        if char == '(':\n            current_nesting\
    \ += 1\n            max_nesting = max(max_nesting, current_nesting)\n        elif\
    \ char == ')':\n            current_nesting -= 1\n        elif char == ' ':\n\
    \            result.append(max_nesting)\n            max_nesting = 0\n       \
    \     current_nesting = 0\n    result.append(max_nesting)\n    return result\n",
  "    result = []\n    for paren_group in paren_string.split():\n        max_depth\
    \ = 0\n        current_depth = 0\n        for paren in paren_group:\n        \
    \    if paren == '(':\n                current_depth += 1\n                max_depth\
    \ = max(max_depth, current_depth)\n            elif paren == ')':\n          \
    \      current_depth -= 1\n        result.append(max_depth)\n    return result\n",
  "    paren_groups = paren_string.split(' ')\n    return [max_nested_parens(paren_group)\
    \ for paren_group in paren_groups]\n", "    groups = paren_string.split(' ')\n\
    \    return [max_depth(group) for group in groups]\n", "    paren_groups = paren_string.split()\n\
    \    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n", "    result = []\n    for paren_group in paren_string.split('\
    \ '):\n        max_depth = 0\n        current_depth = 0\n        for paren in\
    \ paren_group:\n            if paren == '(':\n                current_depth +=\
    \ 1\n                max_depth = max(max_depth, current_depth)\n            elif\
    \ paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n", "    paren_groups = paren_string.split(' ')\n    max_nesting\
    \ = []\n    for paren_group in paren_groups:\n        max_nesting.append(max_nesting_level(paren_group))\n\
    \    return max_nesting\n", "    max_depth = 0\n    current_depth = 0\n    depths\
    \ = []\n    for char in paren_string:\n        if char == '(':\n            current_depth\
    \ += 1\n            max_depth = max(max_depth, current_depth)\n        elif char\
    \ == ')':\n            current_depth -= 1\n        elif char == ' ':\n       \
    \     depths.append(max_depth)\n            max_depth = 0\n            current_depth\
    \ = 0\n    depths.append(max_depth)\n    return depths\n", "    paren_groups =\
    \ paren_string.split(' ')\n    return [max_nesting_level(group) for group in paren_groups]\n",
  "    paren_groups = paren_string.split(' ')\n    max_nesting = []\n    for group\
    \ in paren_groups:\n        max_nesting.append(find_max_nesting(group))\n    return\
    \ max_nesting\n", "    paren_groups = paren_string.split(' ')\n    max_nesting\
    \ = []\n    for paren_group in paren_groups:\n        max_nesting.append(nested_parens(paren_group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split()\n    max_nesting\
    \ = []\n    for paren_group in paren_groups:\n        max_nesting.append(find_max_nesting(paren_group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split(' ')\n    return\
    \ [max_nesting_level(paren_group) for paren_group in paren_groups]\n", "    result\
    \ = []\n    for paren_group in paren_string.split():\n        max_nesting = 0\n\
    \        current_nesting = 0\n        for char in paren_group:\n            if\
    \ char == '(':\n                current_nesting += 1\n                max_nesting\
    \ = max(max_nesting, current_nesting)\n            elif char == ')':\n       \
    \         current_nesting -= 1\n        result.append(max_nesting)\n    return\
    \ result", "    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split(' ')\n    max_nesting\
    \ = []\n    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split(' ')\n    max_nesting\
    \ = []\n    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n", "    result = []\n    for group in paren_string.split():\n\
    \        stack = []\n        max_depth = 0\n        for paren in group:\n    \
    \        if paren == '(':\n                stack.append(paren)\n             \
    \   max_depth = max(max_depth, len(stack))\n            elif paren == ')':\n \
    \               stack.pop()\n        result.append(max_depth)\n    return result\n",
  "    result = []\n    for paren_group in paren_string.split(' '):\n        max_nesting\
    \ = 0\n        current_nesting = 0\n        for paren in paren_group:\n      \
    \      if paren == '(':\n                current_nesting += 1\n              \
    \  max_nesting = max(max_nesting, current_nesting)\n            elif paren ==\
    \ ')':\n                current_nesting -= 1\n        result.append(max_nesting)\n\
    \    return result\n", "    paren_groups = paren_string.split()\n    max_nesting\
    \ = []\n    for group in paren_groups:\n        max_nesting.append(find_max_nesting(group))\n\
    \    return max_nesting\n", "    # TODO: Implement this function\n    pass\n",
  "    max_nesting = 0\n    current_nesting = 0\n    max_nesting_list = []\n    for\
    \ char in paren_string:\n        if char == '(':\n            current_nesting\
    \ += 1\n            max_nesting = max(max_nesting, current_nesting)\n        elif\
    \ char == ')':\n            current_nesting -= 1\n        elif char == ' ':\n\
    \            max_nesting_list.append(max_nesting)\n            max_nesting = 0\n\
    \            current_nesting = 0\n    max_nesting_list.append(max_nesting)\n \
    \   return max_nesting_list\n", "    groups = paren_string.split(' ')\n    return\
    \ [max_nested_parens(group) for group in groups]\n", "    paren_groups = paren_string.split()\n\
    \    return [max_nesting(paren_group) for paren_group in paren_groups]\n", " \
    \   paren_groups = paren_string.split(' ')\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n", "    paren_list = paren_string.split(' ')\n \
    \   return [max_nested_parens(paren) for paren in paren_list]\n", "    paren_groups\
    \ = paren_string.split(' ')\n    return [max_nested_parens(group) for group in\
    \ paren_groups]\n", "    max_nesting = 0\n    curr_nesting = 0\n    max_nesting_list\
    \ = []\n    for char in paren_string:\n        if char == '(':\n            curr_nesting\
    \ += 1\n            max_nesting = max(max_nesting, curr_nesting)\n        elif\
    \ char == ')':\n            curr_nesting -= 1\n        elif char == ' ':\n   \
    \         max_nesting_list.append(max_nesting)\n            max_nesting = 0\n\
    \            curr_nesting = 0\n    max_nesting_list.append(max_nesting)\n    return\
    \ max_nesting_list\n", "    paren_groups = paren_string.split(' ')\n    return\
    \ [max_nesting_level(group) for group in paren_groups]\n", "    max_nesting =\
    \ 0\n    current_nesting = 0\n    result = []\n    for paren in paren_string:\n\
    \        if paren == '(':\n            current_nesting += 1\n            max_nesting\
    \ = max(max_nesting, current_nesting)\n        elif paren == ')':\n          \
    \  current_nesting -= 1\n        elif paren == ' ':\n            result.append(max_nesting)\n\
    \            max_nesting = 0\n            current_nesting = 0\n    result.append(max_nesting)\n\
    \    return result\n", "    max_nesting = 0\n    current_nesting = 0\n    max_nesting_list\
    \ = []\n    for char in paren_string:\n        if char == '(':\n            current_nesting\
    \ += 1\n            max_nesting = max(max_nesting, current_nesting)\n        elif\
    \ char == ')':\n            current_nesting -= 1\n        elif char == ' ':\n\
    \            max_nesting_list.append(max_nesting)\n            max_nesting = 0\n\
    \            current_nesting = 0\n    max_nesting_list.append(max_nesting)\n \
    \   return max_nesting_list\n", "    max_depth = 0\n    depth = 0\n    max_depths\
    \ = []\n    for char in paren_string:\n        if char == '(':\n            depth\
    \ += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n\
    \            depth -= 1\n        elif char == ' ':\n            max_depths.append(max_depth)\n\
    \            max_depth = 0\n            depth = 0\n    max_depths.append(max_depth)\n\
    \    return max_depths", "    result = []\n    for paren_group in paren_string.split():\n\
    \        max_depth = 0\n        current_depth = 0\n        for char in paren_group:\n\
    \            if char == '(':\n                current_depth += 1\n           \
    \     max_depth = max(max_depth, current_depth)\n            elif char == ')':\n\
    \                current_depth -= 1\n        result.append(max_depth)\n    return\
    \ result\n", "    groups = paren_string.split(' ')\n    return [max_nesting(group)\
    \ for group in groups]\n", "    max_nesting_levels = []\n    for paren_group in\
    \ paren_string.split():\n        max_nesting_levels.append(get_max_nesting_level(paren_group))\n\
    \    return max_nesting_levels\n", "    max_depth = 0\n    current_depth = 0\n\
    \    result = []\n    for char in paren_string:\n        if char == '(':\n   \
    \         current_depth += 1\n            max_depth = max(max_depth, current_depth)\n\
    \        elif char == ')':\n            current_depth -= 1\n        elif char\
    \ == ' ':\n            result.append(max_depth)\n            max_depth = 0\n \
    \           current_depth = 0\n    result.append(max_depth)\n    return result\n",
  "    paren_groups = paren_string.split()\n    return [max_nesting(group) for group\
    \ in paren_groups]\n", "    result = []\n    for paren_group in paren_string.split():\n\
    \        max_depth = 0\n        current_depth = 0\n        for paren in paren_group:\n\
    \            if paren == '(':\n                current_depth += 1\n          \
    \      max_depth = max(max_depth, current_depth)\n            elif paren == ')':\n\
    \                current_depth -= 1\n        result.append(max_depth)\n    return\
    \ result", "    max_depth = 0\n    current_depth = 0\n    result = []\n    for\
    \ char in paren_string:\n        if char == '(':\n            current_depth +=\
    \ 1\n            max_depth = max(max_depth, current_depth)\n        elif char\
    \ == ')':\n            current_depth -= 1\n        elif char == ' ':\n       \
    \     result.append(max_depth)\n            max_depth = 0\n            current_depth\
    \ = 0\n    result.append(max_depth)\n    return result\n", "    result = []\n\
    \    for paren_group in paren_string.split():\n        max_nesting = 0\n     \
    \   current_nesting = 0\n        for paren in paren_group:\n            if paren\
    \ == '(':\n                current_nesting += 1\n                max_nesting =\
    \ max(max_nesting, current_nesting)\n            elif paren == ')':\n        \
    \        current_nesting -= 1\n        result.append(max_nesting)\n    return\
    \ result\n", "    paren_groups = paren_string.split()\n    return [max_nested_parens(group)\
    \ for group in paren_groups]\n", "    result = []\n    for paren_group in paren_string.split():\n\
    \        max_depth = 0\n        current_depth = 0\n        for paren in paren_group:\n\
    \            if paren == '(':\n                current_depth += 1\n          \
    \      max_depth = max(max_depth, current_depth)\n            elif paren == ')':\n\
    \                current_depth -= 1\n        result.append(max_depth)\n    return\
    \ result\n", "    paren_groups = paren_string.split()\n    max_nesting = []\n\
    \    for group in paren_groups:\n        max_nesting.append(max_nesting_parens(group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split()\n    max_nesting\
    \ = []\n    for group in paren_groups:\n        max_nesting.append(find_max_nesting(group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split(' ')\n    result\
    \ = []\n    for paren_group in paren_groups:\n        result.append(get_nested_parens(paren_group))\n\
    \    return result\n", "    max_nesting = 0\n    current_nesting = 0\n    max_nesting_list\
    \ = []\n    for char in paren_string:\n        if char == '(':\n            current_nesting\
    \ += 1\n            max_nesting = max(max_nesting, current_nesting)\n        elif\
    \ char == ')':\n            current_nesting -= 1\n        elif char == ' ':\n\
    \            max_nesting_list.append(max_nesting)\n            max_nesting = 0\n\
    \            current_nesting = 0\n    max_nesting_list.append(max_nesting)\n \
    \   return max_nesting_list\n", "    paren_groups = paren_string.split(' ')\n\
    \    return [max_nesting_parens(group) for group in paren_groups]\n", "    result\
    \ = []\n    for paren_group in paren_string.split(' '):\n        max_depth = 0\n\
    \        current_depth = 0\n        for char in paren_group:\n            if char\
    \ == '(':\n                current_depth += 1\n                max_depth = max(max_depth,\
    \ current_depth)\n            elif char == ')':\n                current_depth\
    \ -= 1\n        result.append(max_depth)\n    return result\n", "    result =\
    \ []\n    for paren_group in paren_string.split():\n        max_nesting = 0\n\
    \        current_nesting = 0\n        for paren in paren_group:\n            if\
    \ paren == '(':\n                current_nesting += 1\n                max_nesting\
    \ = max(max_nesting, current_nesting)\n            elif paren == ')':\n      \
    \          current_nesting -= 1\n        result.append(max_nesting)\n    return\
    \ result\n", "    # TODO: Implement this function\n    return []\n", "    groups\
    \ = paren_string.split(' ')\n    return [max_nested_parens(group) for group in\
    \ groups]\n", "    max_nesting = 0\n    current_nesting = 0\n    max_nesting_list\
    \ = []\n    for char in paren_string:\n        if char == '(':\n            current_nesting\
    \ += 1\n            max_nesting = max(max_nesting, current_nesting)\n        elif\
    \ char == ')':\n            current_nesting -= 1\n        elif char == ' ':\n\
    \            max_nesting_list.append(max_nesting)\n            max_nesting = 0\n\
    \            current_nesting = 0\n    max_nesting_list.append(max_nesting)\n \
    \   return max_nesting_list\n", "    paren_groups = paren_string.split(' ')\n\
    \    return [max_nesting_level(paren_group) for paren_group in paren_groups]\n",
  "    result = []\n    for paren_group in paren_string.split(' '):\n        max_depth\
    \ = 0\n        current_depth = 0\n        for paren in paren_group:\n        \
    \    if paren == '(':\n                current_depth += 1\n                max_depth\
    \ = max(max_depth, current_depth)\n            elif paren == ')':\n          \
    \      current_depth -= 1\n        result.append(max_depth)\n    return result\n",
  "    result = []\n    for paren_group in paren_string.split():\n        max_depth\
    \ = 0\n        current_depth = 0\n        for paren in paren_group:\n        \
    \    if paren == '(':\n                current_depth += 1\n                max_depth\
    \ = max(max_depth, current_depth)\n            elif paren == ')':\n          \
    \      current_depth -= 1\n        result.append(max_depth)\n    return result\n",
  "    max_depth = 0\n    current_depth = 0\n    result = []\n    for c in paren_string:\n\
    \        if c == '(':\n            current_depth += 1\n            max_depth =\
    \ max(max_depth, current_depth)\n        elif c == ')':\n            current_depth\
    \ -= 1\n        elif c == ' ':\n            result.append(max_depth)\n       \
    \     max_depth = 0\n            current_depth = 0\n    result.append(max_depth)\n\
    \    return result\n", "    result = []\n    for group in paren_string.split('\
    \ '):\n        depth = 0\n        max_depth = 0\n        for char in group:\n\
    \            if char == '(':\n                depth += 1\n                max_depth\
    \ = max(max_depth, depth)\n            elif char == ')':\n                depth\
    \ -= 1\n        result.append(max_depth)\n    return result\n", "    paren_groups\
    \ = paren_string.split()\n    return [max_nesting(paren_group) for paren_group\
    \ in paren_groups]\n", "    paren_groups = paren_string.split()\n    max_depth\
    \ = []\n    for paren_group in paren_groups:\n        depth = 0\n        max_depth_so_far\
    \ = 0\n        for paren in paren_group:\n            if paren == '(':\n     \
    \           depth += 1\n                max_depth_so_far = max(max_depth_so_far,\
    \ depth)\n            elif paren == ')':\n                depth -= 1\n       \
    \ max_depth.append(max_depth_so_far)\n    return max_depth\n", "    result = []\n\
    \    for paren_group in paren_string.split(' '):\n        max_level = 0\n    \
    \    current_level = 0\n        for paren in paren_group:\n            if paren\
    \ == '(':\n                current_level += 1\n                max_level = max(max_level,\
    \ current_level)\n            elif paren == ')':\n                current_level\
    \ -= 1\n        result.append(max_level)\n    return result\n", "    paren_groups\
    \ = paren_string.split(' ')\n    return [max_nested_parens(paren_group) for paren_group\
    \ in paren_groups]\n", "    result = []\n    for paren_group in paren_string.split():\n\
    \        max_depth = 0\n        depth = 0\n        for c in paren_group:\n   \
    \         if c == '(':\n                depth += 1\n                max_depth\
    \ = max(max_depth, depth)\n            elif c == ')':\n                depth -=\
    \ 1\n        result.append(max_depth)\n    return result\n", "    paren_groups\
    \ = paren_string.split(' ')\n    max_nesting = []\n    for paren_group in paren_groups:\n\
    \        max_nesting.append(get_max_nesting(paren_group))\n    return max_nesting\n",
  "    paren_groups = paren_string.split()\n    max_nesting = []\n    for paren_group\
    \ in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split()\n    paren_levels\
    \ = []\n    for paren_group in paren_groups:\n        paren_levels.append(get_paren_level(paren_group))\n\
    \    return paren_levels\n", "    max_nesting = 0\n    curr_nesting = 0\n    max_nesting_list\
    \ = []\n    for char in paren_string:\n        if char == '(':\n            curr_nesting\
    \ += 1\n            max_nesting = max(max_nesting, curr_nesting)\n        elif\
    \ char == ')':\n            curr_nesting -= 1\n        elif char == ' ':\n   \
    \         max_nesting_list.append(max_nesting)\n            max_nesting = 0\n\
    \            curr_nesting = 0\n    max_nesting_list.append(max_nesting)\n    return\
    \ max_nesting_list\n\n", "    paren_groups = paren_string.split(' ')\n    return\
    \ [max_nested_parens(paren_group) for paren_group in paren_groups]\n", "    groups\
    \ = paren_string.split(' ')\n    return [max_nesting(group) for group in groups]\n",
  "    max_depth = 0\n    current_depth = 0\n    result = []\n    for char in paren_string:\n\
    \        if char == '(':\n            current_depth += 1\n            max_depth\
    \ = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth\
    \ -= 1\n        elif char == ' ':\n            result.append(max_depth)\n    \
    \        max_depth = 0\n            current_depth = 0\n    result.append(max_depth)\n\
    \    return result\n", "    result = []\n    for paren_group in paren_string.split():\n\
    \        max_depth = 0\n        depth = 0\n        for paren in paren_group:\n\
    \            if paren == '(':\n                depth += 1\n                max_depth\
    \ = max(max_depth, depth)\n            elif paren == ')':\n                depth\
    \ -= 1\n        result.append(max_depth)\n    return result\n", "    result =\
    \ []\n    for paren_group in paren_string.split():\n        max_level = 0\n  \
    \      level = 0\n        for paren in paren_group:\n            if paren == '(':\n\
    \                level += 1\n                max_level = max(max_level, level)\n\
    \            elif paren == ')':\n                level -= 1\n        result.append(max_level)\n\
    \    return result\n", "    # TODO: Implement this function\n    pass\n", "  \
    \  max_depth = 0\n    current_depth = 0\n    result = []\n    for char in paren_string:\n\
    \        if char == '(':\n            current_depth += 1\n            max_depth\
    \ = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth\
    \ -= 1\n        elif char == ' ':\n            result.append(max_depth)\n    \
    \        max_depth = 0\n            current_depth = 0\n    result.append(max_depth)\n\
    \    return result\n", "    groups = paren_string.split(' ')\n    return [max_nesting(group)\
    \ for group in groups]\n", "    result = []\n    for paren_group in paren_string.split():\n\
    \        max_depth = 0\n        current_depth = 0\n        for char in paren_group:\n\
    \            if char == '(':\n                current_depth += 1\n           \
    \     max_depth = max(max_depth, current_depth)\n            elif char == ')':\n\
    \                current_depth -= 1\n        result.append(max_depth)\n    return\
    \ result", "    paren_list = paren_string.split()\n    max_depth = []\n    for\
    \ paren in paren_list:\n        depth = 0\n        max_depth_so_far = 0\n    \
    \    for char in paren:\n            if char == '(':\n                depth +=\
    \ 1\n                max_depth_so_far = max(max_depth_so_far, depth)\n       \
    \     elif char == ')':\n                depth -= 1\n        max_depth.append(max_depth_so_far)\n\
    \    return max_depth", "    max_level = 0\n    level = 0\n    result = []\n \
    \   for char in paren_string:\n        if char == '(':\n            level += 1\n\
    \            max_level = max(max_level, level)\n        elif char == ')':\n  \
    \          level -= 1\n        elif char == ' ':\n            result.append(max_level)\n\
    \            max_level = 0\n            level = 0\n    result.append(max_level)\n\
    \    return result", "    result = []\n    for paren_group in paren_string.split():\n\
    \        max_depth = 0\n        current_depth = 0\n        for char in paren_group:\n\
    \            if char == '(':\n                current_depth += 1\n           \
    \     max_depth = max(max_depth, current_depth)\n            elif char == ')':\n\
    \                current_depth -= 1\n        result.append(max_depth)\n    return\
    \ result\n", "    paren_groups = paren_string.split(' ')\n    return [max_nested_parens(paren_group)\
    \ for paren_group in paren_groups]\n", "    max_depth = 0\n    current_depth =\
    \ 0\n    depths = []\n    for char in paren_string:\n        if char == '(':\n\
    \            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n\
    \        elif char == ')':\n            current_depth -= 1\n        elif char\
    \ == ' ':\n            depths.append(max_depth)\n            max_depth = 0\n \
    \           current_depth = 0\n    depths.append(max_depth)\n    return depths\n",
  "    # TODO: Implement this function\n    pass\n", "    # TODO: Implement this function\n\
    \    pass\n", "    result = []\n    for paren_group in paren_string.split():\n\
    \        max_nesting = 0\n        current_nesting = 0\n        for paren in paren_group:\n\
    \            if paren == '(':\n                current_nesting += 1\n        \
    \        max_nesting = max(max_nesting, current_nesting)\n            elif paren\
    \ == ')':\n                current_nesting -= 1\n        result.append(max_nesting)\n\
    \    return result\n", "    result = []\n    for paren_group in paren_string.split():\n\
    \        max_depth = 0\n        current_depth = 0\n        for char in paren_group:\n\
    \            if char == '(':\n                current_depth += 1\n           \
    \     max_depth = max(max_depth, current_depth)\n            elif char == ')':\n\
    \                current_depth -= 1\n        result.append(max_depth)\n    return\
    \ result\n", "    paren_groups = paren_string.split(' ')\n    return [max_nesting_level(group)\
    \ for group in paren_groups]\n", "    paren_groups = paren_string.split()\n  \
    \  max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(find_max_nesting(paren_group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split(' ')\n    return\
    \ [max_nesting_level(group) for group in paren_groups]\n", "    paren_groups =\
    \ paren_string.split(' ')\n    max_nesting = []\n    for group in paren_groups:\n\
    \        max_nesting.append(get_max_nesting(group))\n    return max_nesting\n",
  "    paren_groups = paren_string.split(' ')\n    return [max_nesting_parens(paren_group)\
    \ for paren_group in paren_groups]\n", "    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(find_max_nesting(paren_group))\n\
    \    return max_nesting\n", "    result = []\n    for paren_group in paren_string.split('\
    \ '):\n        level = 0\n        max_level = 0\n        for paren in paren_group:\n\
    \            if paren == '(':\n                level += 1\n                max_level\
    \ = max(max_level, level)\n            elif paren == ')':\n                level\
    \ -= 1\n        result.append(max_level)\n    return result\n", "    # TODO: Implement\
    \ this function\n    pass\n", "    paren_groups = paren_string.split(' ')\n  \
    \  max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(get_max_nesting(paren_group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split()\n    return\
    \ [max_nested_parens(paren_group) for paren_group in paren_groups]\n", "    result\
    \ = []\n    for paren_group in paren_string.split():\n        max_depth = 0\n\
    \        current_depth = 0\n        for paren in paren_group:\n            if\
    \ paren == '(':\n                current_depth += 1\n                max_depth\
    \ = max(max_depth, current_depth)\n            elif paren == ')':\n          \
    \      current_depth -= 1\n        result.append(max_depth)\n    return result\n",
  "    # TODO: Implement this function\n    pass\n", "    paren_groups = paren_string.split('\
    \ ')\n    return [max_nesting_level(group) for group in paren_groups]\n", "  \
    \  max_depth = 0\n    depth = 0\n    result = []\n    for char in paren_string:\n\
    \        if char == '(':\n            depth += 1\n            max_depth = max(max_depth,\
    \ depth)\n        elif char == ')':\n            depth -= 1\n        elif char\
    \ == ' ':\n            result.append(max_depth)\n            max_depth = 0\n \
    \           depth = 0\n    result.append(max_depth)\n    return result\n", " \
    \   result = []\n    for paren_group in paren_string.split(' '):\n        max_depth\
    \ = 0\n        current_depth = 0\n        for paren in paren_group:\n        \
    \    if paren == '(':\n                current_depth += 1\n                max_depth\
    \ = max(max_depth, current_depth)\n            elif paren == ')':\n          \
    \      current_depth -= 1\n        result.append(max_depth)\n    return result\n",
  "    result = []\n    for paren_group in paren_string.split(' '):\n        max_depth\
    \ = 0\n        current_depth = 0\n        for paren in paren_group:\n        \
    \    if paren == '(':\n                current_depth += 1\n                max_depth\
    \ = max(max_depth, current_depth)\n            elif paren == ')':\n          \
    \      current_depth -= 1\n        result.append(max_depth)\n    return result",
  "    result = []\n    for paren_group in paren_string.split(' '):\n        max_level\
    \ = 0\n        level = 0\n        for paren in paren_group:\n            if paren\
    \ == '(':\n                level += 1\n                max_level = max(max_level,\
    \ level)\n            elif paren == ')':\n                level -= 1\n       \
    \ result.append(max_level)\n    return result\n", "    result = []\n    for paren_group\
    \ in paren_string.split(' '):\n        max_depth = 0\n        current_depth =\
    \ 0\n        for paren in paren_group:\n            if paren == '(':\n       \
    \         current_depth += 1\n                max_depth = max(max_depth, current_depth)\n\
    \            elif paren == ')':\n                current_depth -= 1\n        result.append(max_depth)\n\
    \    return result\n", "    max_nesting = []\n    for paren_group in paren_string.split():\n\
    \        max_nesting.append(get_max_nesting(paren_group))\n    return max_nesting\n",
  "    result = []\n    for paren_group in paren_string.split(' '):\n        max_depth\
    \ = 0\n        current_depth = 0\n        for paren in paren_group:\n        \
    \    if paren == '(':\n                current_depth += 1\n                max_depth\
    \ = max(max_depth, current_depth)\n            elif paren == ')':\n          \
    \      current_depth -= 1\n        result.append(max_depth)\n    return result\n",
  "    result = []\n    for paren_group in paren_string.split():\n        max_depth\
    \ = 0\n        current_depth = 0\n        for paren in paren_group:\n        \
    \    if paren == '(':\n                current_depth += 1\n                max_depth\
    \ = max(max_depth, current_depth)\n            elif paren == ')':\n          \
    \      current_depth -= 1\n        result.append(max_depth)\n    return result\n",
  "    groups = paren_string.split()\n    return [max_nesting(group) for group in\
    \ groups]\n", "    paren_groups = paren_string.split(' ')\n    max_nesting = []\n\
    \    for group in paren_groups:\n        max_nesting.append(get_max_nesting(group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split()\n    max_nesting\
    \ = []\n    for group in paren_groups:\n        max_nesting.append(max_nesting_level(group))\n\
    \    return max_nesting\n", "    max_depth = 0\n    curr_depth = 0\n    depths\
    \ = []\n    for char in paren_string:\n        if char == '(':\n            curr_depth\
    \ += 1\n            max_depth = max(max_depth, curr_depth)\n        elif char\
    \ == ')':\n            curr_depth -= 1\n        elif char == ' ':\n          \
    \  depths.append(max_depth)\n            max_depth = 0\n            curr_depth\
    \ = 0\n    depths.append(max_depth)\n    return depths", "    paren_groups = paren_string.split()\n\
    \    return [max_nested_parens(group) for group in paren_groups]\n", "    paren_groups\
    \ = paren_string.split()\n    return [max_nested_parens(group) for group in paren_groups]\n",
  "    result = []\n    for group in paren_string.split():\n        max_depth = 0\n\
    \        current_depth = 0\n        for char in group:\n            if char ==\
    \ '(':\n                current_depth += 1\n                max_depth = max(max_depth,\
    \ current_depth)\n            elif char == ')':\n                current_depth\
    \ -= 1\n        result.append(max_depth)\n    return result", "    groups = paren_string.split('\
    \ ')\n    max_levels = []\n    for group in groups:\n        level = 0\n     \
    \   max_level = 0\n        for char in group:\n            if char == '(':\n \
    \               level += 1\n                max_level = max(max_level, level)\n\
    \            elif char == ')':\n                level -= 1\n        max_levels.append(max_level)\n\
    \    return max_levels\n", "    paren_groups = paren_string.split()\n    return\
    \ [max_nesting(paren_group) for paren_group in paren_groups]\n", "    # TODO:\
    \ Implement me!\n    return []\n\n", "    result = []\n    for paren_group in\
    \ paren_string.split(' '):\n        max_depth = 0\n        depth = 0\n       \
    \ for paren in paren_group:\n            if paren == '(':\n                depth\
    \ += 1\n                max_depth = max(max_depth, depth)\n            elif paren\
    \ == ')':\n                depth -= 1\n        result.append(max_depth)\n    return\
    \ result\n", "    paren_groups = paren_string.split()\n    max_nesting = []\n\
    \    for group in paren_groups:\n        max_nesting.append(max_nesting_parens(group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split()\n    max_nesting\
    \ = []\n    for group in paren_groups:\n        max_nesting.append(find_max_nesting(group))\n\
    \    return max_nesting\n", "    paren_groups = paren_string.split()\n    return\
    \ [paren_group_depth(group) for group in paren_groups]\n", "    # TODO: Implement\
    \ this function\n    pass\n", "    paren_groups = paren_string.split()\n    return\
    \ [max_nesting(group) for group in paren_groups]\n", "    paren_groups = paren_string.split('\
    \ ')\n    max_nesting = []\n    for paren_group in paren_groups:\n        max_nesting.append(nested_parens(paren_group))\n\
    \    return max_nesting\n", "    # TODO: Implement this function\n    pass\n",
  "    # TODO: implement this function\n    pass\n", "    result = []\n    for paren_group\
    \ in paren_string.split():\n        max_depth = 0\n        depth = 0\n       \
    \ for char in paren_group:\n            if char == '(':\n                depth\
    \ += 1\n                max_depth = max(max_depth, depth)\n            elif char\
    \ == ')':\n                depth -= 1\n        result.append(max_depth)\n    return\
    \ result\n", "    paren_groups = paren_string.split()\n    return [max_nesting(paren_group)\
    \ for paren_group in paren_groups]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
