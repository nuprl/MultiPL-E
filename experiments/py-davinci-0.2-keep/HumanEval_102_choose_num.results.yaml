name: HumanEval_102_choose_num
language: python
results:
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\
    \    else:\n        for i in range(y, x-1, -1):\n            if i % 2 == 0:\n\
    \                return i\n        return -1\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz0bv3ag6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpz0bv3ag6.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpz0bv3ag6.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyvds6fj3.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpyvds6fj3.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpyvds6fj3.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpyvds6fj3.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_wqklc0z.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp_wqklc0z.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_wqklc0z.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmp_wqklc0z.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    elif x > y:\n        return\
    \ -1\n    else:\n        return x + 2\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp83foi1d9.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp83foi1d9.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp83foi1d9.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x\
    \ % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        if\
    \ x <= y:\n            return x\n        else:\n            return -1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm24hzq4_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpm24hzq4_.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpm24hzq4_.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    else:\n        return x + 1\n    # TODO: implement this function\n  \
    \  # Hint: you can use the modulo operator (%) to check if a number is even\n\
    \    # or odd.\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq757se_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpiq757se_.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpiq757se_.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq9c4qs1m.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpq9c4qs1m.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpq9c4qs1m.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpq9c4qs1m.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    elif x == y:\n        return\
    \ -1\n    else:\n        return choose_num(x + 1, y)\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmf6v4h91.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmf6v4h91.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpmf6v4h91.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    if x % 2 == 1:\n        return x + 1\n    if x % 2 == 0 and y % 2 ==\
    \ 0:\n        return y\n    if x % 2 == 1 and y % 2 == 1:\n        return y -\
    \ 1\n    if x % 2 == 0 and y % 2 == 1:\n        return y - 1\n    if x % 2 ==\
    \ 1 and y % 2 == 0:\n        return y\n    if x == y:\n        return x\n    if\
    \ x > y:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdf64khh.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpxdf64khh.py\", line 38,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxdf64khh.py\", line 28,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    else:\n        return x + 1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjywarai.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpqjywarai.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpqjywarai.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    elif x % 2 == 0 and y % 2\
    \ == 0:\n        return y\n    elif x % 2 == 1 and y % 2 == 1:\n        return\
    \ y - 1\n    elif x % 2 == 1 and y % 2 == 0:\n        return y\n    elif x % 2\
    \ == 0 and y % 2 == 1:\n        return x\n    elif x > y:\n        return -1\n\
    \    elif x == y:\n        return x\n    else:\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa82opv8z.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpa82opv8z.py\", line 40,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpa82opv8z.py\", line 30,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzs34xjx9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzs34xjx9.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzs34xjx9.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph43fmccb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmph43fmccb.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmph43fmccb.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x\
    \ % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x = x + 1\n     \
    \   return x\n    else:\n        return -1\n    raise NotImplementedError()\n\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7xyq0nk.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpy7xyq0nk.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpy7xyq0nk.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsvgluepf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpsvgluepf.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpsvgluepf.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpsvgluepf.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    else:\n        return x + 1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf9absodo.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpf9absodo.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpf9absodo.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7867w6kq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7867w6kq.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7867w6kq.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # TODO: Implement this function\n\
    \    if x%2 == 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2na8tftf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2na8tftf.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp2na8tftf.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1zpi5310.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1zpi5310.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp1zpi5310.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\
    \    elif x % 2 == 0:\n        return x\n    else:\n        return x + 1\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprabrutab.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprabrutab.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprabrutab.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2\
    \ == 0:\n        return x\n    elif x%2 != 0:\n        x += 1\n        if x%2\
    \ == 0:\n            return x\n        else:\n            return -1\n    else:\n\
    \        return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcry865i9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpcry865i9.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpcry865i9.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x\
    \ % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return\
    \ x\n    else:\n        return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprxs75hhj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmprxs75hhj.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprxs75hhj.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm42tx9_r.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpm42tx9_r.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpm42tx9_r.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x\
    \ % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return\
    \ x\n    else:\n        return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt0ej5hos.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpt0ej5hos.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpt0ej5hos.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ibe9k7b.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3ibe9k7b.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3ibe9k7b.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr_qjac2g.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpr_qjac2g.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpr_qjac2g.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x\
    \ % 2 == 0:\n        return x\n    else:\n        return x + 1\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo81t54w8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpo81t54w8.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpo81t54w8.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprp8kbovb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprp8kbovb.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprp8kbovb.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3qa6qxmh.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3qa6qxmh.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3qa6qxmh.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2\
    \ == 0:\n        return x\n    elif x%2 != 0:\n        return x+1\n    else:\n\
    \        return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3jna11hm.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3jna11hm.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3jna11hm.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    else:\n        return x + 1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqag66mdp.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpqag66mdp.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpqag66mdp.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2==0:\n\
    \        return x\n    elif x%2!=0:\n        return x+1\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp04hxbiyn.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp04hxbiyn.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp04hxbiyn.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    elif x % 2 == 0 and y % 2\
    \ == 0:\n        return y\n    elif x % 2 == 1 and y % 2 == 1:\n        return\
    \ y - 1\n    elif x % 2 == 0 and y % 2 == 1:\n        return y - 1\n    elif x\
    \ % 2 == 1 and y % 2 == 0:\n        return y\n    elif x == y:\n        return\
    \ x\n    elif x > y:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplg32_al8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmplg32_al8.py\", line 38,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmplg32_al8.py\", line 28,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x\
    \ % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return\
    \ x\n    else:\n        return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpidsy_w2i.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpidsy_w2i.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpidsy_w2i.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpin0fkzjo.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpin0fkzjo.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpin0fkzjo.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x\
    \ % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return\
    \ x\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmd1_apa6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmd1_apa6.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpmd1_apa6.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdvk146_x.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdvk146_x.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpdvk146_x.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n \n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnjxhahmt.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpnjxhahmt.py\", line 25,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpnjxhahmt.py\", line 15,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpnjxhahmt.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x\
    \ % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        return x + 1\n  \
    \  else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd1jh1yb7.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpd1jh1yb7.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpd1jh1yb7.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\
    \    elif x % 2 == 0:\n        return x\n    else:\n        return x + 1\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpck1tg_s9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpck1tg_s9.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpck1tg_s9.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\
    \    if x % 2 == 0:\n        return x\n    return choose_num(x + 1, y)\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxvj61svj.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpxvj61svj.py\", line 27,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxvj61svj.py\", line 17,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n \n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpog2ypdfg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpog2ypdfg.py\", line 25,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpog2ypdfg.py\", line 15,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpog2ypdfg.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph1l7goyd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmph1l7goyd.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmph1l7goyd.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\
    \    elif x % 2 == 0:\n        return x\n    else:\n        return x + 1\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxnoh5yf_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxnoh5yf_.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxnoh5yf_.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgzno8mba.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgzno8mba.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpgzno8mba.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi2dv3alv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpi2dv3alv.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpi2dv3alv.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2\
    \ == 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp89345jdx.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp89345jdx.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp89345jdx.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprvs2tduj.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprvs2tduj.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprvs2tduj.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfoyohrin.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfoyohrin.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpfoyohrin.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_l_986ql.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_l_986ql.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_l_986ql.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmh9kqhnn.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpmh9kqhnn.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpmh9kqhnn.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpmh9kqhnn.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnio4b4a2.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpnio4b4a2.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpnio4b4a2.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpnio4b4a2.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2\
    \ == 0:\n        return x\n    elif x%2 == 1:\n        return x+1\n    else:\n\
    \        return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpccsbgfxo.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpccsbgfxo.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpccsbgfxo.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpebavkwal.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpebavkwal.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpebavkwal.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    else:\n        return x + 1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppilkor22.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmppilkor22.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmppilkor22.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0bu0dfys.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0bu0dfys.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp0bu0dfys.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpctq1ju_0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpctq1ju_0.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpctq1ju_0.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpae3nbuyu.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpae3nbuyu.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpae3nbuyu.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_zsek2n.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmph_zsek2n.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmph_zsek2n.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmph_zsek2n.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        if x + 1 <= y:\n            return x + 1\n\
    \        else:\n            return -1\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5risakl9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5risakl9.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp5risakl9.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7esh2bcy.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7esh2bcy.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7esh2bcy.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0pamphht.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp0pamphht.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp0pamphht.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprgrcvyrv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmprgrcvyrv.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprgrcvyrv.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7_3bze85.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp7_3bze85.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7_3bze85.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 == y:\n        return -1\n    else:\n        return choose_num(x\
    \ + 1, y)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxrhjc7ns.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxrhjc7ns.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxrhjc7ns.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptji_o1t3.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptji_o1t3.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmptji_o1t3.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmptji_o1t3.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 == y:\n        return -1\n    else:\n        return choose_num(x\
    \ + 1, y)\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n   \
    \ assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n \
    \   assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n  \
    \  assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3mzqtmkw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3mzqtmkw.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3mzqtmkw.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    else:\n        return x + 1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp30cgq3_h.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp30cgq3_h.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp30cgq3_h.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2\
    \ == 0:\n        return x\n    elif x+1 == y:\n        return -1\n    else:\n\
    \        return choose_num(x+1, y)\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpel8luezv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpel8luezv.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpel8luezv.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\
    \    elif x % 2 == 0:\n        return x\n    else:\n        return x + 1\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwf0nwih5.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwf0nwih5.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpwf0nwih5.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n \n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7rwc91fg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7rwc91fg.py\", line 25,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7rwc91fg.py\", line 15,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmp7rwc91fg.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg6omewms.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg6omewms.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpg6omewms.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 == y:\n        return -1\n    else:\n        return choose_num(x\
    \ + 1, y)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpejlq13c4.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpejlq13c4.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpejlq13c4.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcv_pfsxt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcv_pfsxt.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpcv_pfsxt.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # TODO: implement this function\n\
    \    if x % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpumv8sfmy.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpumv8sfmy.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpumv8sfmy.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpinvtjiel.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpinvtjiel.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpinvtjiel.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpinvtjiel.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvm5b23su.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpvm5b23su.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpvm5b23su.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x\
    \ % 2 == 0:\n        return x\n    elif x + 1 <= y:\n        return x + 1\n  \
    \  else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi2fo4d3y.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpi2fo4d3y.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpi2fo4d3y.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x\
    \ % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return\
    \ x\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ld3rn2k.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1ld3rn2k.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp1ld3rn2k.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp55zz83ra.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp55zz83ra.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp55zz83ra.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppts6bjsl.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmppts6bjsl.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmppts6bjsl.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmppts6bjsl.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiuyknj8i.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpiuyknj8i.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpiuyknj8i.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpiuyknj8i.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptc795etj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptc795etj.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmptc795etj.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmptc795etj.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\
    \    elif x % 2 == 0:\n        return x\n    else:\n        return x + 1\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpztoj0twk.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpztoj0twk.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpztoj0twk.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjnuzuhnx.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpjnuzuhnx.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpjnuzuhnx.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhcrths3.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpfhcrths3.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpfhcrths3.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpfhcrths3.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9v4jny7k.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9v4jny7k.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp9v4jny7k.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9o58ak4y.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9o58ak4y.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp9o58ak4y.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprrli7kxq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprrli7kxq.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprrli7kxq.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2126b36f.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp2126b36f.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp2126b36f.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmp2126b36f.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp685kxyry.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp685kxyry.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp685kxyry.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnl0j0tf6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpnl0j0tf6.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpnl0j0tf6.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2\
    \ == 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n    else:\n\
    \        return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp048k_s3e.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp048k_s3e.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp048k_s3e.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n \n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4bfkej3e.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4bfkej3e.py\", line 25,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp4bfkej3e.py\", line 15,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmp4bfkej3e.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq8j88dt1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq8j88dt1.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpq8j88dt1.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptx79fwax.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptx79fwax.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmptx79fwax.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmptx79fwax.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu1mmpspr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpu1mmpspr.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpu1mmpspr.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp14w_ry0s.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp14w_ry0s.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp14w_ry0s.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmp14w_ry0s.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1vjdaxy5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1vjdaxy5.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp1vjdaxy5.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmp1vjdaxy5.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe09b4njp.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpe09b4njp.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpe09b4njp.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpe09b4njp.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        x += 1\n        return x\n    else:\n     \
    \   return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n \
    \   assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplavhdcdn.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmplavhdcdn.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmplavhdcdn.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x\
    \ > y:\n        return -1\n    else:\n        for i in range(y, x-1, -1):\n  \
    \          if i % 2 == 0:\n                return i\n        return -1\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpflniu5oj.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpflniu5oj.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpflniu5oj.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprm8pbkak.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprm8pbkak.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprm8pbkak.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppb269ztl.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmppb269ztl.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmppb269ztl.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmppb269ztl.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 == y:\n        return -1\n    else:\n        return choose_num(x\
    \ + 1, y)\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n   \
    \ assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n \
    \   assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n  \
    \  assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbp7vrmks.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbp7vrmks.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpbp7vrmks.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2\
    \ == 0:\n        return x\n    elif x%2 != 0:\n        x += 1\n        return\
    \ x\n    else:\n        return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpih7x7imv.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpih7x7imv.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpih7x7imv.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # TODO: Write your code here!\n\
    \    if x % 2 == 0:\n        return x\n    else:\n        return x + 1\n    #\
    \ TODO: Write your code here!\n    return -1\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkpy6ztk1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpkpy6ztk1.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpkpy6ztk1.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr58cvrvl.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpr58cvrvl.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpr58cvrvl.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpr58cvrvl.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    else:\n        return x + 1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt1z7w50f.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpt1z7w50f.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpt1z7w50f.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmlwp37k2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpmlwp37k2.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpmlwp37k2.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmhqsaie7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmhqsaie7.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpmhqsaie7.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppnee4bau.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmppnee4bau.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmppnee4bau.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptt82srsj.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmptt82srsj.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmptt82srsj.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk3irt4yy.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk3irt4yy.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpk3irt4yy.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_4zgqg8o.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_4zgqg8o.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_4zgqg8o.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc6hrkbpi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpc6hrkbpi.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpc6hrkbpi.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2\
    \ == 0:\n        return x\n    elif x%2 != 0:\n        x += 1\n        return\
    \ x\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_8ovhba.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpi_8ovhba.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpi_8ovhba.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    elif x % 2 == 0 and y % 2\
    \ == 0:\n        return y\n    elif x % 2 == 1 and y % 2 == 1:\n        return\
    \ y - 1\n    elif x % 2 == 1 and y % 2 == 0:\n        return y\n    elif x % 2\
    \ == 0 and y % 2 == 1:\n        return x\n    else:\n        return -1\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnxbpo392.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpnxbpo392.py\", line 36,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpnxbpo392.py\", line 26,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2\
    \ == 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n    else:\n\
    \        return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkiz2ic_x.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpkiz2ic_x.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpkiz2ic_x.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpen6ulo_k.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpen6ulo_k.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpen6ulo_k.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiv4ub95m.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpiv4ub95m.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpiv4ub95m.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpiv4ub95m.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        x += 1\n        return x\n    else:\n     \
    \   return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n \
    \   assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_sd00n_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpv_sd00n_.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpv_sd00n_.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7vmh81fq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7vmh81fq.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7vmh81fq.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb22_0tjn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpb22_0tjn.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpb22_0tjn.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n   \
    \ assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n \
    \   assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n  \
    \  assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj352slgx.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpj352slgx.py\", line 25,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpj352slgx.py\", line 15,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeaatez7a.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpeaatez7a.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpeaatez7a.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # TODO: implement this function\n\
    \    if x % 2 == 0:\n        return x\n    else:\n        return x + 1\n    #\
    \ END OF TODO\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n \
    \   assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzyfpajs8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzyfpajs8.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzyfpajs8.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # TODO: write your code here\n\
    \    if x % 2 == 0:\n        return x\n    else:\n        return x + 1\n    return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3kn4igaa.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3kn4igaa.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3kn4igaa.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2\
    \ == 0:\n        return x\n    else:\n        return x+1\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0gv_hx88.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0gv_hx88.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp0gv_hx88.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjtlaxfrg.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpjtlaxfrg.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpjtlaxfrg.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpjtlaxfrg.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2\
    \ == 0:\n        return max(x,y)\n    else:\n        return max(x+1,y)\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1s1czpmw.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp1s1czpmw.py\", line 27,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp1s1czpmw.py\", line 17,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x\
    \ % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return\
    \ x\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx4uvqf7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpxx4uvqf7.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxx4uvqf7.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyafckka7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpyafckka7.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpyafckka7.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc0dyo84b.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpc0dyo84b.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpc0dyo84b.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 == y:\n        return -1\n    else:\n        return choose_num(x\
    \ + 1, y)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte4mlvxd.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpte4mlvxd.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte4mlvxd.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi1h9whqt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpi1h9whqt.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpi1h9whqt.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpli4zy9et.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpli4zy9et.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpli4zy9et.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n \n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4jjiuqg0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4jjiuqg0.py\", line 25,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp4jjiuqg0.py\", line 15,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmp4jjiuqg0.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph8cl8tav.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmph8cl8tav.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmph8cl8tav.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n \n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxuza2naw.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxuza2naw.py\", line 25,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxuza2naw.py\", line 15,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpxuza2naw.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp__rek89b.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp__rek89b.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp__rek89b.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5h59jg7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq5h59jg7.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpq5h59jg7.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp38lykruw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp38lykruw.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp38lykruw.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    else:\n        return x + 1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7sqr89bt.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp7sqr89bt.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7sqr89bt.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2l5f0khg.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp2l5f0khg.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp2l5f0khg.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5bgztfop.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp5bgztfop.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp5bgztfop.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplx5l6crn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplx5l6crn.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmplx5l6crn.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphjs2dt3f.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmphjs2dt3f.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmphjs2dt3f.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmphjs2dt3f.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkae4pzcv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkae4pzcv.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpkae4pzcv.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2\
    \ == 0:\n        return x\n    elif x+1 == y:\n        return -1\n    else:\n\
    \        return choose_num(x+1, y)\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxvqd5c8o.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxvqd5c8o.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxvqd5c8o.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    elif x % 2 == 0 and y % 2\
    \ == 0:\n        return y\n    elif x % 2 == 1 and y % 2 == 1:\n        return\
    \ y - 1\n    elif x % 2 == 1 and y % 2 == 0:\n        return y\n    elif x % 2\
    \ == 0 and y % 2 == 1:\n        return x\n    else:\n        return -1\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpks753jap.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpks753jap.py\", line 36,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpks753jap.py\", line 26,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqfftju82.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpqfftju82.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpqfftju82.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpqfftju82.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1kyj9_39.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1kyj9_39.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp1kyj9_39.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 == y:\n        return -1\n    else:\n        return choose_num(x\
    \ + 1, y)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvef152o9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpvef152o9.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpvef152o9.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw2iplrng.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpw2iplrng.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpw2iplrng.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy0d2qa44.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpy0d2qa44.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpy0d2qa44.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpy0d2qa44.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 == y:\n        return -1\n    else:\n        return choose_num(x\
    \ + 1, y)\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n   \
    \ assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n \
    \   assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n  \
    \  assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxka_v09s.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxka_v09s.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxka_v09s.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2\
    \ == 0:\n        return x\n    elif x%2 == 1:\n        return x+1\n    else:\n\
    \        return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppoi5la25.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmppoi5la25.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmppoi5la25.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphe88sajb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphe88sajb.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmphe88sajb.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 == y:\n        return -1\n    else:\n        return choose_num(x\
    \ + 1, y)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu2hn_t3k.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpu2hn_t3k.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpu2hn_t3k.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7o779uwc.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp7o779uwc.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7o779uwc.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        x += 1\n        return x\n    else:\n     \
    \   return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n \
    \   assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppzx_1esc.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmppzx_1esc.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmppzx_1esc.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqfppqa5w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqfppqa5w.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpqfppqa5w.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    elif y % 2 == 0:\n      \
    \  return y\n    elif y % 2 == 1:\n        return y - 1\n    else:\n        return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6u4p4zss.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp6u4p4zss.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp6u4p4zss.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(x, y+1):\n \
    \       if i % 2 == 0:\n            return i\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2s3oqemz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2s3oqemz.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp2s3oqemz.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0yzuk5jz.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp0yzuk5jz.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp0yzuk5jz.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ruwgiui.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7ruwgiui.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7ruwgiui.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        x += 1\n        return x\n    else:\n     \
    \   return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n \
    \   assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8v6jagpo.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8v6jagpo.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp8v6jagpo.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 == y:\n        return -1\n    else:\n        return choose_num(x\
    \ + 1, y)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplwawzz8w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplwawzz8w.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmplwawzz8w.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp82jo_5yr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp82jo_5yr.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp82jo_5yr.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpedywyiiy.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpedywyiiy.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpedywyiiy.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsm3eds4j.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpsm3eds4j.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpsm3eds4j.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpsm3eds4j.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n \n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa13j1xgz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpa13j1xgz.py\", line 25,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpa13j1xgz.py\", line 15,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmpa13j1xgz.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvt1m57zs.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpvt1m57zs.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpvt1m57zs.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x\
    \ % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return\
    \ x\n    else:\n        return -1\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ioc3jjd.py\", line\
    \ 264, in <module>\n    test_check()\n  File \"/tmp/tmp_ioc3jjd.py\", line 262,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_ioc3jjd.py\", line 252,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # TODO: Write your code here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n   \
    \ assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n \
    \   assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n  \
    \  assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq53uawjm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpq53uawjm.py\", line 25,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpq53uawjm.py\", line 15,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8g05l900.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8g05l900.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp8g05l900.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\
    \    if x % 2 == 0:\n        return x\n    else:\n        return x + 1\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8_dzmec.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8_dzmec.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpk8_dzmec.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmicpjny4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpmicpjny4.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpmicpjny4.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2\
    \ == 0:\n        return x\n    elif x%2 != 0:\n        x += 1\n        return\
    \ x\n    else:\n        return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu907v2vf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpu907v2vf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpu907v2vf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    elif x % 2 == 0 and y % 2\
    \ == 0:\n        return y\n    elif x % 2 == 1 and y % 2 == 1:\n        return\
    \ y - 1\n    elif x % 2 == 0 and y % 2 == 1:\n        return y - 1\n    elif x\
    \ % 2 == 1 and y % 2 == 0:\n        return y\n    elif x > y:\n        return\
    \ -1\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcrzfwl0i.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpcrzfwl0i.py\", line 38,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpcrzfwl0i.py\", line 28,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    elif y % 2 == 0:\n      \
    \  return y\n    elif y % 2 == 1:\n        return y - 1\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkq9d9ubw.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkq9d9ubw.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpkq9d9ubw.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4yg1jr07.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4yg1jr07.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp4yg1jr07.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsmnz6akt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsmnz6akt.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpsmnz6akt.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x\
    \ % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x = x + 1\n     \
    \   return x\n    else:\n        return -1\n    raise NotImplementedError()\n\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiiy916cp.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpiiy916cp.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpiiy916cp.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 == y:\n        return -1\n    else:\n        return choose_num(x\
    \ + 1, y)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt1p_cxol.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpt1p_cxol.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpt1p_cxol.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x % 2 == 1:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5u461lea.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp5u461lea.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp5u461lea.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2\
    \ == 0:\n        return x\n    elif x%2 != 0:\n        x += 1\n        return\
    \ x\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6dawp2e.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpm6dawp2e.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpm6dawp2e.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9vgb2svi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9vgb2svi.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp9vgb2svi.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpikvv5wcp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpikvv5wcp.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpikvv5wcp.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\
    \    elif x % 2 == 0:\n        return x\n    else:\n        return x + 1\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprl7et6oy.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprl7et6oy.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprl7et6oy.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplvvyoxvm.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplvvyoxvm.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmplvvyoxvm.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph5c80rjp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmph5c80rjp.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmph5c80rjp.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x\
    \ % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        return x + 1\n  \
    \  else:\n        return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwj30q1t2.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpwj30q1t2.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpwj30q1t2.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdnr722lb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdnr722lb.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpdnr722lb.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        return\
    \ x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzqkloule.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpzqkloule.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzqkloule.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x\
    \ % 2 == 0:\n        return x\n    elif x % 2 != 0:\n        x = x + 1\n     \
    \   return x\n    else:\n        return -1\n    raise NotImplementedError()\n\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv6231w8s.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpv6231w8s.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpv6231w8s.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes\
    \ two positive numbers x and y and returns the\n    biggest even integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\n\n    For example:\n    choose_num(12, 15) =\
    \ 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3_nb70dv.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp3_nb70dv.py\", line 24,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3_nb70dv.py\", line 14,\
    \ in check\n    assert candidate(12, 15) == 14\n  File \"/tmp/tmp3_nb70dv.py\"\
    , line 11, in choose_num\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
