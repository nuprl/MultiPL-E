name: HumanEval_61_correct_bracketing
language: python
results:
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: use a stack\n    stack = []\n    for bracket in brackets:\n        if\
    \ bracket == \"(\":\n            stack.append(bracket)\n        elif bracket ==\
    \ \")\":\n            if len(stack) == 0:\n                return False\n    \
    \        else:\n                stack.pop()\n    return len(stack) == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete this function body\n    # Hint: you may want to use a helper\
    \ function.\n    return brackets.count(\"(\") == brackets.count(\")\")\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprd66qb08.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmprd66qb08.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmprd66qb08.py\"\
    , line 25, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets.\n    # You can use\
    \ a list as a stack.\n    # To push an item onto the stack, use append.\n    #\
    \ To pop an item off the stack, use pop.\n    # To check if the stack is empty,\
    \ use len.\n    stack = []\n    for bracket in brackets:\n        if bracket ==\
    \ \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n\
    \            if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0r23ihy9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp0r23ihy9.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0r23ihy9.py\"\
    , line 23, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # if brackets is empty, return True\n    if brackets == \"\":\n        return\
    \ True\n    # if brackets is not empty, check if the first character is a closing\
    \ bracket\n    elif brackets[0] == \")\":\n        return False\n    # if brackets\
    \ is not empty and the first character is an opening bracket,\n    # check if\
    \ the rest of the string is correct\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjc_42s0.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpqjc_42s0.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpqjc_42s0.py\"\
    , line 26, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen\n  \
    \  # so far.\n    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\"\
    :\n            if len(stack) == 0:\n                return False\n           \
    \ else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: use a stack\n    stack = []\n    for bracket in brackets:\n        if\
    \ bracket == \"(\":\n            stack.append(bracket)\n        elif bracket ==\
    \ \")\":\n            if len(stack) == 0:\n                return False\n    \
    \        else:\n                stack.pop()\n    return len(stack) == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # We can use a stack to keep track of the brackets we have seen.\n    # If we\
    \ see an opening bracket, we push it onto the stack.\n    # If we see a closing\
    \ bracket, we pop from the stack.\n    # If we see a closing bracket but the stack\
    \ is empty, then we have\n    # seen a closing bracket without a corresponding\
    \ opening bracket.\n    # If we finish and the stack is empty, then we have seen\
    \ the same\n    # number of opening and closing brackets.\n    stack = []\n  \
    \  for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if stack == []:\n               \
    \ return False\n            else:\n                stack.pop()\n    return stack\
    \ == []\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: use a stack\n    stack = []\n    for bracket in brackets:\n        if\
    \ bracket == \"(\":\n            stack.append(bracket)\n        elif bracket ==\
    \ \")\":\n            if stack == []:\n                return False\n        \
    \    else:\n                stack.pop()\n    return stack == []\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen so far.\n\
    \    # You can use the append and pop methods to add and remove items from the\
    \ stack.\n    # You can use the peek method to see what is at the top of the stack.\n\
    \    # You can use the is_empty method to check if the stack is empty.\n    #\
    \ You can use the len function to get the length of the stack.\n    stack = Stack()\n\
    \    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if stack.is_empty():\n          \
    \      return False\n            else:\n                stack.pop()\n    return\
    \ stack.is_empty()\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw3t37waj.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpw3t37waj.py\", line 46,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpw3t37waj.py\"\
    , line 32, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpw3t37waj.py\"\
    , line 19, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen so far.\n\
    \    # You can use a list as a stack.\n    # To push an item onto the stack, use\
    \ append.\n    # To pop an item off the stack, use pop.\n    # To check if the\
    \ stack is empty, use not.\n    # For example,\n    # >>> stack = []\n    # >>>\
    \ stack.append(\"(\")\n    # >>> stack.append(\")\")\n    # >>> stack\n    # [\"\
    (\", \")\"]\n    # >>> stack.pop()\n    # \")\"\n    # >>> stack\n    # [\"(\"\
    ]\n    # >>> not stack\n    # False\n    # >>> stack.pop()\n    # \"(\"\n    #\
    \ >>> not stack\n    # True\n    # >>> stack.pop()\n    # Traceback (most recent\
    \ call last):\n    # ...\n    # IndexError: pop from empty list\n    #\n    #\
    \ You can also check if a list is empty using len.\n    # For example,\n    #\
    \ >>> stack = []\n    # >>> len(stack)\n    # 0\n    # >>> stack.append(\"(\"\
    )\n    # >>> len(stack)\n    # 1\n    # >>> stack.pop()\n    # \"(\"\n    # >>>\
    \ len(stack)\n    # 0\n    #\n    # You can also use a for loop to iterate over\
    \ the characters in brackets.\n    # For example,\n    # >>> for char in \"()\"\
    :\n    # ...     print(char)\n    # ...\n    # (\n    # )\n    # >>> for char\
    \ in \"()\":\n    # ...     if char == \"(\":\n    # ...         print(\"opening\
    \ bracket\")\n    # ...     elif char == \")\":\n    # ...         print(\"closing\
    \ bracket\")\n    # ...\n    # opening bracket\n    # closing bracket\n    #\n\
    \    # You can use the in operator to check if a character is in a string.\n \
    \   # For example,\n    # >>> \"(\" in \"()\"\n    # True\n    # >>> \")\" in\
    \ \"()\"\n    # True\n    # >>> \"(\" in \")\"\n    # False\n    # >>> \")\" in\
    \ \"(\"\n    # False\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma_rc624.py\", line\
    \ 96, in <module>\n    test_check()\n  File \"/tmp/tmpma_rc624.py\", line 94,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpma_rc624.py\"\
    , line 80, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    # Hint: use a stack\n    stack = []\n \
    \   for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if len(stack) == 0:\n           \
    \     return False\n            else:\n                stack.pop()\n    if len(stack)\
    \ == 0:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnwmja62q.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpnwmja62q.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnwmja62q.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen\n  \
    \  # so far.\n    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\"\
    :\n            if len(stack) == 0:\n                return False\n           \
    \ stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq77nulqy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq77nulqy.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq77nulqy.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"(\":\n          \
    \  count += 1\n        elif char == \")\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: You can use a stack to keep track of the opening brackets.\n    # You\
    \ can use a list as a stack.\n    # To push an item onto the stack, use stack.append(item).\n\
    \    # To pop an item off the stack, use stack.pop().\n    # To check whether\
    \ the stack is empty, use len(stack) == 0.\n    stack = []\n    for bracket in\
    \ brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if len(stack) == 0:\n           \
    \     return False\n            else:\n                stack.pop()\n    return\
    \ len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you may want to use a stack\n    # loop through the string\n    # if\
    \ you see an open bracket, add it to the stack\n    # if you see a close bracket,\
    \ pop from the stack\n    # if the stack is empty at the end, return True\n  \
    \  # if the stack is not empty at the end, return False\n    stack = []\n    for\
    \ bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if len(stack) == 0:\n           \
    \     return False\n            else:\n                stack.pop()\n    return\
    \ len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets.\n    # You can use\
    \ a list as a stack.\n    # To push a value onto the stack, use stack.append(value).\n\
    \    # To pop a value off the stack, use stack.pop().\n    # To check if the stack\
    \ is empty, use if not stack:\n    stack = []\n    for i in brackets:\n      \
    \  if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n   \
    \         if not stack:\n                return False\n            stack.pop()\n\
    \    if not stack:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    # Hint: you may want to use a stack\n \
    \   stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n \
    \           stack.append(bracket)\n        else:\n            if len(stack) ==\
    \ 0:\n                return False\n            else:\n                stack.pop()\n\
    \    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete this function\n    # Hint: use a stack\n    stack = Stack()\n\
    \    for bracket in brackets:\n        if bracket == \"(\":\n            stack.push(bracket)\n\
    \        elif bracket == \")\":\n            if stack.is_empty():\n          \
    \      return False\n            stack.pop()\n    return stack.is_empty()\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpis6jrwxp.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpis6jrwxp.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpis6jrwxp.py\"\
    , line 28, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpis6jrwxp.py\"\
    , line 16, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0vcbdp_r.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp0vcbdp_r.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0vcbdp_r.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to solve this problem.\n    # You can use the list\
    \ methods append and pop to implement a stack.\n    # You can use the list method\
    \ count to count the number of opening brackets.\n    # You can use the string\
    \ method count to count the number of closing brackets.\n    # You can use the\
    \ string method startswith to check whether a string starts with a given substring.\n\
    \    # You can use the string method strip to remove a given substring from the\
    \ beginning of a string.\n    # You can use the string method lstrip to remove\
    \ a given substring from the left side of a string.\n    # You can use the string\
    \ method rstrip to remove a given substring from the right side of a string.\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n\
    \            stack.append(bracket)\n        elif bracket == \")\":\n         \
    \   if len(stack) == 0:\n                return False\n            else:\n   \
    \             stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    # Hint: you may find the pop() method of\
    \ lists useful.\n    #       You may also find the append() method of lists useful.\n\
    \    #       You may also find the is_empty() method of lists useful.\n    # \
    \      You may also find the is_full() method of lists useful.\n    #       You\
    \ may also find the len() function useful.\n    #       You may also find the\
    \ push() method of lists useful.\n    #       You may also find the pop() method\
    \ of lists useful.\n    #       You may also find the peek() method of lists useful.\n\
    \    #       You may also find the is_empty() method of lists useful.\n    # \
    \      You may also find the is_full() method of lists useful.\n    #       You\
    \ may also find the len() function useful.\n    #       You may also find the\
    \ push() method of lists useful.\n    #       You may also find the pop() method\
    \ of lists useful.\n    #       You may also find the peek() method of lists useful.\n\
    \    #       You may also find the is_empty() method of lists useful.\n    # \
    \      You may also find the is_full() method of lists useful.\n    #       You\
    \ may also find the len() function useful.\n    #       You may also find the\
    \ push() method of lists useful.\n    #       You may also find the pop() method\
    \ of lists useful.\n    #       You may also find the peek() method of lists useful.\n\
    \    #       You may also find the is_empty() method of lists useful.\n    # \
    \      You may also find the is_full() method of lists useful.\n    #       You\
    \ may also find the len() function useful.\n    #       You may also find the\
    \ push() method of lists useful.\n    #       You may also find the pop() method\
    \ of lists useful.\n    #       You may also find the peek() method of lists useful.\n\
    \    #       You may also find the is_empty() method of lists useful.\n    # \
    \      You may also find the is_full() method of lists useful.\n    #       You\
    \ may also find the len() function useful.\n    #       You may also find the\
    \ push() method of lists useful.\n    #       You may also find the pop() method\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphva4e49b.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmphva4e49b.py\", line 61,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmphva4e49b.py\"\
    , line 47, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen so far.\n\
    \    # You can use a list as a stack.\n    # To push an item onto the stack, use\
    \ stack.append(item).\n    # To pop an item off the stack, use stack.pop().\n\
    \    # To check if the stack is empty, use len(stack) == 0.\n    stack = []\n\
    \    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if len(stack) == 0:\n           \
    \     return False\n            else:\n                stack.pop()\n    return\
    \ len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete this function body\n    # Hint: use a variable to keep track\
    \ of the number of open brackets\n    # Hint: use a loop to go through the string\n\
    \    # Hint: use an if statement to check if the number of open brackets is negative\n\
    \    # Hint: use an if statement to check if the number of open brackets is greater\
    \ than 0 at the end\n    open_brackets = 0\n    for bracket in brackets:\n   \
    \     if bracket == \"(\":\n            open_brackets += 1\n        elif bracket\
    \ == \")\":\n            open_brackets -= 1\n        if open_brackets < 0:\n \
    \           return False\n    return open_brackets == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you've seen so far.\n\
    \    # You can use a list as a stack.\n    # To add an item to the top of the\
    \ stack, use .append(item).\n    # To remove an item from the top of the stack,\
    \ use .pop().\n    # To check what item is on the top of the stack, use stack[-1].\n\
    \    #\n    # You can also use a list as a queue.\n    # To add an item to the\
    \ end of the queue, use .append(item).\n    # To remove an item from the front\
    \ of the queue, use .pop(0).\n    # To check what item is at the front of the\
    \ queue, use queue[0].\n    #\n    # You can also use a list as a deque.\n   \
    \ # To add an item to the front of the deque, use .appendleft(item).\n    # To\
    \ remove an item from the front of the deque, use .popleft().\n    # To check\
    \ what item is at the front of the deque, use deque[0].\n    #\n    # You can\
    \ also use a list as a deque.\n    # To add an item to the back of the deque,\
    \ use .append(item).\n    # To remove an item from the back of the deque, use\
    \ .pop().\n    # To check what item is at the back of the deque, use deque[-1].\n\
    \    #\n    # You can also use a list as a deque.\n    # To add an item to the\
    \ front of the deque, use .appendleft(item).\n    # To remove an item from the\
    \ back of the deque, use .pop().\n    # To check what item is at the front of\
    \ the deque, use deque[0].\n    #\n    # You can also use a list as a deque.\n\
    \    # To add an item to the back of the deque, use .append(item).\n    # To remove\
    \ an item from the front of the deque, use .popleft().\n    # To check what item\
    \ is at the back of the deque, use deque[-1].\n    #\n    # You can also use a\
    \ list as a deque.\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoaoezmm8.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmpoaoezmm8.py\", line 62,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpoaoezmm8.py\"\
    , line 48, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if brackets == \"\":\n        return True\n    elif brackets[0] == \")\":\n\
    \        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnr7tunrz.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnr7tunrz.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnr7tunrz.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you've seen\n    #\
    \ so far.\n    stack = []\n    for bracket in brackets:\n        if bracket ==\
    \ \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n\
    \            if len(stack) == 0:\n                return False\n            stack.pop()\n\
    \    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    # Hint: use a stack\n\n    stack = []\n\
    \    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if len(stack) == 0:\n           \
    \     return False\n            else:\n                stack.pop()\n    if len(stack)\
    \ == 0:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # check if brackets is empty\n    if brackets == \"\":\n        return True\n\
    \    # check if brackets is a single bracket\n    elif len(brackets) == 1:\n \
    \       return False\n    # check if brackets is a pair of brackets\n    elif\
    \ len(brackets) == 2:\n        return brackets == \"()\"\n    # check if brackets\
    \ is a longer string\n    else:\n        # check if brackets starts with a closing\
    \ bracket\n        if brackets[0] == \")\":\n            return False\n      \
    \  # check if brackets ends with an opening bracket\n        elif brackets[-1]\
    \ == \"(\":\n            return False\n        # check if brackets has a pair\
    \ of brackets\n        elif brackets[0] == \"(\" and brackets[1] == \")\":\n \
    \           return correct_bracketing(brackets[2:])\n        # check if brackets\
    \ has a pair of brackets\n        elif brackets[-2] == \"(\" and brackets[-1]\
    \ == \")\":\n            return correct_bracketing(brackets[:-2])\n        # check\
    \ if brackets has a pair of brackets\n        else:\n            return correct_bracketing(brackets[1:-1])\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb3q0st80.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmpb3q0st80.py\", line 57,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpb3q0st80.py\"\
    , line 46, in check\n    assert candidate('()()((()()())())(()()(()))') == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen\n  \
    \  # so far.\n    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\"\
    :\n            if len(stack) == 0:\n                return False\n           \
    \ else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: You can use a stack to keep track of the brackets.\n    # If you see\
    \ an opening bracket, push it onto the stack.\n    # If you see a closing bracket,\
    \ pop the stack.\n    # If the stack is empty, then the brackets are correctly\
    \ matched.\n    # If the stack is not empty, then the brackets are not correctly\
    \ matched.\n    stack = []\n    for bracket in brackets:\n        if bracket ==\
    \ \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n\
    \            if stack == []:\n                return False\n            else:\n\
    \                stack.pop()\n    if stack == []:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen so far.\n\
    \    # If you see an opening bracket, add it to the stack.\n    # If you see a\
    \ closing bracket, remove the most recent opening bracket from the stack.\n  \
    \  # If you see a closing bracket but the stack is empty, return False.\n    #\
    \ If you finish going through the string and the stack is empty, return True.\n\
    \    # If you finish going through the string and the stack is not empty, return\
    \ False.\n    stack = []\n    for bracket in brackets:\n        if bracket ==\
    \ \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n\
    \            if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    if len(stack) == 0:\n        return True\n \
    \   else:\n        return False\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen so far.\n\
    \    # You can use a list as a stack, where the end of the list is the top of\
    \ the stack.\n    # You can use .append() to push an item onto the stack, and\
    \ .pop() to pop it off.\n    # You can check if a list is empty using == [].\n\
    \    # (You can also use the built-in function len() to check if a list is empty.)\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n\
    \            stack.append(bracket)\n        elif bracket == \")\":\n         \
    \   if stack == []:\n                return False\n            else:\n       \
    \         stack.pop()\n    if stack == []:\n        return True\n    else:\n \
    \       return False\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9cziik3u.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9cziik3u.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp9cziik3u.py\"\
    , line 23, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmmwzzq_o.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpmmwzzq_o.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpmmwzzq_o.py\"\
    , line 23, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the opening brackets.\n    # If\
    \ you see a closing bracket, you can pop the stack to see if it matches.\n   \
    \ # If the stack is empty, or if the brackets don't match, return False.\n   \
    \ # If you get to the end of the string and the stack is empty, return True.\n\
    \    stack = []\n    for i in brackets:\n        if i == \"(\":\n            stack.append(i)\n\
    \        elif i == \")\":\n            if stack == []:\n                return\
    \ False\n            else:\n                stack.pop()\n    if stack == []:\n\
    \        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7uv0gd4c.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7uv0gd4c.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp7uv0gd4c.py\"\
    , line 23, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to solve this.\n    # You can use a list as a stack\
    \ by using .append() and .pop()\n    # You can use a list as a queue by using\
    \ .append() and .pop(0)\n    # You can use a list as a deque by using .append()\
    \ and .pop()\n    # You can use a list as a deque by using .append() and .pop(0)\n\
    \    # You can use a list as a deque by using .appendleft() and .pop()\n    #\
    \ You can use a list as a deque by using .appendleft() and .popleft()\n    # You\
    \ can use a list as a deque by using .appendleft() and .pop()\n    # You can use\
    \ a list as a deque by using .appendleft() and .popleft()\n    # You can use a\
    \ list as a deque by using .appendleft() and .pop()\n    # You can use a list\
    \ as a deque by using .appendleft() and .popleft()\n    # You can use a list as\
    \ a deque by using .appendleft() and .pop()\n    # You can use a list as a deque\
    \ by using .appendleft() and .popleft()\n    # You can use a list as a deque by\
    \ using .appendleft() and .pop()\n    # You can use a list as a deque by using\
    \ .appendleft() and .popleft()\n    # You can use a list as a deque by using .appendleft()\
    \ and .pop()\n    # You can use a list as a deque by using .appendleft() and .popleft()\n\
    \    # You can use a list as a deque by using .appendleft() and .pop()\n    #\
    \ You can use a list as a deque by using .appendleft() and .popleft()\n    # You\
    \ can use a list as a deque by using .appendleft() and .pop()\n    # You can use\
    \ a list as a deque by using .appendleft() and .popleft()\n    # You can use a\
    \ list as a deque by using .appendleft() and .pop()\n    # You can use a list\
    \ as a deque by using .appendleft() and .p\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7vox_pd.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpw7vox_pd.py\", line 52,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpw7vox_pd.py\"\
    , line 38, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    # Hint: you may want to use a stack\n \
    \   stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n \
    \           stack.append(bracket)\n        elif bracket == \")\":\n          \
    \  if len(stack) == 0:\n                return False\n            else:\n    \
    \            stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxx03yfxe.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpxx03yfxe.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxx03yfxe.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete the body of this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmayg_kri.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpmayg_kri.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpmayg_kri.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpso8pokdn.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpso8pokdn.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpso8pokdn.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen\n  \
    \  # so far.\n    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\"\
    :\n            if len(stack) == 0:\n                return False\n           \
    \ else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppqrg6tee.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmppqrg6tee.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmppqrg6tee.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxwlncymm.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpxwlncymm.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxwlncymm.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: replace this line with your code\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpti9j8c2_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpti9j8c2_.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpti9j8c2_.py\"\
    , line 23, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdl15n5b.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpkdl15n5b.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkdl15n5b.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return True\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf_0yd1vg.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpf_0yd1vg.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpf_0yd1vg.py\"\
    , line 22, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen.\n \
    \   # You can use a list as a stack, where the end of the list is the top of\n\
    \    # the stack.\n    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\"\
    :\n            if len(stack) == 0:\n                return False\n           \
    \ else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the opening brackets.\n    # If\
    \ you see a closing bracket, pop the stack.\n    # If you see an opening bracket,\
    \ push it onto the stack.\n    # If you see a closing bracket and the stack is\
    \ empty,\n    # then you have an extra closing bracket.\n    # If you finish going\
    \ through the string and the stack is not empty,\n    # then you have an extra\
    \ opening bracket.\n    stack = Stack()\n    for bracket in brackets:\n      \
    \  if bracket == \"(\":\n            stack.push(bracket)\n        elif bracket\
    \ == \")\":\n            if stack.is_empty():\n                return False\n\
    \            stack.pop()\n    return stack.is_empty()\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1le29mr4.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp1le29mr4.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp1le29mr4.py\"\
    , line 33, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp1le29mr4.py\"\
    , line 21, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you've seen so far.\n\
    \    # If you see an opening bracket, add it to the stack.\n    # If you see a\
    \ closing bracket, pop from the stack.\n    # If the stack is empty, or you see\
    \ a closing bracket when the stack is empty,\n    #    then you have an incorrect\
    \ bracketing.\n    # If you go through the whole string and the stack is not empty,\n\
    \    #    then you have an incorrect bracketing.\n    stack = []\n    for bracket\
    \ in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if len(stack) == 0:\n           \
    \     return False\n            else:\n                stack.pop()\n    if len(stack)\
    \ == 0:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of opening brackets.\n    # If you\
    \ see a closing bracket, pop the stack.\n    # If the stack is empty at the end,\
    \ then the brackets are correctly matched.\n    # If the stack is not empty at\
    \ the end, then there are unmatched opening brackets.\n    # You can use a list\
    \ as a stack.\n    # You can use append and pop to add and remove items from the\
    \ end of a list.\n    # You can use len to get the length of a list.\n    # You\
    \ can use is_empty to check if a list is empty.\n    stack = []\n    for bracket\
    \ in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n\
    \        elif bracket == ')':\n            if is_empty(stack):\n             \
    \   return False\n            else:\n                stack.pop()\n    return is_empty(stack)\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpig_cqa0e.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpig_cqa0e.py\", line 49,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpig_cqa0e.py\"\
    , line 35, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpig_cqa0e.py\"\
    , line 27, in correct_bracketing\n    if is_empty(stack):\nNameError: name 'is_empty'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: Use a stack!\n    stack = []\n    for bracket in brackets:\n       \
    \ if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket\
    \ == \")\":\n            if len(stack) == 0:\n                return False\n \
    \           else:\n                stack.pop()\n    return len(stack) == 0\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if brackets == \"\":\n        return True\n    elif brackets[0] == \")\":\n\
    \        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7661u0i8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp7661u0i8.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp7661u0i8.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen so far.\n\
    \    # You can use a list as a stack.\n    # To push an item onto the stack, use\
    \ .append(item).\n    # To pop an item off the stack, use .pop().\n    # If the\
    \ stack is empty, .pop() raises an IndexError.\n    # You can check whether the\
    \ stack is empty with if not stack: ...\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == \"(\":\n            stack.append(bracket)\n        elif\
    \ bracket == \")\":\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete the body of this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphyjwuqnn.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmphyjwuqnn.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmphyjwuqnn.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    # Hint: you may want to use a stack\n \
    \   stack = []\n    for i in brackets:\n        if i == \"(\":\n            stack.append(i)\n\
    \        elif i == \")\":\n            if stack == []:\n                return\
    \ False\n            else:\n                stack.pop()\n    if stack == []:\n\
    \        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets.\n    # You can use\
    \ a list as a stack.\n    # To push an item onto the stack, use .append(item).\n\
    \    # To pop an item off the stack, use .pop().\n    # If the stack is empty,\
    \ .pop() will raise an IndexError.\n    # You can check if the stack is empty\
    \ using if not stack: ...\n    stack = []\n    for bracket in brackets:\n    \
    \    if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket\
    \ == \")\":\n            if not stack:\n                return False\n       \
    \     stack.pop()\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: Use a stack!\n    # Note: You can use the append and pop methods on\
    \ lists.\n    # Note: You can use the peek method on lists.\n    # Note: You can\
    \ use the is_empty method on lists.\n    # Note: You can use the len function\
    \ on lists.\n    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\"\
    :\n            if len(stack) == 0:\n                return False\n           \
    \ stack.pop()\n    if len(stack) == 0:\n        return True\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the opening brackets.\n    # If\
    \ you see a closing bracket, you can pop the stack to see if\n    # it matches.\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n\
    \            stack.append(bracket)\n        elif bracket == \")\":\n         \
    \   if len(stack) == 0:\n                return False\n            else:\n   \
    \             stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen so far.\n\
    \    # You can use a list as a stack.\n    # To push an item onto the stack, use\
    \ <stack>.append(<item>).\n    # To pop an item off the stack, use <stack>.pop().\n\
    \    # You may want to use the function <len> to check if the stack is empty.\n\
    \    # You may want to use the function <str> to convert an item to a string.\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n\
    \            stack.append(bracket)\n        elif bracket == \")\":\n         \
    \   if len(stack) == 0:\n                return False\n            else:\n   \
    \             stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpejvuk_q_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpejvuk_q_.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpejvuk_q_.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf99krhzd.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpf99krhzd.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpf99krhzd.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplbu4pzlv.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmplbu4pzlv.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmplbu4pzlv.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets.\n    # You can use\
    \ a list as a stack.\n    # To push an item onto the stack, use list.append(item).\n\
    \    # To pop an item off the stack, use list.pop().\n    # To check if the stack\
    \ is empty, use if not stack:\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == \"(\":\n            stack.append(bracket)\n        elif\
    \ bracket == \")\":\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the opening brackets.\n    # If\
    \ you see a closing bracket, you can pop an opening bracket from the stack.\n\
    \    # If you see an opening bracket, you can push it onto the stack.\n    # If\
    \ you see a closing bracket and the stack is empty, there is a problem.\n    #\
    \ If you finish looking at the brackets and the stack is not empty, there is a\
    \ problem.\n    stack = []\n    for bracket in brackets:\n        if bracket ==\
    \ '(':\n            stack.append(bracket)\n        elif bracket == ')':\n    \
    \        if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    if len(stack) == 0:\n        return True\n \
    \   else:\n        return False\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_brackets = 0\n    for bracket in brackets:\n        if bracket == \"(\"\
    :\n            open_brackets += 1\n        elif bracket == \")\":\n          \
    \  open_brackets -= 1\n        if open_brackets < 0:\n            return False\n\
    \    return open_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2s6ija1x.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2s6ija1x.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2s6ija1x.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you may want to use a stack\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == \"(\":\n            stack.append(bracket)\n        elif\
    \ bracket == \")\":\n            if len(stack) == 0:\n                return False\n\
    \            stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # if brackets is empty, return True\n    if brackets == \"\":\n        return\
    \ True\n    # if brackets is not empty, check if the first character is \")\"\n\
    \    elif brackets[0] == \")\":\n        return False\n    # if brackets is not\
    \ empty, check if the last character is \"(\"\n    elif brackets[-1] == \"(\"\
    :\n        return False\n    # if brackets is not empty, check if the first character\
    \ is \"(\"\n    elif brackets[0] == \"(\":\n        # if the first character is\
    \ \"(\", check if the last character is \")\"\n        if brackets[-1] == \")\"\
    :\n            # if the last character is \")\", check if the length of brackets\
    \ is 2\n            if len(brackets) == 2:\n                return True\n    \
    \        # if the length of brackets is not 2, return the result of correct_bracketing(brackets[1:-1])\n\
    \            else:\n                return correct_bracketing(brackets[1:-1])\n\
    \        # if the last character is not \")\", return the result of correct_bracketing(brackets[1:])\n\
    \        else:\n            return correct_bracketing(brackets[1:])\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lbanv5g.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp9lbanv5g.py\", line 53,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp9lbanv5g.py\"\
    , line 40, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets.\n    # If you push\
    \ an opening bracket onto the stack, and then\n    # encounter a closing bracket,\
    \ you can pop from the stack.\n    # If the stack is empty, or you try to pop\
    \ from an empty stack,\n    # then the bracketing is incorrect.\n    stack = []\n\
    \    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if stack == []:\n               \
    \ return False\n            else:\n                stack.pop()\n    if stack ==\
    \ []:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiitc8txe.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpiitc8txe.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpiitc8txe.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfgvxq03.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmptfgvxq03.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmptfgvxq03.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        else:\n            count -= 1\n        if count <\
    \ 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnk8dzojh.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpnk8dzojh.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnk8dzojh.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the open brackets.\n    # If you\
    \ see a closing bracket, pop the stack.\n    # If you see an opening bracket,\
    \ push it onto the stack.\n    # If you see a closing bracket and the stack is\
    \ empty, return False.\n    # If the stack is not empty at the end, return False.\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n\
    \            stack.append(bracket)\n        elif bracket == \")\":\n         \
    \   if len(stack) == 0:\n                return False\n            else:\n   \
    \             stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete this function\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfo0idp5q.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfo0idp5q.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpfo0idp5q.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    # Hint: you may want to use a helper function.\n\
    \    return brackets.count(\"(\") == brackets.count(\")\")\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz8ixfygj.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpz8ixfygj.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpz8ixfygj.py\"\
    , line 25, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    # Hint: use a stack\n    stack = Stack()\n\
    \    for bracket in brackets:\n        if bracket == \"(\":\n            stack.push(bracket)\n\
    \        elif bracket == \")\":\n            if stack.is_empty():\n          \
    \      return False\n            else:\n                stack.pop()\n    return\
    \ stack.is_empty()\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnpt_7fnr.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpnpt_7fnr.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnpt_7fnr.py\"\
    , line 29, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpnpt_7fnr.py\"\
    , line 16, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen\n  \
    \  # so far.\n    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\"\
    :\n            if stack == []:\n                return False\n            else:\n\
    \                stack.pop()\n    if stack == []:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"(\":\n          \
    \  count += 1\n        elif char == \")\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprdz1nqu8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmprdz1nqu8.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmprdz1nqu8.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you've seen.\n   \
    \ # You can use a list as a stack.\n    # To add an item to the top of the stack,\
    \ use .append()\n    # To remove an item from the top of the stack, use .pop()\n\
    \    # To check what's on the top of the stack, use [-1]\n    #\n    # You'll\
    \ need to keep track of two things:\n    # 1. How many brackets you've seen so\
    \ far.\n    # 2. How many brackets you've seen that haven't been closed.\n   \
    \ #\n    # If you've seen more closing brackets than opening brackets,\n    #\
    \ then there's a problem.\n    #\n    # If you've seen more opening brackets than\
    \ closing brackets,\n    # then there's a problem.\n    #\n    # If you've seen\
    \ the same number of opening and closing brackets,\n    # then there's no problem.\n\
    \    #\n    # If you've seen more closing brackets than opening brackets,\n  \
    \  # then there's a problem.\n    #\n    # If you've seen more opening brackets\
    \ than closing brackets,\n    # then there's a problem.\n    #\n    # If you've\
    \ seen the same number of opening and closing brackets,\n    # then there's no\
    \ problem.\n    #\n    # If you've seen more closing brackets than opening brackets,\n\
    \    # then there's a problem.\n    #\n    # If you've seen more opening brackets\
    \ than closing brackets,\n    # then there's a problem.\n    #\n    # If you've\
    \ seen the same number of opening and closing brackets,\n    # then there's no\
    \ problem.\n    #\n    # If you've seen more closing brackets than opening brackets,\n\
    \    # then there's a problem.\n    #\n    # If you've seen more opening brackets\
    \ than closing brackets,\n    # then there's a problem.\n    #\n    # If you've\
    \ seen the same number of opening and closing brackets,\n    # then there's no\
    \ problem.\n    #\n    # If you've seen more closing brackets than opening brackets,\n\
    \    # then there's a problem.\n    #\n    # If you've seen more opening brackets\
    \ than closing brackets,\n    # then there's a problem.\n    #\n    #\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprqewsxv1.py\", line\
    \ 84, in <module>\n    test_check()\n  File \"/tmp/tmprqewsxv1.py\", line 82,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmprqewsxv1.py\"\
    , line 68, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: return True if every opening bracket has a corresponding closing bracket.\n\
    \    # Hint: use a stack.\n    stack = []\n    for bracket in brackets:\n    \
    \    if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket\
    \ == \")\":\n            if len(stack) == 0:\n                return False\n \
    \           else:\n                stack.pop()\n    return len(stack) == 0\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you've seen so far.\n\
    \    # If you see an opening bracket, add it to the stack.\n    # If you see a\
    \ closing bracket, remove the top item from the stack.\n    # If the stack is\
    \ empty, then you have a problem.\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == \"(\":\n            stack.append(bracket)\n        elif\
    \ bracket == \")\":\n            if len(stack) == 0:\n                return False\n\
    \            else:\n                stack.pop()\n    if len(stack) == 0:\n   \
    \     return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the opening brackets.\n    # If\
    \ you see a closing bracket, you can pop the last opening bracket\n    # off the\
    \ stack.\n    stack = []\n    for bracket in brackets:\n        if bracket ==\
    \ \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n\
    \            if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ddak82r.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp6ddak82r.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp6ddak82r.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # We can use a stack to keep track of the opening brackets.\n    # If we see\
    \ a closing bracket, we pop the stack.\n    # If the stack is empty, then there\
    \ is no corresponding opening bracket.\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == \"(\":\n            stack.append(bracket)\n        elif\
    \ bracket == \")\":\n            if stack == []:\n                return False\n\
    \            else:\n                stack.pop()\n    return stack == []\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete this function body\n    # Hint: you may want to use a helper\
    \ function\n    # Hint: you may want to use a stack\n    # Hint: you may want\
    \ to use a while loop\n    # Hint: you may want to use a for loop\n    # Hint:\
    \ you may want to use an if statement\n    # Hint: you may want to use a try/except\
    \ statement\n    # Hint: you may want to use a return statement\n    # Hint: you\
    \ may want to use a continue statement\n    # Hint: you may want to use a break\
    \ statement\n    # Hint: you may want to use a raise statement\n    # Hint: you\
    \ may want to use a list\n    # Hint: you may want to use a len function\n   \
    \ # Hint: you may want to use an append method\n    # Hint: you may want to use\
    \ a pop method\n    # Hint: you may want to use an index method\n    # Hint: you\
    \ may want to use an isinstance function\n    # Hint: you may want to use an isdigit\
    \ function\n    # Hint: you may want to use an int function\n    # Hint: you may\
    \ want to use a str function\n    # Hint: you may want to use a print function\n\
    \    # Hint: you may want to use a type function\n    # Hint: you may want to\
    \ use a dir function\n    # Hint: you may want to use a help function\n    # Hint:\
    \ you may want to use a locals function\n    # Hint: you may want to use a globals\
    \ function\n    # Hint: you may want to use an eval function\n    # Hint: you\
    \ may want to use an exec function\n    # Hint: you may want to use a compile\
    \ function\n    # Hint: you may want to use a format function\n    # Hint: you\
    \ may want to use a join function\n    # Hint: you may want to use a split function\n\
    \    # Hint: you may want to use a strip function\n    # Hint: you may want to\
    \ use a replace function\n    # Hint: you may want to use a lower function\n \
    \   # Hint: you may want to use an upper function\n    # Hint: you may want\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvdx75xe_.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmpvdx75xe_.py\", line 66,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpvdx75xe_.py\"\
    , line 52, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen\n  \
    \  # so far.\n    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\"\
    :\n            if len(stack) == 0:\n                return False\n           \
    \ else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: use a stack\n    stack = []\n    for char in brackets:\n        if char\
    \ == \"(\":\n            stack.append(char)\n        elif char == \")\":\n   \
    \         if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_brackets = 0\n    for bracket in brackets:\n        if bracket == \"(\"\
    :\n            open_brackets += 1\n        elif bracket == \")\":\n          \
    \  open_brackets -= 1\n        if open_brackets < 0:\n            return False\n\
    \    return open_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: use a stack\n    stack = []\n    for bracket in brackets:\n        if\
    \ bracket == \"(\":\n            stack.append(bracket)\n        elif bracket ==\
    \ \")\":\n            if stack == []:\n                return False\n        \
    \    else:\n                stack.pop()\n    return stack == []\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"(\":\n          \
    \  count += 1\n        elif char == \")\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        else:\n            count -= 1\n        if count <\
    \ 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete the function body\n    if brackets == \"\":\n        return\
    \ True\n    elif brackets[0] == \")\":\n        return False\n    else:\n    \
    \    return correct_bracketing(brackets[1:])\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbdbpcja_.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpbdbpcja_.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbdbpcja_.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # We use a stack to keep track of the brackets we have seen so far.\n    # We\
    \ push an opening bracket onto the stack, and pop a closing bracket.\n    # If\
    \ the stack is empty, then we have seen more closing brackets than\n    # opening\
    \ brackets.\n    stack = []\n    for b in brackets:\n        if b == \"(\":\n\
    \            stack.append(b)\n        elif b == \")\":\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # count the number of opening brackets\n    # count the number of closing brackets\n\
    \    # if they are equal, return True\n    # else, return False\n    open_brackets\
    \ = 0\n    close_brackets = 0\n    for bracket in brackets:\n        if bracket\
    \ == \"(\":\n            open_brackets += 1\n        elif bracket == \")\":\n\
    \            close_brackets += 1\n    return open_brackets == close_brackets\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgd6pwten.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgd6pwten.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpgd6pwten.py\"\
    , line 34, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete the body of this function\n    # Hint: you may want to use\
    \ a stack\n    stack = Stack()\n    for bracket in brackets:\n        if bracket\
    \ == \"(\":\n            stack.push(bracket)\n        elif bracket == \")\":\n\
    \            if stack.is_empty():\n                return False\n            else:\n\
    \                stack.pop()\n    return stack.is_empty()\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4olzalts.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp4olzalts.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp4olzalts.py\"\
    , line 29, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp4olzalts.py\"\
    , line 16, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # count the number of opening brackets\n    # count the number of closing brackets\n\
    \    # if the number of opening brackets is equal to the number of closing brackets\n\
    \    # and the number of opening brackets is greater than 0, return True\n   \
    \ # otherwise, return False\n    open_brackets = 0\n    close_brackets = 0\n \
    \   for char in brackets:\n        if char == \"(\":\n            open_brackets\
    \ += 1\n        elif char == \")\":\n            close_brackets += 1\n    if open_brackets\
    \ == close_brackets and open_brackets > 0:\n        return True\n    else:\n \
    \       return False\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9fqrc1bw.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9fqrc1bw.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp9fqrc1bw.py\"\
    , line 38, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for i in brackets:\n        if i == \"(\":\n            count\
    \ += 1\n        elif i == \")\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete this function body\n    # Hint: use a stack\n    stack = []\n\
    \    for i in brackets:\n        if i == \"(\":\n            stack.append(i)\n\
    \        elif i == \")\":\n            if stack == []:\n                return\
    \ False\n            else:\n                stack.pop()\n    if stack == []:\n\
    \        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen so far.\n\
    \    # If you see an opening bracket, add it to the stack.\n    # If you see a\
    \ closing bracket, remove the last opening bracket from the stack.\n    # If you\
    \ see a closing bracket but the stack is empty, return False.\n    # If you finish\
    \ the string and the stack is empty, return True.\n    # If you finish the string\
    \ and the stack is not empty, return False.\n    stack = []\n    for bracket in\
    \ brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if stack == []:\n               \
    \ return False\n            else:\n                stack.pop()\n    if stack ==\
    \ []:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    # Hint: use a stack\n    stack = Stack()\n\
    \    for i in brackets:\n        if i == \"(\":\n            stack.push(i)\n \
    \       elif i == \")\":\n            if stack.is_empty():\n                return\
    \ False\n            stack.pop()\n    return stack.is_empty()\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5k6com5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpg5k6com5.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpg5k6com5.py\"\
    , line 28, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpg5k6com5.py\"\
    , line 16, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen so far.\n\
    \    # You can use a list as a stack.\n    # To push an item onto the stack, use\
    \ stack.append(item).\n    # To pop an item off the stack, use stack.pop().\n\
    \    # To check if the stack is empty, use if not stack:\n    stack = []\n   \
    \ for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if not stack:\n                return\
    \ False\n            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to solve this problem.\n    # You can use a list\
    \ as a stack.\n    # To push an item onto the stack, use list.append(item).\n\
    \    # To pop an item off the stack, use list.pop().\n    # You can check if the\
    \ stack is empty by checking if it is equal to [].\n    # You can check if a string\
    \ is a bracket by using string in \"()\".\n    # You can check if a string is\
    \ an opening bracket by using string == \"(\".\n    # You can check if a string\
    \ is a closing bracket by using string == \")\".\n    stack = []\n    for bracket\
    \ in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if stack == []:\n               \
    \ return False\n            else:\n                stack.pop()\n    if stack ==\
    \ []:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsgk_tsna.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpsgk_tsna.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpsgk_tsna.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"(\":\n          \
    \  count += 1\n        elif char == \")\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: use a stack\n    stack = []\n    for bracket in brackets:\n        if\
    \ bracket == \"(\":\n            stack.append(bracket)\n        elif bracket ==\
    \ \")\":\n            if stack == []:\n                return False\n        \
    \    else:\n                stack.pop()\n    return stack == []\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # if the string is empty, return True\n    if brackets == \"\":\n        return\
    \ True\n    # if the string is not empty, check if the first character is a closing\
    \ bracket\n    elif brackets[0] == \")\":\n        return False\n    # if the\
    \ string is not empty and the first character is an opening bracket,\n    # check\
    \ if the rest of the string is correct\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplhtdhdsp.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmplhtdhdsp.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmplhtdhdsp.py\"\
    , line 26, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete this function body\n    # Hint: you may want to use a helper\
    \ function.\n    # Hint: you may want to use a stack.\n    # Hint: you may want\
    \ to use a list.\n    # Hint: you may want to use a while loop.\n    # Hint: you\
    \ may want to use an if statement.\n    # Hint: you may want to use a for loop.\n\
    \    # Hint: you may want to use a for loop over a range.\n    # Hint: you may\
    \ want to use a for loop over a string.\n    # Hint: you may want to use a for\
    \ loop over a list.\n    # Hint: you may want to use a for loop over a stack.\n\
    \    # Hint: you may want to use len(brackets).\n    # Hint: you may want to use\
    \ brackets[i].\n    # Hint: you may want to use brackets[:i].\n    # Hint: you\
    \ may want to use brackets[i:].\n    # Hint: you may want to use brackets[i:j].\n\
    \    # Hint: you may want to use brackets[i:j:k].\n    # Hint: you may want to\
    \ use brackets.pop().\n    # Hint: you may want to use brackets.append().\n  \
    \  # Hint: you may want to use brackets.count().\n    # Hint: you may want to\
    \ use brackets.index().\n    # Hint: you may want to use brackets.insert().\n\
    \    # Hint: you may want to use brackets.remove().\n    # Hint: you may want\
    \ to use brackets.reverse().\n    # Hint: you may want to use brackets.sort().\n\
    \    # Hint: you may want to use brackets.clear().\n    # Hint: you may want to\
    \ use brackets.copy().\n    # Hint: you may want to use brackets.extend().\n \
    \   # Hint: you may want to use brackets.pop().\n    # Hint: you may want to use\
    \ brackets.pop(i).\n    # Hint: you may want to use brackets.pop().\n    # Hint:\
    \ you may want to use brackets.pop().\n    # Hint: you may want to use brackets.pop().\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwq25mbcp.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmpwq25mbcp.py\", line 62,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpwq25mbcp.py\"\
    , line 48, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5bzeql_h.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp5bzeql_h.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5bzeql_h.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg85t5jpp.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpg85t5jpp.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpg85t5jpp.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # We will use a stack to keep track of the brackets.\n    # We will push an\
    \ opening bracket onto the stack, and pop a closing bracket.\n    # If there are\
    \ more closing brackets than opening brackets,\n    # or if there are any brackets\
    \ left on the stack at the end,\n    # then the bracketing is incorrect.\n   \
    \ stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n   \
    \         stack.append(bracket)\n        elif bracket == \")\":\n            if\
    \ len(stack) == 0:\n                return False\n            stack.pop()\n  \
    \  return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the opening brackets.\n    # You\
    \ can use a list as a stack.\n    # To add an item to the top of the stack, use\
    \ .append(item).\n    # To remove an item from the top of the stack, use .pop().\n\
    \    # To check if the stack is empty, use if not stack:\n    stack = []\n   \
    \ for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if not stack:\n                return\
    \ False\n            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: use a stack\n    # You can use the list methods append and pop\n   \
    \ # or you can use the list method insert\n    # or you can use the list method\
    \ extend\n    # or you can use the list method remove\n    # or you can use the\
    \ list method pop\n    # or you can use the list method index\n    # or you can\
    \ use the list method count\n    # or you can use the list method reverse\n  \
    \  # or you can use the list method sort\n    # or you can use the list method\
    \ copy\n    # or you can use the list method clear\n    # or you can use the list\
    \ method __getitem__\n    # or you can use the list method __setitem__\n    #\
    \ or you can use the list method __delitem__\n    # or you can use the list method\
    \ __iter__\n    # or you can use the list method __contains__\n    # or you can\
    \ use the list method __len__\n    # or you can use the list method __add__\n\
    \    # or you can use the list method __mul__\n    # or you can use the list method\
    \ __rmul__\n    # or you can use the list method __iadd__\n    # or you can use\
    \ the list method __imul__\n    # or you can use the list method __eq__\n    #\
    \ or you can use the list method __ne__\n    # or you can use the list method\
    \ __lt__\n    # or you can use the list method __le__\n    # or you can use the\
    \ list method __gt__\n    # or you can use the list method __ge__\n    # or you\
    \ can use the list method __bool__\n    # or you can use the list method __getattr__\n\
    \    # or you can use the list method __getattribute__\n    # or you can use the\
    \ list method __setattr__\n    # or you can use the list method __delattr__\n\
    \    # or you can use the list method __dir__\n    # or you can use the list method\
    \ __class__\n    # or you can use the list method __init__\n    # or you can use\
    \ the list method __new__\n    # or you can use the list method __del__\n    #\
    \ or you can use the list method __repr__\n    # or\ndef check(candidate):\n \
    \   assert candidate('()') == True\n    assert candidate('(()())') == True\n \
    \   assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcw5xm37g.py\", line\
    \ 72, in <module>\n    test_check()\n  File \"/tmp/tmpcw5xm37g.py\", line 70,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpcw5xm37g.py\"\
    , line 56, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if brackets == \"\":\n        return True\n    elif brackets[0] == \")\":\n\
    \        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc6ikdph9.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpc6ikdph9.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpc6ikdph9.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen\n  \
    \  # so far.\n    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\"\
    :\n            if len(stack) == 0:\n                return False\n           \
    \ else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if brackets == \"\":\n        return True\n    elif brackets[0] == \")\":\n\
    \        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4rcjrxn4.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp4rcjrxn4.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp4rcjrxn4.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: use a stack\n    stack = []\n    for bracket in brackets:\n        if\
    \ bracket == \"(\":\n            stack.append(bracket)\n        elif bracket ==\
    \ \")\":\n            if stack == []:\n                return False\n        \
    \    else:\n                stack.pop()\n    return stack == []\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets.\n    # You can use\
    \ a list as a stack.\n    # To push an item onto the stack, use .append(item).\n\
    \    # To pop an item off the stack, use .pop().\n    # To check if the stack\
    \ is empty, use if not stack:\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == \"(\":\n            stack.append(bracket)\n        elif\
    \ bracket == \")\":\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # count the number of opening brackets\n    # count the number of closing brackets\n\
    \    # if they are the same, return True\n    # else, return False\n    open_brackets\
    \ = 0\n    close_brackets = 0\n    for char in brackets:\n        if char == \"\
    (\":\n            open_brackets += 1\n        elif char == \")\":\n          \
    \  close_brackets += 1\n    return open_brackets == close_brackets\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzdmnq6dt.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpzdmnq6dt.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpzdmnq6dt.py\"\
    , line 34, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to solve this.\n    # You can use the list methods\
    \ append and pop.\n    # Or you can use the list method insert with index 0.\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n\
    \            stack.append(bracket)\n        elif bracket == \")\":\n         \
    \   if stack == []:\n                return False\n            else:\n       \
    \         stack.pop()\n    if stack == []:\n        return True\n    else:\n \
    \       return False\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete this function body\n    # Hint: you can use a stack to keep\
    \ track of opening brackets.\n    # You can use a list as a stack.\n    # stack\
    \ = []\n    # stack.append(1)\n    # stack.append(2)\n    # stack.pop()\n    #\
    \ stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    #\
    \ stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    #\
    \ stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    #\
    \ stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    #\
    \ stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    #\
    \ stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    #\
    \ stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    #\
    \ stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    #\
    \ stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    #\
    \ stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    #\
    \ stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    #\
    \ stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    #\
    \ stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    #\
    \ stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    #\
    \ stack.pop()\n    # stack.pop()\n    # stack.pop()\n    # stack.pop()\n    #\
    \ stack.pop()\n    # stack.pop()\n    # stack.pop()\ndef check(candidate):\n \
    \   assert candidate('()') == True\n    assert candidate('(()())') == True\n \
    \   assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5n_hmy0i.py\", line\
    \ 101, in <module>\n    test_check()\n  File \"/tmp/tmp5n_hmy0i.py\", line 99,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5n_hmy0i.py\"\
    , line 85, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you've seen so far.\n\
    \    # You can use a list as a stack.\n    # To push an item onto the stack, use\
    \ list.append(item).\n    # To pop an item off the stack, use list.pop().\n  \
    \  # To check if the stack is empty, use len(list) == 0.\n    stack = []\n   \
    \ for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if len(stack) == 0:\n           \
    \     return False\n            else:\n                stack.pop()\n    return\
    \ len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets.\n    # You can use\
    \ a list as a stack.\n    # To add an item to the top of the stack, use .append()\n\
    \    # To remove an item from the top of the stack, use .pop()\n    # To check\
    \ if the stack is empty, use if not stack:\n    stack = []\n    for bracket in\
    \ brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if not stack:\n                return\
    \ False\n            else:\n                stack.pop()\n    return not stack\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete this function body\n    # Hint: use a stack\n    # Hint: use\
    \ a loop\n    stack = []\n    for bracket in brackets:\n        if bracket ==\
    \ '(':\n            stack.append(bracket)\n        elif bracket == ')':\n    \
    \        if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    if len(stack) == 0:\n        return True\n \
    \   else:\n        return False\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # count the number of opening brackets\n    # count the number of closing brackets\n\
    \    # if the number of opening brackets is equal to the number of closing brackets,\n\
    \    # return True\n    # else, return False\n    open_brackets = 0\n    close_brackets\
    \ = 0\n    for char in brackets:\n        if char == \"(\":\n            open_brackets\
    \ += 1\n        elif char == \")\":\n            close_brackets += 1\n    return\
    \ open_brackets == close_brackets\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzuniixyt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzuniixyt.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpzuniixyt.py\"\
    , line 35, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # return True if brackets == \"\" else brackets[0] == \"(\" and correct_bracketing(brackets[1:])\n\
    \    # return True if brackets == \"\" else brackets[0] == \"(\" and correct_bracketing(brackets[1:])\n\
    \    # return True if brackets == \"\" else brackets[0] == \"(\" and correct_bracketing(brackets[1:])\n\
    \    # return True if brackets == \"\" else brackets[0] == \"(\" and correct_bracketing(brackets[1:])\n\
    \    # return True if brackets == \"\" else brackets[0] == \"(\" and correct_bracketing(brackets[1:])\n\
    \    # return True if brackets == \"\" else brackets[0] == \"(\" and correct_bracketing(brackets[1:])\n\
    \    # return True if brackets == \"\" else brackets[0] == \"(\" and correct_bracketing(brackets[1:])\n\
    \    # return True if brackets == \"\" else brackets[0] == \"(\" and correct_bracketing(brackets[1:])\n\
    \    # return True if brackets == \"\" else brackets[0] == \"(\" and correct_bracketing(brackets[1:])\n\
    \    # return True if brackets == \"\" else brackets[0] == \"(\" and correct_bracketing(brackets[1:])\n\
    \    # return True if brackets == \"\" else brackets[0] == \"(\" and correct_bracketing(brackets[1:])\n\
    \    # return True if brackets == \"\" else brackets[0] == \"(\" and correct_bracketing(brackets[1:])\n\
    \    # return True if brackets == \"\" else brackets[0] == \"(\" and correct_bracketing(brackets[1:])\n\
    \    # return True if brackets == \"\" else brackets[0] == \"(\" and correct_bracketing(brackets[1:])\n\
    \    # return True if brackets == \"\" else brackets[0] == \"(\" and correct_bracketing(brackets[1:])\n\
    \    # return True if brackets == \"\" else brackets[0] == \"(\" and correct_bracketing(brackets[1:])\n\
    \    # return True if brackets == \"\" else brackets[0] == \"(\" and correct_bracketing(brackets[1:])\n\
    \   \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbfng4usq.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpbfng4usq.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbfng4usq.py\"\
    , line 33, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete this function body\n    # Hint: you may want to use a stack\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n\
    \            stack.append(bracket)\n        elif bracket == \")\":\n         \
    \   if stack == []:\n                return False\n            else:\n       \
    \         stack.pop()\n    if stack == []:\n        return True\n    else:\n \
    \       return False\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8sh297jy.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp8sh297jy.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp8sh297jy.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpee9d4pi_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpee9d4pi_.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpee9d4pi_.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of opening brackets.\n    # If you\
    \ push an opening bracket onto the stack, and then later\n    # encounter a closing\
    \ bracket, you can pop the opening bracket\n    # off the stack.\n    #\n    #\
    \ If you encounter a closing bracket when the stack is empty,\n    # then you\
    \ know that there is a closing bracket without a matching\n    # opening bracket.\n\
    \    #\n    # If you finish going through the string, and there are still\n  \
    \  # opening brackets on the stack, then you know that there are\n    # unmatched\
    \ opening brackets.\n    stack = []\n    for bracket in brackets:\n        if\
    \ bracket == \"(\":\n            stack.append(bracket)\n        elif bracket ==\
    \ \")\":\n            if stack == []:\n                return False\n        \
    \    else:\n                stack.pop()\n    if stack == []:\n        return True\n\
    \    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets.\n    # You can use\
    \ a list as a stack.\n    # To push an item onto the stack, use list.append(item).\n\
    \    # To pop an item off the stack, use list.pop().\n    # To check if the stack\
    \ is empty, use len(list) == 0.\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == \"(\":\n            stack.append(bracket)\n        elif\
    \ bracket == \")\":\n            if len(stack) == 0:\n                return False\n\
    \            else:\n                stack.pop()\n    return len(stack) == 0\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: Use a stack!\n    stack = []\n    for bracket in brackets:\n       \
    \ if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket\
    \ == \")\":\n            if len(stack) == 0:\n                return False\n \
    \           stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # count the number of opening brackets\n    # count the number of closing brackets\n\
    \    # if they are equal, return True\n    # else, return False\n    open_bracket\
    \ = 0\n    close_bracket = 0\n    for i in brackets:\n        if i == \"(\":\n\
    \            open_bracket += 1\n        elif i == \")\":\n            close_bracket\
    \ += 1\n    if open_bracket == close_bracket:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuiqc_4cc.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpuiqc_4cc.py\", line 46,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpuiqc_4cc.py\"\
    , line 37, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return brackets.count(\"(\") == brackets.count(\"\
    )\")\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbadne6l5.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbadne6l5.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbadne6l5.py\"\
    , line 24, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"(\":\n          \
    \  count += 1\n        elif char == \")\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    return count == 0\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen\n  \
    \  # so far.\n    stack = Stack()\n    for bracket in brackets:\n        if bracket\
    \ == \"(\":\n            stack.push(bracket)\n        elif bracket == \")\":\n\
    \            if stack.is_empty():\n                return False\n            else:\n\
    \                stack.pop()\n    return stack.is_empty()\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp065k6g30.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp065k6g30.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp065k6g30.py\"\
    , line 29, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp065k6g30.py\"\
    , line 16, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the opening brackets.\n    # You\
    \ can use a list as a stack.\n    # To push an item onto the stack, use list.append(item).\n\
    \    # To pop an item off the stack, use list.pop().\n    # To check if the stack\
    \ is empty, use len(list) == 0.\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == \"(\":\n            stack.append(bracket)\n        elif\
    \ bracket == \")\":\n            if len(stack) == 0:\n                return False\n\
    \            else:\n                stack.pop()\n    return len(stack) == 0\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkvvamfrr.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpkvvamfrr.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkvvamfrr.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the opening brackets.\n    # You\
    \ can use a list as a stack.\n    # To push an item onto the stack, use list.append(item).\n\
    \    # To pop an item off the stack, use list.pop().\n    # If the stack is empty,\
    \ list.pop() will raise an IndexError.\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == \"(\":\n            stack.append(bracket)\n        elif\
    \ bracket == \")\":\n            try:\n                stack.pop()\n         \
    \   except IndexError:\n                return False\n    return len(stack) ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets.\n    # You can use\
    \ a list as a stack, using append and pop.\n    # Or you can use a list as a queue,\
    \ using append and pop(0).\n    # Or you can use a list as a queue, using insert(0,\
    \ ...) and pop.\n    # Or you can use a list as a stack, using insert(0, ...)\
    \ and pop(0).\n    # Or you can use a list as a stack, using insert(0, ...) and\
    \ pop().\n    # Or you can use a list as a queue, using append and pop().\n  \
    \  # Or you can use a list as a queue, using insert(0, ...) and pop(0).\n    #\
    \ Or you can use a list as a stack, using append and pop(0).\n    # Or you can\
    \ use a list as a queue, using append and pop().\n    # Or you can use a list\
    \ as a stack, using insert(0, ...) and pop().\n    # Or you can use a list as\
    \ a queue, using insert(0, ...) and pop().\n    # Or you can use a list as a stack,\
    \ using insert(0, ...) and pop(0).\n    # Or you can use a list as a queue, using\
    \ append and pop(0).\n    # Or you can use a list as a stack, using append and\
    \ pop().\n    # Or you can use a list as a queue, using insert(0, ...) and pop().\n\
    \    # Or you can use a list as a stack, using insert(0, ...) and pop().\n   \
    \ # Or you can use a list as a queue, using insert(0, ...) and pop(0).\n    #\
    \ Or you can use a list as a stack, using append and pop(0).\n    # Or you can\
    \ use a list as a queue, using insert(0, ...) and pop().\n    # Or you can use\
    \ a list as a stack, using insert(0, ...) and pop(0).\n    # Or you can use a\
    \ list as a queue, using append and pop().\n    # Or you can use a list as a stack,\
    \ using insert(0, ...) and pop().\n    # Or you can use a list as a queue, using\
    \ insert(\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4m1i0zn.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpw4m1i0zn.py\", line 53,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpw4m1i0zn.py\"\
    , line 39, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen\n  \
    \  # so far.\n    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\"\
    :\n            if len(stack) == 0:\n                return False\n           \
    \ else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz1h13oez.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpz1h13oez.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpz1h13oez.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_brackets = 0\n    for bracket in brackets:\n        if bracket == \"(\"\
    :\n            open_brackets += 1\n        elif bracket == \")\":\n          \
    \  open_brackets -= 1\n        if open_brackets < 0:\n            return False\n\
    \    return open_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm2tp_fug.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpm2tp_fug.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpm2tp_fug.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: complete this function!\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv3l997ut.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv3l997ut.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv3l997ut.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets you have seen so far.\n\
    \    # You can use a list as a stack.\n    # To push an item onto the stack, use\
    \ list.append(item).\n    # To pop an item off the stack, use list.pop().\n  \
    \  # To check if the stack is empty, use len(list) == 0.\n    #\n    # You can\
    \ use a variable to keep track of the number of opening brackets\n    # you have\
    \ seen so far.\n    #\n    # You can use a variable to keep track of the number\
    \ of closing brackets\n    # you have seen so far.\n    #\n    # You can use a\
    \ variable to keep track of the number of opening brackets\n    # you have seen\
    \ so far that have not been matched with a closing bracket.\n    #\n    # You\
    \ can use a variable to keep track of the number of closing brackets\n    # you\
    \ have seen so far that have not been matched with an opening bracket.\n    #\n\
    \    # You can use a variable to keep track of the number of brackets you have\n\
    \    # seen so far.\n    #\n    # You can use a variable to keep track of the\
    \ number of brackets you have\n    # seen so far that have not been matched.\n\
    \    #\n    # You can use a variable to keep track of the number of brackets you\
    \ have\n    # seen so far that have been matched.\n    #\n    # You can use a\
    \ variable to keep track of the number of brackets you have\n    # seen so far\
    \ that have been matched.\n    #\n    # You can use a variable to keep track of\
    \ the number of brackets you have\n    # seen so far that have been matched.\n\
    \    #\n    # You can use a variable to keep track of the number of brackets you\
    \ have\n    # seen so far that have been matched.\n    #\n    # You can use a\
    \ variable to keep track of the number of brackets you have\n    # seen so far\
    \ that have been matched.\n    #\n    # You can use a variable to keep track of\
    \ the number of brackets you have\n    # seen so far that have been matched.\n\
    \    #\n    # You can use a variable to keep track of the number of brackets you\
    \ have\n    # seen so far that have been matched.\n    #\n   \ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphlcwvqdl.py\", line\
    \ 77, in <module>\n    test_check()\n  File \"/tmp/tmphlcwvqdl.py\", line 75,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmphlcwvqdl.py\"\
    , line 61, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # We can use a stack to keep track of the brackets we have seen so far.\n  \
    \  # We will push an opening bracket onto the stack, and pop a closing bracket.\n\
    \    # If the stack is empty, then we have seen more closing brackets than opening\
    \ brackets.\n    # If the stack is not empty at the end, then we have seen more\
    \ opening brackets than closing brackets.\n    stack = []\n    for b in brackets:\n\
    \        if b == \"(\":\n            stack.append(b)\n        elif b == \")\"\
    :\n            if len(stack) == 0:\n                return False\n           \
    \ stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpknmtz24u.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpknmtz24u.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpknmtz24u.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets.\n    # If you see\
    \ an opening bracket, push it onto the stack.\n    # If you see a closing bracket,\
    \ pop from the stack.\n    # If the stack is empty, then the brackets are correctly\
    \ nested.\n    # If the stack is not empty, then the brackets are incorrectly\
    \ nested.\n    stack = []\n    for bracket in brackets:\n        if bracket ==\
    \ \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n\
    \            if len(stack) == 0:\n                return False\n            stack.pop()\n\
    \    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the opening brackets.\n    # You\
    \ can use a list as a stack.\n    # To push an item onto the stack, use append.\n\
    \    # To pop an item off the stack, use pop.\n    # To check if the stack is\
    \ empty, use if not stack:\n    # To check if the stack is not empty, use if stack:\n\
    \    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n\
    \        elif b == \")\":\n            if not stack:\n                return False\n\
    \            else:\n                stack.pop()\n    return not stack\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: use a stack\n    stack = Stack()\n    for bracket in brackets:\n   \
    \     if bracket == \"(\":\n            stack.push(bracket)\n        elif bracket\
    \ == \")\":\n            if stack.is_empty():\n                return False\n\
    \            stack.pop()\n    return stack.is_empty()\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpky5u0msq.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpky5u0msq.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpky5u0msq.py\"\
    , line 26, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpky5u0msq.py\"\
    , line 15, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the opening brackets.\n    # If\
    \ you see a closing bracket, pop from the stack.\n    # If you see an opening\
    \ bracket, push it onto the stack.\n    # If you see a closing bracket and the\
    \ stack is empty,\n    # then there is a problem.\n    # If the stack is not empty\
    \ at the end, there is a problem.\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == \"(\":\n            stack.append(bracket)\n        elif\
    \ bracket == \")\":\n            if stack == []:\n                return False\n\
    \            else:\n                stack.pop()\n    if stack == []:\n       \
    \ return True\n    else:\n        return False\n\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you can use a stack to keep track of the brackets.\n    # You can create\
    \ an empty stack with:\n    # stack = []\n    # You can push an item onto the\
    \ stack with:\n    # stack.append(item)\n    # You can pop an item off the stack\
    \ with:\n    # stack.pop()\n    # You can check if the stack is empty with:\n\
    \    # len(stack) == 0\n    stack = []\n    for bracket in brackets:\n       \
    \ if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket\
    \ == \")\":\n            if len(stack) == 0:\n                return False\n \
    \           stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if brackets == \"\":\n        return True\n    elif brackets[0] == \")\":\n\
    \        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk56xuaez.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpk56xuaez.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpk56xuaez.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
