name: HumanEval_130_tri
language: python
results:
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpldylbxni.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpldylbxni.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpldylbxni.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpldylbxni.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpjcen471h.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n\
    \    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpud3s9e7q.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpg4tvtjqk.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwly63xf5.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpwly63xf5.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwly63xf5.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwly63xf5.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp85w1czt8.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp85w1czt8.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp85w1czt8.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp85w1czt8.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpworbele9.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpworbele9.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpworbele9.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpworbele9.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n        return\
    \ [1, 3, 2] + [1 + i / 2 for i in range(4, n + 1)]\n    else:\n        return\
    \ [1, 3, 2] + [1 + i / 2 for i in range(4, n + 1)] + [tri(n - 1)[-1] + tri(n -\
    \ 2)[-1] + tri(n + 1)[-1]]\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfk4dc83j.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpfk4dc83j.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfk4dc83j.py\", line 34, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp0jh7zgez.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 4]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 4, 13]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 4,\
    \ 13, 5]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 4, 13, 5, 21]\n  \
    \  if n == 10:\n        return [1, 3, 2, 8, 3, 9, 4, 13, 5, 21, 6]\n    if n ==\
    \ 11:\n        return [1, 3, 2, 8, 3, 9, 4, 13, 5, 21, 6, 34]\n    if n == 12:\n\
    \        return [1, 3, 2, 8, 3, 9, 4, 13, 5, 21, 6, 34, 7]\n    if n == 13:\n\
    \        return [1, 3, 2, 8, 3, 9, 4, 13, 5, 21, 6, 34, 7, 55]\n    if n == 14:\n\
    \        return [1, 3, 2, 8, 3, 9, 4, 13, 5, 21, 6, 34, 7, 55, 8]\n    if n ==\
    \ 15:\n        return [1, 3, 2, 8, 3, 9, 4, 13, 5, 21, 6, 34, 7, 55, 8, 89]\n\
    \    if n == 16:\n        return [1, 3, 2, 8, 3, 9, 4, 13, 5, 21, 6, 34, 7, 55,\
    \ 8, 89, 9]\n    if n == 17:\n        return [1, 3, 2, 8,\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpg3wo6r94.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n\
    \    else:\n        result = [1, 3, 2]\n        for i in range(3, n + 1):\n  \
    \          if i % 2 == 0:\n                result.append(1 + i / 2)\n        \
    \    else:\n                result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7_lzqmkc.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp7_lzqmkc.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp7_lzqmkc.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp7_lzqmkc.py\", line\
    \ 32, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmppdob6yh3.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpj5kskw9j.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        t = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                t.append(1 + i / 2)\n           \
    \ else:\n                t.append(t[i - 1] + t[i - 2] + t[i + 1])\n        return\
    \ t\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn0sy6e3x.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpn0sy6e3x.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpn0sy6e3x.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpn0sy6e3x.py\", line\
    \ 32, in tri\n    t.append(t[i - 1] + t[i - 2] + t[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcq36rv5t.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpcq36rv5t.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpcq36rv5t.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpcq36rv5t.py\", line\
    \ 32, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n   \
    \ if n == 3:\n        return [1, 3, 2]\n    if n == 4:\n        return [1, 3,\
    \ 2, 8]\n    if n == 5:\n        return [1, 3, 2, 8, 5]\n    if n == 6:\n    \
    \    return [1, 3, 2, 8, 5, 13]\n    if n == 7:\n        return [1, 3, 2, 8, 5,\
    \ 13, 21]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13, 21, 34]\n    if\
    \ n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55]\n    if n == 10:\n \
    \       return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89]\n    if n == 11:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n    if n == 12:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n    if n == 13:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 14:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 15:\n \
    \       return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n\
    \    if n == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987, 1597]\n    if n == 17:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]\n   \ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4vp9jhdu.py\", line\
    \ 72, in <module>\n    test_check()\n  File \"/tmp/tmp4vp9jhdu.py\", line 70,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp4vp9jhdu.py\", line 58, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n\
    \    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpkfsdpl7s.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp959_5gzx.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp959_5gzx.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp959_5gzx.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp959_5gzx.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n\
    \    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp0bsfomw1.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa0mknp67.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpa0mknp67.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpa0mknp67.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpa0mknp67.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpec40h2bf.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpec40h2bf.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpec40h2bf.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpec40h2bf.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n\
    \ + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i / 2)\n\
    \            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i\
    \ - 2] + tri_list[i + 1])\n        return tri_list\ndef check(candidate):\n  \
    \  assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8,\
    \ 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5zjggnq_.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp5zjggnq_.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5zjggnq_.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp5zjggnq_.py\", line\
    \ 32, in tri\n    tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i\
    \ + 1])\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        l = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                l.append(1 + i / 2)\n           \
    \ else:\n                l.append(l[i - 1] + l[i - 2] + l[i + 1])\n        return\
    \ l\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7idtf7cx.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp7idtf7cx.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp7idtf7cx.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp7idtf7cx.py\", line\
    \ 32, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n   \
    \ if n == 3:\n        return [1, 3, 2]\n    if n == 4:\n        return [1, 3,\
    \ 2, 8]\n    if n == 5:\n        return [1, 3, 2, 8, 4]\n    if n == 6:\n    \
    \    return [1, 3, 2, 8, 4, 16]\n    if n == 7:\n        return [1, 3, 2, 8, 4,\
    \ 16, 8]\n    if n == 8:\n        return [1, 3, 2, 8, 4, 16, 8, 32]\n    if n\
    \ == 9:\n        return [1, 3, 2, 8, 4, 16, 8, 32, 16]\n    if n == 10:\n    \
    \    return [1, 3, 2, 8, 4, 16, 8, 32, 16, 64]\n    if n == 11:\n        return\
    \ [1, 3, 2, 8, 4, 16, 8, 32, 16, 64, 32]\n    if n == 12:\n        return [1,\
    \ 3, 2, 8, 4, 16, 8, 32, 16, 64, 32, 128]\n    if n == 13:\n        return [1,\
    \ 3, 2, 8, 4, 16, 8, 32, 16, 64, 32, 128, 64]\n    if n == 14:\n        return\
    \ [1, 3, 2, 8, 4, 16, 8, 32, 16, 64, 32, 128, 64, 256]\n    if n == 15:\n    \
    \    return [1, 3, 2, 8, 4, 16, 8, 32, 16, 64, 32, 128, 64, 256, 128]\n    if\
    \ n == 16:\n        return [1, 3, 2, 8, 4, 16, 8, 32, 16, 64, 32, 128, 64, 256,\
    \ 128, 512]\n    if n == 17:\n        return [1, 3, 2, 8, 4, 16, 8, 32, 16, 64,\
    \ 32, 128, 64, 256, 128, 512, 256]\n    if n == 18:\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpe6lwfq1v.py\", line 58\n    def check(candidate):\n  \
    \  ^\nIndentationError: expected an indented block\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n   \
    \ if n == 3:\n        return [1, 3, 2]\n    if n == 4:\n        return [1, 3,\
    \ 2, 8]\n    if n == 5:\n        return [1, 3, 2, 8, 5]\n    if n == 6:\n    \
    \    return [1, 3, 2, 8, 5, 13]\n    if n == 7:\n        return [1, 3, 2, 8, 5,\
    \ 13, 21]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13, 21, 34]\n    if\
    \ n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55]\n    if n == 10:\n \
    \       return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89]\n    if n == 11:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n    if n == 12:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n    if n == 13:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 14:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 15:\n \
    \       return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n\
    \    if n == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987, 1597]\n    if n == 17:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]\n   \ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptvjiamh3.py\", line\
    \ 72, in <module>\n    test_check()\n  File \"/tmp/tmptvjiamh3.py\", line 70,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmptvjiamh3.py\", line 58, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbpccp9g5.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpbpccp9g5.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpbpccp9g5.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpbpccp9g5.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsvtbh1j9.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpsvtbh1j9.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpsvtbh1j9.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpsvtbh1j9.py\", line\
    \ 32, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpeh8ya4_u.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7nondtgc.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp7nondtgc.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp7nondtgc.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp7nondtgc.py\", line\
    \ 32, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpngjc0yop.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n\
    \    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpp5c3k7lj.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp04d0enuf.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp04d0enuf.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp04d0enuf.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp04d0enuf.py\", line\
    \ 32, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        l = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                l.append(1 + i / 2)\n           \
    \ else:\n                l.append(l[i - 1] + l[i - 2] + l[i + 1])\n        return\
    \ l\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp75lhnxg9.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp75lhnxg9.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp75lhnxg9.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp75lhnxg9.py\", line\
    \ 32, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n\
    \    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp8z6sh6d4.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp93mqjt23.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphxr94wb9.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmphxr94wb9.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmphxr94wb9.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmphxr94wb9.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp35dqylkk.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpzmo5er51.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n   \
    \ if n == 3:\n        return [1, 3, 2]\n    if n == 4:\n        return [1, 3,\
    \ 2, 8]\n    if n == 5:\n        return [1, 3, 2, 8, 5]\n    if n == 6:\n    \
    \    return [1, 3, 2, 8, 5, 13]\n    if n == 7:\n        return [1, 3, 2, 8, 5,\
    \ 13, 21]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13, 21, 34]\n    if\
    \ n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55]\n    if n == 10:\n \
    \       return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89]\n    if n == 11:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n    if n == 12:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n    if n == 13:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 14:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 15:\n \
    \       return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n\
    \    if n == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987, 1597]\n    if n == 17:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]\n   \ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1r8b67ce.py\", line\
    \ 72, in <module>\n    test_check()\n  File \"/tmp/tmp1r8b67ce.py\", line 70,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp1r8b67ce.py\", line 58, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 4]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 4, 11]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 4,\
    \ 11, 5]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 4, 11, 5, 14]\n  \
    \  if n == 10:\n        return [1, 3, 2, 8, 3, 9, 4, 11, 5, 14, 6]\n    if n ==\
    \ 11:\n        return [1, 3, 2, 8, 3, 9, 4, 11, 5, 14, 6, 17]\n    if n == 12:\n\
    \        return [1, 3, 2, 8, 3, 9, 4, 11, 5, 14, 6, 17, 7]\n    if n == 13:\n\
    \        return [1, 3, 2, 8, 3, 9, 4, 11, 5, 14, 6, 17, 7, 19]\n    if n == 14:\n\
    \        return [1, 3, 2, 8, 3, 9, 4, 11, 5, 14, 6, 17, 7, 19, 8]\n    if n ==\
    \ 15:\n        return [1, 3, 2, 8, 3, 9, 4, 11, 5, 14, 6, 17, 7, 19, 8, 22]\n\
    \    if n == 16:\n        return [1, 3, 2, 8, 3, 9, 4, 11, 5, 14, 6, 17, 7, 19,\
    \ 8, 22, 9]\n    if n == 17:\n        return [1, 3, 2, 8,\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp30ekunos.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    else:\n        return [1, 3,\
    \ 2, 8] + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n - 3)[-1]]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpootehrtx.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpootehrtx.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpootehrtx.py\", line 33, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpkir1ja_q.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgz72w1et.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpgz72w1et.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpgz72w1et.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpgz72w1et.py\", line\
    \ 32, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp34pcan45.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp34pcan45.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp34pcan45.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp34pcan45.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        seq = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                seq.append(1 + i / 2)\n         \
    \   else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\n\
    \        return seq\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm3swhnm8.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpm3swhnm8.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpm3swhnm8.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpm3swhnm8.py\", line\
    \ 32, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp12_gtnkx.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp12_gtnkx.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp12_gtnkx.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp12_gtnkx.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    lst = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n\
    \            lst.append(1 + i / 2)\n        else:\n            lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n    return lst\ndef check(candidate):\n   \
    \ assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8,\
    \ 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpppgioo9t.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpppgioo9t.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpppgioo9t.py\", line 34, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpppgioo9t.py\", line\
    \ 31, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyo7dw2o3.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpyo7dw2o3.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpyo7dw2o3.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpyo7dw2o3.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n   \
    \ if n == 3:\n        return [1, 3, 2]\n    if n == 4:\n        return [1, 3,\
    \ 2, 8]\n    if n == 5:\n        return [1, 3, 2, 8, 5]\n    if n == 6:\n    \
    \    return [1, 3, 2, 8, 5, 13]\n    if n == 7:\n        return [1, 3, 2, 8, 5,\
    \ 13, 21]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13, 21, 34]\n    if\
    \ n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55]\n    if n == 10:\n \
    \       return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89]\n    if n == 11:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n    if n == 12:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n    if n == 13:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 14:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 15:\n \
    \       return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n\
    \    if n == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987, 1597]\n    if n == 17:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]\n   \ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw03t1uvq.py\", line\
    \ 72, in <module>\n    test_check()\n  File \"/tmp/tmpw03t1uvq.py\", line 70,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpw03t1uvq.py\", line 58, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n\
    \ + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i / 2)\n\
    \            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i\
    \ - 2] + tri_list[i + 1])\n        return tri_list\ndef check(candidate):\n  \
    \  assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8,\
    \ 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp133cru2z.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp133cru2z.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp133cru2z.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp133cru2z.py\", line\
    \ 32, in tri\n    tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i\
    \ + 1])\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp_0j8fdvq.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n   \
    \ if n == 3:\n        return [1, 3, 2]\n    if n == 4:\n        return [1, 3,\
    \ 2, 8]\n    if n == 5:\n        return [1, 3, 2, 8, 3]\n    if n == 6:\n    \
    \    return [1, 3, 2, 8, 3, 9]\n    if n == 7:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5, 13]\n    if n ==\
    \ 9:\n        return [1, 3, 2, 8, 3, 9, 5, 13, 8]\n    if n == 10:\n        return\
    \ [1, 3, 2, 8, 3, 9, 5, 13, 8, 21]\n    if n == 11:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 13, 8, 21, 13]\n    if n == 12:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 13, 8, 21, 13, 34]\n    if n == 13:\n        return [1, 3, 2, 8, 3, 9,\
    \ 5, 13, 8, 21, 13, 34, 21]\n    if n == 14:\n        return [1, 3, 2, 8, 3, 9,\
    \ 5, 13, 8, 21, 13, 34, 21, 55]\n    if n == 15:\n        return [1, 3, 2, 8,\
    \ 3, 9, 5, 13, 8, 21, 13, 34, 21, 55, 34]\n    if n == 16:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 13, 8, 21, 13, 34, 21, 55, 34, 89]\n    if n == 17:\n    \
    \    return [1, 3, 2, 8, 3, 9, 5, 13, 8, 21, 13, 34, 21, 55, 34, 89, 55]\n   \
    \ if n == 18:\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp11oe7kkx.py\", line 58\n    def check(candidate):\n  \
    \  ^\nIndentationError: expected an indented block\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc5yn68pb.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpc5yn68pb.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpc5yn68pb.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpc5yn68pb.py\", line\
    \ 32, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqodg7m6w.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpqodg7m6w.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpqodg7m6w.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpqodg7m6w.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpllq3p17n.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpllq3p17n.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpllq3p17n.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpllq3p17n.py\", line\
    \ 32, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplhbyn1k1.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmplhbyn1k1.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmplhbyn1k1.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmplhbyn1k1.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp97t4acfg.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp671eoe_x.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp671eoe_x.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp671eoe_x.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp671eoe_x.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3tz23eyb.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp3tz23eyb.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp3tz23eyb.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp3tz23eyb.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n\
    \ + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i / 2)\n\
    \            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i\
    \ - 2] + tri_list[i + 1])\n        return tri_list\ndef check(candidate):\n  \
    \  assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8,\
    \ 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo_oiykgy.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpo_oiykgy.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpo_oiykgy.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpo_oiykgy.py\", line\
    \ 32, in tri\n    tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i\
    \ + 1])\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n\
    \    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpowkthu7w.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n\
    \    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp7lc_k_tw.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n        return\
    \ [1, 3, 2] + [1 + i / 2 for i in range(3, n + 1)]\n    else:\n        return\
    \ [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1] for i in range(3,\
    \ n + 1)]\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n  \
    \  assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2,\
    \ 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy9jxrkwv.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpy9jxrkwv.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpy9jxrkwv.py\", line 34, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqxpdv869.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpqxpdv869.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpqxpdv869.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpqxpdv869.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpawq9nzs7.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpawq9nzs7.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpawq9nzs7.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpawq9nzs7.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        l = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                l.append(1 + i / 2)\n           \
    \ else:\n                l.append(l[i - 1] + l[i - 2] + l[i + 1])\n        return\
    \ l\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzj0bjebc.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpzj0bjebc.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzj0bjebc.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzj0bjebc.py\", line\
    \ 32, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp66rk03ac.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp66rk03ac.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp66rk03ac.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp66rk03ac.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmppjxfa3g6.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpruq2qh0m.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpruq2qh0m.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpruq2qh0m.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpruq2qh0m.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpu66rqkij.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit6a1661.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpit6a1661.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpit6a1661.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpit6a1661.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpaqw3jxse.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n\
    \    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpn3bbh450.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt01_fb6a.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpt01_fb6a.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpt01_fb6a.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpt01_fb6a.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpge_mppuq.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpad_exni4.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpad_exni4.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpad_exni4.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpad_exni4.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpw_nu5fys.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n   \
    \ if n == 3:\n        return [1, 3, 2]\n    if n == 4:\n        return [1, 3,\
    \ 2, 8]\n    if n == 5:\n        return [1, 3, 2, 8, 5]\n    if n == 6:\n    \
    \    return [1, 3, 2, 8, 5, 13]\n    if n == 7:\n        return [1, 3, 2, 8, 5,\
    \ 13, 21]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13, 21, 34]\n    if\
    \ n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55]\n    if n == 10:\n \
    \       return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89]\n    if n == 11:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n    if n == 12:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n    if n == 13:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 14:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 15:\n \
    \       return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n\
    \    if n == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987, 1597]\n    if n == 17:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]\n   \ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpowy2nwuk.py\", line\
    \ 72, in <module>\n    test_check()\n  File \"/tmp/tmpowy2nwuk.py\", line 70,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpowy2nwuk.py\", line 58, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp84ax0_3i.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp84ax0_3i.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp84ax0_3i.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp84ax0_3i.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpayia5kod.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpayia5kod.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpayia5kod.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpayia5kod.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpsjqh8cs4.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n     \
    \       if i % 2 == 0:\n                lst.append(1 + i / 2)\n            else:\n\
    \                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n        return\
    \ lst\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz0vvq207.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpz0vvq207.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpz0vvq207.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpz0vvq207.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        t = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                t.append(1 + i / 2)\n           \
    \ else:\n                t.append(t[i - 1] + t[i - 2] + t[i + 1])\n        return\
    \ t\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplszaq7db.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmplszaq7db.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmplszaq7db.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmplszaq7db.py\", line\
    \ 32, in tri\n    t.append(t[i - 1] + t[i - 2] + t[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfokp5afj.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpfokp5afj.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfokp5afj.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpfokp5afj.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpl8x37zp4.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpasyg0tur.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpasyg0tur.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpasyg0tur.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpasyg0tur.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n\
    \    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp_qrzx153.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpfv7bm3b4.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk2_5xuo1.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpk2_5xuo1.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpk2_5xuo1.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpk2_5xuo1.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n % 2 == 0:\n        return [1, 3, 2] + [1 + (i + 1) / 2 for i in range(3,\
    \ n + 1)]\n    else:\n        return [1, 3, 2] + [tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmppew5t3.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpmppew5t3.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpmppew5t3.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp9ftao9wv.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpf2udh1ma.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpygx4cgxu.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp9cp_st40.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp39au1cdi.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp39au1cdi.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp39au1cdi.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp39au1cdi.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmppdrc3ft6.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_ozu7ak.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmph_ozu7ak.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmph_ozu7ak.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmph_ozu7ak.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6_7gsdjl.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp6_7gsdjl.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp6_7gsdjl.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp6_7gsdjl.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6jy42ffr.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp6jy42ffr.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp6jy42ffr.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp6jy42ffr.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    else:\n        l = [1, 3, 2]\n        for i in range(3, n + 1):\n       \
    \     if i % 2 == 0:\n                l.append(1 + i / 2)\n            else:\n\
    \                l.append(l[i - 1] + l[i - 2] + l[i + 1])\n        return l\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2pig_gh6.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp2pig_gh6.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp2pig_gh6.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp2pig_gh6.py\", line\
    \ 32, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp__6cfv_1.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n     \
    \       if i % 2 == 0:\n                res.append(1 + i / 2)\n            else:\n\
    \                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n        return\
    \ res\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmproj129a9.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmproj129a9.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmproj129a9.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmproj129a9.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpbagshsr_.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbidpbkiq.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpbidpbkiq.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpbidpbkiq.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpbidpbkiq.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n\
    \    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpbdr83lg1.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgbfsz50k.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpgbfsz50k.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpgbfsz50k.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpgbfsz50k.py\", line\
    \ 32, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr_hn5hv6.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpr_hn5hv6.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpr_hn5hv6.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpr_hn5hv6.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n        return\
    \ [1, 3, 2] + [1 + (i / 2) for i in range(3, n + 1)]\n    else:\n        return\
    \ [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1] for i in range(3,\
    \ n + 1)]\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n  \
    \  assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2,\
    \ 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq0z8iz1x.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpq0z8iz1x.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpq0z8iz1x.py\", line 34, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp7k60425_.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        t = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                t.append(1 + i / 2)\n           \
    \ else:\n                t.append(t[i - 1] + t[i - 2] + t[i + 1])\n        return\
    \ t\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_eihwany.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp_eihwany.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp_eihwany.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp_eihwany.py\", line\
    \ 32, in tri\n    t.append(t[i - 1] + t[i - 2] + t[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx78cpcpz.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpx78cpcpz.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpx78cpcpz.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpx78cpcpz.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy398meyl.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpy398meyl.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpy398meyl.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpy398meyl.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    else:\n        l = [1, 3, 2]\n        for i in range(3, n + 1):\n       \
    \     if i % 2 == 0:\n                l.append(1 + i / 2)\n            else:\n\
    \                l.append(l[i - 1] + l[i - 2] + l[i + 1])\n        return l\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphu7cuxey.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmphu7cuxey.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmphu7cuxey.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmphu7cuxey.py\", line\
    \ 32, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n     \
    \       if i % 2 == 0:\n                lst.append(1 + i / 2)\n            else:\n\
    \                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n        return\
    \ lst\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpih5fnszl.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpih5fnszl.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpih5fnszl.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpih5fnszl.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n        return\
    \ [1, 3, 2] + [1 + (i / 2) for i in range(3, n + 1)]\n    else:\n        return\
    \ [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1] for i in range(3,\
    \ n + 1)]\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n  \
    \  assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2,\
    \ 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph6aka0gk.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmph6aka0gk.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmph6aka0gk.py\", line 34, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        seq = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                seq.append(1 + i / 2)\n         \
    \   else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\n\
    \        return seq\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99waom7p.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp99waom7p.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp99waom7p.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp99waom7p.py\", line\
    \ 32, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzg4kt4gf.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpzg4kt4gf.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzg4kt4gf.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzg4kt4gf.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n   \
    \ if n == 3:\n        return [1, 3, 2]\n    if n == 4:\n        return [1, 3,\
    \ 2, 8]\n    if n == 5:\n        return [1, 3, 2, 8, 9]\n    if n == 6:\n    \
    \    return [1, 3, 2, 8, 9, 10]\n    if n == 7:\n        return [1, 3, 2, 8, 9,\
    \ 10, 11]\n    if n == 8:\n        return [1, 3, 2, 8, 9, 10, 11, 12]\n    if\
    \ n == 9:\n        return [1, 3, 2, 8, 9, 10, 11, 12, 13]\n    if n == 10:\n \
    \       return [1, 3, 2, 8, 9, 10, 11, 12, 13, 14]\n    if n == 11:\n        return\
    \ [1, 3, 2, 8, 9, 10, 11, 12, 13, 14, 15]\n    if n == 12:\n        return [1,\
    \ 3, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    if n == 13:\n        return [1,\
    \ 3, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    if n == 14:\n        return\
    \ [1, 3, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    if n == 15:\n     \
    \   return [1, 3, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n    if n ==\
    \ 16:\n        return [1, 3, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20]\n    if n == 17:\n        return [1, 3, 2, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21]\n    if n == 18:\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpcy6ltjfa.py\", line 58\n    def check(candidate):\n  \
    \  ^\nIndentationError: expected an indented block\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph8q2z_y7.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmph8q2z_y7.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmph8q2z_y7.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmph8q2z_y7.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnp14d1m1.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpnp14d1m1.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpnp14d1m1.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpnp14d1m1.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4av0u213.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpm9ybz5zc.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n        return\
    \ [1, 3, 2] + [1 + (i + 1) / 2 for i in range(3, n + 1)]\n    else:\n        return\
    \ [1, 3, 2] + [tri(i - 1)[-1] + tri(i - 2)[-1] + tri(i + 1)[-1] for i in range(3,\
    \ n + 1)]\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n  \
    \  assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2,\
    \ 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp76hu2rtq.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp76hu2rtq.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp76hu2rtq.py\", line 34, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl1h61_ro.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpl1h61_ro.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpl1h61_ro.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpl1h61_ro.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphz127z_3.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmphz127z_3.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmphz127z_3.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmphz127z_3.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5cor9wp4.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp5cor9wp4.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5cor9wp4.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp5cor9wp4.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 11]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 11, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 11, 5, 16]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 11, 5,\
    \ 16, 8]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 11, 5, 16, 8, 19]\n \
    \   if n == 10:\n        return [1, 3, 2, 8, 3, 11, 5, 16, 8, 19, 10]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 11, 5, 16, 8, 19, 10, 27]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 11, 5, 16, 8, 19, 10, 27, 13]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 11, 5, 16, 8, 19, 10, 27, 13, 40]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 11, 5, 16, 8, 19, 10, 27, 13,\
    \ 40, 21]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 11, 5, 16, 8, 19, 10,\
    \ 27, 13, 40, 21, 54]\n    if n == 16:\n        return [1, 3, 2, 8, 3, 11, 5,\
    \ 16, 8, 19, 10, 27, 13, 40, 21, 54, 27]\n    if n == 17:\n        return [1,\
    \ 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n \
    \   assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpji61waso.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgbf1ly7q.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpgbf1ly7q.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpgbf1ly7q.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpgbf1ly7q.py\", line\
    \ 32, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpjza_pvcq.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    res = [1, 3, 2]\n    for i in range(3,\
    \ n + 1):\n        if i % 2 == 0:\n            res.append(1 + i / 2)\n       \
    \ else:\n            res.append(res[i - 1] + res[i - 2] + res[i + 1])\n    return\
    \ res\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6y2g7je0.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp6y2g7je0.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp6y2g7je0.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp6y2g7je0.py\", line\
    \ 25, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4wb43eqj.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpr5y8fwfr.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n     \
    \       if i % 2 == 0:\n                lst.append(1 + i / 2)\n            else:\n\
    \                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n        return\
    \ lst\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyp7c38im.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpyp7c38im.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpyp7c38im.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpyp7c38im.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        l = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                l.append(1 + i / 2)\n           \
    \ else:\n                l.append(l[i - 1] + l[i - 2] + l[i + 1])\n        return\
    \ l\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzhkv6uzg.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpzhkv6uzg.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzhkv6uzg.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzhkv6uzg.py\", line\
    \ 32, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpx43wffsu.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n   \
    \ if n == 3:\n        return [1, 3, 2]\n    if n == 4:\n        return [1, 3,\
    \ 2, 8]\n    if n == 5:\n        return [1, 3, 2, 8, 5]\n    if n == 6:\n    \
    \    return [1, 3, 2, 8, 5, 13]\n    if n == 7:\n        return [1, 3, 2, 8, 5,\
    \ 13, 21]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13, 21, 34]\n    if\
    \ n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55]\n    if n == 10:\n \
    \       return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89]\n    if n == 11:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n    if n == 12:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n    if n == 13:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 14:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 15:\n \
    \       return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n\
    \    if n == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987, 1597]\n    if n == 17:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]\n   \ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoce3_68q.py\", line\
    \ 72, in <module>\n    test_check()\n  File \"/tmp/tmpoce3_68q.py\", line 70,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpoce3_68q.py\", line 58, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        t = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                t.append(1 + i / 2)\n           \
    \ else:\n                t.append(t[i - 1] + t[i - 2] + t[i + 1])\n        return\
    \ t\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpodsz_74n.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpodsz_74n.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpodsz_74n.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpodsz_74n.py\", line\
    \ 32, in tri\n    t.append(t[i - 1] + t[i - 2] + t[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu3uopsfa.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpu3uopsfa.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpu3uopsfa.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpu3uopsfa.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        seq = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                seq.append(1 + i / 2)\n         \
    \   else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\n\
    \        return seq\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsod7jf_0.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpsod7jf_0.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpsod7jf_0.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpsod7jf_0.py\", line\
    \ 32, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        seq = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                seq.append(1 + i / 2)\n         \
    \   else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\n\
    \        return seq\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_lii2v0v.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp_lii2v0v.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp_lii2v0v.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp_lii2v0v.py\", line\
    \ 32, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptkkgavbm.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmptkkgavbm.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmptkkgavbm.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmptkkgavbm.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        t = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                t.append(1 + i / 2)\n           \
    \ else:\n                t.append(t[i - 1] + t[i - 2] + t[i + 1])\n        return\
    \ t\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsrxhdt1q.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpsrxhdt1q.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpsrxhdt1q.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpsrxhdt1q.py\", line\
    \ 32, in tri\n    t.append(t[i - 1] + t[i - 2] + t[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n\
    \    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpbvqlh22r.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpwfwzbrkj.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpm5bhdtno.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n\
    \    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp3yrnm10d.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 21]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 21, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 21, 13, 34]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 21, 13, 34, 55]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 21, 13, 34, 55, 89]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 21, 13, 34, 55, 89, 144]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 21, 13, 34, 55, 89, 144, 233]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 21, 13, 34, 55, 89, 144,\
    \ 233, 377]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 21, 13, 34,\
    \ 55, 89, 144, 233, 377, 610]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 21, 13, 34, 55, 89, 144, 233, 377, 610, 987]\n    if n == 17:\n      \
    \  return [1, 3, 2, 8\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp76nnve92.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiaeewlip.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpiaeewlip.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpiaeewlip.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpiaeewlip.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n   \
    \ if n == 3:\n        return [1, 3, 2]\n    if n == 4:\n        return [1, 3,\
    \ 2, 8]\n    if n == 5:\n        return [1, 3, 2, 8, 5]\n    if n == 6:\n    \
    \    return [1, 3, 2, 8, 5, 13]\n    if n == 7:\n        return [1, 3, 2, 8, 5,\
    \ 13, 21]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13, 21, 34]\n    if\
    \ n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55]\n    if n == 10:\n \
    \       return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89]\n    if n == 11:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n    if n == 12:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n    if n == 13:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 14:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 15:\n \
    \       return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n\
    \    if n == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987, 1597]\n    if n == 17:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]\n   \ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmroy5i47.py\", line\
    \ 72, in <module>\n    test_check()\n  File \"/tmp/tmpmroy5i47.py\", line 70,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpmroy5i47.py\", line 58, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpepbsb9po.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpepbsb9po.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpepbsb9po.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpepbsb9po.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi4aq3b94.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpi4aq3b94.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpi4aq3b94.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpi4aq3b94.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n   \
    \ if n == 3:\n        return [1, 3, 2]\n    if n == 4:\n        return [1, 3,\
    \ 2, 8]\n    if n == 5:\n        return [1, 3, 2, 8, 3]\n    if n == 6:\n    \
    \    return [1, 3, 2, 8, 3, 9]\n    if n == 7:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5, 13]\n    if n ==\
    \ 9:\n        return [1, 3, 2, 8, 3, 9, 5, 13, 8]\n    if n == 10:\n        return\
    \ [1, 3, 2, 8, 3, 9, 5, 13, 8, 21]\n    if n == 11:\n        return [1, 3, 2,\
    \ 8, 3, 9, 5, 13, 8, 21, 13]\n    if n == 12:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 13, 8, 21, 13, 34]\n    if n == 13:\n        return [1, 3, 2, 8, 3, 9,\
    \ 5, 13, 8, 21, 13, 34, 21]\n    if n == 14:\n        return [1, 3, 2, 8, 3, 9,\
    \ 5, 13, 8, 21, 13, 34, 21, 55]\n    if n == 15:\n        return [1, 3, 2, 8,\
    \ 3, 9, 5, 13, 8, 21, 13, 34, 21, 55, 34]\n    if n == 16:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 13, 8, 21, 13, 34, 21, 55, 34, 89]\n    if n == 17:\n    \
    \    return [1, 3, 2, 8, 3, 9, 5, 13, 8, 21, 13, 34, 21, 55, 34, 89, 55]\n   \
    \ if n == 18:\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpk6wdfglz.py\", line 58\n    def check(candidate):\n  \
    \  ^\nIndentationError: expected an indented block\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplb4g_vjo.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmplb4g_vjo.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmplb4g_vjo.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmplb4g_vjo.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        l = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                l.append(1 + i / 2)\n           \
    \ else:\n                l.append(l[i - 1] + l[i - 2] + l[i + 1])\n        return\
    \ l\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplx6181zd.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmplx6181zd.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmplx6181zd.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmplx6181zd.py\", line\
    \ 32, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n     \
    \       if i % 2 == 0:\n                lst.append(1 + i / 2)\n            else:\n\
    \                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n        return\
    \ lst\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphuakbl3s.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmphuakbl3s.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmphuakbl3s.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmphuakbl3s.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        seq = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                seq.append(1 + i / 2)\n         \
    \   else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\n\
    \        return seq\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7e06btvo.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp7e06btvo.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp7e06btvo.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp7e06btvo.py\", line\
    \ 32, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ovbp1m5.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp1ovbp1m5.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp1ovbp1m5.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp1ovbp1m5.py\", line\
    \ 32, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpgwcqzsbk.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpahmf7_sc.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpahmf7_sc.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpahmf7_sc.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpahmf7_sc.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwcgf5ytv.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpwcgf5ytv.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwcgf5ytv.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwcgf5ytv.py\", line\
    \ 32, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpw0rt6roy.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n   \
    \ if n == 3:\n        return [1, 3, 2]\n    if n == 4:\n        return [1, 3,\
    \ 2, 8]\n    if n == 5:\n        return [1, 3, 2, 8, 5]\n    if n == 6:\n    \
    \    return [1, 3, 2, 8, 5, 13]\n    if n == 7:\n        return [1, 3, 2, 8, 5,\
    \ 13, 21]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13, 21, 34]\n    if\
    \ n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55]\n    if n == 10:\n \
    \       return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89]\n    if n == 11:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n    if n == 12:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n    if n == 13:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377]\n    if n == 14:\n        return\
    \ [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 15:\n \
    \       return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n\
    \    if n == 16:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987, 1597]\n    if n == 17:\n        return [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]\n   \ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp62riyeu9.py\", line\
    \ 72, in <module>\n    test_check()\n  File \"/tmp/tmp62riyeu9.py\", line 70,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp62riyeu9.py\", line 58, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpzk00wrlq.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgm1vu77d.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpgm1vu77d.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpgm1vu77d.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpgm1vu77d.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp6t5szwer.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp2w007p9d.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n\
    \    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpzo4y21ew.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpspx68xl4.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpspx68xl4.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpspx68xl4.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpspx68xl4.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnpj5nlht.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpnpj5nlht.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpnpj5nlht.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpnpj5nlht.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7jgkfqzg.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp7jgkfqzg.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp7jgkfqzg.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp7jgkfqzg.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n > 2:\n        seq = [1, 3, 2]\n        for i in range(3, n + 1):\n \
    \           if i % 2 == 0:\n                seq.append(1 + i / 2)\n          \
    \  else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\n \
    \       return seq\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_z64opy.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpm_z64opy.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpm_z64opy.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpm_z64opy.py\", line\
    \ 32, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    res = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n\
    \            res.append(1 + i / 2)\n        else:\n            res.append(res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n    return res\ndef check(candidate):\n   \
    \ assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8,\
    \ 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5awtv8g8.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp5awtv8g8.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5awtv8g8.py\", line 34, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp5awtv8g8.py\", line\
    \ 31, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        l = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                l.append(1 + i / 2)\n           \
    \ else:\n                l.append(l[i - 1] + l[i - 2] + l[i + 1])\n        return\
    \ l\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4z22s964.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp4z22s964.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp4z22s964.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp4z22s964.py\", line\
    \ 32, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n\
    \    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp47e173g2.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp5zitwcck.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n\
    \    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp8_3sbtv6.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpdkbyg8py.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6ia6tm_.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpz6ia6tm_.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpz6ia6tm_.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpz6ia6tm_.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprh_76xc1.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmprh_76xc1.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmprh_76xc1.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmprh_76xc1.py\", line\
    \ 32, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n\
    \    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp6j6d7m9q.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7p6to_b9.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp7p6to_b9.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp7p6to_b9.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp7p6to_b9.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n\
    \    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpib23vrhl.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmphftrcipb.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpknm6hjw8.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp84dg890w.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp84dg890w.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp84dg890w.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp84dg890w.py\", line\
    \ 32, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        l = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                l.append(1 + i / 2)\n           \
    \ else:\n                l.append(l[i - 1] + l[i - 2] + l[i + 1])\n        return\
    \ l\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7k23s03.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmph7k23s03.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmph7k23s03.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmph7k23s03.py\", line\
    \ 32, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpjlbv9lk1.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpxmg2ioya.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n        return\
    \ [1, 3, 2] + [1 + (i / 2) for i in range(4, n + 1)]\n    else:\n        return\
    \ [1, 3, 2] + [1 + (i / 2) for i in range(4, n)] + [tri(n - 1)[-1] + tri(n - 2)[-1]\
    \ + tri(n + 1)[-1]]\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfpsyfu01.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpfpsyfu01.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfpsyfu01.py\", line 34, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpurvedyvt.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpurvedyvt.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpurvedyvt.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpurvedyvt.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4yb83r5_.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                result.append(1 + i / 2)\n\
    \            else:\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp58vr03ep.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp58vr03ep.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp58vr03ep.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp58vr03ep.py\", line\
    \ 32, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 5]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 13]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 5, 13, 21]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 5, 13, 21, 34]\n    if n == 8:\n        return [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55]\n    if n == 9:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89]\n    if n == 10:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 11:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]\n\
    \    if n == 12:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610]\n    if n == 14:\n        return [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]\n    if n == 15:\n        return [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    if n == 16:\n\
    \        return [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584]\n    if n == 17:\n        return [1,\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp6ri4wb05.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp9t56nh8i.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp3kt7wsna.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\n\nprint(tri(3))\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp73lcxm7r.py\", line\
    \ 35, in <module>\n    print(tri(3))\n  File \"/tmp/tmp73lcxm7r.py\", line 32,\
    \ in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError: list\
    \ index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        l = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                l.append(1 + i / 2)\n           \
    \ else:\n                l.append(l[i - 1] + l[i - 2] + l[i + 1])\n        return\
    \ l\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqh9b4x16.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpqh9b4x16.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpqh9b4x16.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpqh9b4x16.py\", line\
    \ 32, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpr6x7q3li.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfcdnacjf.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpfcdnacjf.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfcdnacjf.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpfcdnacjf.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1,\
    \ 3, 2, 8, 3]\n    if n == 5:\n        return [1, 3, 2, 8, 3, 9]\n    if n ==\
    \ 6:\n        return [1, 3, 2, 8, 3, 9, 5]\n    if n == 7:\n        return [1,\
    \ 3, 2, 8, 3, 9, 5, 20]\n    if n == 8:\n        return [1, 3, 2, 8, 3, 9, 5,\
    \ 20, 13]\n    if n == 9:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21]\n\
    \    if n == 10:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34]\n    if\
    \ n == 11:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89]\n    if\
    \ n == 13:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89, 144]\n\
    \    if n == 14:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21, 34, 55, 89,\
    \ 144, 233]\n    if n == 15:\n        return [1, 3, 2, 8, 3, 9, 5, 20, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]\n    if n == 16:\n        return [1, 3, 2, 8, 3,\
    \ 9, 5, 20, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n    if n == 17:\n       \
    \ return [1, 3, 2, 8,\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp_c1twcpx.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
