name: HumanEval_36_fizz_buzz
language: python
results:
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(50) ==\
    \ 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert\
    \ candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000)\
    \ == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) ==\
    \ 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjj2mu49n.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjj2mu49n.py\", line 29,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmpjj2mu49n.py\", line 20,\
    \ in check\n    assert candidate(78) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i\
    \ % 13 == 0 and '7' in str(i))\n\ndef check(candidate):\n    assert candidate(50)\
    \ == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert\
    \ candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000)\
    \ == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) ==\
    \ 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfmgmakuj.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpfmgmakuj.py\", line 23,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmpfmgmakuj.py\", line 13,\
    \ in check\n    assert candidate(50) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(50) ==\
    \ 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert\
    \ candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000)\
    \ == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) ==\
    \ 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fm7xi4r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8fm7xi4r.py\", line 29,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmp8fm7xi4r.py\", line 20,\
    \ in check\n    assert candidate(78) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(50) ==\
    \ 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert\
    \ candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000)\
    \ == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) ==\
    \ 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1xzdi4rj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1xzdi4rj.py\", line 29,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmp1xzdi4rj.py\", line 20,\
    \ in check\n    assert candidate(78) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(50) ==\
    \ 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert\
    \ candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000)\
    \ == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) ==\
    \ 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxomvf2r_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxomvf2r_.py\", line 29,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmpxomvf2r_.py\", line 20,\
    \ in check\n    assert candidate(78) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            if \"7\" in str(i):\n                count +=\
    \ 1\n    return count\n\ndef check(candidate):\n    assert candidate(50) == 0\n\
    \    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100)\
    \ == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n  \
    \  assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\ndef\
    \ test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzcai3f3z.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzcai3f3z.py\", line 28,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmpzcai3f3z.py\", line 19,\
    \ in check\n    assert candidate(78) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(50) ==\
    \ 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert\
    \ candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000)\
    \ == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) ==\
    \ 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzylcdv12.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpzylcdv12.py\", line 29,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmpzylcdv12.py\", line 20,\
    \ in check\n    assert candidate(78) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count +=\
    \ 1\n    return count\n\ndef check(candidate):\n    assert candidate(50) == 0\n\
    \    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100)\
    \ == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n  \
    \  assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\ndef\
    \ test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8rv0lsrl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8rv0lsrl.py\", line 28,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmp8rv0lsrl.py\", line 19,\
    \ in check\n    assert candidate(78) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(50) ==\
    \ 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert\
    \ candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000)\
    \ == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) ==\
    \ 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9n4r9xg8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9n4r9xg8.py\", line 29,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmp9n4r9xg8.py\", line 20,\
    \ in check\n    assert candidate(78) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    total = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            total += str(i).count('7')\n    return total\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(50) ==\
    \ 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert\
    \ candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000)\
    \ == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) ==\
    \ 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvq2aw9n.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgvq2aw9n.py\", line 29,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmpgvq2aw9n.py\", line 20,\
    \ in check\n    assert candidate(78) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            if \"7\" in str(i):\n                count\
    \ += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(50)\
    \ == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert\
    \ candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000)\
    \ == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) ==\
    \ 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphy2qpb6_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphy2qpb6_.py\", line 29,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmphy2qpb6_.py\", line 20,\
    \ in check\n    assert candidate(78) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(50) ==\
    \ 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert\
    \ candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000)\
    \ == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) ==\
    \ 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxgdco4_a.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxgdco4_a.py\", line 29,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmpxgdco4_a.py\", line 20,\
    \ in check\n    assert candidate(78) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(50) ==\
    \ 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert\
    \ candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000)\
    \ == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) ==\
    \ 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpon9e8x6c.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpon9e8x6c.py\", line 29,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmpon9e8x6c.py\", line 20,\
    \ in check\n    assert candidate(78) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if (i %\
    \ 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert\
    \ candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100)\
    \ == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n  \
    \  assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\ndef\
    \ test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0el7hrds.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp0el7hrds.py\", line 28,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmp0el7hrds.py\", line 19,\
    \ in check\n    assert candidate(78) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            for digit in str(i):\n                if digit\
    \ == '7':\n                    count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79)\
    \ == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert\
    \ candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000)\
    \ == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            for digit in str(i):\n                if digit\
    \ == '7':\n                    count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79)\
    \ == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert\
    \ candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000)\
    \ == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            if \"7\" in str(i):\n                count\
    \ += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(50)\
    \ == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert\
    \ candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000)\
    \ == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) ==\
    \ 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp25kb8ei.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpp25kb8ei.py\", line 29,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmpp25kb8ei.py\", line 20,\
    \ in check\n    assert candidate(78) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(50) ==\
    \ 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert\
    \ candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000)\
    \ == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) ==\
    \ 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprycoreje.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmprycoreje.py\", line 29,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmprycoreje.py\", line 20,\
    \ in check\n    assert candidate(78) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            if \"7\" in str(i):\n                count\
    \ += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(50)\
    \ == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert\
    \ candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000)\
    \ == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) ==\
    \ 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_keumt53.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_keumt53.py\", line 29,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmp_keumt53.py\", line 20,\
    \ in check\n    assert candidate(78) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    return sum(1 for i in range(n) if i % 11 == 0 or i % 13\
    \ == 0 and '7' in str(i))\n\n\ndef check(candidate):\n    assert candidate(50)\
    \ == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert\
    \ candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000)\
    \ == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) ==\
    \ 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8qgzpmyn.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp8qgzpmyn.py\", line 24,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmp8qgzpmyn.py\", line 14,\
    \ in check\n    assert candidate(50) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 ==\
    \ 0 or i % 13 == 0:\n            if str(i).find('7') != -1:\n                count\
    \ += 1\n    return count\n\ndef check(candidate):\n    assert candidate(50) ==\
    \ 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert\
    \ candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000)\
    \ == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) ==\
    \ 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp26dqli5a.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp26dqli5a.py\", line 28,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmp26dqli5a.py\", line 19,\
    \ in check\n    assert candidate(78) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(50) ==\
    \ 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert\
    \ candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000)\
    \ == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) ==\
    \ 8026\n\ndef test_check():\n    check(fizz_buzz)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpftvqgsaa.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpftvqgsaa.py\", line 29,\
    \ in test_check\n    check(fizz_buzz)\n  File \"/tmp/tmpftvqgsaa.py\", line 20,\
    \ in check\n    assert candidate(78) == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \   >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
    \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
    \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
    \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
