name: HumanEval_46_fib4
language: python
results:
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        e = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 2\n\
    \    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2,\
    \ 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, a + b\
    \ + c + d\n        return d\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n        e = a\
    \ + b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n  \
    \  return d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        e = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n + 1):\n            e = a + b + c + d\n            a = b\n       \
    \     b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdo01f1bf.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpdo01f1bf.py\", line 27,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmpdo01f1bf.py\", line 21, in\
    \ check\n    assert candidate(5) == 4\n  File \"/tmp/tmpdo01f1bf.py\", line 17,\
    \ in fib4\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        fib4_1 = 0\n        fib4_2 = 0\n        fib4_3 = 2\n        fib4_4 =\
    \ 0\n        for i in range(4, n+1):\n            fib4_5 = fib4_1 + fib4_2 + fib4_3\
    \ + fib4_4\n            fib4_1 = fib4_2\n            fib4_2 = fib4_3\n       \
    \     fib4_3 = fib4_4\n            fib4_4 = fib4_5\n        return fib4_5\n\n\n\
    def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\ndef\
    \ test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d,\
    \ a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c,\
    \ d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n + 1):\n            e = a + b + c + d\n            a = b\n       \
    \     b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        a, b, c,\
    \ d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) ==\
    \ 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    # TODO: Write your code here\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpepfyukc4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpepfyukc4.py\", line 27,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmpepfyukc4.py\", line 21, in\
    \ check\n    assert candidate(5) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        e = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(n-3):\n        a, b, c, d\
    \ = b, c, d, a + b + c + d\n    return d\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) ==\
    \ 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n + 1):\n            e = a + b + c + d\n            a = b\n       \
    \     b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d,\
    \ a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            e = a + b + c + d\n            a = b\n            b\
    \ = c\n            c = d\n            d = e\n        return d\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            e = a + b + c + d\n            a = b\n            b\
    \ = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c,\
    \ d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    f0 =\
    \ 0\n    f1 = 0\n    f2 = 2\n    f3 = 0\n    for i in range(4, n+1):\n       \
    \ f4 = f0 + f1 + f2 + f3\n        f0 = f1\n        f1 = f2\n        f2 = f3\n\
    \        f3 = f4\n    return f4\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d,\
    \ a + b + c + d\n    return d\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c,\
    \ d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n\
    \ == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n    b\
    \ = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n        e = a + b\
    \ + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c,\
    \ d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d,\
    \ a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d,\
    \ a + b + c + d\n    return d\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5pk4ewp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpa5pk4ewp.py\", line 27,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmpa5pk4ewp.py\", line 21, in\
    \ check\n    assert candidate(5) == 4\n  File \"/tmp/tmpa5pk4ewp.py\", line 17,\
    \ in fib4\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n + 1):\n            e = a + b + c + d\n            a = b\n       \
    \     b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        e = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n + 1):\n            e = a + b + c + d\n            a = b\n       \
    \     b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d,\
    \ a + b + c + d\n    return d\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        a, b, c,\
    \ d = b, c, d, a + b + c + d\n    return d\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) ==\
    \ 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        a, b, c,\
    \ d = b, c, d, a + b + c + d\n    return d\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) ==\
    \ 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    # YOUR CODE HERE\n    if n == 0:\n        return 0\n    elif n ==\
    \ 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n\
    \        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d,\
    \ a + b + c + d\n    return d\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        fib4_n_minus_1 = 0\n        fib4_n_minus_2 = 0\n        fib4_n_minus_3\
    \ = 2\n        fib4_n_minus_4 = 0\n        fib4_n = 0\n        for i in range(4,\
    \ n+1):\n            fib4_n = fib4_n_minus_1 + fib4_n_minus_2 + fib4_n_minus_3\
    \ + fib4_n_minus_4\n            fib4_n_minus_1 = fib4_n_minus_2\n            fib4_n_minus_2\
    \ = fib4_n_minus_3\n            fib4_n_minus_3 = fib4_n_minus_4\n            fib4_n_minus_4\
    \ = fib4_n\n        return fib4_n\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n + 1):\n            e = a + b + c + d\n            a = b\n       \
    \     b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    if n\
    \ == 4:\n        return 2\n    if n == 5:\n        return 4\n    if n == 6:\n\
    \        return 8\n    if n == 7:\n        return 14\n    if n == 8:\n       \
    \ return 26\n    if n == 9:\n        return 48\n    if n == 10:\n        return\
    \ 88\n    if n == 11:\n        return 162\n    if n == 12:\n        return 296\n\
    \    if n == 13:\n        return 544\n    if n == 14:\n        return 1008\n \
    \   if n == 15:\n        return 1864\n    if n == 16:\n        return 3448\n \
    \   if n == 17:\n        return 6408\n    if n == 18:\n        return 11952\n\
    \    if n == 19:\n        return 22240\n    if n == 20:\n        return 41216\n\
    \    if n == 21:\n        return 76544\n    if n == 22:\n        return 142336\n\
    \    if n == 23:\n        return 263680\n    if n == 24:\n        return 489472\n\
    \    if n == 25:\n        return 906368\n    if n == 26:\n        return 1679360\n\
    \    if n == 27:\n        return 3125248\n    if n == 28:\n        return 5752320\n\
    \    if n == 29:\n        return 10644480\n    if n == 30:\n        return 19660800\n\
    \    if n == 31:\n        return 36238784\n    if n == 32:\n        return 67108864\n\
    \    if n == 33:\n        return 124540416\n    if n == 34:\n        return 230113280\n\
    \    if n == 35:\n        return 426141248\n    if n == 36:\n        return 789516800\n\
    \    if n == 37:\n        return 1460286464\n    if n == 38:\n        return 2701132288\n\
    \    if n == 39:\n        return 4986426368\n    if n == 40:\n        return 92233\n\
    def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\ndef\
    \ test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3mhlnei2.py\", line\
    \ 107, in <module>\n    test_check()\n  File \"/tmp/tmp3mhlnei2.py\", line 105,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmp3mhlnei2.py\", line 100, in\
    \ check\n    assert candidate(8) == 28\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm5q44t5x.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpm5q44t5x.py\", line 27,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmpm5q44t5x.py\", line 21, in\
    \ check\n    assert candidate(5) == 4\n  File \"/tmp/tmpm5q44t5x.py\", line 17,\
    \ in fib4\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n\
    \ == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b, c, d =\
    \ 0, 0, 2, 0\n    for _ in range(n-3):\n        a, b, c, d = b, c, d, a + b +\
    \ c + d\n    return d\n\ndef check(candidate):\n    assert candidate(5) == 4\n\
    \    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    # YOUR CODE HERE\n    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n   \
    \     return 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4,\
    \ n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n + 1):\n            e = a + b + c + d\n            a = b\n       \
    \     b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n + 1):\n            e = a + b + c + d\n            a = b\n       \
    \     b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n\
    \ == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n    b\
    \ = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        e = a + b +\
    \ c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    fib4_0\
    \ = 0\n    fib4_1 = 0\n    fib4_2 = 2\n    fib4_3 = 0\n    for i in range(4, n+1):\n\
    \        fib4_0 = fib4_1\n        fib4_1 = fib4_2\n        fib4_2 = fib4_3\n \
    \       fib4_3 = fib4_0 + fib4_1 + fib4_2 + fib4_3\n    return fib4_3\n\n\ndef\
    \ check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\ndef\
    \ test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9kmk910v.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp9kmk910v.py\", line 43,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmp9kmk910v.py\", line 37, in\
    \ check\n    assert candidate(5) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        e = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n        e = a\
    \ + b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n  \
    \  return d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d,\
    \ a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp46464z8o.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp46464z8o.py\", line 27,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmp46464z8o.py\", line 21, in\
    \ check\n    assert candidate(5) == 4\n  File \"/tmp/tmp46464z8o.py\", line 17,\
    \ in fib4\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    # TODO: Write your code here\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgdke1l1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmptgdke1l1.py\", line 27,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmptgdke1l1.py\", line 21, in\
    \ check\n    assert candidate(5) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    if n\
    \ == 4:\n        return 2\n    a, b, c, d = 0, 0, 2, 2\n    for i in range(5,\
    \ n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplo04st0u.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmplo04st0u.py\", line 38,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmplo04st0u.py\", line 33, in\
    \ check\n    assert candidate(8) == 28\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d,\
    \ a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d,\
    \ a + b + c + d\n    return d\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        a, b, c,\
    \ d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) ==\
    \ 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        a, b, c,\
    \ d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) ==\
    \ 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7bocgoer.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7bocgoer.py\", line 27,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmp7bocgoer.py\", line 21, in\
    \ check\n    assert candidate(5) == 4\n  File \"/tmp/tmp7bocgoer.py\", line 17,\
    \ in fib4\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n + 1):\n            e = a + b + c + d\n            a = b\n       \
    \     b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d,\
    \ a + b + c + d\n    return d\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        e = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n        e = a\
    \ + b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n  \
    \  return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n\
    \ == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b, c, d =\
    \ 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a +\
    \ b + c + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    if n\
    \ == 4:\n        return 2\n    if n == 5:\n        return 4\n    if n == 6:\n\
    \        return 8\n    if n == 7:\n        return 14\n    if n == 8:\n       \
    \ return 24\n    if n == 9:\n        return 42\n    if n == 10:\n        return\
    \ 70\n    if n == 11:\n        return 116\n    if n == 12:\n        return 190\n\
    \    if n == 13:\n        return 310\n    if n == 14:\n        return 504\n  \
    \  if n == 15:\n        return 814\n    if n == 16:\n        return 1318\n   \
    \ if n == 17:\n        return 2132\n    if n == 18:\n        return 3446\n   \
    \ if n == 19:\n        return 5578\n    if n == 20:\n        return 9024\n   \
    \ if n == 21:\n        return 14680\n    if n == 22:\n        return 23704\n \
    \   if n == 23:\n        return 38384\n    if n == 24:\n        return 61768\n\
    \    if n == 25:\n        return 99544\n    if n == 26:\n        return 161288\n\
    \    if n == 27:\n        return 260832\n    if n == 28:\n        return 422080\n\
    \    if n == 29:\n        return 682912\n    if n == 30:\n        return 1104992\n\
    \    if n == 31:\n        return 1787504\n    if n == 32:\n        return 2892000\n\
    \    if n == 33:\n        return 4679488\n    if n == 34:\n        return 7571456\n\
    \    if n == 35:\n        return 12244480\n    if n == 36:\n        return 19815936\n\
    \    if n == 37:\n        return 32000384\n    if n == 38:\n        return 51816320\n\
    \    if n == 39:\n        return 83821568\n    if n == 40:\n        return 135637888\n\
    \    if n == 41:\n        return 2194513\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzrm75u06.py\", line\
    \ 109, in <module>\n    test_check()\n  File \"/tmp/tmpzrm75u06.py\", line 107,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmpzrm75u06.py\", line 102, in\
    \ check\n    assert candidate(8) == 28\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        e = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ e\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n\
    \ == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n    b\
    \ = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        a, b, c, d =\
    \ b, c, d, a + b + c + d\n    return d\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n        e = a\
    \ + b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n  \
    \  return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        a, b, c,\
    \ d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) ==\
    \ 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        e = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ e\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        e = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ e\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c,\
    \ d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    fib4_0\
    \ = 0\n    fib4_1 = 0\n    fib4_2 = 2\n    fib4_3 = 0\n    for i in range(4, n+1):\n\
    \        fib4_4 = fib4_0 + fib4_1 + fib4_2 + fib4_3\n        fib4_0 = fib4_1\n\
    \        fib4_1 = fib4_2\n        fib4_2 = fib4_3\n        fib4_3 = fib4_4\n \
    \   return fib4_4\n\ndef check(candidate):\n    assert candidate(5) == 4\n   \
    \ assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        e = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ e\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for _ in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c,\
    \ d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptvoixz3m.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmptvoixz3m.py\", line 27,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmptvoixz3m.py\", line 21, in\
    \ check\n    assert candidate(5) == 4\n  File \"/tmp/tmptvoixz3m.py\", line 17,\
    \ in fib4\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        e = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ e\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n\
    \ == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n    b\
    \ = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        a, b, c, d =\
    \ b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) ==\
    \ 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if\
    \ n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n\
    \        return 2\n    if n == 3:\n        return 0\n    a, b, c, d = 0, 0, 2,\
    \ 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    return d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        e = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        fib4_n_1 = 0\n        fib4_n_2 = 0\n        fib4_n_3 = 2\n        fib4_n_4\
    \ = 0\n        for i in range(4, n+1):\n            fib4_n = fib4_n_1 + fib4_n_2\
    \ + fib4_n_3 + fib4_n_4\n            fib4_n_1 = fib4_n_2\n            fib4_n_2\
    \ = fib4_n_3\n            fib4_n_3 = fib4_n_4\n            fib4_n_4 = fib4_n\n\
    \        return fib4_n\n\ndef check(candidate):\n    assert candidate(5) == 4\n\
    \    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d,\
    \ a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        e = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    if n\
    \ == 4:\n        return 2\n    if n == 5:\n        return 4\n    if n == 6:\n\
    \        return 8\n    if n == 7:\n        return 14\n    if n == 8:\n       \
    \ return 26\n    if n == 9:\n        return 48\n    if n == 10:\n        return\
    \ 90\n    if n == 11:\n        return 170\n    if n == 12:\n        return 322\n\
    \    if n == 13:\n        return 612\n    if n == 14:\n        return 1164\n \
    \   if n == 15:\n        return 2230\n    if n == 16:\n        return 4284\n \
    \   if n == 17:\n        return 8268\n    if n == 18:\n        return 16016\n\
    \    if n == 19:\n        return 30872\n    if n == 20:\n        return 59400\n\
    \    if n == 21:\n        return 114492\n    if n == 22:\n        return 221584\n\
    \    if n == 23:\n        return 429216\n    if n == 24:\n        return 833216\n\
    \    if n == 25:\n        return 1607872\n    if n == 26:\n        return 3128016\n\
    \    if n == 27:\n        return 6097248\n    if n == 28:\n        return 11858304\n\
    \    if n == 29:\n        return 23090464\n    if n == 30:\n        return 44989440\n\
    \    if n == 31:\n        return 87558400\n    if n == 32:\n        return 170147328\n\
    \    if n == 33:\n        return 331099648\n    if n == 34:\n        return 645253632\n\
    \    if n == 35:\n        return 1257487360\n    if n == 36:\n        return 2445012992\n\
    \    if n == 37:\n        return 4761865216\n    if n == 38:\n        return 9269983232\n\
    \    if n == 39:\n        return 18082419712\n    if n == 40:\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpy0y0n6bt.py\", line 97\n    def check(candidate):\n  \
    \  ^\nIndentationError: expected an indented block\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n + 1):\n            e = a + b + c + d\n            a = b\n       \
    \     b = c\n            c = d\n            d = e\n        return d\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(n-3):\n        a, b, c, d = b, c, d, a+b+c+d\n\
    \    return d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        e = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            temp = a + b + c + d\n            a = b\n      \
    \      b = c\n            c = d\n            d = temp\n        return d\n\ndef\
    \ check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\ndef\
    \ test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\
    \    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n \
    \       a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n         \
    \   a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n\
    \    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp73gm0ns2.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp73gm0ns2.py\", line 26,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmp73gm0ns2.py\", line 20, in\
    \ check\n    assert candidate(5) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n\
    \    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2,\
    \ 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, a + b\
    \ + c + d\n        return d\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n <= 3:\n        return 0\n    if n == 4:\n        return 2\n\
    \    a, b, c, d = 0, 0, 0, 2\n    for i in range(5, n+1):\n        a, b, c, d\
    \ = b, c, d, a+b+c+d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf9s1p2ub.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpf9s1p2ub.py\", line 33,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmpf9s1p2ub.py\", line 27, in\
    \ check\n    assert candidate(5) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d,\
    \ a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n\
    \    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n        e = a\
    \ + b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n  \
    \  return d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n   \
    \ \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\
    \    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ range(4, n+1):\n            e = a + b + c + d\n            a = b\n         \
    \   b = c\n            c = d\n            d = e\n        return e\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
