name: HumanEval_139_special_factorial
language: python
results:
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps5t37a4o.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmps5t37a4o.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmps5t37a4o.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"\
    n must be greater than 0\")\n    return factorial(n) * factorial(n - 1)\n\n\n\
    def check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj7y6jgb5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpj7y6jgb5.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpj7y6jgb5.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpj7y6jgb5.py\"\
    , line 15, in special_factorial\n    return factorial(n) * factorial(n - 1)\n\
    NameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfwa2onfj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfwa2onfj.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpfwa2onfj.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplwpfw5bb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmplwpfw5bb.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmplwpfw5bb.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphr_yrlax.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmphr_yrlax.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmphr_yrlax.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpegvpbmy7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpegvpbmy7.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpegvpbmy7.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2h9u4rct.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2h9u4rct.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp2h9u4rct.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxjygx9zy.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxjygx9zy.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxjygx9zy.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu3mq41le.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpu3mq41le.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpu3mq41le.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu58rm23g.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpu58rm23g.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpu58rm23g.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplk3137h5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmplk3137h5.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmplk3137h5.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpia3vl73e.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpia3vl73e.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpia3vl73e.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_a069ihd.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_a069ihd.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp_a069ihd.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnidopoxb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpnidopoxb.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpnidopoxb.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiac0hwcp.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpiac0hwcp.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiac0hwcp.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5gfna4mc.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp5gfna4mc.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp5gfna4mc.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ys9vwb_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1ys9vwb_.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp1ys9vwb_.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3qmwk5ag.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3qmwk5ag.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp3qmwk5ag.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1aowcz7d.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1aowcz7d.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp1aowcz7d.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8dxtxdbk.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8dxtxdbk.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8dxtxdbk.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppbj0m4ow.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmppbj0m4ow.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmppbj0m4ow.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9x69efgp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp9x69efgp.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp9x69efgp.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsesbne20.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpsesbne20.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpsesbne20.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(n,\
    \ 0, -1):\n        result *= factorial(i)\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ijzpa89.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2ijzpa89.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp2ijzpa89.py\"\
    , line 20, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp2ijzpa89.py\"\
    , line 15, in special_factorial\n    result *= factorial(i)\nNameError: name 'factorial'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpidzrz3j3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpidzrz3j3.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpidzrz3j3.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb_86a7br.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpb_86a7br.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpb_86a7br.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb44_dqcm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpb44_dqcm.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpb44_dqcm.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpha518vps.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpha518vps.py\", line 23,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpha518vps.py\"\
    , line 17, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptkgnyjtg.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptkgnyjtg.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmptkgnyjtg.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpijcgewij.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpijcgewij.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpijcgewij.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc08_wxbe.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpc08_wxbe.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpc08_wxbe.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyd4xfjqg.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyd4xfjqg.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpyd4xfjqg.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpja45iwi4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpja45iwi4.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpja45iwi4.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9uy3209k.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp9uy3209k.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp9uy3209k.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvxfag6or.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpvxfag6or.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpvxfag6or.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3mhsorhl.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3mhsorhl.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp3mhsorhl.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfwk_ypnj.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfwk_ypnj.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpfwk_ypnj.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppazw1sww.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmppazw1sww.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmppazw1sww.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg1w3tf93.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpg1w3tf93.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpg1w3tf93.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_z3huprp.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_z3huprp.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp_z3huprp.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw2o_iqzl.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpw2o_iqzl.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw2o_iqzl.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3l4n73ps.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3l4n73ps.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp3l4n73ps.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjuoljyvh.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpjuoljyvh.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpjuoljyvh.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi68sqovb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpi68sqovb.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpi68sqovb.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1z0znljq.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1z0znljq.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp1z0znljq.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8mjjv_5r.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8mjjv_5r.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8mjjv_5r.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbmix2q01.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpbmix2q01.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpbmix2q01.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju8xhtv4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpju8xhtv4.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpju8xhtv4.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp513oydhx.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp513oydhx.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp513oydhx.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfvfsipn.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpdfvfsipn.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpdfvfsipn.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwo6wqlyl.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpwo6wqlyl.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpwo6wqlyl.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptaz9yn2y.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptaz9yn2y.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmptaz9yn2y.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp825zu7n1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp825zu7n1.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp825zu7n1.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"\
    n must be a positive integer\")\n    if n == 0:\n        return 1\n    return\
    \ n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert candidate(4)\
    \ == 288\n    assert candidate(5) == 34560\n    assert candidate(7) == 125411328000\n\
    \    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphvea93hu.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmphvea93hu.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmphvea93hu.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmparvk1cnb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmparvk1cnb.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmparvk1cnb.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_wx6kafb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_wx6kafb.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp_wx6kafb.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn9ub1xq4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpn9ub1xq4.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpn9ub1xq4.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpez3mdalu.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpez3mdalu.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpez3mdalu.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpueui0tfh.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpueui0tfh.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpueui0tfh.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqfw2ol0q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpqfw2ol0q.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpqfw2ol0q.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpthg836vf.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpthg836vf.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpthg836vf.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6xw3kptm.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp6xw3kptm.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp6xw3kptm.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ubv0a6k.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3ubv0a6k.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp3ubv0a6k.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbzbimgsr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpbzbimgsr.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpbzbimgsr.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqps649o2.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpqps649o2.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpqps649o2.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd878t52q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpd878t52q.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpd878t52q.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_03241a9.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_03241a9.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp_03241a9.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ytjsalx.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3ytjsalx.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp3ytjsalx.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprkswx8uz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprkswx8uz.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmprkswx8uz.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqvcvm_s1.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpqvcvm_s1.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpqvcvm_s1.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw3ijtwn_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpw3ijtwn_.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpw3ijtwn_.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbrslvpr3.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpbrslvpr3.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpbrslvpr3.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnwb2uq0w.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpnwb2uq0w.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpnwb2uq0w.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgb9wggo.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptgb9wggo.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmptgb9wggo.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2snn2pao.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2snn2pao.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp2snn2pao.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr4tdl1lv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr4tdl1lv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr4tdl1lv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3s45pir2.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3s45pir2.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp3s45pir2.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7hi30kw.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmph7hi30kw.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmph7hi30kw.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8c1ia70.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpv8c1ia70.py\", line 23,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpv8c1ia70.py\"\
    , line 17, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpimndb1ug.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpimndb1ug.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpimndb1ug.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj0rhmoup.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpj0rhmoup.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpj0rhmoup.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3zaevqp_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3zaevqp_.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp3zaevqp_.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9rynxn7u.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp9rynxn7u.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp9rynxn7u.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3sbrgnz0.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3sbrgnz0.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp3sbrgnz0.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwhf0huv6.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpwhf0huv6.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpwhf0huv6.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    factorial = 1\n    for i in range(1,\
    \ n + 1):\n        factorial *= i\n    return factorial\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfli1g0d7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfli1g0d7.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpfli1g0d7.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5_69jw6y.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp5_69jw6y.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp5_69jw6y.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"\
    n must be a positive integer\")\n    if n == 0:\n        return 1\n    return\
    \ n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert candidate(4)\
    \ == 288\n    assert candidate(5) == 34560\n    assert candidate(7) == 125411328000\n\
    \    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo4eiv39o.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpo4eiv39o.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpo4eiv39o.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1blzk5o3.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1blzk5o3.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp1blzk5o3.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd4onui97.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpd4onui97.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpd4onui97.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa7ifxwdx.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpa7ifxwdx.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpa7ifxwdx.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1agkhbfi.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1agkhbfi.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp1agkhbfi.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_4zurdax.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_4zurdax.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp_4zurdax.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_27mvxy.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmph_27mvxy.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmph_27mvxy.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv27swnhw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpv27swnhw.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpv27swnhw.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplkk19pke.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmplkk19pke.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmplkk19pke.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa9voewno.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpa9voewno.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpa9voewno.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate(4) == 288\n    assert\
    \ candidate(5) == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1)\
    \ == 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0maxe69o.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp0maxe69o.py\", line 24,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp0maxe69o.py\"\
    , line 18, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnx1prrew.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpnx1prrew.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpnx1prrew.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    # YOUR CODE HERE\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb2n6s2q4.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpb2n6s2q4.py\", line 24,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpb2n6s2q4.py\"\
    , line 18, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxf6egxcm.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxf6egxcm.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxf6egxcm.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpekhin97d.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpekhin97d.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpekhin97d.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpul27v2ck.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpul27v2ck.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpul27v2ck.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9djk53wk.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp9djk53wk.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp9djk53wk.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd13hh7yb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpd13hh7yb.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpd13hh7yb.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp51kuxo52.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp51kuxo52.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp51kuxo52.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6v3203b0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6v3203b0.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp6v3203b0.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0itbn9fq.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp0itbn9fq.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp0itbn9fq.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3mwidulw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3mwidulw.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp3mwidulw.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"\
    n must be positive\")\n    elif n == 0:\n        return 1\n    else:\n       \
    \ return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert candidate(4)\
    \ == 288\n    assert candidate(5) == 34560\n    assert candidate(7) == 125411328000\n\
    \    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx1n_slel.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpx1n_slel.py\", line 28,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpx1n_slel.py\"\
    , line 22, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc3bur3zd.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpc3bur3zd.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpc3bur3zd.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk6skz6hz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpk6skz6hz.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpk6skz6hz.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphlx4ysqn.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmphlx4ysqn.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmphlx4ysqn.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"\
    n must be greater than 0\")\n    if n == 0:\n        return 1\n    return n *\
    \ special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert candidate(4)\
    \ == 288\n    assert candidate(5) == 34560\n    assert candidate(7) == 125411328000\n\
    \    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnbah3vvp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnbah3vvp.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpnbah3vvp.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv9z_6my2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpv9z_6my2.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpv9z_6my2.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeudojt15.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpeudojt15.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpeudojt15.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxskk4hnb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxskk4hnb.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxskk4hnb.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg6k1nbfz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg6k1nbfz.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpg6k1nbfz.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqyd435r3.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpqyd435r3.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpqyd435r3.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ogtj9kw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2ogtj9kw.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp2ogtj9kw.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiih37ko3.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpiih37ko3.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiih37ko3.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi1t7he20.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpi1t7he20.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpi1t7he20.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dh99ea7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp9dh99ea7.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp9dh99ea7.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj6g75o2k.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpj6g75o2k.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpj6g75o2k.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"\
    n must be a positive integer\")\n    if n == 0:\n        return 1\n    else:\n\
    \        return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp33_km72g.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp33_km72g.py\", line 28,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp33_km72g.py\"\
    , line 22, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7yi8kmb_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp7yi8kmb_.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp7yi8kmb_.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmn2u2qte.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpmn2u2qte.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpmn2u2qte.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ptrb130.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_ptrb130.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp_ptrb130.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp07eict40.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp07eict40.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp07eict40.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcht_y5v6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcht_y5v6.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpcht_y5v6.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb04a_t5s.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpb04a_t5s.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpb04a_t5s.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvb98bo9f.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpvb98bo9f.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpvb98bo9f.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd0_a56h_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpd0_a56h_.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpd0_a56h_.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbi5kg4be.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpbi5kg4be.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpbi5kg4be.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8f0_1zcu.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8f0_1zcu.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8f0_1zcu.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2sg4e7_7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2sg4e7_7.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp2sg4e7_7.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptymyvh34.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptymyvh34.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmptymyvh34.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjieo0t98.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpjieo0t98.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpjieo0t98.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkol1mxfj.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpkol1mxfj.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpkol1mxfj.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl0ry8ftg.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpl0ry8ftg.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpl0ry8ftg.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_t0vnaj.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpm_t0vnaj.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpm_t0vnaj.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy43jk227.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpy43jk227.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpy43jk227.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp63rubkf5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp63rubkf5.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp63rubkf5.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3olygmrz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3olygmrz.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp3olygmrz.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2lvpotb3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2lvpotb3.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp2lvpotb3.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqx8lwtto.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpqx8lwtto.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpqx8lwtto.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp02gzbwnm.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp02gzbwnm.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp02gzbwnm.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph1n560oc.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmph1n560oc.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmph1n560oc.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl2x6agre.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpl2x6agre.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpl2x6agre.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiepx4ia8.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpiepx4ia8.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpiepx4ia8.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_fqq0fb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpq_fqq0fb.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpq_fqq0fb.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzlrq39bj.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpzlrq39bj.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpzlrq39bj.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplt9uesi5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmplt9uesi5.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmplt9uesi5.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9q9nubqx.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp9q9nubqx.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp9q9nubqx.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk2lzxe_a.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpk2lzxe_a.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpk2lzxe_a.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr8cx_fxb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr8cx_fxb.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpr8cx_fxb.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"\
    n must be greater than 0\")\n    if n == 0:\n        return 1\n    return n *\
    \ special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert candidate(4)\
    \ == 288\n    assert candidate(5) == 34560\n    assert candidate(7) == 125411328000\n\
    \    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8alvrxto.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp8alvrxto.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8alvrxto.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwc7nez95.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpwc7nez95.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpwc7nez95.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvocoilrt.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpvocoilrt.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpvocoilrt.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplnjnto2k.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplnjnto2k.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmplnjnto2k.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqsplhk4j.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqsplhk4j.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpqsplhk4j.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1nn8xolg.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1nn8xolg.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp1nn8xolg.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2_393f9a.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2_393f9a.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp2_393f9a.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4719e5oj.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp4719e5oj.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp4719e5oj.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzl_slbrm.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpzl_slbrm.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpzl_slbrm.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2x3dpm8t.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2x3dpm8t.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp2x3dpm8t.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeuuqzyjr.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpeuuqzyjr.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpeuuqzyjr.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ujuq251.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp6ujuq251.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp6ujuq251.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2r5uzqr7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2r5uzqr7.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp2r5uzqr7.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1,\
    \ n + 1):\n        result *= factorial(i)\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe46jjhee.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpe46jjhee.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpe46jjhee.py\"\
    , line 20, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpe46jjhee.py\"\
    , line 15, in special_factorial\n    result *= factorial(i)\nNameError: name 'factorial'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9cva43va.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp9cva43va.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp9cva43va.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmfsnlwmd.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpmfsnlwmd.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpmfsnlwmd.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplyt1t0f5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmplyt1t0f5.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmplyt1t0f5.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2gcpppov.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2gcpppov.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp2gcpppov.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7eicx9c.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmph7eicx9c.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmph7eicx9c.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvtlld8dz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpvtlld8dz.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpvtlld8dz.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqfch9u8z.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpqfch9u8z.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpqfch9u8z.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjois8_5y.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpjois8_5y.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpjois8_5y.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkgpd4pgp.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpkgpd4pgp.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpkgpd4pgp.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdgdbj9t9.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpdgdbj9t9.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpdgdbj9t9.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzc7ke3ke.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzc7ke3ke.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpzc7ke3ke.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk9drejk2.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpk9drejk2.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpk9drejk2.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64p6xqgb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp64p6xqgb.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp64p6xqgb.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate(4) == 288\n    assert\
    \ candidate(5) == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1)\
    \ == 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpss2fgr4k.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpss2fgr4k.py\", line 24,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpss2fgr4k.py\"\
    , line 18, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8yrzcei5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8yrzcei5.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8yrzcei5.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6_q1uu00.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp6_q1uu00.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp6_q1uu00.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju4izoj3.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpju4izoj3.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpju4izoj3.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwd_4tsnp.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpwd_4tsnp.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpwd_4tsnp.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbe35c0qa.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpbe35c0qa.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpbe35c0qa.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprx384tv_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprx384tv_.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmprx384tv_.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpig_31_dl.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpig_31_dl.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpig_31_dl.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3iw51jt4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3iw51jt4.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp3iw51jt4.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpay_bt99h.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpay_bt99h.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpay_bt99h.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpopeczxmo.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpopeczxmo.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpopeczxmo.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm4v9e73m.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpm4v9e73m.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpm4v9e73m.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8s1qztxv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8s1qztxv.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp8s1qztxv.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpohitfgol.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpohitfgol.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpohitfgol.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return factorial(n) * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpep0furms.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpep0furms.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpep0furms.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpep0furms.py\"\
    , line 16, in special_factorial\n    return factorial(n) * special_factorial(n-1)\n\
    NameError: name 'factorial' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0beqbiyj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp0beqbiyj.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp0beqbiyj.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n-1)\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsuvv_072.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpsuvv_072.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpsuvv_072.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  exit_code: -1
  status: Exception
