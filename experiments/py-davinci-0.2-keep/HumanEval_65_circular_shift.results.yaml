name: HumanEval_65_circular_shift
language: python
results:
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    shift = shift % len(x_str)\n  \
    \  return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzo6hipst.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpzo6hipst.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpzo6hipst.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift >= len(digits):\n   \
    \     return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbuy19ouf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpbuy19ouf.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpbuy19ouf.py\", line\
    \ 18, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift %= len(digits)\n    return\
    \ digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcefhaomi.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpcefhaomi.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpcefhaomi.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuwygk7f0.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpuwygk7f0.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpuwygk7f0.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    shift = shift % len(x_str)\n  \
    \  return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp__he0_rs.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp__he0_rs.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp__he0_rs.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuktn1ze6.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpuktn1ze6.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpuktn1ze6.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbdqwd4pk.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpbdqwd4pk.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpbdqwd4pk.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    num_digits = len(str(x))\n    if shift > num_digits:\n\
    \        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvxucarvy.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpvxucarvy.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpvxucarvy.py\", line\
    \ 17, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2k_7wphp.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp2k_7wphp.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp2k_7wphp.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift == 0:\n        return str(x)\n    digits =\
    \ str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    return\
    \ digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift %= len(digits)\n    return\
    \ digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu3v9u01n.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpu3v9u01n.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpu3v9u01n.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = [int(d) for d in str(x)]\n    if shift > len(digits):\n\
    \        return \"\".join(str(d) for d in reversed(digits))\n    return \"\".join(str(d)\
    \ for d in digits[-shift:] + digits[:-shift])\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnozcuj_5.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpnozcuj_5.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpnozcuj_5.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    shift = shift % len(x_str)\n  \
    \  return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0qgwd6az.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp0qgwd6az.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp0qgwd6az.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return\
    \ x[::-1]\n    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    # TODO: implement this function\n    pass\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpafbdzs0u.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpafbdzs0u.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpafbdzs0u.py\", line\
    \ 15, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp57al9dcx.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp57al9dcx.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp57al9dcx.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8k2_bh2u.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp8k2_bh2u.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp8k2_bh2u.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgh48p3g7.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpgh48p3g7.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpgh48p3g7.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgc3eg1kd.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpgc3eg1kd.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpgc3eg1kd.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    shift = shift % len(x_str)\n  \
    \  return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphv_8j7an.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmphv_8j7an.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmphv_8j7an.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbpowvkkn.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpbpowvkkn.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpbpowvkkn.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return\
    \ x[::-1]\n    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    num_digits = len(str(x))\n    shift = shift % num_digits\n\
    \    return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyrdjv087.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpyrdjv087.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpyrdjv087.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    shift = shift % len(x_str)\n  \
    \  return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp51__gxsl.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp51__gxsl.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp51__gxsl.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptondocys.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmptondocys.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmptondocys.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpttpf1ah6.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpttpf1ah6.py\", line 21,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpttpf1ah6.py\", line\
    \ 16, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_tyhw_y9.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp_tyhw_y9.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp_tyhw_y9.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ylsr297.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp5ylsr297.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp5ylsr297.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    # TODO\n    # Hint: use the divmod function\n    #\
    \ Hint: use the string formatting function\n    # Hint: use the reversed function\n\
    \    # Hint: use the join function\n    # Hint: use the str function\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjs8sjya_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpjs8sjya_.py\", line 27,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpjs8sjya_.py\", line\
    \ 20, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift >= len(digits):\n   \
    \     return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdn_e2nmg.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpdn_e2nmg.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpdn_e2nmg.py\", line\
    \ 18, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return\
    \ x[::-1]\n    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplaqwi9yt.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmplaqwi9yt.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmplaqwi9yt.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm8dg58w4.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpm8dg58w4.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpm8dg58w4.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift %= len(digits)\n    return\
    \ digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp597n539b.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp597n539b.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp597n539b.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    shift = shift % len(x_str)\n  \
    \  return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppxhvs99z.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmppxhvs99z.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmppxhvs99z.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift %= len(digits)\n    return\
    \ digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8w5hc4e.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpv8w5hc4e.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpv8w5hc4e.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift >= len(digits):\n   \
    \     return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp08vsirpc.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp08vsirpc.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp08vsirpc.py\", line\
    \ 18, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    shift = shift % len(x_str)\n  \
    \  return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmvix063q.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpmvix063q.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpmvix063q.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    num_digits = len(str(x))\n    shift = shift % num_digits\n\
    \    if shift == 0:\n        return str(x)\n    else:\n        return str(x)[shift:]\
    \ + str(x)[:shift]\n\n\ndef check(candidate):\n    assert candidate(100, 2) ==\
    \ '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n\
    \    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7nm7cti2.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp7nm7cti2.py\", line 26,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp7nm7cti2.py\", line\
    \ 19, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt_k0ob05.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpt_k0ob05.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpt_k0ob05.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = [int(d) for d in str(x)]\n    if shift > len(digits):\n\
    \        return ''.join(map(str, digits[::-1]))\n    else:\n        return ''.join(map(str,\
    \ digits[-shift:] + digits[:-shift]))\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    shift = shift % len(x_str)\n  \
    \  return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphm7rstjj.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmphm7rstjj.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmphm7rstjj.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcbfy9b92.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpcbfy9b92.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpcbfy9b92.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = list(str(x))\n    if shift > len(digits):\n\
    \        digits.reverse()\n    else:\n        digits = digits[-shift:] + digits[:-shift]\n\
    \    return \"\".join(digits)\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return\
    \ s[::-1]\n    return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9qzsv0mf.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9qzsv0mf.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp9qzsv0mf.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmply9kq4nc.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmply9kq4nc.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmply9kq4nc.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjig417dt.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpjig417dt.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpjig417dt.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
