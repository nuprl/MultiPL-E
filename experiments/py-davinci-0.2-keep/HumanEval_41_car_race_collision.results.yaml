name: HumanEval_41_car_race_collision
language: python
results:
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb4sp5wsu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpb4sp5wsu.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpb4sp5wsu.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5zwh5t1n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5zwh5t1n.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp5zwh5t1n.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppbmoduhr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppbmoduhr.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmppbmoduhr.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmup1ylbg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmup1ylbg.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpmup1ylbg.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdgdgzqpn.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpdgdgzqpn.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpdgdgzqpn.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptsa0s53_.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptsa0s53_.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmptsa0s53_.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjuox8afp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjuox8afp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpjuox8afp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9mwmrisq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp9mwmrisq.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp9mwmrisq.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5hi34xxy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5hi34xxy.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp5hi34xxy.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbi63k56h.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpbi63k56h.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpbi63k56h.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc3w_0lo5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpc3w_0lo5.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpc3w_0lo5.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvrgrpv5n.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpvrgrpv5n.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpvrgrpv5n.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp80xnv2q2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp80xnv2q2.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp80xnv2q2.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt03o2zqp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpt03o2zqp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpt03o2zqp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_r2vv0n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpq_r2vv0n.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpq_r2vv0n.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfk6e94u_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfk6e94u_.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpfk6e94u_.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyn0o_ao2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyn0o_ao2.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpyn0o_ao2.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_0m_tu9y.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_0m_tu9y.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp_0m_tu9y.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpycyuoozp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpycyuoozp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpycyuoozp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0e7rvqer.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp0e7rvqer.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp0e7rvqer.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppgqllv3u.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppgqllv3u.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmppgqllv3u.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ptl2pn4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7ptl2pn4.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7ptl2pn4.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_fthxlvq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp_fthxlvq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp_fthxlvq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # The idea is to sort\
    \ the cars by their positions.  Then, we can iterate through\n    # the cars and\
    \ check if the next car is moving in the opposite direction.\n    # If so, we\
    \ have a collision.\n    #\n    # We can do this in O(n log n) time.\n    left_to_right_cars\
    \ = [random.randint(0, 100) for _ in range(n)]\n    right_to_left_cars = [random.randint(0,\
    \ 100) for _ in range(n)]\n\n    left_to_right_cars.sort()\n    right_to_left_cars.sort()\n\
    \n    collisions = 0\n    for i in range(n):\n        if left_to_right_cars[i]\
    \ < right_to_left_cars[i]:\n            collisions += 1\n\n    return collisions\n\
    \n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf0idjm8c.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpf0idjm8c.py\", line 40,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpf0idjm8c.py\"\
    , line 33, in check\n    assert candidate(2) == 4\n  File \"/tmp/tmpf0idjm8c.py\"\
    , line 18, in car_race_collision\n    left_to_right_cars = [random.randint(0,\
    \ 100) for _ in range(n)]\n  File \"/tmp/tmpf0idjm8c.py\", line 18, in <listcomp>\n\
    \    left_to_right_cars = [random.randint(0, 100) for _ in range(n)]\nNameError:\
    \ name 'random' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpumxzpcz7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpumxzpcz7.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpumxzpcz7.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5kfdanlp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5kfdanlp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp5kfdanlp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4)\
    \ == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\ndef\
    \ test_check():\n    check(car_race_collision)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_j2_2vo.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpg_j2_2vo.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpg_j2_2vo.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return 0\n\n\ndef check(candidate):\n\
    \    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4)\
    \ == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\ndef\
    \ test_check():\n    check(car_race_collision)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_dddi7yi.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp_dddi7yi.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp_dddi7yi.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3h6oxidq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3h6oxidq.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp3h6oxidq.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2nxah3jb.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2nxah3jb.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp2nxah3jb.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeh76k9dy.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpeh76k9dy.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpeh76k9dy.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcnh7i242.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcnh7i242.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpcnh7i242.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpec0oyjzu.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpec0oyjzu.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpec0oyjzu.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptrm1gg51.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptrm1gg51.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmptrm1gg51.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv5vfh_a2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpv5vfh_a2.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpv5vfh_a2.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpluhyj8q_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpluhyj8q_.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpluhyj8q_.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp731loymg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp731loymg.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp731loymg.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzfzqx5c9.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzfzqx5c9.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpzfzqx5c9.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphv12s83g.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmphv12s83g.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmphv12s83g.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ahvh2vm.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5ahvh2vm.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp5ahvh2vm.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr07ytgd2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpr07ytgd2.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpr07ytgd2.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1)\n\
    \n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz66jws4b.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpz66jws4b.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpz66jws4b.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4psppc8g.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4psppc8g.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp4psppc8g.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpus6bhztj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpus6bhztj.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpus6bhztj.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    # Hint: You can use a dictionary to keep track of the cars.\n\
    \    #       You can use a list to keep track of the cars.\n    #       You can\
    \ use a set to keep track of the cars.\n    #       You can use a tuple to keep\
    \ track of the cars.\n    #       You can use a class to keep track of the cars.\n\
    \    #       You can use a namedtuple to keep track of the cars.\n    #      \
    \ You can use a defaultdict to keep track of the cars.\n    #       You can use\
    \ a Counter to keep track of the cars.\n    #       You can use a deque to keep\
    \ track of the cars.\n    #       You can use a heap to keep track of the cars.\n\
    \    #       You can use a queue to keep track of the cars.\n    #       You can\
    \ use a stack to keep track of the cars.\n    #       You can use a priority queue\
    \ to keep track of the cars.\n    #       You can use a set to keep track of the\
    \ cars.\n    #       You can use a tree to keep track of the cars.\n    #    \
    \   You can use a graph to keep track of the cars.\n    #       You can use a\
    \ linked list to keep track of the cars.\n    #       You can use a doubly linked\
    \ list to keep track of the cars.\n    #       You can use a circular linked list\
    \ to keep track of the cars.\n    #       You can use a doubly circular linked\
    \ list to keep track of the cars.\n    #       You can use a doubly circular linked\
    \ list to keep track of the cars.\n    #       You can use a doubly circular linked\
    \ list to keep track of the cars.\n    #       You can use a doubly circular linked\
    \ list to keep track of the cars.\n    #       You can use a doubly circular linked\
    \ list to keep track of the cars.\n    #       You can use a doubly circular linked\
    \ list to keep track of the cars.\n    #       You can use a doubly circular linked\
    \ list to keep track of the cars.\n    #       You can use a doubly circular linked\
    \ list to keep track of the cars.\n    #       You can use a doubly circular linked\
    \ list to keep track of the cars.\n    #       You\ndef check(candidate):\n  \
    \  assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4)\
    \ == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\ndef\
    \ test_check():\n    check(car_race_collision)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphmx674bs.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmphmx674bs.py\", line 51,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmphmx674bs.py\"\
    , line 44, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrffpe5j.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpfrffpe5j.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpfrffpe5j.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfqxe_lj9.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfqxe_lj9.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpfqxe_lj9.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptzmcebuq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptzmcebuq.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmptzmcebuq.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoqgq12qs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpoqgq12qs.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpoqgq12qs.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfg54v8w2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfg54v8w2.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpfg54v8w2.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjk2ybwfv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjk2ybwfv.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpjk2ybwfv.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk4u6vyg_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpk4u6vyg_.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpk4u6vyg_.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7kg3wb5h.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7kg3wb5h.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7kg3wb5h.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nss9s5e.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9nss9s5e.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp9nss9s5e.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwy1v4173.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwy1v4173.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpwy1v4173.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_x8k0m98.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_x8k0m98.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp_x8k0m98.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphm5mjrqr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphm5mjrqr.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmphm5mjrqr.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8n322dts.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp8n322dts.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp8n322dts.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp371r9bx4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp371r9bx4.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp371r9bx4.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1)\n\
    \n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph15x53c8.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmph15x53c8.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmph15x53c8.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5y36s_cn.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5y36s_cn.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp5y36s_cn.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpif7fc6pl.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpif7fc6pl.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpif7fc6pl.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjtkskh3w.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpjtkskh3w.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpjtkskh3w.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1)\n\
    \n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz8mvei3z.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpz8mvei3z.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpz8mvei3z.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ns0q5ts.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp_ns0q5ts.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp_ns0q5ts.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpptwcf3fr.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpptwcf3fr.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpptwcf3fr.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphw0j7ld5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphw0j7ld5.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmphw0j7ld5.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj6ne5jo7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpj6ne5jo7.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpj6ne5jo7.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    # Hint: You may want to use the function `car_race_collision_helper`\n\
    \    #       defined below.\n    return car_race_collision_helper(n, 0, 0)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5jifbx_7.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5jifbx_7.py\", line 27,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp5jifbx_7.py\"\
    , line 20, in check\n    assert candidate(2) == 4\n  File \"/tmp/tmp5jifbx_7.py\"\
    , line 16, in car_race_collision\n    return car_race_collision_helper(n, 0, 0)\n\
    NameError: name 'car_race_collision_helper' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcnaqh5wk.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcnaqh5wk.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpcnaqh5wk.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt9sed2ft.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpt9sed2ft.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpt9sed2ft.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprlb825bu.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmprlb825bu.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmprlb825bu.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo5tdb4r8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpo5tdb4r8.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpo5tdb4r8.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmg5_46o6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmg5_46o6.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpmg5_46o6.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcl4phmlx.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpcl4phmlx.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpcl4phmlx.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphmecboms.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphmecboms.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmphmecboms.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqu6gp0x2.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpqu6gp0x2.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpqu6gp0x2.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptldysd73.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptldysd73.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmptldysd73.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg16fgm0j.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpg16fgm0j.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpg16fgm0j.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    left_to_right = []\n\
    \    right_to_left = []\n    for i in range(n):\n        left_to_right.append(i)\n\
    \        right_to_left.append(n - i - 1)\n    left_to_right.sort()\n    right_to_left.sort()\n\
    \    collisions = 0\n    for i in range(n):\n        if left_to_right[i] == right_to_left[i]:\n\
    \            collisions += 1\n    return collisions\n\n\ndef check(candidate):\n\
    \    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4)\
    \ == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\ndef\
    \ test_check():\n    check(car_race_collision)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqbbvi0_z.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqbbvi0_z.py\", line 35,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpqbbvi0_z.py\"\
    , line 28, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    if n == 0:\n       \
    \ return 0\n    elif n == 1:\n        return 0\n    else:\n        return n -\
    \ 1 + car_race_collision(n - 1)\n\n\ndef check(candidate):\n    assert candidate(2)\
    \ == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert\
    \ candidate(8) == 64\n    assert candidate(10) == 100\n\ndef test_check():\n \
    \   check(car_race_collision)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4utyej92.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4utyej92.py\", line 29,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp4utyej92.py\"\
    , line 22, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphzq36nmq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphzq36nmq.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmphzq36nmq.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwhrueuad.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwhrueuad.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpwhrueuad.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgxjmmxrz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpgxjmmxrz.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpgxjmmxrz.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy2s5vhz7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpy2s5vhz7.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpy2s5vhz7.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbzu4r0n3.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpbzu4r0n3.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpbzu4r0n3.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_eii5j5c.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_eii5j5c.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp_eii5j5c.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp12wz_m5q.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp12wz_m5q.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp12wz_m5q.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1157uo8q.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1157uo8q.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp1157uo8q.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ko44p17.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1ko44p17.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp1ko44p17.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_6knion4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_6knion4.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp_6knion4.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeh37_7oj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpeh37_7oj.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpeh37_7oj.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphn7h85r5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphn7h85r5.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmphn7h85r5.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkob_497w.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkob_497w.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpkob_497w.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjw685a5r.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjw685a5r.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpjw685a5r.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    # Hint: Use a priority queue.\n    # Hint: Use a dictionary to\
    \ keep track of the cars that are moving right to left.\n    # Hint: Use a dictionary\
    \ to keep track of the cars that are moving left to right.\n    # Hint: Use a\
    \ dictionary to keep track of the cars that are moving right to left.\n    # Hint:\
    \ Use a dictionary to keep track of the cars that are moving left to right.\n\
    \    # Hint: Use a dictionary to keep track of the cars that are moving right\
    \ to left.\n    # Hint: Use a dictionary to keep track of the cars that are moving\
    \ left to right.\n    # Hint: Use a dictionary to keep track of the cars that\
    \ are moving right to left.\n    # Hint: Use a dictionary to keep track of the\
    \ cars that are moving left to right.\n    # Hint: Use a dictionary to keep track\
    \ of the cars that are moving right to left.\n    # Hint: Use a dictionary to\
    \ keep track of the cars that are moving left to right.\n    # Hint: Use a dictionary\
    \ to keep track of the cars that are moving right to left.\n    # Hint: Use a\
    \ dictionary to keep track of the cars that are moving left to right.\n    # Hint:\
    \ Use a dictionary to keep track of the cars that are moving right to left.\n\
    \    # Hint: Use a dictionary to keep track of the cars that are moving left to\
    \ right.\n    # Hint: Use a dictionary to keep track of the cars that are moving\
    \ right to left.\n    # Hint: Use a dictionary to keep track of the cars that\
    \ are moving left to right.\n    # Hint: Use a dictionary to keep track of the\
    \ cars that are moving right to left.\n    # Hint: Use a dictionary to keep track\
    \ of the cars that are moving left to right.\n    # Hint: Use a dictionary to\
    \ keep track of the cars that are moving right to left.\n    # Hint: Use a dictionary\
    \ to keep track of the cars that are moving left to right.\n    # Hint: Use a\
    \ dictionary to keep track of the cars that are moving right to left.\n    # Hint:\
    \ Use a dictionary to keep track of the cars that are moving left to right.\n\
    \    # Hint: Use\ndef check(candidate):\n    assert candidate(2) == 4\n    assert\
    \ candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) ==\
    \ 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5xoizwwq.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp5xoizwwq.py\", line 46,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp5xoizwwq.py\"\
    , line 39, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # We can use a set to\
    \ store the positions of the cars that are moving left to right.\n    # We can\
    \ use a list to store the positions of the cars that are moving right to left.\n\
    \    # We can use a list to store the positions of the cars that are moving left\
    \ to right.\n    # We can use a list to store the positions of the cars that are\
    \ moving right to left.\n    # We can use a list to store the positions of the\
    \ cars that are moving right to left.\n    # We can use a list to store the positions\
    \ of the cars that are moving right to left.\n    # We can use a list to store\
    \ the positions of the cars that are moving right to left.\n    # We can use a\
    \ list to store the positions of the cars that are moving right to left.\n   \
    \ # We can use a list to store the positions of the cars that are moving right\
    \ to left.\n    # We can use a list to store the positions of the cars that are\
    \ moving right to left.\n    # We can use a list to store the positions of the\
    \ cars that are moving right to left.\n    # We can use a list to store the positions\
    \ of the cars that are moving right to left.\n    # We can use a list to store\
    \ the positions of the cars that are moving right to left.\n    # We can use a\
    \ list to store the positions of the cars that are moving right to left.\n   \
    \ # We can use a list to store the positions of the cars that are moving right\
    \ to left.\n    # We can use a list to store the positions of the cars that are\
    \ moving right to left.\n    # We can use a list to store the positions of the\
    \ cars that are moving right to left.\n    # We can use a list to store the positions\
    \ of the cars that are moving right to left.\n    # We can use a list to store\
    \ the positions of the cars that are moving right to left.\n    # We can use a\
    \ list to store the positions of the cars that are moving right to left.\n   \
    \ # We can use a list to store the positions of the cars that are moving right\
    \ to left.\n    # We can use a list to store the positions of the cars that are\
    \ moving right to left.\n    # We can use a list to store the positions of the\
    \ cars that are moving right to left.\n    # We can use\ndef check(candidate):\n\
    \    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4)\
    \ == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\ndef\
    \ test_check():\n    check(car_race_collision)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuz_z0qw0.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpuz_z0qw0.py\", line 45,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpuz_z0qw0.py\"\
    , line 38, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz29bsu7w.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpz29bsu7w.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpz29bsu7w.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1)\n\
    \n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8dlcoczk.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp8dlcoczk.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp8dlcoczk.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrzbnrlz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpgrzbnrlz.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpgrzbnrlz.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq25qd4s9.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpq25qd4s9.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpq25qd4s9.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dofuocs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp9dofuocs.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp9dofuocs.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5kg9ein2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5kg9ein2.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp5kg9ein2.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_ax3kib.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmps_ax3kib.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmps_ax3kib.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt3j2_lmy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpt3j2_lmy.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpt3j2_lmy.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvjv8phak.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpvjv8phak.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpvjv8phak.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqq15l8rj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqq15l8rj.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpqq15l8rj.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmhtsravu.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpmhtsravu.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpmhtsravu.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert\
    \ candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) ==\
    \ 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmperba_h7o.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmperba_h7o.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmperba_h7o.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpafnlkkjx.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpafnlkkjx.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpafnlkkjx.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfipz3dbn.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfipz3dbn.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpfipz3dbn.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnpme4edm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpnpme4edm.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpnpme4edm.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx544xyps.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpx544xyps.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpx544xyps.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpithql1lp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpithql1lp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpithql1lp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0dmytvv5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp0dmytvv5.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp0dmytvv5.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx4nn38yp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpx4nn38yp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpx4nn38yp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp77963fea.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp77963fea.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp77963fea.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfmyj4fx7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfmyj4fx7.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpfmyj4fx7.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92n_1i63.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp92n_1i63.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp92n_1i63.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiyuh907u.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpiyuh907u.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpiyuh907u.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgmdylii5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpgmdylii5.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpgmdylii5.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5_23mp9d.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5_23mp9d.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp5_23mp9d.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp50l4iusm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp50l4iusm.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp50l4iusm.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4px8slen.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4px8slen.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp4px8slen.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb1o6jy7v.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpb1o6jy7v.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpb1o6jy7v.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj4y_ept0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpj4y_ept0.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpj4y_ept0.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6uuqb8rg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6uuqb8rg.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp6uuqb8rg.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return 0\n\n\ndef check(candidate):\n\
    \    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4)\
    \ == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\ndef\
    \ test_check():\n    check(car_race_collision)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp019ll1x0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp019ll1x0.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp019ll1x0.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0xjwgqpp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp0xjwgqpp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp0xjwgqpp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk71_ilfz.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpk71_ilfz.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpk71_ilfz.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0g2qgq3v.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp0g2qgq3v.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp0g2qgq3v.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wj5_oqz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4wj5_oqz.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp4wj5_oqz.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptp24w3ig.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptp24w3ig.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmptp24w3ig.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5prrv7wq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5prrv7wq.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp5prrv7wq.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1p34lu00.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1p34lu00.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp1p34lu00.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdmk8qoat.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpdmk8qoat.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpdmk8qoat.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1mj6lvfj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1mj6lvfj.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp1mj6lvfj.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpep98mcav.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpep98mcav.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpep98mcav.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0fvrxqoc.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp0fvrxqoc.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp0fvrxqoc.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp57r1xhba.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp57r1xhba.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp57r1xhba.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp__mzww0p.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp__mzww0p.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp__mzww0p.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp20pkk73x.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp20pkk73x.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp20pkk73x.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpix72azo4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpix72azo4.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpix72azo4.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprp08sipe.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmprp08sipe.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmprp08sipe.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8kaplbd4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8kaplbd4.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp8kaplbd4.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmvkp1ygz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmvkp1ygz.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpmvkp1ygz.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvh752spc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpvh752spc.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpvh752spc.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprffutvbx.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmprffutvbx.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmprffutvbx.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_yfl5vpm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_yfl5vpm.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp_yfl5vpm.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvvj_294u.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpvvj_294u.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpvvj_294u.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqqkwbcof.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqqkwbcof.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpqqkwbcof.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsgu2tgdx.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpsgu2tgdx.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpsgu2tgdx.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3xatodan.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3xatodan.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp3xatodan.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdjax0ko8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpdjax0ko8.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpdjax0ko8.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpntmrfhgk.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpntmrfhgk.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpntmrfhgk.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyehxm8v_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyehxm8v_.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpyehxm8v_.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4xb4iib8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4xb4iib8.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp4xb4iib8.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0zmhih9y.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp0zmhih9y.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp0zmhih9y.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqlam16k.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpuqlam16k.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpuqlam16k.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj9u5apjl.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpj9u5apjl.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpj9u5apjl.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz4m48ufm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpz4m48ufm.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpz4m48ufm.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7qg46vn1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7qg46vn1.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp7qg46vn1.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ld1acyn.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp9ld1acyn.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp9ld1acyn.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb4sitke8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpb4sitke8.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpb4sitke8.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvl610xns.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpvl610xns.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpvl610xns.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptcy_iznq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptcy_iznq.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmptcy_iznq.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_jr2417.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpp_jr2417.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpp_jr2417.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2)\
    \ == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert\
    \ candidate(8) == 64\n    assert candidate(10) == 100\n\ndef test_check():\n \
    \   check(car_race_collision)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6yenb2k.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpm6yenb2k.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpm6yenb2k.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppa_h_4ta.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppa_h_4ta.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmppa_h_4ta.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8chnvu7q.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp8chnvu7q.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp8chnvu7q.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp570m1b9e.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp570m1b9e.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp570m1b9e.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf5ixpxrj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf5ixpxrj.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpf5ixpxrj.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return 0\n\n\ndef check(candidate):\n\
    \    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4)\
    \ == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\ndef\
    \ test_check():\n    check(car_race_collision)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxwv7noe5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxwv7noe5.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpxwv7noe5.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy5ozciw3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpy5ozciw3.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpy5ozciw3.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiis27js_.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpiis27js_.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpiis27js_.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) //\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3)\
    \ == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert\
    \ candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ct00pge.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5ct00pge.py\", line 24,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp5ct00pge.py\"\
    , line 17, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkmn6xxkr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkmn6xxkr.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpkmn6xxkr.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptjim6coh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptjim6coh.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmptjim6coh.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyk50rs9d.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyk50rs9d.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpyk50rs9d.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2uhmnzo7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2uhmnzo7.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp2uhmnzo7.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpta_vs7f5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpta_vs7f5.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpta_vs7f5.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz2sv5msp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpz2sv5msp.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpz2sv5msp.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmz_2_5fk.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmz_2_5fk.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpmz_2_5fk.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplse8xjv4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplse8xjv4.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmplse8xjv4.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3_2wjb2l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3_2wjb2l.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp3_2wjb2l.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpul93owsv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpul93owsv.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpul93owsv.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: Implement this\
    \ function.\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo5utu8qq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpo5utu8qq.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpo5utu8qq.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfh19ix7y.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfh19ix7y.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpfh19ix7y.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvhfnam_y.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpvhfnam_y.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpvhfnam_y.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpikqndxzz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpikqndxzz.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpikqndxzz.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp474791eo.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp474791eo.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp474791eo.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp__h13vi0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp__h13vi0.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp__h13vi0.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb3g77ids.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpb3g77ids.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpb3g77ids.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgg6562h.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptgg6562h.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmptgg6562h.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2chukmv2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2chukmv2.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp2chukmv2.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphem_f2zl.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphem_f2zl.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmphem_f2zl.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzv0296_e.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzv0296_e.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpzv0296_e.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3gm5it2u.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3gm5it2u.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmp3gm5it2u.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(2) ==\
    \ 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpexc_v6nv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpexc_v6nv.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpexc_v6nv.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\n\n    This function\
    \ outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this\
    \ function\n    pass\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n\
    \    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8)\
    \ == 64\n    assert candidate(10) == 100\n\ndef test_check():\n    check(car_race_collision)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbm5u461p.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpbm5u461p.py\", line 25,\
    \ in test_check\n    check(car_race_collision)\n  File \"/tmp/tmpbm5u461p.py\"\
    , line 18, in check\n    assert candidate(2) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
