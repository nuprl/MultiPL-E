name: HumanEval_59_largest_prime_factor
language: python
results:
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: You\
    \ can use the is_prime function you wrote in the previous question.\n    if is_prime(n):\n\
    \        return n\n    else:\n        for i in range(n - 1, 1, -1):\n        \
    \    if n % i == 0 and is_prime(i):\n                return i\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpegsrvl13.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpegsrvl13.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpegsrvl13.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpegsrvl13.py\"\
    , line 9, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n //\
    \ 2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n \
    \           return largest_prime_factor(n // i)\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i\
    \ == 0:\n            return largest_prime_factor(n // i)\n    return n\n\n\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: the\
    \ largest prime factor of n is the largest prime factor of n // 2\n    # if n\
    \ is even, and the largest prime factor of n is the largest prime\n    # factor\
    \ of (n + 1) // 2 if n is odd.\n    if n == 2:\n        return 2\n    if n % 2\
    \ == 0:\n        return largest_prime_factor(n // 2)\n    return largest_prime_factor((n\
    \ + 1) // 2)\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyrkq4e10.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyrkq4e10.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpyrkq4e10.py\"\
    , line 19, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n\
    \        raise ValueError(\"n must be greater than 1\")\n    if is_prime(n):\n\
    \        raise ValueError(\"n must not be a prime\")\n    factor = 2\n    while\
    \ n > 1:\n        if n % factor == 0:\n            n //= factor\n        else:\n\
    \            factor += 1\n    return factor\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptkmdg747.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptkmdg747.py\", line 29,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmptkmdg747.py\"\
    , line 22, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmptkmdg747.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 ==\
    \ 0:\n        return largest_prime_factor(n // 2)\n    for i in range(3, int(math.sqrt(n))\
    \ + 1, 2):\n        if n % i == 0:\n            return largest_prime_factor(n\
    \ // i)\n    return n\n\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu1zsfrht.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpu1zsfrht.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpu1zsfrht.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpu1zsfrht.py\"\
    , line 10, in largest_prime_factor\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: use\
    \ a helper function to find the smallest prime factor of n.\n    # If n is prime,\
    \ return n.\n    # Otherwise, return the largest prime factor of n // smallest_prime_factor(n)\n\
    \    if is_prime(n):\n        return n\n    else:\n        return largest_prime_factor(n\
    \ // smallest_prime_factor(n))\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6ke2ntw.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpz6ke2ntw.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpz6ke2ntw.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpz6ke2ntw.py\"\
    , line 11, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n //\
    \ 2)\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n\
    \            return largest_prime_factor(n // i)\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptywecvgq.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptywecvgq.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmptywecvgq.py\"\
    , line 19, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmptywecvgq.py\"\
    , line 12, in largest_prime_factor\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: You\
    \ may want to use the is_prime function you just wrote.\n    # Hint: You may want\
    \ to use the find_divisors function you just wrote.\n    # Hint: You may want\
    \ to use the max function.\n    # Hint: You may want to use the filter function.\n\
    \    # Hint: You may want to use the is_prime function you just wrote.\n    #\
    \ Hint: You may want to use the find_divisors function you just wrote.\n    #\
    \ Hint: You may want to use the max function.\n    # Hint: You may want to use\
    \ the filter function.\n    return max(filter(is_prime, find_divisors(n)))\n\n\
    \ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpefi9m3g5.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpefi9m3g5.py\", line 27,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpefi9m3g5.py\"\
    , line 20, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpefi9m3g5.py\"\
    , line 16, in largest_prime_factor\n    return max(filter(is_prime, find_divisors(n)))\n\
    NameError: name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor <= n:\n        if n % factor == 0:\n            n //= factor\n\
    \        else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n\
    \    return n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ largest prime factor of n.\n    # Start with the smallest prime factor, 2, and\
    \ repeatedly divide n by it.\n    # If n is not divisible by 2, then try the next\
    \ prime number, 3.\n    # If n is divisible by 2, then repeatedly divide n by\
    \ 2 until n is not\n    # divisible by 2.\n    # If n is not divisible by 3, then\
    \ try the next prime number, 5.\n    # If n is divisible by 3, then repeatedly\
    \ divide n by 3 until n is not\n    # divisible by 3.\n    # If n is not divisible\
    \ by 5, then try the next prime number, 7.\n    # If n is divisible by 5, then\
    \ repeatedly divide n by 5 until n is not\n    # divisible by 5.\n    # If n is\
    \ not divisible by 7, then try the next prime number, 11.\n    # If n is divisible\
    \ by 7, then repeatedly divide n by 7 until n is not\n    # divisible by 7.\n\
    \    # If n is not divisible by 11, then try the next prime number, 13.\n    #\
    \ If n is divisible by 11, then repeatedly divide n by 11 until n is not\n   \
    \ # divisible by 11.\n    # If n is not divisible by 13, then try the next prime\
    \ number, 17.\n    # If n is divisible by 13, then repeatedly divide n by 13 until\
    \ n is not\n    # divisible by 13.\n    # If n is not divisible by 17, then try\
    \ the next prime number, 19.\n    # If n is divisible by 17, then repeatedly divide\
    \ n by 17 until n is not\n    # divisible by 17.\n    # If n is not divisible\
    \ by 19, then try the next prime number, 23.\n    # If n is divisible by 19, then\
    \ repeatedly divide n by 19 until n is not\n    # divisible by 19.\n    # If n\
    \ is not divisible by 23, then try the next prime number, 29.\n    # If n is divisible\
    \ by 23, then repeatedly divide n by 23 until n is not\n    # divisible by 23.\n\
    \    # If n is not divisible by 29, then try the next prime number, 31.\n    #\
    \ If n is divisible by 29,\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp85q26qd_.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp85q26qd_.py\", line 47,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp85q26qd_.py\"\
    , line 40, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    # Hint: use the is_prime function you wrote in the previous\
    \ question\n    # Hint: use the get_factors function you wrote in the previous\
    \ question\n    # Hint: use the max function\n    # Hint: use a list comprehension\n\
    \    # Hint: use the filter function\n    # Hint: use the lambda function\n  \
    \  return max(filter(lambda x: is_prime(x), get_factors(n)))\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjkbn27v0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjkbn27v0.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpjkbn27v0.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpjkbn27v0.py\"\
    , line 15, in largest_prime_factor\n    return max(filter(lambda x: is_prime(x),\
    \ get_factors(n)))\nNameError: name 'get_factors' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n\
    \        return 1\n    for i in range(2, n):\n        if n % i == 0:\n       \
    \     return largest_prime_factor(n // i)\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n //\
    \ 2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n \
    \           return largest_prime_factor(n // i)\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n\n    factor = smallest_factor(n)\n    # If n is prime,\
    \ return n\n    if factor == n:\n        return n\n    # Otherwise, return the\
    \ largest prime factor of n / factor\n    return largest_prime_factor(n // factor)\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdxwtl94.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxdxwtl94.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpxdxwtl94.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpxdxwtl94.py\"\
    , line 9, in largest_prime_factor\n    factor = smallest_factor(n)\nNameError:\
    \ name 'smallest_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # We can start\
    \ at 2 and increment by 1, but it is faster to increment by 2\n    # because we\
    \ know that n is not a prime.\n    i = 2\n    while i * i <= n:\n        if n\
    \ % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n //\
    \ 2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n \
    \           return largest_prime_factor(n // i)\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor * factor <= n:\n        if n % factor == 0:\n            n //=\
    \ factor\n        else:\n            factor += 1\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n = n // factor\n\
    \        else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: use\
    \ the helper function is_prime\n    # Hint: use the helper function largest_prime_factor_helper\n\
    \    # Hint: use the helper function largest_prime_factor_helper\n    # Hint:\
    \ use the helper function largest_prime_factor_helper\n    # Hint: use the helper\
    \ function largest_prime_factor_helper\n    # Hint: use the helper function largest_prime_factor_helper\n\
    \    # Hint: use the helper function largest_prime_factor_helper\n    # Hint:\
    \ use the helper function largest_prime_factor_helper\n    # Hint: use the helper\
    \ function largest_prime_factor_helper\n    # Hint: use the helper function largest_prime_factor_helper\n\
    \    # Hint: use the helper function largest_prime_factor_helper\n    # Hint:\
    \ use the helper function largest_prime_factor_helper\n    # Hint: use the helper\
    \ function largest_prime_factor_helper\n    # Hint: use the helper function largest_prime_factor_helper\n\
    \    # Hint: use the helper function largest_prime_factor_helper\n    # Hint:\
    \ use the helper function largest_prime_factor_helper\n    # Hint: use the helper\
    \ function largest_prime_factor_helper\n    # Hint: use the helper function largest_prime_factor_helper\n\
    \    # Hint: use the helper function largest_prime_factor_helper\n    # Hint:\
    \ use the helper function largest_prime_factor_helper\n    # Hint: use the helper\
    \ function largest_prime_factor_helper\n    # Hint: use the helper function largest_prime_factor_helper\n\
    \    # Hint: use the helper function largest_prime_factor_helper\n    # Hint:\
    \ use the helper function largest_prime_factor_helper\n    # Hint: use the helper\
    \ function largest_prime_factor_helper\n    # Hint: use the helper function largest_prime_factor_helper\n\
    \    # Hint: use the helper function largest_prime_factor_helper\n    # Hint:\
    \ use the helper function largest_prime_factor_helper\n    # Hint: use the helper\
    \ function largest_prime\ndef check(candidate):\n    assert candidate(15) == 5\n\
    \    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi63ej01n.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpi63ej01n.py\", line 45,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpi63ej01n.py\"\
    , line 38, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n\
    \        return 0\n    if is_prime(n):\n        return n\n    for i in range(2,\
    \ int(n ** 0.5) + 1):\n        if n % i == 0:\n            return largest_prime_factor(n\
    \ // i)\n    return n\n\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6sp5du4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpi6sp5du4.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpi6sp5du4.py\"\
    , line 19, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpi6sp5du4.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    pass\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3g9kpled.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp3g9kpled.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp3g9kpled.py\"\
    , line 13, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest prime factor of n\n    factor = smallest_prime_factor(n)\n    # Divide\
    \ n by the smallest prime factor, and repeat until n is prime\n    while factor\
    \ < n:\n        n //= factor\n        factor = smallest_prime_factor(n)\n    return\
    \ n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz70h77lg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpz70h77lg.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpz70h77lg.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpz70h77lg.py\"\
    , line 9, in largest_prime_factor\n    factor = smallest_prime_factor(n)\nNameError:\
    \ name 'smallest_prime_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    pass\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6wsdabdf.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp6wsdabdf.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp6wsdabdf.py\"\
    , line 13, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n\n    factor = smallest_factor(n)\n    # If n is a prime,\
    \ then factor will be n\n    if factor == n:\n        return n\n    # Otherwise,\
    \ find the largest prime factor of n / factor\n    return largest_prime_factor(n\
    \ // factor)\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1vyxmvxl.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1vyxmvxl.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp1vyxmvxl.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp1vyxmvxl.py\"\
    , line 9, in largest_prime_factor\n    factor = smallest_factor(n)\nNameError:\
    \ name 'smallest_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime\
    \ = 1\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n   \
    \ factor = 3\n    while n > 1:\n        while n % factor == 0:\n            largest_prime\
    \ = factor\n            n //= factor\n        factor += 2\n    return largest_prime\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor <= n:\n        if n % factor == 0:\n            n //= factor\n\
    \        else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    pass\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpney3x9_r.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpney3x9_r.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpney3x9_r.py\"\
    , line 13, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime\
    \ = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_prime\
    \ = i\n            n = n // i\n            i = 2\n    return largest_prime\n\n\
    \ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiensyc71.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiensyc71.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpiensyc71.py\"\
    , line 19, in check\n    assert candidate(27) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n.\n    factor = smallest_factor(n)\n    # If n is a prime\
    \ number, return n.\n    if factor == n:\n        return n\n    # Otherwise, return\
    \ the largest prime factor of n divided by factor.\n    return largest_prime_factor(n\
    \ // factor)\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi9uefib1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpi9uefib1.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpi9uefib1.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpi9uefib1.py\"\
    , line 9, in largest_prime_factor\n    factor = smallest_factor(n)\nNameError:\
    \ name 'smallest_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if is_prime(n):\n\
    \        return n\n    else:\n        for i in range(2, n):\n            if n\
    \ % i == 0 and is_prime(i):\n                return largest_prime_factor(n //\
    \ i)\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxzngyv5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwxzngyv5.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpwxzngyv5.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpwxzngyv5.py\"\
    , line 8, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    pass\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz3cs6tqg.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpz3cs6tqg.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpz3cs6tqg.py\"\
    , line 13, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ largest prime factor of n\n    # Hint: use the is_prime function\n    # Hint:\
    \ use the smallest_divisor function\n    # Hint: use the largest_divisor function\n\
    \    # Hint: use the is_prime function\n    # Hint: use the smallest_divisor function\n\
    \    # Hint: use the largest_divisor function\n    # Hint: use the is_prime function\n\
    \    # Hint: use the smallest_divisor function\n    # Hint: use the largest_divisor\
    \ function\n    # Hint: use the is_prime function\n    # Hint: use the smallest_divisor\
    \ function\n    # Hint: use the largest_divisor function\n    # Hint: use the\
    \ is_prime function\n    # Hint: use the smallest_divisor function\n    # Hint:\
    \ use the largest_divisor function\n    # Hint: use the is_prime function\n  \
    \  # Hint: use the smallest_divisor function\n    # Hint: use the largest_divisor\
    \ function\n    # Hint: use the is_prime function\n    # Hint: use the smallest_divisor\
    \ function\n    # Hint: use the largest_divisor function\n    # Hint: use the\
    \ is_prime function\n    # Hint: use the smallest_divisor function\n    # Hint:\
    \ use the largest_divisor function\n    # Hint: use the is_prime function\n  \
    \  # Hint: use the smallest_divisor function\n    # Hint: use the largest_divisor\
    \ function\n    # Hint: use the is_prime function\n    # Hint: use the smallest_divisor\
    \ function\n    # Hint: use the largest_divisor function\n    # Hint: use the\
    \ is_prime function\n    # Hint: use the smallest_divisor function\n    # Hint:\
    \ use the largest_divisor function\n    # Hint: use the is_prime function\n  \
    \  # Hint: use the smallest_divisor function\n    # Hint: use the largest_divisor\
    \ function\n    # Hint: use the is_prime function\n    # Hint: use the smallest_\n\
    def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2l0cpb8n.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmp2l0cpb8n.py\", line 55,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp2l0cpb8n.py\"\
    , line 48, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: You\
    \ may want to use the is_prime function.\n    # Hint: You may want to use the\
    \ is_prime function.\n    # Hint: You may want to use the is_prime function.\n\
    \    # Hint: You may want to use the is_prime function.\n    # Hint: You may want\
    \ to use the is_prime function.\n    # Hint: You may want to use the is_prime\
    \ function.\n    # Hint: You may want to use the is_prime function.\n    # Hint:\
    \ You may want to use the is_prime function.\n    # Hint: You may want to use\
    \ the is_prime function.\n    # Hint: You may want to use the is_prime function.\n\
    \    # Hint: You may want to use the is_prime function.\n    # Hint: You may want\
    \ to use the is_prime function.\n    # Hint: You may want to use the is_prime\
    \ function.\n    # Hint: You may want to use the is_prime function.\n    # Hint:\
    \ You may want to use the is_prime function.\n    # Hint: You may want to use\
    \ the is_prime function.\n    # Hint: You may want to use the is_prime function.\n\
    \    # Hint: You may want to use the is_prime function.\n    # Hint: You may want\
    \ to use the is_prime function.\n    # Hint: You may want to use the is_prime\
    \ function.\n    # Hint: You may want to use the is_prime function.\n    # Hint:\
    \ You may want to use the is_prime function.\n    # Hint: You may want to use\
    \ the is_prime function.\n    # Hint: You may want to use the is_prime function.\n\
    \    # Hint: You may want to use the is_prime function.\n    # Hint: You may want\
    \ to use the is_prime function.\n    # Hint: You may want to use the is_prime\
    \ function.\n    # Hint: You may want to use the is_prime function.\n    # Hint:\
    \ You may want to use the is_prime function.\n    # Hint: You may want to use\
    \ the is_prime function.\n   \ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpszu8r4w4.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpszu8r4w4.py\", line 47,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpszu8r4w4.py\"\
    , line 40, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n\
    \    return n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor * factor <= n:\n        if n % factor == 0:\n            n //=\
    \ factor\n        else:\n            factor += 1\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n.\n    factor = smallest_factor(n)\n    # If n is prime,\
    \ return n.\n    if factor == n:\n        return n\n    # Return the largest prime\
    \ factor of n / factor.\n    return largest_prime_factor(n // factor)\n\n\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf0d_z681.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf0d_z681.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpf0d_z681.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpf0d_z681.py\"\
    , line 9, in largest_prime_factor\n    factor = smallest_factor(n)\nNameError:\
    \ name 'smallest_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n.\n    factor = 2\n    while n % factor != 0:\n        factor\
    \ += 1\n    # Divide n by the smallest factor.\n    n //= factor\n    # If n is\
    \ 1, the largest factor is the smallest factor.\n    if n == 1:\n        return\
    \ factor\n    # Otherwise, the largest factor is the largest factor of n.\n  \
    \  return largest_prime_factor(n)\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    pass\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0h__q93z.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp0h__q93z.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp0h__q93z.py\"\
    , line 13, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n\n    factor = smallest_factor(n)\n    # If n is prime,\
    \ return n\n    if factor == n:\n        return n\n    # Otherwise, return the\
    \ largest prime factor of n / factor\n    return largest_prime_factor(n // factor)\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcmvoyzwf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcmvoyzwf.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpcmvoyzwf.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpcmvoyzwf.py\"\
    , line 9, in largest_prime_factor\n    factor = smallest_factor(n)\nNameError:\
    \ name 'smallest_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n\
    \    return n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: use\
    \ the is_prime function you just wrote\n    # Hint: use the prime_factors function\
    \ you just wrote\n    # Hint: use the max function\n    return max(prime_factors(n))\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnhhaawll.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpnhhaawll.py\", line 22,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpnhhaawll.py\"\
    , line 15, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpnhhaawll.py\"\
    , line 11, in largest_prime_factor\n    return max(prime_factors(n))\nNameError:\
    \ name 'prime_factors' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 ==\
    \ 0:\n        return max(2, largest_prime_factor(n // 2))\n    for i in range(3,\
    \ int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return max(i,\
    \ largest_prime_factor(n // i))\n    return n\n\n\ndef check(candidate):\n   \
    \ assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv5dcu2bf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpv5dcu2bf.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpv5dcu2bf.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpv5dcu2bf.py\"\
    , line 10, in largest_prime_factor\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n\
    \    return n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n //\
    \ 2)\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n\
    \            return largest_prime_factor(n // i)\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf5qo3mrl.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpf5qo3mrl.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpf5qo3mrl.py\"\
    , line 19, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpf5qo3mrl.py\"\
    , line 12, in largest_prime_factor\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor * factor <= n:\n        if n % factor:\n            factor +=\
    \ 1\n        else:\n            n //= factor\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_factors\
    \ = []\n    for i in range(2, n):\n        if n % i == 0:\n            prime_factors.append(i)\n\
    \    return max(prime_factors)\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmqymd4fk.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpmqymd4fk.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpmqymd4fk.py\"\
    , line 17, in check\n    assert candidate(27) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n >\
    \ 1 and not is_prime(n)\n    factor = 2\n    while factor <= n:\n        if n\
    \ % factor == 0:\n            n //= factor\n        else:\n            factor\
    \ += 1\n    return factor\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp22tcdgqi.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp22tcdgqi.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp22tcdgqi.py\"\
    , line 19, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp22tcdgqi.py\"\
    , line 8, in largest_prime_factor\n    assert n > 1 and not is_prime(n)\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n.\n    factor = smallest_factor(n)\n    # If n is a prime,\
    \ return n.\n    if factor == n:\n        return n\n    # Otherwise, return the\
    \ largest prime factor of n/factor.\n    return largest_prime_factor(n // factor)\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64k6rwcr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp64k6rwcr.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp64k6rwcr.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp64k6rwcr.py\"\
    , line 9, in largest_prime_factor\n    factor = smallest_factor(n)\nNameError:\
    \ name 'smallest_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n >\
    \ 1 and not is_prime(n)\n    for i in range(n - 1, 1, -1):\n        if n % i ==\
    \ 0 and is_prime(i):\n            return i\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf1yfi4r9.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpf1yfi4r9.py\", line 22,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpf1yfi4r9.py\"\
    , line 15, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpf1yfi4r9.py\"\
    , line 8, in largest_prime_factor\n    assert n > 1 and not is_prime(n)\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n //\
    \ 2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n \
    \           return largest_prime_factor(n // i)\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n\
    \        return 1\n    if is_prime(n):\n        return n\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n\
    \    return 1\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplz3qch_z.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmplz3qch_z.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmplz3qch_z.py\"\
    , line 19, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmplz3qch_z.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n\
    \    return n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n //\
    \ 2)\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n\
    \            return largest_prime_factor(n // i)\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoh0_a3t.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpaoh0_a3t.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpaoh0_a3t.py\"\
    , line 19, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpaoh0_a3t.py\"\
    , line 12, in largest_prime_factor\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n.\n    for i in range(2, n):\n        if n % i == 0:\n \
    \           # If i is a factor of n, then n // i is a factor of n.\n         \
    \   # If n // i is a prime, then it is the largest prime factor of n.\n      \
    \      if is_prime(n // i):\n                return n // i\n            # If n\
    \ // i is not a prime, then i is the largest prime factor of n.\n            else:\n\
    \                return i\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8uvxv9ap.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8uvxv9ap.py\", line 28,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp8uvxv9ap.py\"\
    , line 21, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp8uvxv9ap.py\"\
    , line 13, in largest_prime_factor\n    if is_prime(n // i):\nNameError: name\
    \ 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n\
    \            i += 1\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    return 0\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzhewt799.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpzhewt799.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpzhewt799.py\"\
    , line 13, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n\n    factor = smallest_factor(n)\n    # If n is prime,\
    \ return n\n    if factor == n:\n        return n\n    # Otherwise, return the\
    \ largest prime factor of n/factor\n    return largest_prime_factor(n // factor)\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpujeqqdmm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpujeqqdmm.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpujeqqdmm.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpujeqqdmm.py\"\
    , line 9, in largest_prime_factor\n    factor = smallest_factor(n)\nNameError:\
    \ name 'smallest_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest prime factor of n.\n    factor = smallest_prime_factor(n)\n    # If\
    \ n is prime, return n.\n    if factor == n:\n        return n\n    # Otherwise,\
    \ return the largest prime factor of n // factor.\n    return largest_prime_factor(n\
    \ // factor)\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkhe8kktw.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkhe8kktw.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpkhe8kktw.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpkhe8kktw.py\"\
    , line 9, in largest_prime_factor\n    factor = smallest_prime_factor(n)\nNameError:\
    \ name 'smallest_prime_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n //\
    \ 2)\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n\
    \            return largest_prime_factor(n // i)\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp473ds5fa.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp473ds5fa.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp473ds5fa.py\"\
    , line 19, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp473ds5fa.py\"\
    , line 12, in largest_prime_factor\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n\n    factor = smallest_factor(n)\n    # If n is prime,\
    \ return n\n    if factor == n:\n        return n\n    # Otherwise, return the\
    \ largest prime factor of n/factor\n    return largest_prime_factor(n // factor)\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphoy2mx5w.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphoy2mx5w.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmphoy2mx5w.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmphoy2mx5w.py\"\
    , line 9, in largest_prime_factor\n    factor = smallest_factor(n)\nNameError:\
    \ name 'smallest_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n.\n    factor = smallest_factor(n)\n    # If n is prime,\
    \ return n.\n    if factor == n:\n        return n\n    # Otherwise, return the\
    \ largest prime factor of n / factor.\n    return largest_prime_factor(n // factor)\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppq0x5ogu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppq0x5ogu.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmppq0x5ogu.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmppq0x5ogu.py\"\
    , line 9, in largest_prime_factor\n    factor = smallest_factor(n)\nNameError:\
    \ name 'smallest_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    pass\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgxsheh_7.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpgxsheh_7.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpgxsheh_7.py\"\
    , line 13, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Note: this\
    \ is not the most efficient way to solve this problem.\n    # The most efficient\
    \ way is to use the Sieve of Eratosthenes.\n    # This is a brute force solution.\n\
    \    for i in range(n - 1, 1, -1):\n        if is_prime(i) and n % i == 0:\n \
    \           return i\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n\
    \    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp15tseib5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp15tseib5.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp15tseib5.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp15tseib5.py\"\
    , line 12, in largest_prime_factor\n    if is_prime(i) and n % i == 0:\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime\
    \ = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n   \
    \         largest_prime = max(largest_prime, i)\n            while n % i == 0:\n\
    \                n //= i\n    if n > 1:\n        largest_prime = max(largest_prime,\
    \ n)\n    return largest_prime\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n\
    \    return n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: You\
    \ may want to use the is_prime function you wrote in the previous\n    # question.\n\
    \    # Hint: You may want to use the is_prime function you wrote in the previous\n\
    \    # question.\n    if is_prime(n):\n        return n\n    else:\n        for\
    \ i in range(2, n):\n            if n % i == 0 and is_prime(i):\n            \
    \    return i\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5rr47_l1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5rr47_l1.py\", line 27,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp5rr47_l1.py\"\
    , line 20, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp5rr47_l1.py\"\
    , line 12, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n\
    \    return n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n\
    \    return n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n >\
    \ 1 and not is_prime(n)\n    for i in range(n - 1, 1, -1):\n        if n % i ==\
    \ 0 and is_prime(i):\n            return i\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpid2z4d5f.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpid2z4d5f.py\", line 22,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpid2z4d5f.py\"\
    , line 15, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpid2z4d5f.py\"\
    , line 8, in largest_prime_factor\n    assert n > 1 and not is_prime(n)\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors =\
    \ []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n            i = 1\n    return max(factors)\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp89lvibt.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpp89lvibt.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpp89lvibt.py\"\
    , line 19, in check\n    assert candidate(27) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    pass\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbg548lyk.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpbg548lyk.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpbg548lyk.py\"\
    , line 13, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n\
    \        return 1\n    for i in range(2, n):\n        if n % i == 0:\n       \
    \     return largest_prime_factor(n // i)\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor\
    \ = 1\n    factor = 2\n    while factor * factor <= n:\n        if n % factor\
    \ == 0:\n            largest_factor = factor\n            n //= factor\n     \
    \   else:\n            factor += 1\n    if n > 1:\n        largest_factor = n\n\
    \    return largest_factor\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor <= n:\n        if n % factor == 0:\n            n //= factor\n\
    \        else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    # Hint: use a helper function to check if a number is prime\n\
    \    # Hint: use a helper function to find the smallest factor of a number\n \
    \   # Hint: use a helper function to find the largest factor of a number\n   \
    \ return 0\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_4oto5o.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmps_4oto5o.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmps_4oto5o.py\"\
    , line 16, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    pass\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplhyhwmne.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmplhyhwmne.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmplhyhwmne.py\"\
    , line 13, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n\
    \    return n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n.\n    for i in range(2, n):\n        if n % i == 0:\n \
    \           # If i is a factor of n, then n // i is a factor of n.\n         \
    \   # If n // i is a prime, then i is the largest prime factor.\n            if\
    \ is_prime(n // i):\n                return n // i\n            # If n // i is\
    \ not a prime, then the largest prime factor of n // i\n            # is the largest\
    \ prime factor of n.\n            return largest_prime_factor(n // i)\n    # If\
    \ n is prime, then n is the largest prime factor of n.\n    return n\n\n\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl_xj0sqz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpl_xj0sqz.py\", line 30,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpl_xj0sqz.py\"\
    , line 23, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpl_xj0sqz.py\"\
    , line 13, in largest_prime_factor\n    if is_prime(n // i):\nNameError: name\
    \ 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor\
    \ = 1\n    factor = 2\n    while factor * factor <= n:\n        if n % factor\
    \ == 0:\n            largest_factor = factor\n            n //= factor\n     \
    \   else:\n            factor += 1\n    if n > 1:\n        largest_factor = n\n\
    \    return largest_factor\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor <= n:\n        if n % factor == 0:\n            n //= factor\n\
    \        else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    pass\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp47_r9z4k.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp47_r9z4k.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp47_r9z4k.py\"\
    , line 13, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: You\
    \ may want to use the is_prime function you wrote in the previous\n    # question.\n\
    \    # Hint: You may want to use the is_prime function you wrote in the previous\n\
    \    # question.\n    # Hint: You may want to use the is_prime function you wrote\
    \ in the previous\n    # question.\n    # Hint: You may want to use the is_prime\
    \ function you wrote in the previous\n    # question.\n    # Hint: You may want\
    \ to use the is_prime function you wrote in the previous\n    # question.\n  \
    \  # Hint: You may want to use the is_prime function you wrote in the previous\n\
    \    # question.\n    # Hint: You may want to use the is_prime function you wrote\
    \ in the previous\n    # question.\n    # Hint: You may want to use the is_prime\
    \ function you wrote in the previous\n    # question.\n    # Hint: You may want\
    \ to use the is_prime function you wrote in the previous\n    # question.\n  \
    \  # Hint: You may want to use the is_prime function you wrote in the previous\n\
    \    # question.\n    # Hint: You may want to use the is_prime function you wrote\
    \ in the previous\n    # question.\n    # Hint: You may want to use the is_prime\
    \ function you wrote in the previous\n    # question.\n    # Hint: You may want\
    \ to use the is_prime function you wrote in the previous\n    # question.\n  \
    \  # Hint: You may want to use the is_prime function you wrote in the previous\n\
    \    # question.\n    # Hint: You may want to use the is_prime function you wrote\
    \ in the previous\n    # question.\n    # Hint: You may want to use the is_prime\
    \ function you wrote in the previous\n    # question.\n    # Hint: You may want\
    \ to use the is_prime function you wrote in the previous\n    # question.\n  \
    \  # Hint: You may want to use the is_prime function you wrote in the previous\n\
    \    # question.\n    # Hint: You may want to use the is_prime function you wrote\
    \ in the previous\n    # question.\n    # Hint: You may want to use the is_prime\
    \ function you wrote\ndef check(candidate):\n    assert candidate(15) == 5\n \
    \   assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7uyyeor8.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmp7uyyeor8.py\", line 55,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp7uyyeor8.py\"\
    , line 48, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor\
    \ = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_factor\
    \ = i\n            n = n // i\n    return largest_factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpksnrakyp.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpksnrakyp.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpksnrakyp.py\"\
    , line 18, in check\n    assert candidate(27) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n\
    \            i += 1\n    return i\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: You\
    \ may want to use the is_prime function.\n    # Hint: You may want to use the\
    \ is_prime function.\n    if is_prime(n):\n        return n\n    else:\n     \
    \   for i in range(2, n):\n            if n % i == 0 and is_prime(i):\n      \
    \          return i\n\ndef check(candidate):\n    assert candidate(15) == 5\n\
    \    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvad1g1q4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpvad1g1q4.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpvad1g1q4.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpvad1g1q4.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    # Hint: use a helper function to check if a number is prime\n\
    \    return 0\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzseswqef.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpzseswqef.py\", line 21,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpzseswqef.py\"\
    , line 14, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n\n    factor = smallest_factor(n)\n    # If n is prime,\
    \ return n\n    if factor == n:\n        return n\n    # Otherwise, return the\
    \ largest prime factor of n / factor\n    return largest_prime_factor(n // factor)\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_8tmrvk.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpi_8tmrvk.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpi_8tmrvk.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpi_8tmrvk.py\"\
    , line 9, in largest_prime_factor\n    factor = smallest_factor(n)\nNameError:\
    \ name 'smallest_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n\
    \    return n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    while n % 2 == 0:\n        n //= 2\n    if n == 1:\n  \
    \      return 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n\
    \ % i == 0:\n            n //= i\n    return n\n\n\ndef check(candidate):\n  \
    \  assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6uvwzzan.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6uvwzzan.py\", line 28,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp6uvwzzan.py\"\
    , line 22, in check\n    assert candidate(27) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    pass\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpliqnjuis.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpliqnjuis.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpliqnjuis.py\"\
    , line 13, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n      \
    \  return largest_prime_factor(n // 2)\n    for i in range(3, int(math.sqrt(n))\
    \ + 1, 2):\n        if n % i == 0:\n            return largest_prime_factor(n\
    \ // i)\n    return n\n\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4g9qdxfz.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp4g9qdxfz.py\", line 27,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp4g9qdxfz.py\"\
    , line 20, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp4g9qdxfz.py\"\
    , line 13, in largest_prime_factor\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n\
    \        return 1\n    elif n % 2 == 0:\n        return max(2, largest_prime_factor(n\
    \ // 2))\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n      \
    \      if n % i == 0:\n                return max(i, largest_prime_factor(n //\
    \ i))\n        return n\n\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n >\
    \ 1 and not is_prime(n)\n    return max(prime_factors(n))\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6k5fnb3c.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp6k5fnb3c.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp6k5fnb3c.py\"\
    , line 13, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp6k5fnb3c.py\"\
    , line 8, in largest_prime_factor\n    assert n > 1 and not is_prime(n)\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n\
    \            n //= i\n        else:\n            i += 1\n    return n\n\n\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if is_prime(n):\n\
    \        return n\n    else:\n        for i in range(2, n):\n            if n\
    \ % i == 0 and is_prime(i):\n                return largest_prime_factor(n //\
    \ i)\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpthim_zot.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpthim_zot.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpthim_zot.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpthim_zot.py\"\
    , line 8, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    factor = 3\n    while n % 2 == 0:\n        n = n // 2\n\
    \    while factor * factor <= n:\n        if n % factor == 0:\n            n =\
    \ n // factor\n        else:\n            factor += 2\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n\
    \            i += 1\n    return i\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime\
    \ = 2\n    while n > 1:\n        if n % largest_prime == 0:\n            n //=\
    \ largest_prime\n        else:\n            largest_prime += 1\n    return largest_prime\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: You\
    \ may want to write a helper function that finds all the prime\n    # factors\
    \ of a number.\n    return 0\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpllllkdlw.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpllllkdlw.py\", line 21,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpllllkdlw.py\"\
    , line 14, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor <= n:\n        if n % factor == 0:\n            n //= factor\n\
    \        else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor\
    \ = 1\n    factor = 2\n    while factor <= n:\n        if n % factor == 0:\n \
    \           largest_factor = factor\n            n = n // factor\n        else:\n\
    \            factor += 1\n    return largest_factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor\
    \ = 1\n    factor = 2\n    while factor * factor <= n:\n        if n % factor\
    \ == 0:\n            largest_factor = factor\n            n //= factor\n     \
    \   else:\n            factor += 1\n    if n > 1:\n        largest_factor = n\n\
    \    return largest_factor\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if is_prime(n):\n\
    \        return n\n    else:\n        for i in range(2, n // 2 + 1):\n       \
    \     if n % i == 0 and is_prime(i):\n                return largest_prime_factor(n\
    \ // i)\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1dhay_6n.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1dhay_6n.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp1dhay_6n.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp1dhay_6n.py\"\
    , line 8, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest prime factor of n.\n    # If n is prime, then n is the largest prime\
    \ factor.\n    # Otherwise, divide n by the smallest prime factor and repeat.\n\
    \    factor = smallest_prime_factor(n)\n    while factor < n:\n        n //= factor\n\
    \        factor = smallest_prime_factor(n)\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwy2a0qlo.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpwy2a0qlo.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpwy2a0qlo.py\"\
    , line 19, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpwy2a0qlo.py\"\
    , line 11, in largest_prime_factor\n    factor = smallest_prime_factor(n)\nNameError:\
    \ name 'smallest_prime_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n >\
    \ 1 and not is_prime(n)\n    factor = 2\n    while factor < n:\n        if n %\
    \ factor == 0:\n            return largest_prime_factor(n // factor)\n       \
    \ factor += 1\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl_1tvz61.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpl_1tvz61.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpl_1tvz61.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpl_1tvz61.py\"\
    , line 8, in largest_prime_factor\n    assert n > 1 and not is_prime(n)\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 ==\
    \ 0:\n        return largest_prime_factor(n // 2)\n    else:\n        for i in\
    \ range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n              \
    \  return largest_prime_factor(n // i)\n        return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime\
    \ = 1\n    factor = 2\n    while n > 1:\n        while n % factor == 0:\n    \
    \        largest_prime = factor\n            n //= factor\n        factor += 1\n\
    \    return largest_prime\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n\n    factor = smallest_factor(n)\n    # If n is a prime,\
    \ return n\n    if factor == n:\n        return n\n    # Otherwise, return the\
    \ largest prime factor of n/factor\n    return largest_prime_factor(n // factor)\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf_fahpuq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf_fahpuq.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpf_fahpuq.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpf_fahpuq.py\"\
    , line 9, in largest_prime_factor\n    factor = smallest_factor(n)\nNameError:\
    \ name 'smallest_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n //\
    \ 2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n \
    \           return largest_prime_factor(n // i)\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n\
    \        return 1\n    if is_prime(n):\n        return n\n    for i in range(2,\
    \ int(n ** 0.5) + 1):\n        if n % i == 0:\n            return largest_prime_factor(n\
    \ // i)\n    return n\n\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7uiqgzbb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp7uiqgzbb.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp7uiqgzbb.py\"\
    , line 19, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp7uiqgzbb.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n\
    \        return 1\n    if is_prime(n):\n        return n\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n\
    \    return n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwtwqlsog.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpwtwqlsog.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpwtwqlsog.py\"\
    , line 19, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpwtwqlsog.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n //\
    \ 2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n \
    \           return largest_prime_factor(n // i)\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest prime factor of n\n    factor = 2\n    while n % factor != 0:\n   \
    \     factor += 1\n    # Divide n by the smallest prime factor and repeat\n  \
    \  return largest_prime_factor(n // factor) if n != factor else factor\n\n\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor * factor <= n:\n        if n % factor == 0:\n            n //=\
    \ factor\n        else:\n            factor += 1\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime\
    \ = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_prime\
    \ = i\n            n = n // i\n            i = 2\n    return largest_prime\n\n\
    \ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpllh_irf4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpllh_irf4.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpllh_irf4.py\"\
    , line 19, in check\n    assert candidate(27) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest prime factor of n.\n    factor = smallest_prime_factor(n)\n    # Divide\
    \ n by the smallest prime factor of n.\n    n = n // factor\n    # If n is not\
    \ 1, then repeat the process.\n    while n > 1:\n        factor = smallest_prime_factor(n)\n\
    \        n = n // factor\n    return factor\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppt0_hu2i.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmppt0_hu2i.py\", line 27,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmppt0_hu2i.py\"\
    , line 20, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmppt0_hu2i.py\"\
    , line 9, in largest_prime_factor\n    factor = smallest_prime_factor(n)\nNameError:\
    \ name 'smallest_prime_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n.\n    factor = smallest_factor(n)\n    # If n is prime,\
    \ return n.\n    if factor == n:\n        return n\n    # Otherwise, return the\
    \ largest prime factor of n / factor.\n    return largest_prime_factor(n // factor)\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppndseagy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppndseagy.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmppndseagy.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmppndseagy.py\"\
    , line 9, in largest_prime_factor\n    factor = smallest_factor(n)\nNameError:\
    \ name 'smallest_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor <= n:\n        if n % factor == 0:\n            n //= factor\n\
    \        else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest prime factor of n.\n    for i in range(2, n):\n        if n % i ==\
    \ 0:\n            # If n is divisible by i, then i is a prime factor of n.\n \
    \           # Find the largest prime factor of n / i.\n            return largest_prime_factor(n\
    \ // i)\n    # If n is not divisible by any number between 2 and n, then n is\
    \ prime.\n    return n\n\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest prime factor of n\n    factor = smallest_prime_factor(n)\n    # Divide\
    \ n by the smallest prime factor of n\n    n = n // factor\n    # If n is 1, then\
    \ the largest prime factor is the smallest prime factor\n    if n == 1:\n    \
    \    return factor\n    # Otherwise, the largest prime factor is the largest prime\
    \ factor of n\n    else:\n        return largest_prime_factor(n)\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5p_u9did.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp5p_u9did.py\", line 28,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp5p_u9did.py\"\
    , line 21, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp5p_u9did.py\"\
    , line 9, in largest_prime_factor\n    factor = smallest_prime_factor(n)\nNameError:\
    \ name 'smallest_prime_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor\
    \ = 1\n    factor = 2\n    while factor <= n:\n        if n % factor == 0:\n \
    \           largest_factor = factor\n            n = n // factor\n        else:\n\
    \            factor += 1\n    return largest_factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n //\
    \ 2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n \
    \           return largest_prime_factor(n // i)\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n\
    \    return n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    pass\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp38nmi0mx.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp38nmi0mx.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp38nmi0mx.py\"\
    , line 13, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: You\
    \ may want to use the is_prime function.\n    # Hint: You may want to use the\
    \ is_prime function.\n    if is_prime(n):\n        return n\n    else:\n     \
    \   for i in range(2, n):\n            if n % i == 0 and is_prime(i):\n      \
    \          return i\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n\
    \    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hen2f56.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp9hen2f56.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp9hen2f56.py\"\
    , line 19, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp9hen2f56.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor <= n:\n        if n % factor == 0:\n            n //= factor\n\
    \        else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: You\
    \ can use the is_prime function you wrote in the previous question.\n    # Hint:\
    \ You can use the is_prime function you wrote in the previous question.\n    if\
    \ n == 1:\n        return 1\n    elif is_prime(n):\n        return n\n    else:\n\
    \        for i in range(2, n):\n            if n % i == 0 and is_prime(i):\n \
    \               return i\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpskgj5a4l.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpskgj5a4l.py\", line 27,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpskgj5a4l.py\"\
    , line 20, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpskgj5a4l.py\"\
    , line 12, in largest_prime_factor\n    elif is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest prime factor of n.\n    # If n is prime, then n is the largest prime\
    \ factor of n.\n    # Otherwise, the largest prime factor of n is the largest\
    \ prime factor of n // p.\n    p = smallest_prime_factor(n)\n    if p == n:\n\
    \        return n\n    else:\n        return largest_prime_factor(n // p)\n\n\n\
    def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5e6y38yn.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp5e6y38yn.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp5e6y38yn.py\"\
    , line 19, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp5e6y38yn.py\"\
    , line 11, in largest_prime_factor\n    p = smallest_prime_factor(n)\nNameError:\
    \ name 'smallest_prime_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n\
    \        return 1\n    if is_prime(n):\n        return n\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt82l7w3e.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpt82l7w3e.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpt82l7w3e.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpt82l7w3e.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest prime factor\n    for i in range(2, n):\n        if n % i == 0:\n \
    \           # Recursively find the largest prime factor of n // i\n          \
    \  return largest_prime_factor(n // i)\n    # n is prime\n    return n\n\n\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n\
    \            i += 1\n    return i\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n\n    factor = 2\n    while factor <= n:\n        if n %\
    \ factor == 0:\n            break\n        factor += 1\n    # If n is prime, return\
    \ n\n    if factor == n:\n        return n\n    # Otherwise, return the largest\
    \ prime factor of n / factor\n    return largest_prime_factor(n // factor)\n\n\
    \ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    pass\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb425s82u.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpb425s82u.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpb425s82u.py\"\
    , line 13, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n //\
    \ 2)\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return\
    \ largest_prime_factor(n // i)\n    return n\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if is_prime(n):\n\
    \        return n\n    else:\n        for i in range(2, n):\n            if n\
    \ % i == 0 and is_prime(i):\n                return i\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2yrpbdtj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp2yrpbdtj.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp2yrpbdtj.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp2yrpbdtj.py\"\
    , line 8, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n //\
    \ 2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n \
    \           return largest_prime_factor(n // i)\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest factor of n.\n    factor = 2\n    while n % factor != 0:\n        factor\
    \ += 1\n    # Divide n by the smallest factor.\n    n = n // factor\n    # If\
    \ n is 1, the largest factor is the smallest factor.\n    if n == 1:\n       \
    \ return factor\n    # Otherwise, the largest factor is the largest factor of\
    \ n.\n    return largest_prime_factor(n)\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n\
    \        return 1\n    elif is_prime(n):\n        return n\n    else:\n      \
    \  for i in range(2, n):\n            if n % i == 0:\n                return largest_prime_factor(n\
    \ // i)\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8xr4a29m.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8xr4a29m.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp8xr4a29m.py\"\
    , line 19, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp8xr4a29m.py\"\
    , line 10, in largest_prime_factor\n    elif is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n //\
    \ 2)\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n\
    \            return largest_prime_factor(n // i)\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcg8r19yw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpcg8r19yw.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpcg8r19yw.py\"\
    , line 19, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpcg8r19yw.py\"\
    , line 12, in largest_prime_factor\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n\
    \        return 1\n    if is_prime(n):\n        return n\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph06qawu7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmph06qawu7.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmph06qawu7.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmph06qawu7.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor * factor <= n:\n        if n % factor == 0:\n            n //=\
    \ factor\n        else:\n            factor += 1\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    if n % 2 == 0:\n        return largest_prime_factor(n //\
    \ 2)\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n\
    \            return largest_prime_factor(n // i)\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6jmvtvmy.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp6jmvtvmy.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp6jmvtvmy.py\"\
    , line 19, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp6jmvtvmy.py\"\
    , line 12, in largest_prime_factor\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ smallest prime factor of n\n    for i in range(2, n):\n        if n % i == 0:\n\
    \            # n is divisible by i, so i is a prime factor of n\n            #\
    \ Find the largest prime factor of n/i\n            return largest_prime_factor(n\
    \ // i)\n    # n is prime\n    return n\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n\
    \    return n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # TODO: implement\
    \ this function\n    pass\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv1vqxmaz.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpv1vqxmaz.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpv1vqxmaz.py\"\
    , line 13, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    for i in range(2, n):\n        if n % i == 0:\n       \
    \     return largest_prime_factor(n // i)\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if is_prime(n):\n\
    \        return n\n    else:\n        for i in range(2, n):\n            if n\
    \ % i == 0 and is_prime(i):\n                return i\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp81xqtf6_.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp81xqtf6_.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp81xqtf6_.py\"\
    , line 16, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp81xqtf6_.py\"\
    , line 8, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
