name: HumanEval_68_pluck
language: python
results:
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    min_even_index\
    \ = arr.index(min_even)\n    return [min_even, min_even_index]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    even_nums = [num for num in arr\
    \ if num % 2 == 0]\n    if len(even_nums) == 0:\n        return []\n    smallest_even\
    \ = min(even_nums)\n    smallest_even_index = arr.index(smallest_even)\n    return\
    \ [smallest_even, smallest_even_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [n for n in arr if n % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = []\n    for i, v in enumerate(arr):\n\
    \        if v % 2 == 0:\n            evens.append([v, i])\n    if not evens:\n\
    \        return []\n    evens.sort()\n    return evens[0]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest_even = None\n    smallest_even_index = None\n    for i, val in enumerate(arr):\n\
    \        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n\
    \                smallest_even = val\n                smallest_even_index = i\n\
    \    if smallest_even is None:\n        return []\n    return [smallest_even,\
    \ smallest_even_index]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    even_nums = [num for num in arr if num\
    \ % 2 == 0]\n    if not even_nums:\n        return []\n    min_even = min(even_nums)\n\
    \    min_even_index = arr.index(min_even)\n    return [min_even, min_even_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [i for i in arr if i % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    evens = [i for i in arr if i %\
    \ 2 == 0]\n    if len(evens) == 0:\n        return []\n    smallest = min(evens)\n\
    \    return [smallest, arr.index(smallest)]\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even_nums = [num for num in arr if num % 2 == 0]\n    if not even_nums:\n\
    \        return []\n    min_even = min(even_nums)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        smallest =\
    \ min(evens)\n        return [smallest, arr.index(smallest)]\n    return []\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    evens = [x for x in arr if x %\
    \ 2 == 0]\n    if len(evens) == 0:\n        return []\n    smallest = min(evens)\n\
    \    return [smallest, arr.index(smallest)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = []\n    for i, v in enumerate(arr):\n        if v % 2 == 0:\n   \
    \         evens.append([v, i])\n    if evens:\n        return min(evens)\n   \
    \ return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even_nums = [num for num in arr if num % 2 == 0]\n    if even_nums:\n   \
    \     smallest_even = min(even_nums)\n        return [smallest_even, arr.index(smallest_even)]\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    min_even_index\
    \ = arr.index(min_even)\n    return [min_even, min_even_index]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    evens.sort()\n    return [evens[0],\
    \ arr.index(evens[0])]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    min_even_idx\
    \ = arr.index(min_even)\n    return [min_even, min_even_idx]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    min_even_idx\
    \ = arr.index(min_even)\n    return [min_even, min_even_idx]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even_nodes = []\n    for index, value in enumerate(arr):\n        if value\
    \ % 2 == 0:\n            even_nodes.append([value, index])\n    if len(even_nodes)\
    \ == 0:\n        return []\n    even_nodes.sort()\n    return even_nodes[0]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = []\n    for i, v in enumerate(arr):\n        if v % 2 == 0:\n   \
    \         evens.append([v, i])\n    if evens:\n        return min(evens)\n   \
    \ return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    evens.sort()\n    return [evens[0],\
    \ arr.index(evens[0])]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [i for i in arr if i % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    min_even = None\n    min_even_idx = None\n\
    \    for idx, val in enumerate(arr):\n        if val % 2 == 0:\n            if\
    \ min_even is None or val < min_even:\n                min_even = val\n      \
    \          min_even_idx = idx\n    if min_even is None:\n        return []\n \
    \   return [min_even, min_even_idx]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = []\n    for i, v in enumerate(arr):\n\
    \        if v % 2 == 0:\n            evens.append([v, i])\n    if not evens:\n\
    \        return []\n    evens.sort()\n    return evens[0]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    evens.sort()\n    return [evens[0],\
    \ arr.index(evens[0])]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [i for i in arr if i % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [n for n in arr if n % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [n for n in arr if n % 2 == 0]\n\
    \    if not evens:\n        return []\n    evens.sort()\n    return [evens[0],\
    \ arr.index(evens[0])]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    min_even_idx\
    \ = arr.index(min_even)\n    return [min_even, min_even_idx]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    evens = [x for x in arr if x %\
    \ 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n\
    \    return [min_even, arr.index(min_even)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [i for i in arr if i % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    evens.sort()\n    return [evens[0],\
    \ arr.index(evens[0])]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [i for i in arr if i % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even_nodes = [node for node in arr if node % 2 == 0]\n    if not even_nodes:\n\
    \        return []\n    smallest_even = min(even_nodes)\n    return [smallest_even,\
    \ arr.index(smallest_even)]\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_index = arr.index(min_even)\n  \
    \  return [min_even, min_even_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even_nums = [x for x in arr if x % 2 == 0]\n    if even_nums:\n        return\
    \ [min(even_nums), arr.index(min(even_nums))]\n    return []\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ymk626s.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp2ymk626s.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp2ymk626s.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    min_even_idx\
    \ = arr.index(min_even)\n    return [min_even, min_even_idx]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    min_even_index\
    \ = arr.index(min_even)\n    return [min_even, min_even_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    even_nodes = [node for node in arr if\
    \ node % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_even\
    \ = min(even_nodes)\n    return [smallest_even, arr.index(smallest_even)]\ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    evens.sort()\n    return [evens[0],\
    \ arr.index(evens[0])]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    min_even_idx\
    \ = arr.index(min_even)\n    return [min_even, min_even_idx]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [i for i in arr if i % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    min_even_index\
    \ = arr.index(min_even)\n    return [min_even, min_even_index]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [n for n in arr if n % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    min_even_index\
    \ = arr.index(min_even)\n    return [min_even, min_even_index]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    min_even = min(filter(lambda x: x % 2\
    \ == 0, arr))\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj86sji04.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpj86sji04.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpj86sji04.py\", line 49, in\
    \ check\n    assert candidate([7, 9, 7, 1]) == []\n  File \"/tmp/tmpj86sji04.py\"\
    , line 39, in pluck\n    min_even = min(filter(lambda x: x % 2 == 0, arr))\nValueError:\
    \ min() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    even_vals = [x for x in arr if x % 2\
    \ == 0]\n    if not even_vals:\n        return []\n    min_even = min(even_vals)\n\
    \    return [min_even, arr.index(min_even)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    even_nodes = [node for node in arr if\
    \ node % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_even\
    \ = min(even_nodes)\n    smallest_even_index = arr.index(smallest_even)\n    return\
    \ [smallest_even, smallest_even_index]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [n for n in arr if n % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    evens.sort()\n    return [evens[0],\
    \ arr.index(evens[0])]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even_nodes = [node for node in arr if node % 2 == 0]\n    if not even_nodes:\n\
    \        return []\n    smallest_even = min(even_nodes)\n    return [smallest_even,\
    \ arr.index(smallest_even)]\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    even_nums = [num for num in arr if num\
    \ % 2 == 0]\n    if not even_nums:\n        return []\n    min_even = min(even_nums)\n\
    \    return [min_even, arr.index(min_even)]\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even_nums = [num for num in arr if num % 2 == 0]\n    if not even_nums:\n\
    \        return []\n    min_even = min(even_nums)\n    return [min_even, arr.index(min_even)]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = []\n    for i, n in enumerate(arr):\n\
    \        if n % 2 == 0:\n            evens.append([n, i])\n    if not evens:\n\
    \        return []\n    evens.sort()\n    return evens[0]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even_nums = [x for x in arr if x % 2 == 0]\n    if even_nums:\n        return\
    \ [min(even_nums), arr.index(min(even_nums))]\n    return []\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    evens = []\n    for i, v in enumerate(arr):\n\
    \        if v % 2 == 0:\n            evens.append([v, i])\n    if len(evens) ==\
    \ 0:\n        return []\n    evens.sort()\n    return evens[0]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    even_nodes = [node for node in arr if\
    \ node % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_even\
    \ = min(even_nodes)\n    return [smallest_even, arr.index(smallest_even)]\ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [n for n in arr if n % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
