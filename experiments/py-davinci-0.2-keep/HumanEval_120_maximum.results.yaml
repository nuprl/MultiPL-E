name: HumanEval_120_maximum
language: python
results:
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n        if\
    \ len(heap) > k:\n            heapq.heappop(heap)\n    return heap\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iet61g6.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0iet61g6.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0iet61g6.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp0iet61g6.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgucr40s1.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpgucr40s1.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpgucr40s1.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppr8ww2h8.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmppr8ww2h8.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppr8ww2h8.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7v6j3q5r.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp7v6j3q5r.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp7v6j3q5r.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwhzyptxk.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpwhzyptxk.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwhzyptxk.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n        if\
    \ len(heap) > k:\n            heapq.heappop(heap)\n    return heapq.nlargest(k,\
    \ heap)\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi85ivcw8.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpi85ivcw8.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpi85ivcw8.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpi85ivcw8.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmb836vuh.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpmb836vuh.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpmb836vuh.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf6s079kb.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpf6s079kb.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpf6s079kb.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptab39yqo.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmptab39yqo.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmptab39yqo.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n  \
    \  for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, arr[i])\n    return heap\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz94kqfob.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpz94kqfob.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpz94kqfob.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpz94kqfob.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2bkg0ina.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp2bkg0ina.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp2bkg0ina.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbgml16sq.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpbgml16sq.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbgml16sq.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4knmm1l5.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp4knmm1l5.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4knmm1l5.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_9i0kebs.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp_9i0kebs.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_9i0kebs.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for i in range(k):\n        heapq.heappush(heap, -arr[i])\n \
    \   for i in range(k, len(arr)):\n        if -arr[i] > heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, -arr[i])\n    return [-x for x in heap]\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8uzg00j2.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp8uzg00j2.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8uzg00j2.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp8uzg00j2.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, -arr[i])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmj6ifeh.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmppmj6ifeh.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppmj6ifeh.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    elif k == len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    else:\n        return sorted(arr, reverse=True)[:k]\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz7wyhqjn.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpz7wyhqjn.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpz7wyhqjn.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz30mk42a.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpz30mk42a.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpz30mk42a.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcwtg07eq.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpcwtg07eq.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpcwtg07eq.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2jerhm7f.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp2jerhm7f.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp2jerhm7f.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzpy1pcp3.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpzpy1pcp3.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzpy1pcp3.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1n3kn3sb.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp1n3kn3sb.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1n3kn3sb.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2xkd8s4_.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp2xkd8s4_.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp2xkd8s4_.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpor6t0pkg.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpor6t0pkg.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpor6t0pkg.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp95zbu8x.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpp95zbu8x.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpp95zbu8x.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps3dp7a5g.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmps3dp7a5g.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmps3dp7a5g.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5g1eht2u.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp5g1eht2u.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5g1eht2u.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    if k == len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap,\
    \ arr[i])\n    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n  \
    \          heapq.heappop(heap)\n            heapq.heappush(heap, arr[i])\n   \
    \ return sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2fi8ncme.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmp2fi8ncme.py\", line 55,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp2fi8ncme.py\", line 42,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i9s_fxf.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp9i9s_fxf.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp9i9s_fxf.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_v1ph7ep.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp_v1ph7ep.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_v1ph7ep.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcb3zq37c.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpcb3zq37c.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpcb3zq37c.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphoiqn42c.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmphoiqn42c.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmphoiqn42c.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzfukp_ik.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpzfukp_ik.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzfukp_ik.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps6upcl14.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmps6upcl14.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmps6upcl14.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == len(arr):\n        return arr\n    if k == 1:\n        return [max(arr)]\n\
    \    return sorted(arr)[-k:]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2dqt9s41.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp2dqt9s41.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp2dqt9s41.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa7gw5d2.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpaa7gw5d2.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpaa7gw5d2.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp198igfnr.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp198igfnr.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp198igfnr.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1y98slgq.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp1y98slgq.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1y98slgq.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl7rgfccj.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpl7rgfccj.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpl7rgfccj.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpib0rd1x9.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpib0rd1x9.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpib0rd1x9.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpstfevr35.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpstfevr35.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpstfevr35.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpukikcbul.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpukikcbul.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpukikcbul.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe7ilwfzh.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpe7ilwfzh.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe7ilwfzh.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnv2adydn.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpnv2adydn.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpnv2adydn.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjhn2fqzc.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpjhn2fqzc.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpjhn2fqzc.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n  \
    \  for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, arr[i])\n    return heap\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpocvixgnv.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpocvixgnv.py\", line 51,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpocvixgnv.py\", line 38,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpocvixgnv.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n  \
    \  for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, arr[i])\n    return sorted(heap, reverse=True)\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkyoy_bxl.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpkyoy_bxl.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpkyoy_bxl.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpkyoy_bxl.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if not arr:\n        return []\n    heap = []\n    for i in range(k):\n    \
    \    heapq.heappush(heap, arr[i])\n    for i in range(k, len(arr)):\n        if\
    \ arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ arr[i])\n    return heap\ndef check(candidate):\n    assert candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6j7w3l7.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpt6j7w3l7.py\", line 52,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpt6j7w3l7.py\", line 39,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpt6j7w3l7.py\"\
    , line 32, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbqzmo86f.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpbqzmo86f.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbqzmo86f.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9wgspyss.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp9wgspyss.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp9wgspyss.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    elif k == len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    else:\n        return sorted(arr, reverse=True)[:k]\n\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v019fik.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp1v019fik.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1v019fik.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    if k == len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcujbw9wm.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpcujbw9wm.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpcujbw9wm.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpauew9nfp.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpauew9nfp.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpauew9nfp.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprvm_hs5e.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmprvm_hs5e.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmprvm_hs5e.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == len(arr):\n        return arr\n    else:\n        return sorted(arr,\
    \ reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy9x4prct.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpy9x4prct.py\", line 46,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpy9x4prct.py\", line 33,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo26fz5o_.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpo26fz5o_.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpo26fz5o_.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rm22llt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp6rm22llt.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp6rm22llt.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfj7rf6yy.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpfj7rf6yy.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpfj7rf6yy.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n  \
    \  for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, arr[i])\n    return heap\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpztnbiz6w.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpztnbiz6w.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpztnbiz6w.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpztnbiz6w.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n  \
    \  \n    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n        \
    \    heapq.heappop(heap)\n            heapq.heappush(heap, arr[i])\n    \n   \
    \ return sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplu5njf56.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmplu5njf56.py\", line 53,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmplu5njf56.py\", line 40,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmplu5njf56.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ga4nm_m.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp3ga4nm_m.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp3ga4nm_m.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpytmtkzat.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpytmtkzat.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpytmtkzat.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmq111o5f.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpmq111o5f.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpmq111o5f.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6xsm1umv.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp6xsm1umv.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp6xsm1umv.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for i in range(len(arr)):\n        if len(heap) < k:\n      \
    \      heapq.heappush(heap, arr[i])\n        else:\n            heapq.heappushpop(heap,\
    \ arr[i])\n    return sorted(heap, reverse=True)\n\ndef check(candidate):\n  \
    \  assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4,\
    \ 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0v9es5us.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp0v9es5us.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0v9es5us.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp0v9es5us.py\"\
    , line 31, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_hfwvsg_.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp_hfwvsg_.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_hfwvsg_.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1q9niabm.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp1q9niabm.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1q9niabm.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_9_siron.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp_9_siron.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_9_siron.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_6vpiqc.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpm_6vpiqc.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpm_6vpiqc.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppbv_wpzd.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmppbv_wpzd.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppbv_wpzd.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if not arr:\n        return []\n    if k == 0:\n        return []\n    if k\
    \ == 1:\n        return [max(arr)]\n    if k == len(arr):\n        return sorted(arr)\n\
    \    if k > len(arr):\n        return []\n\n    heap = []\n    for i in range(k):\n\
    \        heapq.heappush(heap, arr[i])\n\n    for i in range(k, len(arr)):\n  \
    \      if arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ arr[i])\n\n    return sorted(heap)\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc8nmz7oh.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpc8nmz7oh.py\", line 63,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpc8nmz7oh.py\", line 51,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\n  File \"/tmp/tmpc8nmz7oh.py\"\
    , line 41, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if not arr:\n        return []\n    if k == 0:\n        return []\n    if k\
    \ == 1:\n        return [max(arr)]\n    if k == len(arr):\n        return sorted(arr)\n\
    \    heap = []\n    for num in arr:\n        if len(heap) < k:\n            heapq.heappush(heap,\
    \ num)\n        else:\n            heapq.heappushpop(heap, num)\n    return sorted(heap)\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1k1xm_6.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmpo1k1xm_6.py\", line 57,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpo1k1xm_6.py\", line 45,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\n  File \"/tmp/tmpo1k1xm_6.py\"\
    , line 39, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5q_984w.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpq5q_984w.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpq5q_984w.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbc02tzlx.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpbc02tzlx.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbc02tzlx.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    if k == len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    if k == 1:\n        return [max(arr)]\n    return sorted(arr,\
    \ reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpovdy0u7v.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpovdy0u7v.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpovdy0u7v.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7z7tk0ma.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp7z7tk0ma.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp7z7tk0ma.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpudr5nc3x.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpudr5nc3x.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpudr5nc3x.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp366p36_2.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp366p36_2.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp366p36_2.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnksb23r4.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpnksb23r4.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpnksb23r4.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9d55qf6d.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp9d55qf6d.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp9d55qf6d.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8uakyoui.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8uakyoui.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8uakyoui.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1xrw4ca_.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp1xrw4ca_.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1xrw4ca_.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6wi4e2f.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpz6wi4e2f.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpz6wi4e2f.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpntwtkugx.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpntwtkugx.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpntwtkugx.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    elif k == len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    else:\n        return sorted(arr, reverse=True)[:k]\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp278tl1qg.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp278tl1qg.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp278tl1qg.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppsg6l86v.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmppsg6l86v.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppsg6l86v.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp__w7tf_4.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp__w7tf_4.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp__w7tf_4.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp68dthc78.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp68dthc78.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp68dthc78.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqbzxfq2a.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpqbzxfq2a.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqbzxfq2a.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4olm3ftl.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp4olm3ftl.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4olm3ftl.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp59smpafi.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp59smpafi.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp59smpafi.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2lb107ib.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp2lb107ib.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp2lb107ib.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwelzzltt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpwelzzltt.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwelzzltt.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoqghjpq0.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpoqghjpq0.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoqghjpq0.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyp4enrfe.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpyp4enrfe.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpyp4enrfe.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n        if\
    \ len(heap) > k:\n            heapq.heappop(heap)\n    return heapq.nlargest(k,\
    \ heap)\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpccp5mu_q.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpccp5mu_q.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpccp5mu_q.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpccp5mu_q.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbjr3gmoa.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpbjr3gmoa.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbjr3gmoa.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbaexzc4r.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpbaexzc4r.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbaexzc4r.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n  \
    \  for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, arr[i])\n    return sorted(heap, reverse=True)\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4o1egjfg.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp4o1egjfg.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4o1egjfg.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp4o1egjfg.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgc0lzn36.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgc0lzn36.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpgc0lzn36.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzhgm9kwd.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpzhgm9kwd.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzhgm9kwd.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz3n4el_5.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpz3n4el_5.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpz3n4el_5.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7rah0lg6.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp7rah0lg6.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp7rah0lg6.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_5jsgnck.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp_5jsgnck.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_5jsgnck.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppdu0ztln.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmppdu0ztln.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppdu0ztln.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    if k == len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpugew1ad2.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpugew1ad2.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpugew1ad2.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8nzx2ck_.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8nzx2ck_.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8nzx2ck_.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcdxhpitg.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpcdxhpitg.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpcdxhpitg.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpelmwdddz.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpelmwdddz.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpelmwdddz.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvt7_pfen.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpvt7_pfen.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpvt7_pfen.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1vtmgn3k.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp1vtmgn3k.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1vtmgn3k.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv1dvbkl9.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpv1dvbkl9.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpv1dvbkl9.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqso4hx5x.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpqso4hx5x.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqso4hx5x.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj3hbg1yk.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpj3hbg1yk.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpj3hbg1yk.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp19d82oqx.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp19d82oqx.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp19d82oqx.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphxg0h1uc.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmphxg0h1uc.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmphxg0h1uc.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpprecejcw.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpprecejcw.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpprecejcw.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphx81_n6g.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmphx81_n6g.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmphx81_n6g.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp503t3i0a.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp503t3i0a.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp503t3i0a.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppbqaan_p.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmppbqaan_p.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppbqaan_p.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_b1xkxqj.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp_b1xkxqj.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_b1xkxqj.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    elif k == len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    else:\n        return sorted(arr, reverse=True)[:k]\n\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv4bewqzy.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpv4bewqzy.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpv4bewqzy.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4ecxyi0c.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp4ecxyi0c.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4ecxyi0c.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm7q9j85b.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpm7q9j85b.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpm7q9j85b.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpri42e4s5.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpri42e4s5.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpri42e4s5.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp82tsg8jj.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp82tsg8jj.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp82tsg8jj.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptp57440m.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmptp57440m.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmptp57440m.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsv36bems.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpsv36bems.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpsv36bems.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaeregv1p.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpaeregv1p.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpaeregv1p.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp07xfs0gg.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp07xfs0gg.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp07xfs0gg.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7qj7lwr.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpu7qj7lwr.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpu7qj7lwr.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpez9v8hoc.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpez9v8hoc.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpez9v8hoc.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiruf0bld.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpiruf0bld.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpiruf0bld.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4ioovx8s.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp4ioovx8s.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4ioovx8s.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzqxk9rvy.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpzqxk9rvy.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzqxk9rvy.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2jd4ql6s.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp2jd4ql6s.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp2jd4ql6s.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n        if\
    \ len(heap) > k:\n            heapq.heappop(heap)\n    return heap\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvot7bddg.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpvot7bddg.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpvot7bddg.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpvot7bddg.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4fuqav5q.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp4fuqav5q.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4fuqav5q.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwn7_f9oy.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpwn7_f9oy.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwn7_f9oy.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp27ddyngd.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp27ddyngd.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp27ddyngd.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ulv6rw6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp9ulv6rw6.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp9ulv6rw6.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoih5e219.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpoih5e219.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoih5e219.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3anip3c5.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp3anip3c5.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp3anip3c5.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    if k == len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    if k == 1:\n        return [max(arr)]\n    return sorted(arr,\
    \ reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64gmatjv.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp64gmatjv.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp64gmatjv.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0xa45fml.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp0xa45fml.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0xa45fml.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj7cvyr5_.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpj7cvyr5_.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpj7cvyr5_.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph61v4oo0.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmph61v4oo0.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmph61v4oo0.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptexmgvhr.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmptexmgvhr.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmptexmgvhr.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0s1cmsaf.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp0s1cmsaf.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0s1cmsaf.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpffoa4jhx.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpffoa4jhx.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpffoa4jhx.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n        if\
    \ len(heap) > k:\n            heapq.heappop(heap)\n    return heapq.nlargest(k,\
    \ heap)\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp16h_p51.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpp16h_p51.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpp16h_p51.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpp16h_p51.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcrssqded.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpcrssqded.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpcrssqded.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n  \
    \  for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, arr[i])\n    return sorted(heap, reverse=True)\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp97tp_53g.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp97tp_53g.py\", line 51,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp97tp_53g.py\", line 38,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp97tp_53g.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ pass\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7k2xwh3n.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp7k2xwh3n.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp7k2xwh3n.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu2jhtfwv.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpu2jhtfwv.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpu2jhtfwv.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhhnuis7.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpfhhnuis7.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpfhhnuis7.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppcfmjrfc.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmppcfmjrfc.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppcfmjrfc.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n        if\
    \ len(heap) > k:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprndhecxp.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmprndhecxp.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmprndhecxp.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmprndhecxp.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    if k == len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    if k == 1:\n        return [max(arr)]\n    return sorted(arr,\
    \ reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp06ph53q8.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp06ph53q8.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp06ph53q8.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp13useb72.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp13useb72.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp13useb72.py\", line 41,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf2s7apjb.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpf2s7apjb.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpf2s7apjb.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    elif k == len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    else:\n        return sorted(arr, reverse=True)[:k]\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmgsg9v99.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpmgsg9v99.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpmgsg9v99.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmao6lpdi.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpmao6lpdi.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpmao6lpdi.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3bl14z9q.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp3bl14z9q.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp3bl14z9q.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for num in arr:\n        if len(heap) < k:\n            heapq.heappush(heap,\
    \ num)\n        else:\n            heapq.heappushpop(heap, num)\n    return heap\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6srgzcpq.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp6srgzcpq.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp6srgzcpq.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp6srgzcpq.py\"\
    , line 31, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphg_tuvtn.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmphg_tuvtn.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmphg_tuvtn.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb4e7dd4z.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpb4e7dd4z.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpb4e7dd4z.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ma4giyb.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp0ma4giyb.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0ma4giyb.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_5kwxsk.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpi_5kwxsk.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpi_5kwxsk.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvesgx4v9.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpvesgx4v9.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpvesgx4v9.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqaze1vlj.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpqaze1vlj.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqaze1vlj.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpin5ks6w6.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpin5ks6w6.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpin5ks6w6.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbag0rxep.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpbag0rxep.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbag0rxep.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjhf9qd7z.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpjhf9qd7z.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpjhf9qd7z.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4jw6n9y9.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp4jw6n9y9.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4jw6n9y9.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptg7vl2gc.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmptg7vl2gc.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmptg7vl2gc.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiphf6u3o.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpiphf6u3o.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpiphf6u3o.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgsyqu0yr.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpgsyqu0yr.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpgsyqu0yr.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppa4up4hp.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmppa4up4hp.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppa4up4hp.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4fu5bgs1.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp4fu5bgs1.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4fu5bgs1.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp2206pop.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpp2206pop.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpp2206pop.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuwg3jkh1.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpuwg3jkh1.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpuwg3jkh1.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsewwcgno.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpsewwcgno.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpsewwcgno.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxh1qisy8.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpxh1qisy8.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpxh1qisy8.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpikk4el9_.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpikk4el9_.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpikk4el9_.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    if k == len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    if k == 1:\n        return [max(arr)]\n    if k == 2:\n \
    \       return sorted(arr, reverse=True)[:2]\n    return sorted(arr, reverse=True)[:k]\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo5ocunqw.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpo5ocunqw.py\", line 51,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpo5ocunqw.py\", line 38,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0vwxkoiz.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp0vwxkoiz.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0vwxkoiz.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n  \
    \  for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, arr[i])\n    return heap\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpigzpmo0j.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpigzpmo0j.py\", line 51,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpigzpmo0j.py\", line 38,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpigzpmo0j.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa_x626si.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpa_x626si.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpa_x626si.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2hmop_x5.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp2hmop_x5.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp2hmop_x5.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp51oewyw1.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp51oewyw1.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp51oewyw1.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if not arr:\n        return []\n    if k == 0:\n        return []\n    if k\
    \ == 1:\n        return [max(arr)]\n    if k == len(arr):\n        return sorted(arr)\n\
    \    if k > len(arr):\n        return []\n\n    heap = []\n    for i in range(k):\n\
    \        heapq.heappush(heap, arr[i])\n\n    for i in range(k, len(arr)):\n  \
    \      if arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ arr[i])\n\n    return sorted(heap)\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxyzhdske.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpxyzhdske.py\", line 63,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpxyzhdske.py\", line 51,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\n  File \"/tmp/tmpxyzhdske.py\"\
    , line 41, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heapq.heapify(arr)\n    return heapq.nlargest(k, arr)\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvpe7l3hu.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpvpe7l3hu.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpvpe7l3hu.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpvpe7l3hu.py\"\
    , line 28, in maximum\n    heapq.heapify(arr)\nNameError: name 'heapq' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplr7xl81z.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmplr7xl81z.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmplr7xl81z.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n  \
    \  for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, arr[i])\n    return heap\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwhhvkx1m.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpwhhvkx1m.py\", line 51,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwhhvkx1m.py\", line 38,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpwhhvkx1m.py\"\
    , line 30, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp91us_5mk.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp91us_5mk.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp91us_5mk.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    elif k == len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    else:\n        return sorted(arr, reverse=True)[:k]\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp6hwj3wl.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpp6hwj3wl.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpp6hwj3wl.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps08rx7ex.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmps08rx7ex.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmps08rx7ex.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ if k == 0:\n        return []\n    if k == len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    heap = arr[:k]\n    heapq.heapify(heap)\n    for i in range(k,\
    \ len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heapreplace(heap,\
    \ arr[i])\n    return sorted(heap, reverse=True)\n\ndef check(candidate):\n  \
    \  assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4,\
    \ 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqc8az8co.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpqc8az8co.py\", line 53,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqc8az8co.py\", line 40,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n   \
    \ return sorted(arr, reverse=True)[:k]\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp84i0vso3.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp84i0vso3.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp84i0vso3.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
