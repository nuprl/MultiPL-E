name: HumanEval_112_reverse_delete
language: python
results:
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.replace(c,\
    \ '')\n    return s, s == s[::-1]\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp4pot51d.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpp4pot51d.py\", line 28,\
    \ in test_check\n    check(reverse_delete)\n  File \"/tmp/tmpp4pot51d.py\", line\
    \ 17, in check\n    assert candidate('abcde', 'ae') == ('bcd', False)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for char in\
    \ c:\n        s = s.replace(char, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for char in\
    \ c:\n        s = s.replace(char, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for char in\
    \ c:\n        s = s.replace(char, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for char in\
    \ c:\n        s = s.replace(char, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = list(s)\n\
    \    for i in c:\n        while i in s:\n            s.remove(i)\n    s = ''.join(s)\n\
    \    return s, s == s[::-1]\n\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for char in\
    \ c:\n        s = s.replace(char, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for char in\
    \ c:\n        s = s.replace(char, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for char in\
    \ c:\n        s = s.replace(char, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for char in\
    \ c:\n        s = s.replace(char, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for char in\
    \ c:\n        s = s.replace(char, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for char in\
    \ c:\n        s = s.replace(char, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for char in\
    \ c:\n        s = s.replace(char, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = s.replace(c,\
    \ '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n    assert candidate('abcde',\
    \ 'ae') == ('bcd', False)\n    assert candidate('abcdef', 'b') == ('acdef', False)\n\
    \    assert candidate('abcdedcba', 'ab') == ('cdedc', True)\n    assert candidate('dwik',\
    \ 'w') == ('dik', False)\n    assert candidate('a', 'a') == ('', True)\n    assert\
    \ candidate('abcdedcba', '') == ('abcdedcba', True)\n    assert candidate('abcdedcba',\
    \ 'v') == ('abcdedcba', True)\n    assert candidate('vabba', 'v') == ('abba',\
    \ True)\n    assert candidate('mamma', 'mia') == ('', True)\n\ndef test_check():\n\
    \    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdbpy97k1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdbpy97k1.py\", line 29,\
    \ in test_check\n    check(reverse_delete)\n  File \"/tmp/tmpdbpy97k1.py\", line\
    \ 18, in check\n    assert candidate('abcde', 'ae') == ('bcd', False)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str,\
    \ bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n\
    \        s = s.replace(i, '')\n    return s, s == s[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('abcde', 'ae') == ('bcd', False)\n    assert candidate('abcdef',\
    \ 'b') == ('acdef', False)\n    assert candidate('abcdedcba', 'ab') == ('cdedc',\
    \ True)\n    assert candidate('dwik', 'w') == ('dik', False)\n    assert candidate('a',\
    \ 'a') == ('', True)\n    assert candidate('abcdedcba', '') == ('abcdedcba', True)\n\
    \    assert candidate('abcdedcba', 'v') == ('abcdedcba', True)\n    assert candidate('vabba',\
    \ 'v') == ('abba', True)\n    assert candidate('mamma', 'mia') == ('', True)\n\
    \ndef test_check():\n    check(reverse_delete)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
