name: HumanEval_95_check_dict_case
language: python
results:
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj5delrmf.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpj5delrmf.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpj5delrmf.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.isupper():\n                return False\n        return True\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2j43mi46.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2j43mi46.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp2j43mi46.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw_xtt7lb.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpw_xtt7lb.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw_xtt7lb.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    if len(dict) == 1:\n        return True\n \
    \   keys = list(dict.keys())\n    if keys[0].islower():\n        for key in keys:\n\
    \            if not key.islower():\n                return False\n    elif keys[0].isupper():\n\
    \        for key in keys:\n            if not key.isupper():\n               \
    \ return False\n    else:\n        return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    if dict.keys() == dict.keys():\n        return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1zqhnr_z.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp1zqhnr_z.py\", line 31,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp1zqhnr_z.py\", line\
    \ 23, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    else:\n        for k, v in dict.items():\n\
    \            if k.islower() or k.isupper():\n                continue\n      \
    \      else:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc3o3oid3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpc3o3oid3.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpc3o3oid3.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nFalse\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplmhl8qtr.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmplmhl8qtr.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmplmhl8qtr.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    lower_case = True\n    upper_case = True\n\
    \    for key in dict:\n        if key.islower():\n            upper_case = False\n\
    \        elif key.isupper():\n            lower_case = False\n        else:\n\
    \            return False\n    return lower_case or upper_case\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    if dict.keys() == dict.keys():\n        return\
    \ True\n    if dict.keys() == dict.keys():\n        return True\n    else:\n \
    \       return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkvgrnp69.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpkvgrnp69.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpkvgrnp69.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        if all(key.islower() for key\
    \ in dict):\n            return True\n        elif all(key.isupper() for key in\
    \ dict):\n            return True\n        else:\n            return False\n\n\
    print(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }))\nprint(check_dict_case({}))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\nFalse\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe50oi6pm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpe50oi6pm.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpe50oi6pm.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    keys = list(dict.keys())\n    if keys[0].islower():\n\
    \        for key in keys:\n            if not key.islower():\n               \
    \ return False\n    else:\n        for key in keys:\n            if not key.isupper():\n\
    \                return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Write\
    \ your code here\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp685m6o3k.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp685m6o3k.py\", line 28,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp685m6o3k.py\", line\
    \ 20, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        keys = list(dict.keys())\n \
    \       if keys[0].islower():\n            for key in keys:\n                if\
    \ not key.islower():\n                    return False\n        else:\n      \
    \      for key in keys:\n                if not key.isupper():\n             \
    \       return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxgoeqto2.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpxgoeqto2.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpxgoeqto2.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    else:\n        for key in dict:\n         \
    \   if not key.islower() and not key.isupper():\n                return False\n\
    \        return True\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"\
    }))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    }))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nFalse\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqlau5kmz.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpqlau5kmz.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpqlau5kmz.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ec7penp.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp2ec7penp.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp2ec7penp.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # check\
    \ if the dictionary is empty\n    if len(dict) == 0:\n        return False\n \
    \   # check if all keys are in lower case\n    if all(key.islower() for key in\
    \ dict.keys()):\n        return True\n    # check if all keys are in upper case\n\
    \    if all(key.isupper() for key in dict.keys()):\n        return True\n    #\
    \ if none of the above conditions are met, return False\n    return False\n\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    keys = list(dict.keys())\n    if keys[0].islower():\n\
    \        for key in keys:\n            if not key.islower():\n               \
    \ return False\n    else:\n        for key in keys:\n            if not key.isupper():\n\
    \                return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Write\
    \ your code here\n    if len(dict) == 0:\n        return False\n    else:\n  \
    \      for key in dict:\n            if key.islower() or key.isupper():\n    \
    \            continue\n            else:\n                return False\n     \
    \   return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1nxfykbx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp1nxfykbx.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp1nxfykbx.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphtkf02tq.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmphtkf02tq.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmphtkf02tq.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ False\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd0v8s0_c.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpd0v8s0_c.py\", line 26,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpd0v8s0_c.py\", line\
    \ 17, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Write\
    \ your code here\n    if len(dict) == 0:\n        return False\n    else:\n  \
    \      for key in dict:\n            if key.islower() or key.isupper():\n    \
    \            return True\n            else:\n                return False\n\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnjitcjq9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpnjitcjq9.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpnjitcjq9.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7zern74.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpy7zern74.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpy7zern74.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nFalse\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfejzpmq4.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpfejzpmq4.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpfejzpmq4.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        lower_case = True\n        upper_case\
    \ = True\n        for key in dict:\n            if key.islower():\n          \
    \      upper_case = False\n            elif key.isupper():\n                lower_case\
    \ = False\n            else:\n                return False\n        return lower_case\
    \ or upper_case\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\n\
    print(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\n\
    print(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\n\
    print(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    }))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1kzg0kq1.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1kzg0kq1.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp1kzg0kq1.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8okpjpa.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpk8okpjpa.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpk8okpjpa.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8ydu06r.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpp8ydu06r.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpp8ydu06r.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw2049hye.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpw2049hye.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw2049hye.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    elif len(dict) == 1:\n        return True\n\
    \    else:\n        for key in dict:\n            if key.islower():\n        \
    \        return True\n            elif key.isupper():\n                return\
    \ True\n            else:\n                return False\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmvep205f.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpmvep205f.py\", line 43,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpmvep205f.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnbf0vj5s.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnbf0vj5s.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpnbf0vj5s.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.isupper():\n                return False\n        return True\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nTrue\nTrue\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp24aq8vay.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp24aq8vay.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp24aq8vay.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf2cjed5w.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpf2cjed5w.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpf2cjed5w.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwneh35cn.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpwneh35cn.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpwneh35cn.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Write\
    \ your code here\n    pass\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd6rw4y_4.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpd6rw4y_4.py\", line 28,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpd6rw4y_4.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Write\
    \ your code here\n    if len(dict) == 0:\n        return False\n    else:\n  \
    \      for key in dict:\n            if key.islower() == False and key.isupper()\
    \ == False:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpru26rv60.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpru26rv60.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpru26rv60.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprtiuhbb2.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmprtiuhbb2.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmprtiuhbb2.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            elif key.isupper()\
    \ == True:\n                return True\n            else:\n                return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v80ii7y.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp1v80ii7y.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp1v80ii7y.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpexet7poj.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpexet7poj.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpexet7poj.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        lower_case = True\n        upper_case\
    \ = True\n        for key in dict:\n            if key.islower():\n          \
    \      upper_case = False\n            elif key.isupper():\n                lower_case\
    \ = False\n            else:\n                return False\n        return lower_case\
    \ or upper_case\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcu0_1h4z.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpcu0_1h4z.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpcu0_1h4z.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            elif key.isupper()\
    \ == True:\n                return True\n            else:\n                return\
    \ False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgyzq42e.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpwgyzq42e.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpwgyzq42e.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    if len(dict) == 1:\n        return True\n \
    \   lower_case = True\n    upper_case = True\n    for key in dict:\n        if\
    \ key.islower():\n            upper_case = False\n        elif key.isupper():\n\
    \            lower_case = False\n        else:\n            return False\n   \
    \ return lower_case or upper_case\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpycj2mjss.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpycj2mjss.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpycj2mjss.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    if len(dict) == 1:\n        return True\n \
    \   if all(key.islower() for key in dict.keys()):\n        return True\n    if\
    \ all(key.isupper() for key in dict.keys()):\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    elif len(dict) == 1:\n        return True\n\
    \    else:\n        for key in dict:\n            if key.islower():\n        \
    \        return True\n            elif key.isupper():\n                return\
    \ True\n            else:\n                return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8kv8upr1.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8kv8upr1.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp8kv8upr1.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt1si8jzu.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpt1si8jzu.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpt1si8jzu.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    if dict.keys() == dict.keys():\n        return\
    \ True\n    else:\n        return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpya97u_4t.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpya97u_4t.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpya97u_4t.py\", line\
    \ 29, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.isupper():\n                return True\n            else:\n      \
    \          return False\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkieh67_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpkkieh67_.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpkkieh67_.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    lower_case = True\n    upper_case = True\n\
    \    for key in dict:\n        if key.islower():\n            upper_case = False\n\
    \        elif key.isupper():\n            lower_case = False\n        else:\n\
    \            return False\n    return lower_case or upper_case\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    if len(dict) == 1:\n        return True\n \
    \   if dict.keys() == dict.keys():\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpols1qx1h.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpols1qx1h.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpols1qx1h.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        keys = dict.keys()\n       \
    \ if keys[0].islower():\n            for key in keys:\n                if not\
    \ key.islower():\n                    return False\n            return True\n\
    \        else:\n            for key in keys:\n                if not key.isupper():\n\
    \                    return False\n            return True\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyug8ube2.py\", line\
    \ 30, in <module>\n    print(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }))\n  File \"/tmp/tmpyug8ube2.py\", line 19, in check_dict_case\n    if keys[0].islower():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ec4gcoi.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp3ec4gcoi.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp3ec4gcoi.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpljvyj5hm.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpljvyj5hm.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpljvyj5hm.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpylomkkx3.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpylomkkx3.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpylomkkx3.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            elif key.isupper()\
    \ == True:\n                return True\n            else:\n                return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwbj6t30n.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpwbj6t30n.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpwbj6t30n.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpksl05bpk.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpksl05bpk.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpksl05bpk.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm4m56rfj.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpm4m56rfj.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm4m56rfj.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Write\
    \ your code here\n    if not dict:\n        return False\n    lower_keys = [key.islower()\
    \ for key in dict.keys()]\n    upper_keys = [key.isupper() for key in dict.keys()]\n\
    \    return all(lower_keys) or all(upper_keys)\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc362gyqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpc362gyqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpc362gyqe.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        lower_case = True\n        upper_case\
    \ = True\n        for key in dict:\n            if key.islower():\n          \
    \      upper_case = False\n            elif key.isupper():\n                lower_case\
    \ = False\n            else:\n                return False\n        return lower_case\
    \ or upper_case\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpherwh32e.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpherwh32e.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpherwh32e.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3cqq4_zs.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp3cqq4_zs.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp3cqq4_zs.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n            else:\n                return True\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz40g3ua8.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpz40g3ua8.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpz40g3ua8.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nFalse\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnojub1rk.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpnojub1rk.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpnojub1rk.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    first_key = list(dict.keys())[0]\n    if first_key.islower():\n\
    \        for key in dict.keys():\n            if not key.islower():\n        \
    \        return False\n    elif first_key.isupper():\n        for key in dict.keys():\n\
    \            if not key.isupper():\n                return False\n    else:\n\
    \        return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            elif key.isupper()\
    \ == True:\n                return True\n            else:\n                return\
    \ False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4rxe45kk.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp4rxe45kk.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp4rxe45kk.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        lower_case = True\n        upper_case\
    \ = True\n        for key in dict:\n            if key.islower():\n          \
    \      upper_case = False\n            elif key.isupper():\n                lower_case\
    \ = False\n            else:\n                return False\n        return lower_case\
    \ or upper_case\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    if dict.keys() == dict.keys():\n        return\
    \ True\n    else:\n        return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp24rask_3.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp24rask_3.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp24rask_3.py\", line\
    \ 29, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    if len(dict) == 1:\n        return True\n \
    \   if dict.keys() == dict.keys():\n        return True\n    return False\n\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpckt1k3fh.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpckt1k3fh.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpckt1k3fh.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0m6erjqs.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp0m6erjqs.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp0m6erjqs.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nFalse\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplvdp7ipn.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmplvdp7ipn.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmplvdp7ipn.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        if dict.keys() == dict.keys():\n\
    \            return True\n        else:\n            return False\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoe2fl2u6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoe2fl2u6.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpoe2fl2u6.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            elif key.isupper()\
    \ == True:\n                return True\n            else:\n                return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcjop5_eg.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpcjop5_eg.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpcjop5_eg.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    keys = list(dict.keys())\n    if keys[0].islower():\n\
    \        for key in keys:\n            if not key.islower():\n               \
    \ return False\n    else:\n        for key in keys:\n            if not key.isupper():\n\
    \                return False\n    return True\n\nprint(check_dict_case({\"a\"\
    :\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\"\
    :\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\"\
    :\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\"\
    , \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfpqvw_i9.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpfpqvw_i9.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpfpqvw_i9.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        lower = True\n        upper\
    \ = True\n        for key in dict:\n            if key.islower():\n          \
    \      upper = False\n            elif key.isupper():\n                lower =\
    \ False\n            else:\n                return False\n        return lower\
    \ or upper\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    else:\n        lower_case = True\n        upper_case\
    \ = True\n        for key in dict:\n            if key.islower():\n          \
    \      upper_case = False\n            elif key.isupper():\n                lower_case\
    \ = False\n            else:\n                return False\n        return lower_case\
    \ or upper_case\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfv3_5jcc.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpfv3_5jcc.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpfv3_5jcc.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    elif len(dict) == 1:\n        return True\n\
    \    else:\n        for key in dict:\n            if key.islower():\n        \
    \        return True\n            else:\n                return False\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2vxec_8x.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp2vxec_8x.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp2vxec_8x.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # check\
    \ if the dictionary is empty\n    if len(dict) == 0:\n        return False\n \
    \   # check if all keys are in lower case\n    if all(key.islower() for key in\
    \ dict.keys()):\n        return True\n    # check if all keys are in upper case\n\
    \    if all(key.isupper() for key in dict.keys()):\n        return True\n    #\
    \ if all keys are not in lower case or upper case, return False\n    return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp91pr7rk_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp91pr7rk_.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp91pr7rk_.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo09vxnlt.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpo09vxnlt.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpo09vxnlt.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        lower = True\n        upper\
    \ = True\n        for key in dict:\n            if key.islower():\n          \
    \      upper = False\n            elif key.isupper():\n                lower =\
    \ False\n            else:\n                return False\n        return lower\
    \ or upper\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    if dict.keys() == dict.keys():\n        return\
    \ True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx7smpwtf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpx7smpwtf.py\", line 32,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpx7smpwtf.py\", line\
    \ 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        lower_case = True\n        upper_case\
    \ = True\n        for key in dict:\n            if key.islower():\n          \
    \      upper_case = False\n            elif key.isupper():\n                lower_case\
    \ = False\n            else:\n                return False\n        return lower_case\
    \ or upper_case\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkpk2d70a.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpkpk2d70a.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpkpk2d70a.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Write\
    \ your code here\n    if len(dict) == 0:\n        return False\n    if len(dict)\
    \ == 1:\n        return True\n    if dict.keys() == dict.keys():\n        return\
    \ True\n    else:\n        return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpft5lqc30.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpft5lqc30.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpft5lqc30.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9icuwe1w.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp9icuwe1w.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp9icuwe1w.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        keys = list(dict.keys())\n \
    \       if keys[0].islower():\n            for key in keys:\n                if\
    \ not key.islower():\n                    return False\n            return True\n\
    \        elif keys[0].isupper():\n            for key in keys:\n             \
    \   if not key.isupper():\n                    return False\n            return\
    \ True\n        else:\n            return False\n\ndef check(candidate):\n   \
    \ assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdit311jd.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpdit311jd.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpdit311jd.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            elif key.isupper()\
    \ == True:\n                return True\n            else:\n                return\
    \ False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_vzai2ie.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp_vzai2ie.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp_vzai2ie.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygbeqyy9.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpygbeqyy9.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpygbeqyy9.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaeep205f.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpaeep205f.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpaeep205f.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    else:\n        lower_case = True\n        upper_case\
    \ = True\n        for key in dict:\n            if not key.islower():\n      \
    \          lower_case = False\n            if not key.isupper():\n           \
    \     upper_case = False\n        return lower_case or upper_case\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpai7uxb7_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpai7uxb7_.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpai7uxb7_.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    lower = True\n    upper = True\n    for key\
    \ in dict:\n        if key.islower():\n            upper = False\n        elif\
    \ key.isupper():\n            lower = False\n        else:\n            return\
    \ False\n    return lower or upper\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_zdo7tmy.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp_zdo7tmy.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp_zdo7tmy.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    lower_case = True\n    upper_case = True\n\
    \    for key in dict:\n        if key.islower():\n            upper_case = False\n\
    \        elif key.isupper():\n            lower_case = False\n        else:\n\
    \            return False\n    return lower_case or upper_case\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                continue\n           \
    \ else:\n                return False\n        return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6yhhmm32.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp6yhhmm32.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp6yhhmm32.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    if len(dict) == 1:\n        return True\n \
    \   else:\n        if dict.keys() == dict.keys():\n            return True\n \
    \       else:\n            return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvgf71ox7.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpvgf71ox7.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpvgf71ox7.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp791zvov5.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp791zvov5.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp791zvov5.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    elif len(dict) == 1:\n        return True\n\
    \    else:\n        keys = list(dict.keys())\n        if keys[0].islower():\n\
    \            for key in keys:\n                if not key.islower():\n       \
    \             return False\n        else:\n            for key in keys:\n    \
    \            if not key.isupper():\n                    return False\n       \
    \ return True\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\n\
    print(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\n\
    print(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\n\
    print(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    }))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa087gb5k.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpa087gb5k.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpa087gb5k.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        lower_case = True\n        upper_case\
    \ = True\n        for key in dict:\n            if not key.islower():\n      \
    \          lower_case = False\n            if not key.isupper():\n           \
    \     upper_case = False\n        return lower_case or upper_case\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp408exg6_.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp408exg6_.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp408exg6_.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        lower_case = True\n        upper_case\
    \ = True\n        for key in dict:\n            if key.islower():\n          \
    \      upper_case = False\n            elif key.isupper():\n                lower_case\
    \ = False\n            else:\n                return False\n        return lower_case\
    \ or upper_case\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ber4z2h.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1ber4z2h.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp1ber4z2h.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Check\
    \ if the dictionary is empty\n    if len(dict) == 0:\n        return False\n \
    \   # Check if all keys are in lower case\n    elif all(key.islower() for key\
    \ in dict.keys()):\n        return True\n    # Check if all keys are in upper\
    \ case\n    elif all(key.isupper() for key in dict.keys()):\n        return True\n\
    \    else:\n        return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    elif len(dict) == 1:\n        return True\n\
    \    else:\n        if dict.keys()[0].islower():\n            for key in dict.keys():\n\
    \                if not key.islower():\n                    return False\n   \
    \         return True\n        elif dict.keys()[0].isupper():\n            for\
    \ key in dict.keys():\n                if not key.isupper():\n               \
    \     return False\n            return True\n        else:\n            return\
    \ False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp58dlj0x_.py\", line\
    \ 33, in <module>\n    print(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }))\n  File \"/tmp/tmp58dlj0x_.py\", line 20, in check_dict_case\n    if dict.keys()[0].islower():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    if len(dict) == 1:\n        return True\n \
    \   lower_case = True\n    upper_case = True\n    for key in dict:\n        if\
    \ key.islower():\n            upper_case = False\n        elif key.isupper():\n\
    \            lower_case = False\n        else:\n            return False\n   \
    \ return lower_case or upper_case\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    if len(dict) == 1:\n        return True\n \
    \   lower_case = True\n    upper_case = True\n    for key in dict:\n        if\
    \ key.islower():\n            upper_case = False\n        elif key.isupper():\n\
    \            lower_case = False\n        else:\n            return False\n   \
    \ return lower_case or upper_case\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    is_lower = False\n    is_upper = False\n  \
    \  for key in dict:\n        if key.islower():\n            is_lower = True\n\
    \        elif key.isupper():\n            is_upper = True\n        else:\n   \
    \         return False\n    return is_lower or is_upper\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzos5dx81.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpzos5dx81.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpzos5dx81.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr6pm97gi.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpr6pm97gi.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpr6pm97gi.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    first_key = list(dict.keys())[0]\n    if first_key.islower():\n\
    \        for key in dict.keys():\n            if not key.islower():\n        \
    \        return False\n    elif first_key.isupper():\n        for key in dict.keys():\n\
    \            if not key.isupper():\n                return False\n    else:\n\
    \        return False\n    return True\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n            elif key.islower() == True:\n                for key in dict:\n\
    \                    if key.islower() == False:\n                        return\
    \ False\n            elif key.isupper() == True:\n                for key in dict:\n\
    \                    if key.isupper() == False:\n                        return\
    \ False\n    return True\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"\
    }))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    }))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    else:\n        lower_keys = [key.islower()\
    \ for key in dict.keys()]\n        upper_keys = [key.isupper() for key in dict.keys()]\n\
    \        return all(lower_keys) or all(upper_keys)\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuodku5e4.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpuodku5e4.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuodku5e4.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    if dict.keys() == dict.keys():\n        return\
    \ True\n    else:\n        return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4exim993.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp4exim993.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp4exim993.py\", line\
    \ 29, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            elif key.isupper()\
    \ == True:\n                return True\n            else:\n                return\
    \ False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpugr95_n7.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpugr95_n7.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpugr95_n7.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    lower_keys = [key.islower() for key in dict.keys()]\n\
    \    upper_keys = [key.isupper() for key in dict.keys()]\n    return all(lower_keys)\
    \ or all(upper_keys)\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # check\
    \ if the dictionary is empty\n    if len(dict) == 0:\n        return False\n \
    \   # check if all keys are in lower case\n    elif all(key.islower() for key\
    \ in dict.keys()):\n        return True\n    # check if all keys are in upper\
    \ case\n    elif all(key.isupper() for key in dict.keys()):\n        return True\n\
    \    else:\n        return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    lower_case = True\n    upper_case = True\n\
    \    for key in dict:\n        if key.islower():\n            upper_case = False\n\
    \        elif key.isupper():\n            lower_case = False\n        else:\n\
    \            return False\n    return lower_case or upper_case\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp3y6yvnd.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpp3y6yvnd.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpp3y6yvnd.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvfim077.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpcvfim077.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpcvfim077.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    elif dict.keys() == dict.keys():\n        return\
    \ True\n    else:\n        return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp87r31rcw.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp87r31rcw.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp87r31rcw.py\", line\
    \ 29, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmw3utec_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpmw3utec_.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpmw3utec_.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # check\
    \ if the dictionary is empty\n    if len(dict) == 0:\n        return False\n \
    \   # check if all keys are in lower case\n    elif all(key.islower() for key\
    \ in dict.keys()):\n        return True\n    # check if all keys are in upper\
    \ case\n    elif all(key.isupper() for key in dict.keys()):\n        return True\n\
    \    else:\n        return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    if dict.keys() == dict.keys():\n        return\
    \ True\n    else:\n        return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd12biaue.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpd12biaue.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpd12biaue.py\", line\
    \ 29, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        lower_keys = [key.islower()\
    \ for key in dict.keys()]\n        upper_keys = [key.isupper() for key in dict.keys()]\n\
    \        return all(lower_keys) or all(upper_keys)\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg4rksyws.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpg4rksyws.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpg4rksyws.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp04w1iwe2.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp04w1iwe2.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp04w1iwe2.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwk0iiq27.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpwk0iiq27.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpwk0iiq27.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Write\
    \ your code here\n    if len(dict) == 0:\n        return False\n    if dict.keys()\
    \ == dict.keys():\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw9oqigsn.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpw9oqigsn.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw9oqigsn.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            elif key.isupper()\
    \ == True:\n                return True\n            else:\n                return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8mhl4mch.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp8mhl4mch.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp8mhl4mch.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    elif len(dict) == 1:\n        return True\n\
    \    else:\n        for key in dict:\n            if key.islower():\n        \
    \        return True\n            else:\n                return False\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbpe2tfc8.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpbpe2tfc8.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbpe2tfc8.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    if len(dict) == 1:\n        return True\n \
    \   if all(key.islower() for key in dict.keys()):\n        return True\n    if\
    \ all(key.isupper() for key in dict.keys()):\n        return True\n    return\
    \ False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj957y320.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpj957y320.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpj957y320.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            elif key.isupper()\
    \ == True:\n                return True\n            else:\n                return\
    \ False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3y2c2yv7.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp3y2c2yv7.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp3y2c2yv7.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    for key in dict:\n        if key.islower()\
    \ and key.isupper():\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3vp846t_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp3vp846t_.py\", line 32,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp3vp846t_.py\", line\
    \ 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        if dict.keys() == dict.keys():\n\
    \            return True\n        else:\n            return False\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbezqqxht.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbezqqxht.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbezqqxht.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    elif dict.keys() == dict.keys():\n        return\
    \ True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp98gnf0bp.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp98gnf0bp.py\", line 32,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp98gnf0bp.py\", line\
    \ 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptqluwew8.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmptqluwew8.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmptqluwew8.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpux848j1e.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpux848j1e.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpux848j1e.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2prlihxs.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp2prlihxs.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp2prlihxs.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuml_2uge.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuml_2uge.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuml_2uge.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    if dict.keys() == dict.keys():\n        return\
    \ True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2c4crlmm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2c4crlmm.py\", line 32,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp2c4crlmm.py\", line\
    \ 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj6aex1gx.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpj6aex1gx.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpj6aex1gx.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwqr8hw2_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpwqr8hw2_.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpwqr8hw2_.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpik16ynvp.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpik16ynvp.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpik16ynvp.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        keys = dict.keys()\n       \
    \ if keys[0].islower():\n            for key in keys:\n                if not\
    \ key.islower():\n                    return False\n        else:\n          \
    \  for key in keys:\n                if not key.isupper():\n                 \
    \   return False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoqu54ddd.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpoqu54ddd.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpoqu54ddd.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpoqu54ddd.py\", line 19, in check_dict_case\n    if keys[0].islower():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    keys = list(dict.keys())\n    if keys[0].islower():\n\
    \        for key in keys:\n            if not key.islower():\n               \
    \ return False\n    elif keys[0].isupper():\n        for key in keys:\n      \
    \      if not key.isupper():\n                return False\n    else:\n      \
    \  return False\n    return True\n\nprint(check_dict_case({\"a\":\"apple\", \"\
    b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"\
    B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"\
    a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"\
    \ }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        lower = True\n        upper\
    \ = True\n        for key in dict:\n            if key.islower():\n          \
    \      upper = False\n            elif key.isupper():\n                lower =\
    \ False\n            else:\n                return False\n        return lower\
    \ or upper\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8lfpolkr.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp8lfpolkr.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp8lfpolkr.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Write\
    \ your code here\n    if len(dict) == 0:\n        return False\n    else:\n  \
    \      for key in dict:\n            if key.islower() == True:\n             \
    \   return True\n            else:\n                return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnkkkmtx9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpnkkkmtx9.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpnkkkmtx9.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    if len(dict) == 1:\n        return True\n \
    \   keys = list(dict.keys())\n    if keys[0].islower():\n        for key in keys:\n\
    \            if not key.islower():\n                return False\n    else:\n\
    \        for key in keys:\n            if not key.isupper():\n               \
    \ return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpic2dt9u5.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpic2dt9u5.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpic2dt9u5.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    elif len(dict) == 1:\n        return True\n\
    \    else:\n        for key in dict:\n            if key.islower():\n        \
    \        return True\n            elif key.isupper():\n                return\
    \ True\n            else:\n                return False\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnvdrectc.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpnvdrectc.py\", line 43,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpnvdrectc.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        return all(key.islower() for\
    \ key in dict) or all(key.isupper() for key in dict)\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    if dict.keys() == dict.keys():\n        return\
    \ True\n    else:\n        return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpckbg7me4.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpckbg7me4.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpckbg7me4.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9z1u6_6u.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp9z1u6_6u.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp9z1u6_6u.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqo9phofh.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpqo9phofh.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpqo9phofh.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjehe825q.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpjehe825q.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpjehe825q.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        keys = dict.keys()\n       \
    \ if keys[0].islower():\n            for key in keys:\n                if not\
    \ key.islower():\n                    return False\n        else:\n          \
    \  for key in keys:\n                if not key.isupper():\n                 \
    \   return False\n        return True\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpplod3_3b.py\", line\
    \ 29, in <module>\n    print(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }))\n  File \"/tmp/tmpplod3_3b.py\", line 19, in check_dict_case\n    if keys[0].islower():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl1xijl5b.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpl1xijl5b.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpl1xijl5b.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nFalse\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpomluaezr.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpomluaezr.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpomluaezr.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_f81b_yd.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_f81b_yd.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp_f81b_yd.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwolzzz9r.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpwolzzz9r.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpwolzzz9r.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpruelie5o.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpruelie5o.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpruelie5o.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkd347g9o.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpkd347g9o.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpkd347g9o.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    else:\n        if all(key.islower() for key\
    \ in dict.keys()):\n            return True\n        elif all(key.isupper() for\
    \ key in dict.keys()):\n            return True\n        else:\n            return\
    \ False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl3stf6_u.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpl3stf6_u.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpl3stf6_u.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    if dict.keys() == dict.keys():\n        return\
    \ True\n    else:\n        return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2qh3mvzi.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp2qh3mvzi.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp2qh3mvzi.py\", line\
    \ 29, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    lower_keys = [key.islower() for key in dict.keys()]\n\
    \    upper_keys = [key.isupper() for key in dict.keys()]\n    return all(lower_keys)\
    \ or all(upper_keys)\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"\
    }))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    }))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyu9rlt7n.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpyu9rlt7n.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpyu9rlt7n.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            elif key.isupper()\
    \ == True:\n                return True\n            else:\n                return\
    \ False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp5aqz8t8.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpp5aqz8t8.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpp5aqz8t8.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Write\
    \ your code here\n    if len(dict) == 0:\n        return False\n    else:\n  \
    \      for key in dict:\n            if key.islower() == True:\n             \
    \   return True\n            else:\n                return False\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqk66_7i.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpgqk66_7i.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpgqk66_7i.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n            else:\n                return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmyf_ijol.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpmyf_ijol.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpmyf_ijol.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8qft3c4d.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8qft3c4d.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp8qft3c4d.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp815det3g.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp815det3g.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp815det3g.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp57saybar.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp57saybar.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp57saybar.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == False and key.isupper() == False:\n                return\
    \ False\n        return True\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nFalse\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph5_vil50.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmph5_vil50.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmph5_vil50.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    if len(dict) == 1:\n        return True\n \
    \   lower_case = True\n    upper_case = True\n    for key in dict:\n        if\
    \ key.islower():\n            upper_case = False\n        elif key.isupper():\n\
    \            lower_case = False\n        else:\n            return False\n   \
    \ return lower_case or upper_case\n\nprint(check_dict_case({\"a\":\"apple\", \"\
    b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"\
    B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"\
    a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"\
    \ }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3lob4d7w.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3lob4d7w.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp3lob4d7w.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # check\
    \ if the dictionary is empty\n    if len(dict) == 0:\n        return False\n \
    \   # check if all keys are in lower case\n    if all(key.islower() for key in\
    \ dict.keys()):\n        return True\n    # check if all keys are in upper case\n\
    \    if all(key.isupper() for key in dict.keys()):\n        return True\n    #\
    \ if all keys are not in lower case or upper case, return False\n    return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.isupper():\n                return False\n            else:\n     \
    \           return True\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"\
    }))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    }))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nTrue\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpksjfrk0l.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpksjfrk0l.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpksjfrk0l.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_zrekazv.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp_zrekazv.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp_zrekazv.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsuh5knbj.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpsuh5knbj.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpsuh5knbj.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            elif key.isupper()\
    \ == True:\n                return True\n            else:\n                return\
    \ False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1jko3f91.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp1jko3f91.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp1jko3f91.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # check\
    \ if the dictionary is empty\n    if len(dict) == 0:\n        return False\n \
    \   # check if all keys are in lower case\n    if all(key.islower() for key in\
    \ dict.keys()):\n        return True\n    # check if all keys are in upper case\n\
    \    if all(key.isupper() for key in dict.keys()):\n        return True\n    #\
    \ if the dictionary is not empty and all keys are not in lower or upper case\n\
    \    return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8iywbav2.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp8iywbav2.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp8iywbav2.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() or key.isupper():\n                return True\n        \
    \    else:\n                return False\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd_8ebj5k.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpd_8ebj5k.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpd_8ebj5k.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # check\
    \ if dict is empty\n    if len(dict) == 0:\n        return False\n    # check\
    \ if all keys are strings\n    for key in dict:\n        if not isinstance(key,\
    \ str):\n            return False\n    # check if all keys are in lower case\n\
    \    for key in dict:\n        if key != key.lower():\n            return False\n\
    \    # check if all keys are in upper case\n    for key in dict:\n        if key\
    \ != key.upper():\n            return False\n    return True\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "False\nFalse\nFalse\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp25otpwwh.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp25otpwwh.py\", line 47,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp25otpwwh.py\", line\
    \ 38, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    for key in dict:\n        if key.islower()\
    \ and key.isupper():\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp225wjiyw.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp225wjiyw.py\", line 32,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp225wjiyw.py\", line\
    \ 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7s0lpwx.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpb7s0lpwx.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpb7s0lpwx.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.islower() == True:\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwndvfy6v.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpwndvfy6v.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpwndvfy6v.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        keys = list(dict.keys())\n \
    \       if keys[0].islower():\n            for key in keys:\n                if\
    \ not key.islower():\n                    return False\n        else:\n      \
    \      for key in keys:\n                if not key.isupper():\n             \
    \       return False\n        return True\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        lower_case = True\n        upper_case\
    \ = True\n        for key in dict:\n            if key.islower():\n          \
    \      upper_case = False\n            elif key.isupper():\n                lower_case\
    \ = False\n            else:\n                return False\n        return lower_case\
    \ or upper_case\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\n\
    print(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\n\
    print(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\n\
    print(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    }))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   if key.isupper():\n                return False\n        return True\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt0ftv8gd.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt0ftv8gd.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpt0ftv8gd.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
