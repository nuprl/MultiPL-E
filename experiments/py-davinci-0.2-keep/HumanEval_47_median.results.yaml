name: HumanEval_47_median
language: python
results:
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n\
    \ = len(l)\n    if n % 2 == 1:\n        return sorted(l)[n // 2]\n    else:\n\
    \        return sum(sorted(l)[n // 2 - 1:n // 2 + 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n\
    \ = len(l)\n    if n == 0:\n        raise ValueError(\"Cannot compute median of\
    \ empty list\")\n    l.sort()\n    if n % 2 == 1:\n        return l[n // 2]\n\
    \    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n\
    \    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n\
    \    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n\
    \ = len(l)\n    if n == 0:\n        raise ValueError(\"median() arg is an empty\
    \ sequence\")\n    l.sort()\n    if n % 2 == 1:\n        return l[n // 2]\n  \
    \  else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n\
    \    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n\
    \    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n\
    \    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n\
    \ = len(l)\n    if n == 0:\n        raise ValueError(\"Cannot find median of empty\
    \ list\")\n    l.sort()\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n\
    \        return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n\
    \ = len(l)\n    if n == 0:\n        raise ValueError(\"median() arg is an empty\
    \ sequence\")\n    l = sorted(l)\n    if n % 2 == 1:\n        return l[n // 2]\n\
    \    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n\
    \ = len(l)\n    if n == 0:\n        raise ValueError(\"median() arg is an empty\
    \ sequence\")\n    l.sort()\n    if n % 2 == 1:\n        return l[n // 2]\n  \
    \  else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n\
    \ = len(l)\n    if n == 0:\n        raise IndexError(\"Empty list\")\n    sorted_l\
    \ = sorted(l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n\
    \        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    #\
    \ Sort the list\n    l.sort()\n    # Find the middle index\n    mid_index = len(l)\
    \ // 2\n    # If the length of the list is odd, return the middle element\n  \
    \  if len(l) % 2 == 1:\n        return l[mid_index]\n    # If the length of the\
    \ list is even, return the average of the two middle elements\n    else:\n   \
    \     return (l[mid_index] + l[mid_index - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n\
    \ = len(l)\n    if n == 0:\n        raise ValueError('median() arg is an empty\
    \ sequence')\n    l.sort()\n    if n % 2 == 1:\n        return l[n // 2]\n   \
    \ else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n\
    \    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n\
    \ = len(l)\n    if n == 0:\n        raise ValueError(\"Cannot find median of empty\
    \ list\")\n    l.sort()\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n\
    \        return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n\
    \ = len(l)\n    if n == 0:\n        raise ValueError(\"median() arg is an empty\
    \ sequence\")\n    s = sorted(l)\n    if n % 2 == 1:\n        return s[n // 2]\n\
    \    else:\n        return (s[n // 2 - 1] + s[n // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n\
    \    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l\
    \ = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n\
    \    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_l\
    \ = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return sorted_l[n //\
    \ 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n\
    \ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
    \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n   \
    \ assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5])\
    \ == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n   \
    \     return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n    assert\
    \ candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) ==\
    \ 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\
    \"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n\
    \    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n\
    \ = len(l)\n    if n == 0:\n        raise ValueError(\"median() arg is an empty\
    \ sequence\")\n    l.sort()\n    if n % 2 == 1:\n        return l[n // 2]\n  \
    \  else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\ndef check(candidate):\n\
    \    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6,\
    \ 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6,\
    \ 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n\
    \    check(median)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
