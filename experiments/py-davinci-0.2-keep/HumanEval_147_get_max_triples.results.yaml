name: HumanEval_147_get_max_triples
language: python
results:
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwnfgs_8c.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwnfgs_8c.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpwnfgs_8c.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i\
    \ + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1 + j * j - j + 1 + k * k - k +\
    \ 1\n    # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k) - (i + j + k) + 3\n\
    \    # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 2\n    # a[i] + a[j]\
    \ + a[k] = (i + j + k) * (i + j + k - 1) + 2\n    # (i + j + k) * (i + j + k -\
    \ 1) % 3 == 0\n    # (i + j + k) % 3 == 0\n    # (i + j + k) % 3 == 0\n    # (i\
    \ + j + k) % 3 == 0\n    # (i + j + k) % 3 == 0\n    # (i + j + k) % 3 == 0\n\
    \    # (i + j + k) % 3 == 0\n    # (i + j + k) % 3 == 0\n    # (i + j + k) % 3\
    \ == 0\n    # (i + j + k) % 3 == 0\n    # (i + j + k) % 3 == 0\n    # (i + j +\
    \ k) % 3 == 0\n    # (i + j + k) % 3 == 0\n    # (i + j + k) % 3 == 0\n    # (i\
    \ + j + k) % 3 == 0\n    # (i + j + k) % 3 == 0\n    # (i + j + k) % 3 == 0\n\
    \    # (i + j + k) % 3 == 0\n    # (i + j + k) % 3 == 0\n    # (i + j + k) % 3\
    \ == 0\n    # (i + j + k) % 3 == 0\n    # (i + j + k) % 3 == 0\n    # (i + j +\
    \ k) % 3 == 0\n    # (i + j\ndef check(candidate):\n    assert candidate(5) ==\
    \ 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptw_jbv5c.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmptw_jbv5c.py\", line 51,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmptw_jbv5c.py\", line\
    \ 45, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(n) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1 +\
    \ j*j - j + 1 + k*k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpytewz8vt.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpytewz8vt.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpytewz8vt.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i-i+1 + j*j-j+1\
    \ + k*k-k+1) % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpupfh8hxu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpupfh8hxu.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpupfh8hxu.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiqqhngh3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiqqhngh3.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpiqqhngh3.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return n * (n - 1)\
    \ * (n - 2) // 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n  \
    \  assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn6blbfn_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpn6blbfn_.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpn6blbfn_.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # return sum(1 for\
    \ i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n    return sum(1 for i in\
    \ range(1, n) for j in range(i + 1, n) if (i * i - i + 1 + j * j - j + 1) % 3\
    \ == 0)\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpolefnybc.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpolefnybc.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpolefnybc.py\", line\
    \ 20, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0zzc3le2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp0zzc3le2.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp0zzc3le2.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmtb9v8wt.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmtb9v8wt.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpmtb9v8wt.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1\
    \ + j*j - j + 1 + k*k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqcm83yi_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqcm83yi_.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpqcm83yi_.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # 1 \u2264 n \u2264\
    \ 10^5\n    # 1 \u2264 a[i] \u2264 10^9\n    # 1 \u2264 a[i] + a[j] + a[k] \u2264\
    \ 10^9\n    # 1 \u2264 i < j < k \u2264 n\n    # a[i] + a[j] + a[k] is a multiple\
    \ of 3\n    # a[i] + a[j] + a[k] = 3 * x, where x is an integer\n    # a[i] +\
    \ a[j] = 3 * x - a[k]\n    # a[i] + a[j] = 3 * x - (i * i - i + 1)\n    # a[i]\
    \ + a[j] = 3 * x - i * i + i - 1\n    # a[i] + a[j] = 3 * x - i * i + i - 1\n\
    \    # a[i] + a[j] = 3 * x - i * i + i - 1\n    # a[i] + a[j] = 3 * x - i * i\
    \ + i - 1\n    # a[i] + a[j] = 3 * x - i * i + i - 1\n    # a[i] + a[j] = 3 *\
    \ x - i * i + i - 1\n    # a[i] + a[j] = 3 * x - i * i + i - 1\n    # a[i] + a[j]\
    \ = 3 * x - i * i + i - 1\n    # a[i] + a[j] = 3 * x - i * i + i - 1\n    # a[i]\
    \ + a[j] = 3 * x - i * i + i - 1\n    # a[i] + a[j] = 3 * x - i * i + i - 1\n\
    \    # a[i] + a[j] = 3 * x - i * i + i - 1\n    # a[i] + a[j] = 3 * x - i * i\
    \ + i - 1\n    # a[i] + a[j] = 3 * x - i * i + i - 1\n    # a[i] + a[j] = 3 *\
    \ x - i * i + i\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyp6_36_g.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpyp6_36_g.py\", line 45,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyp6_36_g.py\", line\
    \ 39, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # return sum(1 for\
    \ i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n    return sum(1 for i in\
    \ range(1, n) for j in range(i + 1, n) if (i * i - i + 1 + j * j - j + 1) % 3\
    \ == 0)\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_v0qckyo.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_v0qckyo.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp_v0qckyo.py\", line\
    \ 20, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n - 1) for j in range(i + 1, n) for k in range(j + 1, n) if (i *\
    \ i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpodzgrdcr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpodzgrdcr.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpodzgrdcr.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp80yulgdc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp80yulgdc.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp80yulgdc.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfonywwsl.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfonywwsl.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpfonywwsl.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzngulhnq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzngulhnq.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpzngulhnq.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n       \
    \ return 0\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n\
    \    if n == 5:\n        return 4\n    if n == 6:\n        return 7\n    if n\
    \ == 7:\n        return 11\n    if n == 8:\n        return 16\n    if n == 9:\n\
    \        return 22\n    if n == 10:\n        return 29\n    if n == 11:\n    \
    \    return 37\n    if n == 12:\n        return 46\n    if n == 13:\n        return\
    \ 56\n    if n == 14:\n        return 67\n    if n == 15:\n        return 79\n\
    \    if n == 16:\n        return 92\n    if n == 17:\n        return 106\n   \
    \ if n == 18:\n        return 121\n    if n == 19:\n        return 137\n    if\
    \ n == 20:\n        return 154\n    if n == 21:\n        return 172\n    if n\
    \ == 22:\n        return 191\n    if n == 23:\n        return 211\n    if n ==\
    \ 24:\n        return 232\n    if n == 25:\n        return 254\n    if n == 26:\n\
    \        return 277\n    if n == 27:\n        return 301\n    if n == 28:\n  \
    \      return 326\n    if n == 29:\n        return 352\n    if n == 30:\n    \
    \    return 379\n    if n == 31:\n        return 407\n    if n == 32:\n      \
    \  return 436\n    if n == 33:\n        return 466\n    if n == 34:\n        return\
    \ 497\n    if n == 35:\n        return 529\n    if n == 36:\n        return 562\n\
    \    if n == 37:\n        return 596\n    if n == 38:\n        return 631\n  \
    \  if n == 39:\n        return 667\n    if n == 40:\n        return 704\n    if\
    \ n == 41:\n        return 742\n    if n == 42:\n        return 781\n    if n\
    \ == 43:\n        return 821\n    if n == 44:\n        return 862\n    if n ==\
    \ 45:\n        return 904\n    if n == 46:\n        return 947\n    if n\ndef\
    \ check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpn5jxez5t.py\", line 105\n    if n\n       ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp31ljn4t2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp31ljn4t2.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp31ljn4t2.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt970_ryq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpt970_ryq.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpt970_ryq.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum([1 for i in range(n - 2) for j in\
    \ range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0])\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n       \
    \ return 0\n    elif n == 3:\n        return 1\n    else:\n        return (n -\
    \ 3) * (n - 2) // 2\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp568t5un6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp568t5un6.py\", line 30,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp568t5un6.py\", line\
    \ 24, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgp9vt5p_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpgp9vt5p_.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpgp9vt5p_.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i\
    \ + 1\n    # a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 3\n    #               \
    \      = 3 * (i * i - i + 1)\n    #                     = 3 * a[i]\n    # a[i]\
    \ + a[j] + a[k] = 3 * a[i]\n    # a[i] = 3 * a[i] - a[j] - a[k]\n    # a[i] =\
    \ 3 * a[i] - (3 * a[i] - a[i] - a[j] - a[k])\n    # a[i] = 2 * a[i] - a[j] - a[k]\n\
    \    # a[i] + a[j] + a[k] = 3 * a[i]\n    # a[i] + a[j] + a[k] = 3 * a[i]\n  \
    \  # a[i] + a[j] + a[k] = 3 * a[i]\n    # a[i] + a[j] + a[k] = 3 * a[i]\n    #\
    \ a[i] + a[j] + a[k] = 3 * a[i]\n    # a[i] + a[j] + a[k] = 3 * a[i]\n    # a[i]\
    \ + a[j] + a[k] = 3 * a[i]\n    # a[i] + a[j] + a[k] = 3 * a[i]\n    # a[i] +\
    \ a[j] + a[k] = 3 * a[i]\n    # a[i] + a[j] + a[k] = 3 * a[i]\n    # a[i] + a[j]\
    \ + a[k] = 3 * a[i]\n    # a[i] + a[j] + a[k] = 3 * a[i]\n    # a[i] + a[j] +\
    \ a[k] = 3 * a[i]\n    # a[i] + a[j] + a[k] = 3 *\ndef check(candidate):\n   \
    \ assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwfmf0cdg.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpwfmf0cdg.py\", line 44,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpwfmf0cdg.py\", line\
    \ 38, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd7ur37hp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpd7ur37hp.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpd7ur37hp.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # return sum(1 for\
    \ i in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i-i+1 +\
    \ j*j-j+1 + k*k-k+1) % 3 == 0)\n    return sum(1 for i in range(1, n) for j in\
    \ range(i+1, n) for k in range(j+1, n) if (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 ==\
    \ 0)\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppobiofpn.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppobiofpn.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmppobiofpn.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n       \
    \ return 0\n    return (n - 2) * (n - 1) * n // 6\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptbrs9exs.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmptbrs9exs.py\", line 27,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmptbrs9exs.py\", line\
    \ 21, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum([1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1\
    \ + j*j - j + 1 + k*k - k + 1) % 3 == 0])\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc_u71z_q.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpc_u71z_q.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpc_u71z_q.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Time: O(n)\n    #\
    \ Space: O(n)\n    # a[i] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1\n    # a[i] + a[j] + a[k] = i * i + j\
    \ * j + k * k - i - j - k + 3\n    # a[i] + a[j] + a[k] = (i + j + k) * (i + j\
    \ + k) - (i + j + k) + 3\n    # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k\
    \ - 1) + 3\n    # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 3\n   \
    \ # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 3\n    # a[i] + a[j]\
    \ + a[k] = (i + j + k) * (i + j + k - 1) + 3\n    # a[i] + a[j] + a[k] = (i +\
    \ j + k) * (i + j + k - 1) + 3\n    # a[i] + a[j] + a[k] = (i + j + k) * (i +\
    \ j + k - 1) + 3\n    # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 3\n\
    \    # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 3\n    # a[i] + a[j]\
    \ + a[k] = (i + j + k) * (i + j + k - 1) + 3\n    # a[i] + a[j] + a[k] = (i +\
    \ j + k)\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk_6fpczc.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpk_6fpczc.py\", line 38,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpk_6fpczc.py\", line\
    \ 32, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n    # and a[i] + a[j]\
    \ + a[k] is a multiple of 3.\n    # a[i] = i * i - i + 1\n    # a[i] + a[j] +\
    \ a[k] = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n    # a[i] + a[j] + a[k]\
    \ = i * i + j * j + k * k - i - j - k + 3\n    # a[i] + a[j] + a[k] = (i + j +\
    \ k) * (i + j + k) - (i + j + k) + 3\n    # a[i] + a[j] + a[k] = (i + j + k) *\
    \ (i + j + k) - (i + j + k) + 3\n    # a[i] + a[j] + a[k] = (i + j + k) * (i +\
    \ j + k) - (i + j + k) + 3\n    # a[i] + a[j] + a[k] = (i + j + k) * (i + j +\
    \ k) - (i + j + k) + 3\n    # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k) -\
    \ (i + j + k) + 3\n    # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k) - (i +\
    \ j + k) + 3\n    # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k) - (i + j +\
    \ k) + 3\n    # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k) - (i + j + k) +\
    \ 3\n    # a[i] + a[j] + a[k] = (\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp64jdoof.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpp64jdoof.py\", line 36,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpp64jdoof.py\", line\
    \ 30, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjnpvp8l2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjnpvp8l2.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpjnpvp8l2.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n       \
    \ return 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\
    \    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n         \
    \   for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0:\n                    count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoc3treta.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpoc3treta.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpoc3treta.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1\
    \ + j*j - j + 1 + k*k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdkrtlhm0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpdkrtlhm0.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpdkrtlhm0.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6tv73d1p.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6tv73d1p.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp6tv73d1p.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptwmo_7iy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptwmo_7iy.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmptwmo_7iy.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum([(n - i)\
    \ * (n - i - 1) // 2 for i in range(1, n) if (i * i - i + 1) % 3 == 0])\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv9khbeak.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpv9khbeak.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpv9khbeak.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwvfk222z.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwvfk222z.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpwvfk222z.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy0py0s28.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpy0py0s28.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpy0py0s28.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n - 1) for j in range(i + 1, n) for k in range(j + 1, n) if (i *\
    \ i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2xcanvr4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2xcanvr4.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp2xcanvr4.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i\
    \ + 1\n    # a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 1 + 3 * j * j - 3 * j +\
    \ 1 + 3 * k * k - 3 * k + 1\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j + k\
    \ * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j +\
    \ k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j\
    \ + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j *\
    \ j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j\
    \ * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i +\
    \ j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i\
    \ + j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i *\
    \ i + j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i\
    \ * i + j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i\
    \ * i + j * j + k * k) - 3 * (i +\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpryo103ir.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpryo103ir.py\", line 34,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpryo103ir.py\", line\
    \ 28, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return (n * (n - 1)\
    \ * (n - 2)) // 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n \
    \   assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv3w3a36y.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpv3w3a36y.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpv3w3a36y.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp27olatz2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp27olatz2.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp27olatz2.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return (n * (n - 1)\
    \ * (n - 2)) // 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n \
    \   assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv4bw5f4n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpv4bw5f4n.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpv4bw5f4n.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return n * (n - 1)\
    \ * (n - 2) // 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n  \
    \  assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiu2cum9_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiu2cum9_.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpiu2cum9_.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmdy5x1x2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmdy5x1x2.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpmdy5x1x2.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # a = [i * i - i +\
    \ 1 for i in range(1, n + 1)]\n    # print(a)\n    # count = 0\n    # for i in\
    \ range(n - 2):\n    #     for j in range(i + 1, n - 1):\n    #         for k\
    \ in range(j + 1, n):\n    #             if (a[i] + a[j] + a[k]) % 3 == 0:\n \
    \   #                 count += 1\n    # return count\n\n    # a = [i * i - i +\
    \ 1 for i in range(1, n + 1)]\n    # print(a)\n    # count = 0\n    # for i in\
    \ range(n - 2):\n    #     for j in range(i + 1, n - 1):\n    #         for k\
    \ in range(j + 1, n):\n    #             if (a[i] + a[j] + a[k]) % 3 == 0:\n \
    \   #                 count += 1\n    # return count\n\n    # a = [i * i - i +\
    \ 1 for i in range(1, n + 1)]\n    # print(a)\n    # count = 0\n    # for i in\
    \ range(n - 2):\n    #     for j in range(i + 1, n - 1):\n    #         for k\
    \ in range(j + 1, n):\n    #             if (a[i] + a[j] + a[k]) % 3 == 0:\n \
    \   #                 count += 1\n    # return count\n\n    # a = [i * i - i +\
    \ 1 for i in range(1, n + 1)]\n    # print(a)\n    # count = 0\n    # for i in\
    \ range(n - 2):\n    #     for j in range(i + 1, n - 1):\n    #         for k\
    \ in range(j + 1, n):\n    #             if (a[i] + a[j] + a[k]) % 3 == 0:\n \
    \   #                 count += 1\n    # return count\n\n    # a = [i * i - i +\
    \ 1 for i in range(1, n + 1)]\n    # print(a)\n    # count = 0\n    #\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw8v11jeh.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmpw8v11jeh.py\", line 66,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpw8v11jeh.py\", line\
    \ 60, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i\
    \ + 1\n    # a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 1 + 3 * j * j - 3 * j +\
    \ 1 + 3 * k * k - 3 * k + 1\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j + k\
    \ * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j +\
    \ k * k - i - j - k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j + k *\
    \ k - i - j - k + 1)\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k -\
    \ i - j - k + 1 - 1) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j + k *\
    \ k - i - j - k + 1 - 1 + 1)\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j +\
    \ k * k - i - j - k + 1 - 1 + 1 + 1) - 3\n    # a[i] + a[j] + a[k] = 3 * (i *\
    \ i + j * j + k * k - i - j - k + 1 - 1 + 1 + 1 - 1)\n    # a[i] + a[j] + a[k]\
    \ = 3 * (i * i + j * j + k * k - i - j - k + 1 - 1 + 1 + 1 - 1 + 1) - 3\n    #\
    \ a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k - i - j - k + 1 - 1 + 1 + 1\
    \ - 1 + 1 + 1)\n    # a[i] + a[j] + a[k] = 3 * (i *\ndef check(candidate):\n \
    \   assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6_sjaltw.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp6_sjaltw.py\", line 34,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp6_sjaltw.py\", line\
    \ 28, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmoxxqx9k.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmoxxqx9k.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpmoxxqx9k.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return n * (n - 1)\
    \ * (n - 2) // 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n  \
    \  assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf28s1yb3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf28s1yb3.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpf28s1yb3.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # return sum(1 for\
    \ i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n    return sum(1 for i in\
    \ range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i + j + k)\
    \ % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmsmrwi8t.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpmsmrwi8t.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpmsmrwi8t.py\", line\
    \ 20, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplyz3pces.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplyz3pces.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmplyz3pces.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i\
    \ + 1\n    # a[i] + a[j] + a[k] = 3 * (i * i - i + 1) + 3 * (j * j - j + 1) +\
    \ 3 * (k * k - k + 1)\n    # a[i] + a[j] + a[k] = 3 * (i * i - i + 1) + 3 * (j\
    \ * j - j + 1) + 3 * (k * k - k + 1)\n    # a[i] + a[j] + a[k] = 3 * (i * i -\
    \ i + 1) + 3 * (j * j - j + 1) + 3 * (k * k - k + 1)\n    # a[i] + a[j] + a[k]\
    \ = 3 * (i * i - i + 1) + 3 * (j * j - j + 1) + 3 * (k * k - k + 1)\n    # a[i]\
    \ + a[j] + a[k] = 3 * (i * i - i + 1) + 3 * (j * j - j + 1) + 3 * (k * k - k +\
    \ 1)\n    # a[i] + a[j] + a[k] = 3 * (i * i - i + 1) + 3 * (j * j - j + 1) + 3\
    \ * (k * k - k + 1)\n    # a[i] + a[j] + a[k] = 3 * (i * i - i + 1) + 3 * (j *\
    \ j - j + 1) + 3 * (k * k - k + 1)\n    # a[i] + a[j] + a[k] = 3 * (i * i - i\
    \ + 1) + 3 * (j * j - j + 1) + 3 * (k * k - k + 1)\n    # a[i] + a[j] + a[k] =\
    \ 3 * (i * i - i + 1) + 3 * (j * j - j + 1) + 3 * (k * k - k + 1)\n    # a[i]\
    \ + a[j] + a[k] = 3 *\ndef check(candidate):\n    assert candidate(5) == 1\n \
    \   assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyq63wqkz.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpyq63wqkz.py\", line 33,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpyq63wqkz.py\", line\
    \ 27, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvhua7o5j.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpvhua7o5j.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpvhua7o5j.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgzleqbzi.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpgzleqbzi.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpgzleqbzi.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i\
    \ + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfsufnhrs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfsufnhrs.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpfsufnhrs.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i-i+1 + j*j-j+1\
    \ + k*k-k+1) % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmm0jouhc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmm0jouhc.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpmm0jouhc.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqspcmlee.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqspcmlee.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpqspcmlee.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeog1x_qj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpeog1x_qj.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpeog1x_qj.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1\
    \ + j*j - j + 1 + k*k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvv2vy94a.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpvv2vy94a.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpvv2vy94a.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return n * (n - 1)\
    \ * (n - 2) // 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n  \
    \  assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphy2gyqes.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphy2gyqes.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmphy2gyqes.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # return sum(1 for\
    \ i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n    return sum(1 for i in\
    \ range(1, n) for j in range(i + 1, n) if (i * i - i + 1 + j * j - j + 1) % 3\
    \ == 0)\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfpyxltjt.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfpyxltjt.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpfpyxltjt.py\", line\
    \ 20, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # return sum([1 for\
    \ i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0])\n    return sum([1 for i\
    \ in range(1, n) for j in range(i + 1, n) if (2 * i * i - 2 * i + 2 + 2 * j *\
    \ j - 2 * j + 2) % 3 == 0])\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp73c51chj.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp73c51chj.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp73c51chj.py\", line\
    \ 20, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(n) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1 +\
    \ j*j - j + 1 + k*k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7mygskm6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7mygskm6.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp7mygskm6.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7akyhj3n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7akyhj3n.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp7akyhj3n.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # create array\n  \
    \  a = [i * i - i + 1 for i in range(1, n + 1)]\n    # count triples\n    count\
    \ = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n   \
    \         for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3\
    \ == 0:\n                    count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgaxbmd7x.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpgaxbmd7x.py\", line 34,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpgaxbmd7x.py\", line\
    \ 28, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3f0nrymf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3f0nrymf.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp3f0nrymf.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # return sum(1 for\
    \ i in range(n) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1\
    \ + j*j - j + 1 + k*k - k + 1) % 3 == 0)\n    return sum(1 for i in range(n) for\
    \ j in range(i+1, n) for k in range(j+1, n) if (i*i + j*j + k*k) % 3 == 0)\n\n\
    \ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd54kpacl.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpd54kpacl.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpd54kpacl.py\", line\
    \ 22, in check\n    assert candidate(10) == 36\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg41z32ou.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpg41z32ou.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpg41z32ou.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i\
    \ + 1\n    # a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 3 = 3 * (i * i - i + 1)\n\
    \    # a[i] + a[j] + a[k] = 3 * a[i]\n    # a[i] + a[j] + a[k] = 3 * a[j]\n  \
    \  # a[i] + a[j] + a[k] = 3 * a[k]\n    # a[i] + a[j] + a[k] = 3 * a[i] = 3 *\
    \ a[j] = 3 * a[k]\n    # a[i] = a[j] = a[k]\n    # a[i] = a[j] = a[k] = 1, 3,\
    \ 7, 13, 21, 31, 43, 57, 73, 91, 111, 133, 157, 183, 211, 241, 273, 307, 343,\
    \ 381, 421, 463, 507, 553, 601, 651, 703, 757, 813, 871, 931, 993, 1057, 1123,\
    \ 1191, 1261, 1333, 1407, 1483, 1561, 1641, 1723, 1707, 1891, 1977, 2065, 2155,\
    \ 2247, 2341, 2437, 2535, 2635, 2737, 2841, 2947, 3055, 3165, 3277, 3391, 3507,\
    \ 3625, 3745, 3867, 3991, 4117, 4245, 4375, 4507, 4641, 4777, 4915, 5055, 5197,\
    \ 5341, 5487, 5635, 5785, 5937, 6091, 6247, 6405, 6565, 6727, 6891, 7057, 7225,\
    \ 7395, 7567, 7741, 7917, 8095, 8275, 8457, 8641, 8827, 9015, 9205, 9397, 9591,\
    \ 9787, 9985, 10185, 10387, 10591, 10797, 11005, 11215, 11427, 11641, 11857,\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd9dwr3em.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpd9dwr3em.py\", line 30,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpd9dwr3em.py\", line\
    \ 24, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return (n * (n - 1)\
    \ * (n - 2)) // 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n \
    \   assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl8l4_wsb.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpl8l4_wsb.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpl8l4_wsb.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i\
    \ + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1 + j * j - j + 1 + k * k - k +\
    \ 1\n    #                     = i * i + j * j + k * k - i - j - k + 3\n    #\
    \                     = (i + j + k) * (i + j + k) - (i + j + k) + 3\n    #   \
    \                  = (i + j + k) * (i + j + k - 1) + 2\n    #                \
    \     = (i + j + k) * (i + j + k - 1) + 1 + 1\n    #                     = (i\
    \ + j + k) * (i + j + k - 1) + (1 + 1)\n    #                     = (i + j + k)\
    \ * (i + j + k - 1) + (2)\n    #                     = (i + j + k) * (i + j +\
    \ k - 1) + (2 - 1)\n    #                     = (i + j + k) * (i + j + k - 1)\
    \ + (3 - 2)\n    #                     = (i + j + k) * (i + j + k - 1) + (3 -\
    \ 3)\n    #                     = (i + j + k) * (i + j + k - 1) + (3 - 3)\n  \
    \  #                     = (i + j + k) * (i + j + k - 1) + (0)\n    #        \
    \             = (i + j + k) * (i + j + k - 1)\n    #                     = (i\
    \ + j + k) * (i + j + k - 1)\n    #                     = (i + j + k) * (i + j\
    \ + k - 1)\n    #                     = (i + j + k) * (i + j + k - 1)\n    # \
    \                    = (i + j + k) * (i + j + k - 1)\n    #                  \
    \   = (i + j + k) * (i + j + k - 1)\n    #                     = (i + j + k) *\
    \ (i + j + k - 1)\n    #                     = (\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcts5sxoy.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpcts5sxoy.py\", line 43,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpcts5sxoy.py\", line\
    \ 37, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # return sum(1 for\
    \ i in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i-i+1 +\
    \ j*j-j+1 + k*k-k+1) % 3 == 0)\n    return sum(1 for i in range(1, n) for j in\
    \ range(i+1, n) for k in range(j+1, n) if (i+j+k) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl3dti9dc.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpl3dti9dc.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpl3dti9dc.py\", line\
    \ 20, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5bc5qhp5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5bc5qhp5.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp5bc5qhp5.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return n * (n - 1)\
    \ * (n - 2) // 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n  \
    \  assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp34nxcs1f.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp34nxcs1f.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp34nxcs1f.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo33q4se8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpo33q4se8.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpo33q4se8.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i\
    \ + 1\n    # a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 3\n    # i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1 = 3 * i * i - 3 * i + 3\n    # i * i + j * j +\
    \ k * k - i - j - k + 1 + 1 + 1 = 3 * i * i - 3 * i + 3\n    # i * i + j * j +\
    \ k * k - i - j - k + 3 = 3 * i * i - 3 * i + 3\n    # i * i + j * j + k * k -\
    \ i - j - k = 3 * i * i - 3 * i\n    # i * i + j * j + k * k - i - j - k = 3 *\
    \ i * i - 3 * i\n    # i * i + j * j + k * k - i - j - k = 3 * i * i - 3 * i\n\
    \    # i * i + j * j + k * k - i - j - k = 3 * i * i - 3 * i\n    # i * i + j\
    \ * j + k * k - i - j - k = 3 * i * i - 3 * i\n    # i * i + j * j + k * k - i\
    \ - j - k = 3 * i * i - 3 * i\n    # i * i + j * j + k * k - i - j - k = 3 * i\
    \ * i - 3 * i\n    # i * i + j * j + k * k - i - j - k = 3 * i * i - 3 * i\n \
    \   # i * i + j * j + k * k - i - j - k = 3 * i * i - 3 * i\n    # i * i + j *\
    \ j + k * k - i - j - k = 3 * i * i - 3 * i\n    # i * i + j * j + k * k - i -\
    \ j - k = 3 * i * i - 3 * i\n    # i * i + j * j + k * k - i - j - k = 3 * i *\
    \ i - 3\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7u4h243t.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp7u4h243t.py\", line 39,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp7u4h243t.py\", line\
    \ 33, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4v68ofmi.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4v68ofmi.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp4v68ofmi.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n - 1) for j in range(i + 1, n) for k in range(j + 1, n) if (i *\
    \ i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpipjdlyhz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpipjdlyhz.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpipjdlyhz.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return n * (n - 1)\
    \ * (n - 2) // 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n  \
    \  assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjmmhj1di.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjmmhj1di.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpjmmhj1di.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i-i+1 + j*j-j+1\
    \ + k*k-k+1) % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph1go7jyz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmph1go7jyz.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmph1go7jyz.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuzi6y79t.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpuzi6y79t.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpuzi6y79t.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp19egseib.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp19egseib.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp19egseib.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i-i+1 + j*j-j+1\
    \ + k*k-k+1) % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfu65y1qc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfu65y1qc.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpfu65y1qc.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5a7qdrx4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5a7qdrx4.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp5a7qdrx4.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1\
    \ + j*j - j + 1 + k*k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp57dn4zxy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp57dn4zxy.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp57dn4zxy.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd5ghb7nd.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpd5ghb7nd.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpd5ghb7nd.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0jgqwq9f.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp0jgqwq9f.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp0jgqwq9f.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi7wlu_wm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpi7wlu_wm.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpi7wlu_wm.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(n) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1 +\
    \ j*j - j + 1 + k*k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg1cl9f6d.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpg1cl9f6d.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpg1cl9f6d.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwi78o68g.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwi78o68g.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpwi78o68g.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n - 1) for j in range(i + 1, n) for k in range(j + 1, n) if (i *\
    \ i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2d6dptan.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2d6dptan.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp2d6dptan.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return n * (n - 1)\
    \ * (n - 2) // 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n  \
    \  assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxa1yyh56.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxa1yyh56.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpxa1yyh56.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1\
    \ + j*j - j + 1 + k*k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpchqda_bp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpchqda_bp.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpchqda_bp.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpet3vtg_k.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpet3vtg_k.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpet3vtg_k.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i\
    \ + 1\n    # a[i] + a[j] + a[k] = 3 * (i * i - i + 1) + 3 * (j * j - j + 1) +\
    \ 3 * (k * k - k + 1)\n    # a[i] + a[j] + a[k] = 3 * (i * i - i + 1) + 3 * (j\
    \ * j - j + 1) + 3 * (k * k - k + 1)\n    # a[i] + a[j] + a[k] = 3 * (i * i -\
    \ i + 1) + 3 * (j * j - j + 1) + 3 * (k * k - k + 1)\n    # a[i] + a[j] + a[k]\
    \ = 3 * (i * i - i + 1) + 3 * (j * j - j + 1) + 3 * (k * k - k + 1)\n    # a[i]\
    \ + a[j] + a[k] = 3 * (i * i - i + 1) + 3 * (j * j - j + 1) + 3 * (k * k - k +\
    \ 1)\n    # a[i] + a[j] + a[k] = 3 * (i * i - i + 1) + 3 * (j * j - j + 1) + 3\
    \ * (k * k - k + 1)\n    # a[i] + a[j] + a[k] = 3 * (i * i - i + 1) + 3 * (j *\
    \ j - j + 1) + 3 * (k * k - k + 1)\n    # a[i] + a[j] + a[k] = 3 * (i * i - i\
    \ + 1) + 3 * (j * j - j + 1) + 3 * (k * k - k + 1)\n    # a[i] + a[j] + a[k] =\
    \ 3 * (i * i - i + 1) + 3 * (j * j - j + 1) + 3 * (k * k - k + 1)\n    # a[i]\
    \ + a[j] + a[k] = 3 *\ndef check(candidate):\n    assert candidate(5) == 1\n \
    \   assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8tul_aif.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp8tul_aif.py\", line 33,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8tul_aif.py\", line\
    \ 27, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1\
    \ + j*j - j + 1 + k*k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc8egdeca.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpc8egdeca.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpc8egdeca.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8_uwcxz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpv8_uwcxz.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpv8_uwcxz.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n       \
    \ return 0\n    return (n - 2) * (n - 1) * n // 6\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2yaf2zhf.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp2yaf2zhf.py\", line 27,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp2yaf2zhf.py\", line\
    \ 21, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8y0g6h4m.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8y0g6h4m.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp8y0g6h4m.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_dwfkaah.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_dwfkaah.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp_dwfkaah.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprzrvg4cs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmprzrvg4cs.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmprzrvg4cs.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo16_eh0m.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpo16_eh0m.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpo16_eh0m.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Time Complexity:\
    \ O(n)\n    # Space Complexity: O(1)\n    return sum(1 for i in range(1, n) for\
    \ j in range(i + 1, n) if (i * i - i + 1 + j * j - j + 1 + (i + j) * (i + j) -\
    \ i - j + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2shg8o4h.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp2shg8o4h.py\", line 27,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp2shg8o4h.py\", line\
    \ 21, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i\
    \ + 1\n    # a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 3\n    # a[i] + a[j] + a[k]\
    \ = 3 * (i * i - i + 1)\n    # a[i] + a[j] + a[k] = 3 * a[i]\n    # a[i] + a[j]\
    \ + a[k] = 3 * a[j]\n    # a[i] + a[j] + a[k] = 3 * a[k]\n    # a[i] + a[j] +\
    \ a[k] = 3 * a[i] = 3 * a[j] = 3 * a[k]\n    # a[i] = a[j] = a[k]\n    # a[i]\
    \ = a[j] = a[k] = 3 * a[i] / 3\n    # a[i] = a[j] = a[k] = a[i]\n    # a[i] =\
    \ a[j] = a[k] = a[j]\n    # a[i] = a[j] = a[k] = a[k]\n    # a[i] = a[j] = a[k]\
    \ = a[i] = a[j] = a[k]\n    # a[i] = a[j] = a[k]\n    # a[i] = a[j] = a[k] = a[i]\n\
    \    # a[i] = a[j] = a[k] = a[j]\n    # a[i] = a[j] = a[k] = a[k]\n    # a[i]\
    \ = a[j] = a[k] = a[i] = a[j] = a[k]\n    # a[i] = a[j] = a[k]\n    # a[i] = a[j]\
    \ = a[k] = a[i]\n    # a[i] = a[j] = a[k] = a[j]\n    # a[i] = a[j]\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpor_mrkc9.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpor_mrkc9.py\", line 44,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpor_mrkc9.py\", line\
    \ 38, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n       \
    \ return 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\
    \    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n         \
    \   for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0:\n                    count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm86keldf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpm86keldf.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpm86keldf.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmxk2vy3m.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmxk2vy3m.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpmxk2vy3m.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp84pwbgvh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp84pwbgvh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp84pwbgvh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # return sum(1 for\
    \ i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n    return sum(1 for i in\
    \ range(1, n) for j in range(i + 1, n) if (i * i - i + 1 + j * j - j + 1) % 3\
    \ == 0)\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp999r8g5_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp999r8g5_.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp999r8g5_.py\", line\
    \ 20, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i\
    \ + 1\n    # a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 3 = 3 * (i * i - i + 1)\
    \ = 3 * a[i]\n    # a[i] + a[j] + a[k] = 3 * a[i]\n    # a[j] + a[k] = 2 * a[i]\n\
    \    # a[j] = a[i] + a[k] - a[i] = a[k]\n    # a[j] = a[k]\n    # a[i] + a[j]\
    \ + a[k] = 3 * a[i]\n    # a[i] + a[j] + a[k] = a[i] + 2 * a[j]\n    # a[i] +\
    \ a[j] + a[k] = a[i] + 2 * a[k]\n    # a[i] + a[j] + a[k] = a[i] + 2 * a[i]\n\
    \    # a[i] + a[j] + a[k] = 3 * a[i]\n    # a[i] + a[j] + a[k] = 3 * a[i]\n  \
    \  # a[i] + a[j] + a[k] = 3 * a[i]\n    # a[i] + a[j] + a[k] = 3 * a[i]\n    #\
    \ a[i] + a[j] + a[k] = 3 * a[i]\n    # a[i] + a[j] + a[k] = 3 * a[i]\n    # a[i]\
    \ + a[j] + a[k] = 3 * a[i]\n    # a[i] + a[j] + a[k] = 3 * a[i]\n    # a[i] +\
    \ a[j] + a[k] = 3 * a[i]\n    # a[i] + a[j] + a[k] = 3 * a[i]\n    # a[i] + a[j]\
    \ + a[k\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppoedetyw.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmppoedetyw.py\", line 43,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmppoedetyw.py\", line\
    \ 37, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Time complexity:\
    \ O(n)\n    # Space complexity: O(n)\n    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return n * (n - 1)\
    \ * (n - 2) // 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n  \
    \  assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1pb_cn4x.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1pb_cn4x.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp1pb_cn4x.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i-i+1+j*j-j+1+k*k-k+1)\
    \ % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpady2gdu6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpady2gdu6.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpady2gdu6.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpciaanphx.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpciaanphx.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpciaanphx.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n-1) for j in range(i+1, n) for k in range(j+1, n) if (i*i-i+1 +\
    \ j*j-j+1 + k*k-k+1) % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp32ik8ova.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp32ik8ova.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp32ik8ova.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i\
    \ + 1\n    # a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 3\n    # a[i] + a[j] + a[k]\
    \ = 3 * (i * i - i + 1)\n    # a[i] + a[j] + a[k] = 3 * a[i]\n    # a[i] + a[j]\
    \ + a[k] = 3 * a[j]\n    # a[i] + a[j] + a[k] = 3 * a[k]\n    # a[i] + a[j] +\
    \ a[k] = 3 * a[i] = 3 * a[j] = 3 * a[k]\n    # a[i] = a[j] = a[k]\n    # a[i]\
    \ = a[j] = a[k] = a[i] = i * i - i + 1\n    # a[i] = a[j] = a[k] = i * i - i +\
    \ 1\n    # a[i] = a[j] = a[k] = i * i - i + 1\n    # a[i] = a[j] = a[k] = i *\
    \ i - i + 1\n    # a[i] = a[j] = a[k] = i * i - i + 1\n    # a[i] = a[j] = a[k]\
    \ = i * i - i + 1\n    # a[i] = a[j] = a[k] = i * i - i + 1\n    # a[i] = a[j]\
    \ = a[k] = i * i - i + 1\n    # a[i] = a[j] = a[k] = i * i - i + 1\n    # a[i]\
    \ = a[j] = a[k] = i * i - i + 1\n    # a[i] = a[j] = a[k] = i * i - i + 1\n  \
    \  # a[i] = a[j] = a[k] = i * i - i + 1\n    # a[i]\ndef check(candidate):\n \
    \   assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4ncu0kuz.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp4ncu0kuz.py\", line 43,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp4ncu0kuz.py\", line\
    \ 37, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum([1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0])\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpagzi4scp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpagzi4scp.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpagzi4scp.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt_3k301g.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpt_3k301g.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpt_3k301g.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt5bnt9lk.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpt5bnt9lk.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpt5bnt9lk.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n - 1) for j in range(i + 1, n) for k in range(j + 1, n) if (i *\
    \ i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz0bg1i7t.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpz0bg1i7t.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpz0bg1i7t.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1\
    \ + j*j - j + 1 + k*k - k + 1) % 3 == 0)\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp258gfxa4.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp258gfxa4.py\", line 24,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp258gfxa4.py\", line\
    \ 19, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_77kuda3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_77kuda3.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp_77kuda3.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe7urbuqj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpe7urbuqj.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpe7urbuqj.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n       \
    \ return 0\n    return (n - 2) * (n - 1) * n // 6\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp651h7gil.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp651h7gil.py\", line 27,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp651h7gil.py\", line\
    \ 21, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i\
    \ + 1\n    # a[i] + a[j] + a[k] = 3 * (i * i - i + 1) + 3 * (j * j - j + 1) +\
    \ 3 * (k * k - k + 1)\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k)\
    \ - 3 * (i + j + k) + 3 * (3)\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j +\
    \ k * k) - 3 * (i + j + k) + 9\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j\
    \ + k * k) - 3 * (i + j + k) + 9\n    # a[i] + a[j] + a[k] = 3 * (i * i + j *\
    \ j + k * k) - 3 * (i + j + k) + 9\n    # a[i] + a[j] + a[k] = 3 * (i * i + j\
    \ * j + k * k) - 3 * (i + j + k) + 9\n    # a[i] + a[j] + a[k] = 3 * (i * i +\
    \ j * j + k * k) - 3 * (i + j + k) + 9\n    # a[i] + a[j] + a[k] = 3 * (i * i\
    \ + j * j + k * k) - 3 * (i + j + k) + 9\n    # a[i] + a[j] + a[k] = 3 * (i *\
    \ i + j * j + k * k) - 3 * (i + j + k) + 9\n    # a[i] + a[j] + a[k] = 3 * (i\
    \ * i + j * j + k * k) - 3 * (i + j + k) + 9\n    # a[i] + a[j] + a[k] = 3 * (i\
    \ * i + j * j + k * k) - 3\ndef check(candidate):\n    assert candidate(5) ==\
    \ 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp52fchhi4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp52fchhi4.py\", line 34,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp52fchhi4.py\", line\
    \ 28, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n       \
    \ return 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1\
    \ for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n)\
    \ if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i-i+1+j*j-j+1+k*k-k+1)\
    \ % 3 == 0)\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert\
    \ candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma9siknw.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpma9siknw.py\", line 24,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpma9siknw.py\", line\
    \ 19, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp89h4zhpl.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp89h4zhpl.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp89h4zhpl.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum([1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i-i+1 + j*j-j+1\
    \ + k*j-k+1) % 3 == 0])\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv9kq5_8g.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpv9kq5_8g.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpv9kq5_8g.py\", line\
    \ 21, in check\n    assert candidate(10) == 36\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1\
    \ + j*j - j + 1 + k*k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwtonbi8i.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwtonbi8i.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpwtonbi8i.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i-i+1 + j*j-j+1\
    \ + k*k-k+1) % 3 == 0)\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg9p9heea.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpg9p9heea.py\", line 24,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpg9p9heea.py\", line\
    \ 19, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i\
    \ + 1\n    # a[i] + a[j] + a[k] = (i * i - i + 1) + (j * j - j + 1) + (k * k -\
    \ k + 1)\n    # a[i] + a[j] + a[k] = i * i + j * j + k * k - i - j - k + 3\n \
    \   # a[i] + a[j] + a[k] = i * i + j * j + k * k - (i + j + k) + 3\n    # a[i]\
    \ + a[j] + a[k] = (i + j + k) * (i + j + k) - (i + j + k) + 3\n    # a[i] + a[j]\
    \ + a[k] = (i + j + k) * (i + j + k - 1) + 3\n    # a[i] + a[j] + a[k] = (i +\
    \ j + k) * (i + j + k - 1) + 3\n    # a[i] + a[j] + a[k] = (i + j + k) * (i +\
    \ j + k - 1) + 3\n    # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 3\n\
    \    # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 3\n    # a[i] + a[j]\
    \ + a[k] = (i + j + k) * (i + j + k - 1) + 3\n    # a[i] + a[j] + a[k] = (i +\
    \ j + k) * (i + j + k - 1) + 3\n    # a[i] + a[j] + a[k] = (i + j + k) * (i +\
    \ j + k - 1) + 3\n    # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1)\ndef\
    \ check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmped2wyxma.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmped2wyxma.py\", line 36,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmped2wyxma.py\", line\
    \ 30, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzteme7a7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzteme7a7.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpzteme7a7.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # 1 \u2264 n \u2264\
    \ 10^5\n    # 1 \u2264 a[i] \u2264 10^9\n    # 1 \u2264 a[i] + a[j] + a[k] \u2264\
    \ 10^9\n    # 1 \u2264 i < j < k \u2264 n\n    # a[i] + a[j] + a[k] is a multiple\
    \ of 3\n    # a[i] = i * i - i + 1\n    # a[j] = j * j - j + 1\n    # a[k] = k\
    \ * k - k + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1 + j * j - j + 1 + k *\
    \ k - k + 1\n    # a[i] + a[j] + a[k] = i * i + j * j + k * k - i - j - k + 3\n\
    \    # a[i] + a[j] + a[k] = (i + j + k) * (i + j + k) - (i + j + k) + 3\n    #\
    \ a[i] + a[j] + a[k] = (i + j + k) * (i + j + k) - (i + j + k) + 3\n    # a[i]\
    \ + a[j] + a[k] = (i + j + k) * (i + j + k) - (i + j + k) + 3\n    # a[i] + a[j]\
    \ + a[k] = (i + j + k) * (i + j + k) - (i + j + k) + 3\n    # a[i] + a[j] + a[k]\
    \ = (i + j + k) * (i + j + k) - (i + j + k) + 3\n    # a[i] + a[j] + a[k] = (i\
    \ + j + k) * (i + j + k) - (i + j + k) + 3\n    # a[i] + a[j] + a[k] = (i + j\
    \ + k) * (i + j + k) - (i + j + k) + 3\n    # a[i] +\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph4tehug9.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmph4tehug9.py\", line 40,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmph4tehug9.py\", line\
    \ 34, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdv5l9upq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpdv5l9upq.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpdv5l9upq.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpihg14wpr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpihg14wpr.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpihg14wpr.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n       \
    \ return 0\n    return (n - 2) * (n - 1) * n // 6\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk_2wdw5q.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpk_2wdw5q.py\", line 27,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpk_2wdw5q.py\", line\
    \ 21, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1\
    \ + j*j - j + 1 + k*k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjeo6i3mf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjeo6i3mf.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpjeo6i3mf.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i\
    \ + 1\n    # a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 1 + 3 * j * j - 3 * j +\
    \ 1 + 3 * k * k - 3 * k + 1\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j + k\
    \ * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j +\
    \ k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j\
    \ + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j *\
    \ j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j\
    \ * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i +\
    \ j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i\
    \ + j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i *\
    \ i + j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i\
    \ * i + j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i\
    \ * i + j * j + k * k) - 3 * (i +\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu1l3rkxo.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpu1l3rkxo.py\", line 34,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpu1l3rkxo.py\", line\
    \ 28, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n     \
    \   for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count +=\
    \ 1\n    return count\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n\
    \    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu_3_6hhh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpu_3_6hhh.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpu_3_6hhh.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return n * (n - 1)\
    \ * (n - 2) // 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n  \
    \  assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo3f59ha6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpo3f59ha6.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpo3f59ha6.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp320l7prw.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp320l7prw.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp320l7prw.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2r26bl3v.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2r26bl3v.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp2r26bl3v.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1\
    \ + j*j - j + 1 + k*k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) ==\
    \ 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1apb0h37.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1apb0h37.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp1apb0h37.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx90f9bzg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpx90f9bzg.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpx90f9bzg.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # return sum(1 for\
    \ i in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if (i*i-i+1 +\
    \ j*j-j+1 + k*k-k+1) % 3 == 0)\n    return sum(1 for i in range(1, n) for j in\
    \ range(i+1, n) for k in range(j+1, n) if (i+j+k) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc0sdar7i.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpc0sdar7i.py\", line 26,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpc0sdar7i.py\", line\
    \ 20, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i\
    \ + 1\n    # a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 3 + 3 * j * j - 3 * j +\
    \ 3 + 3 * k * k - 3 * k + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j + k\
    \ * k) - 3 * (i + j + k) + 9\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j +\
    \ k * k) - 3 * (i + j + k) + 9\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j\
    \ + k * k) - 3 * (i + j + k) + 9\n    # a[i] + a[j] + a[k] = 3 * (i * i + j *\
    \ j + k * k) - 3 * (i + j + k) + 9\n    # a[i] + a[j] + a[k] = 3 * (i * i + j\
    \ * j + k * k) - 3 * (i + j + k) + 9\n    # a[i] + a[j] + a[k] = 3 * (i * i +\
    \ j * j + k * k) - 3 * (i + j + k) + 9\n    # a[i] + a[j] + a[k] = 3 * (i * i\
    \ + j * j + k * k) - 3 * (i + j + k) + 9\n    # a[i] + a[j] + a[k] = 3 * (i *\
    \ i + j * j + k * k) - 3 * (i + j + k) + 9\n    # a[i] + a[j] + a[k] = 3 * (i\
    \ * i + j * j + k * k) - 3 * (i + j + k) + 9\n    # a[i] + a[j] + a[k] = 3 * (i\
    \ * i + j * j + k * k) - 3 * (i +\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm4psoj3j.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpm4psoj3j.py\", line 34,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpm4psoj3j.py\", line\
    \ 28, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # return sum(1 for\
    \ i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n    return sum(1 for i in\
    \ range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i\
    \ + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\ndef check(candidate):\n  \
    \  assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpot4y8oai.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpot4y8oai.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpot4y8oai.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Time Complexity:\
    \ O(n)\n    # Space Complexity: O(1)\n    # if n < 3:\n    #     return 0\n  \
    \  # a = [i * i - i + 1 for i in range(1, n + 1)]\n    # count = 0\n    # for\
    \ i in range(n - 2):\n    #     for j in range(i + 1, n - 1):\n    #         for\
    \ k in range(j + 1, n):\n    #             if (a[i] + a[j] + a[k]) % 3 == 0:\n\
    \    #                 count += 1\n    # return count\n\n    # Time Complexity:\
    \ O(n)\n    # Space Complexity: O(1)\n    if n < 3:\n        return 0\n    a =\
    \ [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n\
    \ - 2):\n        for j in range(i + 1, n - 1):\n            if (a[i] + a[j]) %\
    \ 3 == 0:\n                count += n - j - 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvjy_c2wa.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpvjy_c2wa.py\", line 48,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpvjy_c2wa.py\", line\
    \ 42, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return n * (n - 1)\
    \ * (n - 2) // 6\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n  \
    \  assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100)\
    \ == 53361\n\ndef test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplc_su82i.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplc_su82i.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmplc_su82i.py\", line\
    \ 19, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n       \
    \ return 0\n    elif n == 3:\n        return 1\n    else:\n        return n -\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
    \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\n\
    def test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_69inh7k.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_69inh7k.py\", line 30,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp_69inh7k.py\", line\
    \ 24, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk85womdu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpk85womdu.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpk85womdu.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n < 3:\n       \
    \ return 0\n    return (n - 2) * (n - 1) * n // 6\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3z3evb9_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3z3evb9_.py\", line 27,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp3z3evb9_.py\", line\
    \ 21, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n\n\
    def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6) ==\
    \ 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
    \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    # a[i] = i * i - i\
    \ + 1\n    # a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 1 + 3 * j * j - 3 * j +\
    \ 1 + 3 * k * k - 3 * k + 1\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j + k\
    \ * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j +\
    \ k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j * j\
    \ + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j *\
    \ j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i + j\
    \ * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i +\
    \ j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i\
    \ + j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i *\
    \ i + j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i\
    \ * i + j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j] + a[k] = 3 * (i\
    \ * i + j * j + k * k) - 3 * (i +\ndef check(candidate):\n    assert candidate(5)\
    \ == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert\
    \ candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkb45c2ew.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpkb45c2ew.py\", line 34,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmpkb45c2ew.py\", line\
    \ 28, in check\n    assert candidate(5) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n        For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n \
    \       Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n    \
    \    The only valid triple is (1, 7, 13).\n    \"\"\"\n    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10)\
    \ == 36\n    assert candidate(100) == 53361\n\ndef test_check():\n    check(get_max_triples)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3cx_v1zo.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3cx_v1zo.py\", line 25,\
    \ in test_check\n    check(get_max_triples)\n  File \"/tmp/tmp3cx_v1zo.py\", line\
    \ 20, in check\n    assert candidate(6) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
