name: HumanEval_128_prod_signs
language: python
results:
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes\
    \ = 0\n    for num in arr:\n        if num == 0:\n            return 0\n     \
    \   prod *= num // abs(num)\n        sum_of_magnitudes += abs(num)\n    return\
    \ prod * sum_of_magnitudes\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    else:\n        prod = 1\n\
    \        sum_of_magnitudes = 0\n        for i in arr:\n            if i > 0:\n\
    \                prod *= 1\n            elif i < 0:\n                prod *= -1\n\
    \            else:\n                prod *= 0\n            sum_of_magnitudes +=\
    \ abs(i)\n        return sum_of_magnitudes * prod\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i < 0:\n            prod *= -1\n        elif i ==\
    \ 0:\n            prod = 0\n            break\n        sum_ += abs(i)\n    return\
    \ prod * sum_\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) ==\
    \ -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3,\
    \ -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,\
    \ 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i == 0:\n            return 0\n        prod *= i\
    \ // abs(i)\n        sum_ += abs(i)\n    return prod * sum_\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum = 0\n  \
    \  for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i < 0:\n\
    \            prod *= -1\n        else:\n            prod *= 0\n        sum +=\
    \ abs(i)\n    return sum * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return sum(abs(x) for x in\
    \ arr) * prod(sign(x) for x in arr)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjs6njpuh.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpjs6njpuh.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpjs6njpuh.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpjs6njpuh.py\"\
    , line 17, in prod_signs\n    return sum(abs(x) for x in arr) * prod(sign(x) for\
    \ x in arr)\nNameError: name 'prod' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    for i in arr:\n\
    \        if i > 0:\n            prod *= 1\n        elif i < 0:\n            prod\
    \ *= -1\n        else:\n            prod *= 0\n    return sum(map(abs, arr)) *\
    \ prod\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n   \
    \ assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i == 0:\n            return 0\n        if i > 0:\n\
    \            prod *= 1\n        else:\n            prod *= -1\n        sum_ +=\
    \ abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magnitudes\
    \ = 0\n    for num in arr:\n        if num == 0:\n            return 0\n     \
    \   prod *= num / abs(num)\n        sum_magnitudes += abs(num)\n    return prod\
    \ * sum_magnitudes\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes\
    \ = 0\n    for num in arr:\n        if num == 0:\n            return 0\n     \
    \   elif num > 0:\n            prod *= 1\n        else:\n            prod *= -1\n\
    \        sum_of_magnitudes += abs(num)\n    return prod * sum_of_magnitudes\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_magn\
    \ += abs(i)\n    return prod * sum_magn\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num == 0:\n            return 0\n        prod\
    \ *= num / abs(num)\n        sum_ += abs(num)\n    return int(prod * sum_)\n\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum = 0\n  \
    \  for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i < 0:\n\
    \            prod *= -1\n        else:\n            prod *= 0\n        sum +=\
    \ abs(i)\n    return sum * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num == 0:\n            return 0\n        prod\
    \ *= num / abs(num)\n        sum_ += abs(num)\n    return sum_ * prod\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    for i in arr:\n\
    \        if i > 0:\n            prod *= 1\n        elif i < 0:\n            prod\
    \ *= -1\n        else:\n            prod *= 0\n    return sum(map(abs, arr)) *\
    \ prod\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n \
    \   assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magnitudes\
    \ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n        elif\
    \ i < 0:\n            prod *= -1\n        else:\n            prod *= 0\n     \
    \   sum_magnitudes += abs(i)\n    return prod * sum_magnitudes\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_abs = 0\n\
    \    for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_abs\
    \ += abs(i)\n    return prod * sum_abs\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return sum(map(abs, arr))\
    \ * reduce(lambda x, y: x * y, map(lambda x: 1 if x > 0 else -1 if x < 0 else\
    \ 0, arr))\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg706_n6d.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpg706_n6d.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpg706_n6d.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpg706_n6d.py\"\
    , line 17, in prod_signs\n    return sum(map(abs, arr)) * reduce(lambda x, y:\
    \ x * y, map(lambda x: 1 if x > 0 else -1 if x < 0 else 0, arr))\nNameError: name\
    \ 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_magn += abs(num)\n    return prod * sum_magn\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes\
    \ = 0\n    for num in arr:\n        if num == 0:\n            return 0\n     \
    \   prod *= num / abs(num)\n        sum_of_magnitudes += abs(num)\n    return\
    \ sum_of_magnitudes * prod\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_magn += abs(num)\n    return prod * sum_magn\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num == 0:\n            continue\n        prod\
    \ *= num / abs(num)\n        sum_ += abs(num)\n    return int(prod * sum_)\n\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp768_yv6x.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp768_yv6x.py\", line 37,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp768_yv6x.py\", line 28,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num == 0:\n            continue\n        prod\
    \ *= num / abs(num)\n        sum_ += abs(num)\n    return int(prod * sum_)\n\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy5cptrbt.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpy5cptrbt.py\", line 37,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpy5cptrbt.py\", line 28,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_magn += abs(num)\n    return prod * sum_magn\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num < 0:\n            prod *= -1\n        elif\
    \ num == 0:\n            prod = 0\n            sum_ = 0\n        sum_ += abs(num)\n\
    \    return sum_ * prod\ndef check(candidate):\n    assert candidate([1, 2, 2,\
    \ -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i < 0:\n            prod *= -1\n        elif i ==\
    \ 0:\n            prod = 0\n            sum_ = 0\n        sum_ += abs(i)\n   \
    \ return sum_ * prod\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes\
    \ = 0\n    for num in arr:\n        if num == 0:\n            return 0\n     \
    \   prod *= num / abs(num)\n        sum_of_magnitudes += abs(num)\n    return\
    \ prod * sum_of_magnitudes\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_magn += abs(num)\n    return prod * sum_magn\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i == 0:\n            prod = 0\n            break\n\
    \        prod *= i // abs(i)\n        sum_ += abs(i)\n    return prod * sum_\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i < 0:\n            prod *= -1\n        elif i ==\
    \ 0:\n            prod = 0\n            sum_ = 0\n        sum_ += abs(i)\n   \
    \ return sum_ * prod\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for x in arr:\n        if x > 0:\n            prod *= 1\n        elif x <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(x)\n    return sum_ * prod\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magnitudes\
    \ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n     \
    \   elif num < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_magnitudes += abs(num)\n    return prod * sum_magnitudes\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes\
    \ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n     \
    \   elif num < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_of_magnitudes += abs(num)\n    return prod * sum_of_magnitudes\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num < 0:\n            prod *= -1\n        elif\
    \ num == 0:\n            prod = 0\n            sum_ = 0\n        sum_ += abs(num)\n\
    \    return sum_ * prod\ndef check(candidate):\n    assert candidate([1, 2, 2,\
    \ -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i == 0:\n            return 0\n        if i > 0:\n\
    \            prod *= 1\n        else:\n            prod *= -1\n        sum_ +=\
    \ abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_magn\
    \ += abs(i)\n    return prod * sum_magn\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_mag = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_mag += abs(num)\n    return prod * sum_mag\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes\
    \ = 0\n    for num in arr:\n        if num == 0:\n            return 0\n     \
    \   prod *= num // abs(num)\n        sum_of_magnitudes += abs(num)\n    return\
    \ prod * sum_of_magnitudes\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_magn += abs(num)\n    return prod * sum_magn\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes\
    \ = 0\n    for i in arr:\n        if i == 0:\n            return 0\n        prod\
    \ *= i // abs(i)\n        sum_of_magnitudes += abs(i)\n    return prod * sum_of_magnitudes\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num == 0:\n            return 0\n        prod\
    \ *= num // abs(num)\n        sum_ += abs(num)\n    return prod * sum_\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_magn\
    \ += abs(i)\n    return prod * sum_magn\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return sum(abs(x) for x in\
    \ arr) * prod(x / abs(x) for x in arr)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0lr86d34.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0lr86d34.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp0lr86d34.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp0lr86d34.py\"\
    , line 17, in prod_signs\n    return sum(abs(x) for x in arr) * prod(x / abs(x)\
    \ for x in arr)\nNameError: name 'prod' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    prod = 1\n    sum_ =\
    \ 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n        elif\
    \ i < 0:\n            prod *= -1\n        else:\n            prod *= 0\n     \
    \   sum_ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_magn += abs(num)\n    return prod * sum_magn\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return sum(map(abs, arr))\
    \ * reduce(lambda x, y: x * y, map(lambda x: 1 if x > 0 else -1 if x < 0 else\
    \ 0, arr))\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj9w4n9_m.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpj9w4n9_m.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpj9w4n9_m.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpj9w4n9_m.py\"\
    , line 17, in prod_signs\n    return sum(map(abs, arr)) * reduce(lambda x, y:\
    \ x * y, map(lambda x: 1 if x > 0 else -1 if x < 0 else 0, arr))\nNameError: name\
    \ 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes\
    \ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n     \
    \   elif num < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_of_magnitudes += abs(num)\n    return prod * sum_of_magnitudes\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return sum(map(abs, arr))\
    \ * reduce(lambda x, y: x * y, map(lambda x: 1 if x > 0 else -1 if x < 0 else\
    \ 0, arr))\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_qlvrcrq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_qlvrcrq.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp_qlvrcrq.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp_qlvrcrq.py\"\
    , line 17, in prod_signs\n    return sum(map(abs, arr)) * reduce(lambda x, y:\
    \ x * y, map(lambda x: 1 if x > 0 else -1 if x < 0 else 0, arr))\nNameError: name\
    \ 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magnitudes\
    \ = 0\n    for num in arr:\n        if num == 0:\n            return 0\n     \
    \   prod *= num / abs(num)\n        sum_magnitudes += abs(num)\n    return prod\
    \ * sum_magnitudes\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    prod = 1\n    sum_magn\
    \ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n     \
    \   elif num < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_magn += abs(num)\n    return prod * sum_magn\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num == 0:\n            prod = 0\n            break\n\
    \        prod *= num / abs(num)\n        sum_ += abs(num)\n    return prod * sum_\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_magn += abs(num)\n    return prod * sum_magn\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes\
    \ = 0\n    for num in arr:\n        if num == 0:\n            prod = 0\n     \
    \       break\n        prod *= num / abs(num)\n        sum_of_magnitudes += abs(num)\n\
    \    return prod * sum_of_magnitudes\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        prod *= i / abs(i) if i != 0 else 1\n        sum_ +=\
    \ abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy5aq2756.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpy5aq2756.py\", line 34,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpy5aq2756.py\", line 25,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    prod = 1\n    sum_magn\
    \ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n        elif\
    \ i < 0:\n            prod *= -1\n        else:\n            prod *= 0\n     \
    \   sum_magn += abs(i)\n    return prod * sum_magn\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num == 0:\n            return 0\n        prod\
    \ *= num // abs(num)\n        sum_ += abs(num)\n    return prod * sum_\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes\
    \ = 0\n    for num in arr:\n        if num == 0:\n            return 0\n     \
    \   if num > 0:\n            prod *= 1\n        else:\n            prod *= -1\n\
    \        sum_of_magnitudes += abs(num)\n    return prod * sum_of_magnitudes\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i == 0:\n            continue\n        prod *= i\
    \ / abs(i)\n        sum_ += abs(i)\n    return int(prod * sum_)\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb3fxz_wg.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpb3fxz_wg.py\", line 37,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpb3fxz_wg.py\", line 28,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes\
    \ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n     \
    \   elif num < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_of_magnitudes += abs(num)\n    return prod * sum_of_magnitudes\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i == 0:\n            return 0\n        prod *= i\
    \ // abs(i)\n        sum_ += abs(i)\n    return prod * sum_\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i == 0:\n            continue\n        elif i >\
    \ 0:\n            prod *= 1\n        else:\n            prod *= -1\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8o_nrlrm.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp8o_nrlrm.py\", line 39,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp8o_nrlrm.py\", line 30,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    for i in arr:\n\
    \        if i > 0:\n            prod *= 1\n        elif i < 0:\n            prod\
    \ *= -1\n        else:\n            prod *= 0\n    return sum(map(abs, arr)) *\
    \ prod\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n   \
    \ assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_magn += abs(num)\n    return prod * sum_magn\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sum_magnitudes = 0\n    prod_signs\
    \ = 1\n    for num in arr:\n        sum_magnitudes += abs(num)\n        prod_signs\
    \ *= num // abs(num)\n    return sum_magnitudes * prod_signs\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_shxdg6z.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_shxdg6z.py\", line 35,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp_shxdg6z.py\", line 26,\
    \ in check\n    assert candidate([0, 1]) == 0\n  File \"/tmp/tmp_shxdg6z.py\"\
    , line 21, in prod_signs\n    prod_signs *= num // abs(num)\nZeroDivisionError:\
    \ integer division or modulo by zero\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_magn += abs(num)\n    return prod * sum_magn\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_magn\
    \ += abs(i)\n    return prod * sum_magn\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_magn += abs(num)\n    return prod * sum_magn\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num == 0:\n            return 0\n        prod\
    \ *= num / abs(num)\n        sum_ += abs(num)\n    return prod * sum_\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magnitudes\
    \ = 0\n    for num in arr:\n        if num == 0:\n            return 0\n     \
    \   prod *= num / abs(num)\n        sum_magnitudes += abs(num)\n    return prod\
    \ * sum_magnitudes\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_abs = 0\n\
    \    for num in arr:\n        if num < 0:\n            prod *= -1\n        elif\
    \ num > 0:\n            sum_abs += num\n    return prod * sum_abs\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpue5zc1v4.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpue5zc1v4.py\", line 37,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpue5zc1v4.py\", line 27,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i == 0:\n            prod = 0\n            break\n\
    \        prod *= i // abs(i)\n        sum_ += abs(i)\n    return prod * sum_\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num == 0:\n            return 0\n        elif\
    \ num > 0:\n            prod *= 1\n        else:\n            prod *= -1\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    prod = 1\n    sum_ =\
    \ 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n        elif\
    \ i < 0:\n            prod *= -1\n        else:\n            prod *= 0\n     \
    \   sum_ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for num in arr:\n        if num == 0:\n            return 0\n        prod\
    \ *= num / abs(num)\n        sum_magn += abs(num)\n    return int(prod * sum_magn)\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes\
    \ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n     \
    \   elif num < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_of_magnitudes += abs(num)\n    return prod * sum_of_magnitudes\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_magn\
    \ += abs(i)\n    return prod * sum_magn\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes\
    \ = 0\n    for num in arr:\n        if num == 0:\n            return 0\n     \
    \   prod *= num // abs(num)\n        sum_of_magnitudes += abs(num)\n    return\
    \ prod * sum_of_magnitudes\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes\
    \ = 0\n    for num in arr:\n        if num == 0:\n            return 0\n     \
    \   prod *= num / abs(num)\n        sum_of_magnitudes += abs(num)\n    return\
    \ int(sum_of_magnitudes * prod)\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    else:\n        prod = 1\n\
    \        sum_ = 0\n        for i in arr:\n            if i > 0:\n            \
    \    prod *= 1\n                sum_ += i\n            elif i < 0:\n         \
    \       prod *= -1\n                sum_ += i\n            else:\n           \
    \     prod *= 0\n        return prod * sum_\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpebkedmcn.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpebkedmcn.py\", line 41,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpebkedmcn.py\", line 31,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magnitudes\
    \ = 0\n    for i in arr:\n        if i > 0:\n            prod *= 1\n        elif\
    \ i < 0:\n            prod *= -1\n        else:\n            prod *= 0\n     \
    \   sum_magnitudes += abs(i)\n    return prod * sum_magnitudes\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num == 0:\n            prod = 0\n            break\n\
    \        prod *= num // abs(num)\n        sum_ += abs(num)\n    return prod *\
    \ sum_\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n   \
    \ assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for n in arr:\n        if n > 0:\n            prod *= 1\n        elif n <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(n)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for i in arr:\n        if i == 0:\n            return 0\n        prod *=\
    \ i // abs(i)\n        sum_magn += abs(i)\n    return prod * sum_magn\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for n in arr:\n        if n > 0:\n            prod *= 1\n        elif n <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_magn\
    \ += abs(n)\n    return prod * sum_magn\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i < 0:\n            prod *= -1\n        elif i ==\
    \ 0:\n            prod = 0\n            sum_ = 0\n        sum_ += abs(i)\n   \
    \ return sum_ * prod\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        prod *= i / abs(i) if i != 0 else 1\n        sum_ +=\
    \ abs(i)\n    return prod * sum_\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgy0o6gh8.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpgy0o6gh8.py\", line 35,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpgy0o6gh8.py\", line 26,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i == 0:\n            prod = 0\n            break\n\
    \        prod *= (1 if i > 0 else -1)\n        sum_ += abs(i)\n    return prod\
    \ * sum_\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i == 0:\n            continue\n        prod *= (1\
    \ if i > 0 else -1)\n        sum_ += abs(i)\n    return prod * sum_\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0qwludq2.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp0qwludq2.py\", line 36,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp0qwludq2.py\", line 27,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num == 0:\n            prod = 0\n            continue\n\
    \        prod *= num / abs(num)\n        sum_ += abs(num)\n    return prod * sum_\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_magn += abs(num)\n    return prod * sum_magn\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_magn += abs(num)\n    return prod * sum_magn\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes\
    \ = 0\n    for num in arr:\n        if num == 0:\n            return 0\n     \
    \   prod *= num // abs(num)\n        sum_of_magnitudes += abs(num)\n    return\
    \ prod * sum_of_magnitudes\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i == 0:\n            prod = 0\n            break\n\
    \        elif i > 0:\n            prod *= 1\n        else:\n            prod *=\
    \ -1\n        sum_ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num < 0:\n            prod *= -1\n        elif\
    \ num == 0:\n            prod = 0\n            sum_ = 0\n        sum_ += abs(num)\n\
    \    return sum_ * prod\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_magn\
    \ += abs(i)\n    return prod * sum_magn\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return sum(map(abs, arr))\
    \ * reduce(lambda x, y: x * y, map(lambda x: 1 if x > 0 else -1 if x < 0 else\
    \ 0, arr))\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvgw21s73.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvgw21s73.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpvgw21s73.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpvgw21s73.py\"\
    , line 17, in prod_signs\n    return sum(map(abs, arr)) * reduce(lambda x, y:\
    \ x * y, map(lambda x: 1 if x > 0 else -1 if x < 0 else 0, arr))\nNameError: name\
    \ 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes\
    \ = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n     \
    \   elif num < 0:\n            prod *= -1\n        else:\n            prod *=\
    \ 0\n        sum_of_magnitudes += abs(num)\n    return prod * sum_of_magnitudes\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num < 0:\n            prod *= -1\n        elif\
    \ num == 0:\n            prod = 0\n            sum_ = 0\n        sum_ += abs(num)\n\
    \    return sum_ * prod\ndef check(candidate):\n    assert candidate([1, 2, 2,\
    \ -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_magn += abs(num)\n    return prod * sum_magn\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num > 0:\n            prod *= 1\n        elif\
    \ num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n   \
    \     sum_ += abs(num)\n    return sum_ * prod\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for num in arr:\n        if num == 0:\n            return 0\n        prod\
    \ *= (1 if num > 0 else -1)\n        sum_ += abs(num)\n    return prod * sum_\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n \
    \   for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        sum_\
    \ += abs(i)\n    return sum_ * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
