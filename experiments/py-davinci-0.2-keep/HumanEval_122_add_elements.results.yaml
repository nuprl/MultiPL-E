name: HumanEval_122_add_elements
language: python
results:
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(elem\
    \ for elem in arr[:k] if elem < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(e\
    \ for e in arr[:k] if e < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(e\
    \ for e in arr[:k] if e < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(filter(lambda\
    \ x: x < 100, arr[:k]))\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(e\
    \ for e in arr[:k] if e < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
