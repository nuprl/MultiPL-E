name: HumanEval_49_modp
language: python
results:
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n == 2:\n        return 4\n    elif n % 2 == 0:\n     \
    \   return modp(n // 2, p) ** 2 % p\n    else:\n        return (modp(n // 2, p)\
    \ ** 2 * 2) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n\
    \    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n   \
    \ assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert\
    \ candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return modp(n - 1,\
    \ p) * 2 % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n   \
    \ assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    return 2 * modp(n - 1, p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n -\
    \ 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    return 2 * modp(n - 1, p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n\
    \    else:\n        return (2 * modp(n - 1, p)) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n       \
    \ return 2\n    if n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n\
    \        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n       \
    \ return 2\n    if n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n\
    \        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    return 2 * modp(n - 1, p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    return 2 * modp(n - 1, p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n       \
    \ return 2\n    if n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    return\
    \ 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5)\
    \ == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) ==\
    \ 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n \
    \   assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return (modp(n // 2, p) ** 2 * 2) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n//2, p)**2 % p\n    else:\n\
    \        return 2 * modp(n-1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    return 2 * modp(n - 1, p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    return 2 * modp(n - 1, p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n -\
    \ 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    return 2 * modp(n - 1, p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n -\
    \ 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    return 2 * modp(n - 1, p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n -\
    \ 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n       \
    \ return 2\n    if n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    return\
    \ 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5)\
    \ == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) ==\
    \ 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n \
    \   assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    return 2 * modp(n - 1, p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n -\
    \ 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    else:\n        return (2 * modp(n - 1, p)) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfxrl3xl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkfxrl3xl.py\", line 32,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpkfxrl3xl.py\", line 24, in\
    \ check\n    assert candidate(1101, 101) == 2\n  File \"/tmp/tmpkfxrl3xl.py\"\
    , line 19, in modp\n    return (2 * modp(n - 1, p)) % p\n  File \"/tmp/tmpkfxrl3xl.py\"\
    , line 19, in modp\n    return (2 * modp(n - 1, p)) % p\n  File \"/tmp/tmpkfxrl3xl.py\"\
    , line 19, in modp\n    return (2 * modp(n - 1, p)) % p\n  [Previous line repeated\
    \ 993 more times]\n  File \"/tmp/tmpkfxrl3xl.py\", line 14, in modp\n    if n\
    \ == 0:\nRecursionError: maximum recursion depth exceeded in comparison\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n//2, p)**2 % p\n    else:\n\
    \        return 2 * modp(n-1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return modp(n - 1, p) * 2 % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n       \
    \ return 2\n    if n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    return\
    \ (modp(n // 2, p) ** 2 * 2) % p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n -\
    \ 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n\
    \    else:\n        return (2 * modp(n - 1, p)) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n -\
    \ 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n -\
    \ 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return (modp(n // 2, p) ** 2 * 2) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    return 2 * modp(n - 1, p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n -\
    \ 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n       \
    \ return 2\n    if n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n\
    \        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n\
    \    else:\n        return (2 * modp(n - 1, p)) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n -\
    \ 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n//2, p)**2 % p\n    else:\n        return 2 * modp(n-1, p)\
    \ % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return modp(n - 1,\
    \ p) * 2 % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n   \
    \ assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n -\
    \ 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n       \
    \ return 2\n    if n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n\
    \        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    return 2 * modp(n - 1, p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    return 2 * modp(n - 1, p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    else:\n        return (2 * modp(n - 1, p)) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxap7enpd.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpxap7enpd.py\", line 32,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpxap7enpd.py\", line 24, in\
    \ check\n    assert candidate(1101, 101) == 2\n  File \"/tmp/tmpxap7enpd.py\"\
    , line 19, in modp\n    return (2 * modp(n - 1, p)) % p\n  File \"/tmp/tmpxap7enpd.py\"\
    , line 19, in modp\n    return (2 * modp(n - 1, p)) % p\n  File \"/tmp/tmpxap7enpd.py\"\
    , line 19, in modp\n    return (2 * modp(n - 1, p)) % p\n  [Previous line repeated\
    \ 993 more times]\n  File \"/tmp/tmpxap7enpd.py\", line 14, in modp\n    if n\
    \ == 0:\nRecursionError: maximum recursion depth exceeded in comparison\n"
  exit_code: -1
  status: Exception
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    return 2 * modp(n - 1, p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n \
    \       return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    return 2 * modp(n - 1, p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n     \
    \   return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n   \
    \     return modp(n // 2, p) ** 2 % p\n    return 2 * modp(n - 1, p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
