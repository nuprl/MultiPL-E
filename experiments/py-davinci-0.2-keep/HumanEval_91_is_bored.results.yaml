name: HumanEval_91_is_bored
language: python
results:
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkx3yl693.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkx3yl693.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkx3yl693.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp301lv3g8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp301lv3g8.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp301lv3g8.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkp53dz60.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkp53dz60.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkp53dz60.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa2st07e3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpa2st07e3.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpa2st07e3.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcaf_pg8a.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpcaf_pg8a.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcaf_pg8a.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfsel8vji.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfsel8vji.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfsel8vji.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp14dwmsa5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp14dwmsa5.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp14dwmsa5.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split(\".\"):\n\
    \        if sentence.strip().startswith(\"I\"):\n            boredoms += 1\n \
    \   return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_xfragz3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_xfragz3.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_xfragz3.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_zplf8pr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_zplf8pr.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_zplf8pr.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyvoq4dmv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyvoq4dmv.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpyvoq4dmv.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpahvd9w9v.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpahvd9w9v.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpahvd9w9v.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps8j56eo9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmps8j56eo9.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmps8j56eo9.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcss8xrov.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpcss8xrov.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcss8xrov.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3phdm5vr.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3phdm5vr.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3phdm5vr.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdcs8873k.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdcs8873k.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdcs8873k.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2gc40lad.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2gc40lad.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2gc40lad.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split(\". \")\n    for\
    \ sentence in sentences:\n        if sentence.startswith(\"I\"):\n           \
    \ boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk984izqs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpk984izqs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpk984izqs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdwd6_d1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpkdwd6_d1.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkdwd6_d1.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return sum(1 for s in S.split('.') if s.strip().startswith('I'))\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyz1rw3y_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyz1rw3y_.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpyz1rw3y_.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4sz0twmv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4sz0twmv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4sz0twmv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_efubf1e.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_efubf1e.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_efubf1e.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw8xr_y1n.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpw8xr_y1n.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpw8xr_y1n.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split(\".\"):\n\
    \        if sentence.strip().startswith(\"I\"):\n            boredoms += 1\n \
    \   return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp13fpcl99.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp13fpcl99.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp13fpcl99.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp__lsi4fw.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp__lsi4fw.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp__lsi4fw.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp29jlxvd_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp29jlxvd_.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp29jlxvd_.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj441la06.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpj441la06.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpj441la06.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fleidt_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8fleidt_.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8fleidt_.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd09q83yf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpd09q83yf.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpd09q83yf.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3typqw76.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3typqw76.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3typqw76.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnh5m3s3q.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpnh5m3s3q.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpnh5m3s3q.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp873npb0s.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp873npb0s.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp873npb0s.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx1lzvy4u.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpx1lzvy4u.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpx1lzvy4u.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpay1rf6dh.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpay1rf6dh.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpay1rf6dh.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpth5lx56p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpth5lx56p.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpth5lx56p.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp774xhzdc.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp774xhzdc.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp774xhzdc.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpytjcayyg.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpytjcayyg.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpytjcayyg.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdacbquox.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpdacbquox.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdacbquox.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdm2_lqib.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdm2_lqib.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdm2_lqib.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      sentence = sentence.strip()\n        if sentence.startswith('I'):\n   \
    \         boredoms += 1\n    return boredoms\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfwjv944r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfwjv944r.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfwjv944r.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp66uzbin8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp66uzbin8.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp66uzbin8.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplx28jpw4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmplx28jpw4.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmplx28jpw4.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp873q87og.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp873q87og.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp873q87og.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7h6emlcu.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7h6emlcu.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp7h6emlcu.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplof2gzgh.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmplof2gzgh.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmplof2gzgh.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgf2xh9x_.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpgf2xh9x_.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgf2xh9x_.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjuoxd_0c.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjuoxd_0c.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjuoxd_0c.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.split()[0] == 'I':\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjh7f8rby.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpjh7f8rby.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjh7f8rby.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split(\".\"):\n\
    \        if sentence.strip().startswith(\"I\"):\n            boredoms += 1\n \
    \   return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzxiztgc0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpzxiztgc0.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzxiztgc0.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph3g350fw.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmph3g350fw.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmph3g350fw.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgnr25psw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgnr25psw.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgnr25psw.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf9k8z0ss.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpf9k8z0ss.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpf9k8z0ss.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64hqm9b5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp64hqm9b5.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp64hqm9b5.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2flkizc3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2flkizc3.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2flkizc3.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split(\". \")\n    for\
    \ sentence in sentences:\n        if sentence.startswith(\"I\"):\n           \
    \ boredoms += 1\n    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbna0ms2q.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbna0ms2q.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbna0ms2q.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb90k2bc_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpb90k2bc_.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpb90k2bc_.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplssc84bb.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmplssc84bb.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmplssc84bb.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_nrifoz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpv_nrifoz.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpv_nrifoz.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvf7ednfn.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpvf7ednfn.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvf7ednfn.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3tx2wb1_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3tx2wb1_.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3tx2wb1_.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwa5yw87o.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwa5yw87o.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwa5yw87o.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqt5wo5vq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqt5wo5vq.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqt5wo5vq.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsyu_z5mb.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpsyu_z5mb.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpsyu_z5mb.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpae203ep4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpae203ep4.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpae203ep4.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4pelc6d8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4pelc6d8.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4pelc6d8.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm34q42x8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpm34q42x8.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpm34q42x8.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbpkjugsu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbpkjugsu.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbpkjugsu.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split(\". \")\n    for\
    \ sentence in sentences:\n        if sentence.startswith(\"I\"):\n           \
    \ boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprv516_kv.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmprv516_kv.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmprv516_kv.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpggsg28lo.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpggsg28lo.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpggsg28lo.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdg1t617v.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpdg1t617v.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdg1t617v.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphkhs13wt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphkhs13wt.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphkhs13wt.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4u2hj33_.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp4u2hj33_.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4u2hj33_.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcs533i23.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpcs533i23.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcs533i23.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpizauhbmi.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpizauhbmi.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpizauhbmi.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcjhwpjsf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpcjhwpjsf.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcjhwpjsf.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_4_sy2va.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_4_sy2va.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_4_sy2va.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split(\". \")\n    for\
    \ sentence in sentences:\n        if sentence.startswith(\"I\"):\n           \
    \ boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp44b_nhb2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp44b_nhb2.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp44b_nhb2.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr9pez_ku.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpr9pez_ku.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpr9pez_ku.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj35785bt.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpj35785bt.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpj35785bt.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvkjmtysx.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpvkjmtysx.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvkjmtysx.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpva0vmq86.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpva0vmq86.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpva0vmq86.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr82orsbo.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpr82orsbo.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpr82orsbo.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1e9l3hvo.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1e9l3hvo.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1e9l3hvo.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcpi3vn9m.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcpi3vn9m.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcpi3vn9m.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq4n0nutf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpq4n0nutf.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpq4n0nutf.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp721xbajd.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp721xbajd.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp721xbajd.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx827xrml.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpx827xrml.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpx827xrml.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0w_d_odi.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0w_d_odi.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0w_d_odi.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.split()[0] == 'I':\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe_qqavvn.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpe_qqavvn.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpe_qqavvn.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmtgsxi7k.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpmtgsxi7k.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmtgsxi7k.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqyympbdb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqyympbdb.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqyympbdb.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyht99cdq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpyht99cdq.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpyht99cdq.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90lhia9y.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp90lhia9y.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp90lhia9y.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl44aeuz6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpl44aeuz6.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpl44aeuz6.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split(\". \")\n    for\
    \ sentence in sentences:\n        if sentence.startswith(\"I\"):\n           \
    \ boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl3ofsq2g.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpl3ofsq2g.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpl3ofsq2g.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0p0owo53.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0p0owo53.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0p0owo53.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp47qdgg2_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp47qdgg2_.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp47qdgg2_.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc1s6vtz6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpc1s6vtz6.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpc1s6vtz6.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6zrgq82f.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6zrgq82f.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6zrgq82f.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return sum(1 for s in S.split('.') if s.strip().startswith('I'))\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8mzbwaab.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8mzbwaab.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8mzbwaab.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpak76cyt_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpak76cyt_.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpak76cyt_.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2440d3re.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2440d3re.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2440d3re.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpon185guw.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpon185guw.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpon185guw.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp16ryggpy.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp16ryggpy.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp16ryggpy.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppc7ol_bt.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmppc7ol_bt.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmppc7ol_bt.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp61ja8v53.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp61ja8v53.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp61ja8v53.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpowfh83qd.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpowfh83qd.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpowfh83qd.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjfx0227g.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpjfx0227g.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjfx0227g.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxmtlsq1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpkxmtlsq1.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkxmtlsq1.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1o_e9oh1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1o_e9oh1.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1o_e9oh1.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2a2_91c5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2a2_91c5.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2a2_91c5.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb1woc3kx.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpb1woc3kx.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpb1woc3kx.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa34qavy5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpa34qavy5.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpa34qavy5.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1hhx2gdk.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1hhx2gdk.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1hhx2gdk.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8tsjpjoz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8tsjpjoz.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8tsjpjoz.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    sentences = S.split('.')\n    boredoms = 0\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1fqwbrgd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1fqwbrgd.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1fqwbrgd.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk2ceikj7.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpk2ceikj7.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpk2ceikj7.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxczzw82.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpkxczzw82.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkxczzw82.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvvjvzaeu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpvvjvzaeu.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvvjvzaeu.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc_56yx_5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpc_56yx_5.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpc_56yx_5.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return sum(1 for s in S.split('.') if s.strip().startswith('I'))\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcjx_df3h.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcjx_df3h.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcjx_df3h.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpysu55m9x.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpysu55m9x.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpysu55m9x.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfimz1x3_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfimz1x3_.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfimz1x3_.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc84k_n7i.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpc84k_n7i.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpc84k_n7i.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfw9aauz4.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfw9aauz4.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfw9aauz4.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mgcats7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mgcats7.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_mgcats7.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiz_2fos6.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpiz_2fos6.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpiz_2fos6.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9b15bkp1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9b15bkp1.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9b15bkp1.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp9eew84h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpp9eew84h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpp9eew84h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb1r5etxj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpb1r5etxj.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpb1r5etxj.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp916b09ho.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp916b09ho.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp916b09ho.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprs2r26ia.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmprs2r26ia.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmprs2r26ia.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphkqpvh5a.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmphkqpvh5a.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphkqpvh5a.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9rew8vow.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9rew8vow.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9rew8vow.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    sentences = S.split('.')\n    boredoms = 0\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkcwb_2r0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpkcwb_2r0.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkcwb_2r0.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf8u14uml.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpf8u14uml.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpf8u14uml.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9s5vwee3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9s5vwee3.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9s5vwee3.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmperu80hf4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmperu80hf4.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmperu80hf4.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpus5mmmc1.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpus5mmmc1.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpus5mmmc1.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    sentences.extend(S.split('?'))\n\
    \    sentences.extend(S.split('!'))\n    for sentence in sentences:\n        if\
    \ sentence.strip().startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbnlmxvcu.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpbnlmxvcu.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbnlmxvcu.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpikk7o2nh.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpikk7o2nh.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpikk7o2nh.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90l747v3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp90l747v3.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp90l747v3.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split(\". \")\n    for\
    \ sentence in sentences:\n        if sentence.startswith(\"I\"):\n           \
    \ boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9e9aoob.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpo9e9aoob.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpo9e9aoob.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphuhzp4tv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphuhzp4tv.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphuhzp4tv.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjxoffsxb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjxoffsxb.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjxoffsxb.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_0vl07y5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_0vl07y5.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_0vl07y5.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6uhpnlx2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp6uhpnlx2.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6uhpnlx2.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9elgskz5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9elgskz5.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9elgskz5.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ae3uram.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8ae3uram.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8ae3uram.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpon6svblk.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpon6svblk.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpon6svblk.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcya0qzfc.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpcya0qzfc.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcya0qzfc.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgzyvabne.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgzyvabne.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgzyvabne.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzjrlsahl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzjrlsahl.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzjrlsahl.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0g5i7fz3.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp0g5i7fz3.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0g5i7fz3.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkikq2ap1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkikq2ap1.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkikq2ap1.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in S.split('.'):\n        if i.split()[0]\
    \ == 'I':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi9p3d77c.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpi9p3d77c.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpi9p3d77c.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl7kb5sxp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpl7kb5sxp.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpl7kb5sxp.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpewebrjos.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpewebrjos.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpewebrjos.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7czkkkb0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp7czkkkb0.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp7czkkkb0.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl3m_vcte.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpl3m_vcte.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpl3m_vcte.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7fs1zoe.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpw7fs1zoe.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpw7fs1zoe.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgzph0hlt.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgzph0hlt.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgzph0hlt.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbjfbgyb2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpbjfbgyb2.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbjfbgyb2.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzlwb1e58.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpzlwb1e58.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzlwb1e58.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkgmd8322.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkgmd8322.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkgmd8322.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2u52bawy.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2u52bawy.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2u52bawy.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkzcmkgx0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpkzcmkgx0.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkzcmkgx0.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return sum(1 for s in S.split('.') if s.strip().startswith('I'))\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5bbjr3y6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5bbjr3y6.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5bbjr3y6.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0d2apuld.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0d2apuld.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0d2apuld.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp28vck8i7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp28vck8i7.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp28vck8i7.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzyomm2mw.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpzyomm2mw.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzyomm2mw.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8h9u1l9r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8h9u1l9r.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8h9u1l9r.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms\
    \ += 1\n    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3jz93zdk.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3jz93zdk.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3jz93zdk.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split(\". \")\n    for\
    \ sentence in sentences:\n        if sentence.startswith(\"I\"):\n           \
    \ boredoms += 1\n    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppb0w_b6f.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmppb0w_b6f.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmppb0w_b6f.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaivu981p.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpaivu981p.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpaivu981p.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppyanv2ob.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmppyanv2ob.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmppyanv2ob.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbahm1p_j.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbahm1p_j.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbahm1p_j.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmtlrlyv5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmtlrlyv5.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmtlrlyv5.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprxd2gwk_.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmprxd2gwk_.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmprxd2gwk_.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2hqs3avp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp2hqs3avp.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2hqs3avp.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpitjuyroe.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpitjuyroe.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpitjuyroe.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp4pqey4a.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpp4pqey4a.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpp4pqey4a.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbpxcv6iu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbpxcv6iu.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbpxcv6iu.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsrtd39j8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsrtd39j8.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpsrtd39j8.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # Split the string into sentences\n    sentences = re.split(r'[.?!]',\
    \ S)\n    # Count the number of sentences that start with \"I\"\n    return sum(1\
    \ for sentence in sentences if sentence.strip().startswith(\"I\"))\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6vasxhg8.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6vasxhg8.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6vasxhg8.py\", line 19,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp6vasxhg8.py\"\
    , line 14, in is_bored\n    sentences = re.split(r'[.?!]', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdpfdcgzd.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpdpfdcgzd.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdpfdcgzd.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_9d4qzj1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_9d4qzj1.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_9d4qzj1.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgfy59jj0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgfy59jj0.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgfy59jj0.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpclqtfolr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpclqtfolr.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpclqtfolr.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split(\".\"):\n\
    \        if sentence.strip().startswith(\"I\"):\n            boredoms += 1\n \
    \   return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph6rsvljx.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmph6rsvljx.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmph6rsvljx.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkmptjqvm.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpkmptjqvm.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkmptjqvm.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6gljopn5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6gljopn5.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6gljopn5.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbmije8dm.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbmije8dm.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbmije8dm.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpavosemzc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpavosemzc.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpavosemzc.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcr7qkx62.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpcr7qkx62.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcr7qkx62.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4shzzz_9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4shzzz_9.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4shzzz_9.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split(\".\") if s.strip().startswith(\"\
    I\")])\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n  \
    \  assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprdnmxef1.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmprdnmxef1.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmprdnmxef1.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5eyygby8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5eyygby8.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5eyygby8.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
